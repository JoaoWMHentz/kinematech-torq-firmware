
kinematech-torq-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abd8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  0800adb8  0800adb8  0000bdb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afa4  0800afa4  0000c1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800afa4  0800afa4  0000bfa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afac  0800afac  0000c1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afac  0800afac  0000bfac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800afb0  0800afb0  0000bfb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800afb4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001df0  200001e0  0800b194  0000c1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fd0  0800b194  0000cfd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001823e  00000000  00000000  0000c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040cc  00000000  00000000  0002444e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  00028520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fcc  00000000  00000000  00029a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024699  00000000  00000000  0002a9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018baf  00000000  00000000  0004f07d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da14b  00000000  00000000  00067c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141d77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e88  00000000  00000000  00141dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00147c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ada0 	.word	0x0800ada0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800ada0 	.word	0x0800ada0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <MX_GPIO_Init>:
        * EXTI
     PA15   ------> I2C1_SCL
     PB7   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b08a      	sub	sp, #40	@ 0x28
 80002d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d6:	f107 0314 	add.w	r3, r7, #20
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
 80002e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e6:	4b35      	ldr	r3, [pc, #212]	@ (80003bc <MX_GPIO_Init+0xec>)
 80002e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ea:	4a34      	ldr	r2, [pc, #208]	@ (80003bc <MX_GPIO_Init+0xec>)
 80002ec:	f043 0304 	orr.w	r3, r3, #4
 80002f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002f2:	4b32      	ldr	r3, [pc, #200]	@ (80003bc <MX_GPIO_Init+0xec>)
 80002f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002f6:	f003 0304 	and.w	r3, r3, #4
 80002fa:	613b      	str	r3, [r7, #16]
 80002fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002fe:	4b2f      	ldr	r3, [pc, #188]	@ (80003bc <MX_GPIO_Init+0xec>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000302:	4a2e      	ldr	r2, [pc, #184]	@ (80003bc <MX_GPIO_Init+0xec>)
 8000304:	f043 0320 	orr.w	r3, r3, #32
 8000308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800030a:	4b2c      	ldr	r3, [pc, #176]	@ (80003bc <MX_GPIO_Init+0xec>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800030e:	f003 0320 	and.w	r3, r3, #32
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000316:	4b29      	ldr	r3, [pc, #164]	@ (80003bc <MX_GPIO_Init+0xec>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800031a:	4a28      	ldr	r2, [pc, #160]	@ (80003bc <MX_GPIO_Init+0xec>)
 800031c:	f043 0302 	orr.w	r3, r3, #2
 8000320:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000322:	4b26      	ldr	r3, [pc, #152]	@ (80003bc <MX_GPIO_Init+0xec>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000326:	f003 0302 	and.w	r3, r3, #2
 800032a:	60bb      	str	r3, [r7, #8]
 800032c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032e:	4b23      	ldr	r3, [pc, #140]	@ (80003bc <MX_GPIO_Init+0xec>)
 8000330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000332:	4a22      	ldr	r2, [pc, #136]	@ (80003bc <MX_GPIO_Init+0xec>)
 8000334:	f043 0301 	orr.w	r3, r3, #1
 8000338:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800033a:	4b20      	ldr	r3, [pc, #128]	@ (80003bc <MX_GPIO_Init+0xec>)
 800033c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800033e:	f003 0301 	and.w	r3, r3, #1
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_BLUE_Pin|LED_RED_Pin, GPIO_PIN_SET);
 8000346:	2201      	movs	r2, #1
 8000348:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 800034c:	481c      	ldr	r0, [pc, #112]	@ (80003c0 <MX_GPIO_Init+0xf0>)
 800034e:	f001 f9b7 	bl	80016c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_BLUE_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_RED_Pin;
 8000352:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000358:	2301      	movs	r3, #1
 800035a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800035c:	2301      	movs	r3, #1
 800035e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000360:	2300      	movs	r3, #0
 8000362:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000364:	f107 0314 	add.w	r3, r7, #20
 8000368:	4619      	mov	r1, r3
 800036a:	4815      	ldr	r0, [pc, #84]	@ (80003c0 <MX_GPIO_Init+0xf0>)
 800036c:	f001 f826 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_SCL_Pin */
  GPIO_InitStruct.Pin = ENCODER_SCL_Pin;
 8000370:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000376:	2312      	movs	r3, #18
 8000378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037a:	2300      	movs	r3, #0
 800037c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037e:	2300      	movs	r3, #0
 8000380:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000382:	2304      	movs	r3, #4
 8000384:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ENCODER_SCL_GPIO_Port, &GPIO_InitStruct);
 8000386:	f107 0314 	add.w	r3, r7, #20
 800038a:	4619      	mov	r1, r3
 800038c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000390:	f001 f814 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_SDA_Pin */
  GPIO_InitStruct.Pin = ENCODER_SDA_Pin;
 8000394:	2380      	movs	r3, #128	@ 0x80
 8000396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000398:	2312      	movs	r3, #18
 800039a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039c:	2300      	movs	r3, #0
 800039e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a0:	2300      	movs	r3, #0
 80003a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80003a4:	2304      	movs	r3, #4
 80003a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ENCODER_SDA_GPIO_Port, &GPIO_InitStruct);
 80003a8:	f107 0314 	add.w	r3, r7, #20
 80003ac:	4619      	mov	r1, r3
 80003ae:	4805      	ldr	r0, [pc, #20]	@ (80003c4 <MX_GPIO_Init+0xf4>)
 80003b0:	f001 f804 	bl	80013bc <HAL_GPIO_Init>

}
 80003b4:	bf00      	nop
 80003b6:	3728      	adds	r7, #40	@ 0x28
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40021000 	.word	0x40021000
 80003c0:	48000800 	.word	0x48000800
 80003c4:	48000400 	.word	0x48000400

080003c8 <Hall_Init>:
    {0,  0,  0,  0,  0,  0,  0,  0}  // De 7 (inválido)
};

/* ========== PUBLIC FUNCTIONS ========== */

void Hall_Init(HallSensor_t* hall) {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
    hall->hall_state = 0;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2200      	movs	r2, #0
 80003d4:	701a      	strb	r2, [r3, #0]
    hall->last_hall_state = 0;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2200      	movs	r2, #0
 80003da:	751a      	strb	r2, [r3, #20]
    hall->electrical_rotations = 0;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2200      	movs	r2, #0
 80003e0:	619a      	str	r2, [r3, #24]
    hall->angle_electrical = 0.0f;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	f04f 0200 	mov.w	r2, #0
 80003e8:	61da      	str	r2, [r3, #28]
    hall->velocity_erpm = 0.0f;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	f04f 0200 	mov.w	r2, #0
 80003f0:	621a      	str	r2, [r3, #32]
    hall->direction = 0;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2200      	movs	r2, #0
 80003f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    hall->hall_capture = 0;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2200      	movs	r2, #0
 80003fe:	605a      	str	r2, [r3, #4]
    hall->last_capture = 0;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
    hall->new_capture_flag = 0;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	2200      	movs	r2, #0
 800040a:	731a      	strb	r2, [r3, #12]
    hall->isr_counter = 0;  // DEBUG: inicializar contador
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	2200      	movs	r2, #0
 8000410:	611a      	str	r2, [r3, #16]
    
    // Leitura inicial do estado Hall
    hall->hall_state = Hall_ReadState();
 8000412:	f000 f827 	bl	8000464 <Hall_ReadState>
 8000416:	4603      	mov	r3, r0
 8000418:	461a      	mov	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	701a      	strb	r2, [r3, #0]
    hall->last_hall_state = hall->hall_state;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	b2da      	uxtb	r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	751a      	strb	r2, [r3, #20]
    
    // Setar ângulo inicial baseado no estado Hall atual
    if (hall->hall_state >= 1 && hall->hall_state <= 6) {
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	b2db      	uxtb	r3, r3
 800042e:	2b00      	cmp	r3, #0
 8000430:	d00d      	beq.n	800044e <Hall_Init+0x86>
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	b2db      	uxtb	r3, r3
 8000438:	2b06      	cmp	r3, #6
 800043a:	d808      	bhi.n	800044e <Hall_Init+0x86>
        hall->angle_electrical = HALL_ANGLE_TABLE[hall->hall_state];
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	b2db      	uxtb	r3, r3
 8000442:	4a06      	ldr	r2, [pc, #24]	@ (800045c <Hall_Init+0x94>)
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	4413      	add	r3, r2
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	61da      	str	r2, [r3, #28]
    }
    
    // Iniciar TIM8 em modo Hall Sensor com interrupção
    HAL_TIMEx_HallSensor_Start_IT(&htim8);
 800044e:	4804      	ldr	r0, [pc, #16]	@ (8000460 <Hall_Init+0x98>)
 8000450:	f005 f94a 	bl	80056e8 <HAL_TIMEx_HallSensor_Start_IT>
}
 8000454:	bf00      	nop
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	0800aef8 	.word	0x0800aef8
 8000460:	200002e0 	.word	0x200002e0

08000464 <Hall_ReadState>:

uint8_t Hall_ReadState(void) {
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
    uint8_t state = 0;
 800046a:	2300      	movs	r3, #0
 800046c:	71fb      	strb	r3, [r7, #7]
    
    // Ler os 3 pinos Hall (PB6, PB8, PB9)
    // IMPORTANTE: Como estão em modo AF (TIM8), ler direto do registrador IDR
    if (GPIOB->IDR & HALL_A_Pin) state |= 0x01; // Bit 0
 800046e:	4b12      	ldr	r3, [pc, #72]	@ (80004b8 <Hall_ReadState+0x54>)
 8000470:	691b      	ldr	r3, [r3, #16]
 8000472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000476:	2b00      	cmp	r3, #0
 8000478:	d003      	beq.n	8000482 <Hall_ReadState+0x1e>
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	71fb      	strb	r3, [r7, #7]
    if (GPIOB->IDR & HALL_B_Pin) state |= 0x02; // Bit 1
 8000482:	4b0d      	ldr	r3, [pc, #52]	@ (80004b8 <Hall_ReadState+0x54>)
 8000484:	691b      	ldr	r3, [r3, #16]
 8000486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800048a:	2b00      	cmp	r3, #0
 800048c:	d003      	beq.n	8000496 <Hall_ReadState+0x32>
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	f043 0302 	orr.w	r3, r3, #2
 8000494:	71fb      	strb	r3, [r7, #7]
    if (GPIOB->IDR & HALL_C_Pin) state |= 0x04; // Bit 2
 8000496:	4b08      	ldr	r3, [pc, #32]	@ (80004b8 <Hall_ReadState+0x54>)
 8000498:	691b      	ldr	r3, [r3, #16]
 800049a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d003      	beq.n	80004aa <Hall_ReadState+0x46>
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	f043 0304 	orr.w	r3, r3, #4
 80004a8:	71fb      	strb	r3, [r7, #7]
    
    return state;
 80004aa:	79fb      	ldrb	r3, [r7, #7]
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr
 80004b8:	48000400 	.word	0x48000400

080004bc <Hall_ProcessData>:

void Hall_ProcessData(HallSensor_t* hall) {
 80004bc:	b480      	push	{r7}
 80004be:	b087      	sub	sp, #28
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
    // Processar apenas se houver nova captura
    if (!hall->new_capture_flag) {
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	7b1b      	ldrb	r3, [r3, #12]
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f000 808b 	beq.w	80005e6 <Hall_ProcessData+0x12a>
        return;
    }
    
    hall->new_capture_flag = 0; // Limpar flag
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2200      	movs	r2, #0
 80004d4:	731a      	strb	r2, [r3, #12]
    
    // Calcular velocidade baseado no delta de captures
    uint32_t delta_capture = hall->hall_capture - hall->last_capture;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	685a      	ldr	r2, [r3, #4]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	1ad3      	subs	r3, r2, r3
 80004e0:	617b      	str	r3, [r7, #20]
    
    if (delta_capture > 0 && delta_capture < 1000000) { // Timeout de 1 segundo (1MHz timer)
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d020      	beq.n	800052a <Hall_ProcessData+0x6e>
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	4a42      	ldr	r2, [pc, #264]	@ (80005f4 <Hall_ProcessData+0x138>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d81c      	bhi.n	800052a <Hall_ProcessData+0x6e>
        // Timer roda a 1MHz (1μs por tick)
        // Cada transição Hall = 60° elétrico = 1/6 rotação elétrica
        float time_seconds = delta_capture / 1000000.0f;
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	ee07 3a90 	vmov	s15, r3
 80004f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80004fa:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 80005f8 <Hall_ProcessData+0x13c>
 80004fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000502:	edc7 7a04 	vstr	s15, [r7, #16]
        float electrical_rps = (1.0f / 6.0f) / time_seconds;
 8000506:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80005fc <Hall_ProcessData+0x140>
 800050a:	ed97 7a04 	vldr	s14, [r7, #16]
 800050e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000512:	edc7 7a03 	vstr	s15, [r7, #12]
        hall->velocity_erpm = electrical_rps * 60.0f; // Converter para eRPM
 8000516:	edd7 7a03 	vldr	s15, [r7, #12]
 800051a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8000600 <Hall_ProcessData+0x144>
 800051e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	edc3 7a08 	vstr	s15, [r3, #32]
    if (delta_capture > 0 && delta_capture < 1000000) { // Timeout de 1 segundo (1MHz timer)
 8000528:	e003      	b.n	8000532 <Hall_ProcessData+0x76>
    } else {
        hall->velocity_erpm = 0.0f; // Timeout ou primeira leitura
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	f04f 0200 	mov.w	r2, #0
 8000530:	621a      	str	r2, [r3, #32]
    }
    
    // Verificar direção baseado na transição
    uint8_t new_state = hall->hall_state;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	72fb      	strb	r3, [r7, #11]
    
    if (new_state != hall->last_hall_state && new_state >= 1 && new_state <= 6) {
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	7d1b      	ldrb	r3, [r3, #20]
 800053c:	7afa      	ldrb	r2, [r7, #11]
 800053e:	429a      	cmp	r2, r3
 8000540:	d039      	beq.n	80005b6 <Hall_ProcessData+0xfa>
 8000542:	7afb      	ldrb	r3, [r7, #11]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d036      	beq.n	80005b6 <Hall_ProcessData+0xfa>
 8000548:	7afb      	ldrb	r3, [r7, #11]
 800054a:	2b06      	cmp	r3, #6
 800054c:	d833      	bhi.n	80005b6 <Hall_ProcessData+0xfa>
        int8_t transition = HALL_TRANSITION_TABLE[hall->last_hall_state][new_state];
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	7d1b      	ldrb	r3, [r3, #20]
 8000552:	461a      	mov	r2, r3
 8000554:	7afb      	ldrb	r3, [r7, #11]
 8000556:	492b      	ldr	r1, [pc, #172]	@ (8000604 <Hall_ProcessData+0x148>)
 8000558:	00d2      	lsls	r2, r2, #3
 800055a:	440a      	add	r2, r1
 800055c:	4413      	add	r3, r2
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	72bb      	strb	r3, [r7, #10]
        
        if (transition != 0) {
 8000562:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d022      	beq.n	80005b0 <Hall_ProcessData+0xf4>
            // Transição válida
            hall->direction = (transition > 0) ? 1 : 2;
 800056a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800056e:	2b00      	cmp	r3, #0
 8000570:	dd01      	ble.n	8000576 <Hall_ProcessData+0xba>
 8000572:	2201      	movs	r2, #1
 8000574:	e000      	b.n	8000578 <Hall_ProcessData+0xbc>
 8000576:	2202      	movs	r2, #2
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            // Atualizar contador de rotações
            if (hall->last_hall_state == 6 && new_state == 1) {
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	7d1b      	ldrb	r3, [r3, #20]
 8000582:	2b06      	cmp	r3, #6
 8000584:	d108      	bne.n	8000598 <Hall_ProcessData+0xdc>
 8000586:	7afb      	ldrb	r3, [r7, #11]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d105      	bne.n	8000598 <Hall_ProcessData+0xdc>
                hall->electrical_rotations++; // Completou rotação horária
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	1c5a      	adds	r2, r3, #1
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	619a      	str	r2, [r3, #24]
 8000596:	e00b      	b.n	80005b0 <Hall_ProcessData+0xf4>
            } else if (hall->last_hall_state == 1 && new_state == 6) {
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	7d1b      	ldrb	r3, [r3, #20]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d107      	bne.n	80005b0 <Hall_ProcessData+0xf4>
 80005a0:	7afb      	ldrb	r3, [r7, #11]
 80005a2:	2b06      	cmp	r3, #6
 80005a4:	d104      	bne.n	80005b0 <Hall_ProcessData+0xf4>
                hall->electrical_rotations--; // Completou rotação anti-horária
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	1e5a      	subs	r2, r3, #1
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	619a      	str	r2, [r3, #24]
            }
        }
        
        hall->last_hall_state = new_state;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	7afa      	ldrb	r2, [r7, #11]
 80005b4:	751a      	strb	r2, [r3, #20]
    }
    
    // Atualizar ângulo baseado na tabela
    if (hall->hall_state >= 1 && hall->hall_state <= 6) {
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d00d      	beq.n	80005dc <Hall_ProcessData+0x120>
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	2b06      	cmp	r3, #6
 80005c8:	d808      	bhi.n	80005dc <Hall_ProcessData+0x120>
        hall->angle_electrical = HALL_ANGLE_TABLE[hall->hall_state];
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000608 <Hall_ProcessData+0x14c>)
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	4413      	add	r3, r2
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	61da      	str	r2, [r3, #28]
    }
    
    hall->last_capture = hall->hall_capture;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	685a      	ldr	r2, [r3, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	e000      	b.n	80005e8 <Hall_ProcessData+0x12c>
        return;
 80005e6:	bf00      	nop
}
 80005e8:	371c      	adds	r7, #28
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	000f423f 	.word	0x000f423f
 80005f8:	49742400 	.word	0x49742400
 80005fc:	3e2aaaab 	.word	0x3e2aaaab
 8000600:	42700000 	.word	0x42700000
 8000604:	0800af18 	.word	0x0800af18
 8000608:	0800aef8 	.word	0x0800aef8

0800060c <Hall_TIM_CaptureCallback>:

void Hall_TIM_CaptureCallback(HallSensor_t* hall) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    // ===== ISR ULTRA RÁPIDA (executada a cada transição Hall) =====
    // Objetivo: capturar dados e sair imediatamente (~1-2μs)
    
    // DEBUG: incrementar contador de ISR
    hall->isr_counter++;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	1c5a      	adds	r2, r3, #1
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	611a      	str	r2, [r3, #16]
    
    // 1. Ler estado Hall atual
    hall->hall_state = Hall_ReadState();
 800061e:	f7ff ff21 	bl	8000464 <Hall_ReadState>
 8000622:	4603      	mov	r3, r0
 8000624:	461a      	mov	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	701a      	strb	r2, [r3, #0]
    
    // 2. Capturar valor do contador do TIM8
    hall->hall_capture = __HAL_TIM_GET_COUNTER(&htim8);
 800062a:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <Hall_TIM_CaptureCallback+0x38>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	605a      	str	r2, [r3, #4]
    
    // 3. Setar flag para processar no main loop
    hall->new_capture_flag = 1;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2201      	movs	r2, #1
 8000638:	731a      	strb	r2, [r3, #12]
    
    // FIM da ISR! Processamento pesado vai no main loop
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	200002e0 	.word	0x200002e0

08000648 <Hall_GetAngle>:

float Hall_GetAngle(HallSensor_t* hall) {
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
    return hall->angle_electrical;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	69db      	ldr	r3, [r3, #28]
 8000654:	ee07 3a90 	vmov	s15, r3
}
 8000658:	eeb0 0a67 	vmov.f32	s0, s15
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <Hall_GetVelocity>:

float Hall_GetVelocity(HallSensor_t* hall) {
 8000666:	b480      	push	{r7}
 8000668:	b083      	sub	sp, #12
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
    return hall->velocity_erpm;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6a1b      	ldr	r3, [r3, #32]
 8000672:	ee07 3a90 	vmov	s15, r3
}
 8000676:	eeb0 0a67 	vmov.f32	s0, s15
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068a:	f000 fd5e 	bl	800114a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068e:	f000 f87b 	bl	8000788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000692:	f7ff fe1d 	bl	80002d0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000696:	f000 faa1 	bl	8000bdc <MX_TIM1_Init>
  MX_TIM8_Init();
 800069a:	f000 fb6b 	bl	8000d74 <MX_TIM8_Init>
  MX_USB_Device_Init();
 800069e:	f008 fd1f 	bl	80090e0 <MX_USB_Device_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80006a2:	f000 f8bc 	bl	800081e <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  
  // Delay para estabilização USB
  HAL_Delay(500);
 80006a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006aa:	f000 fd85 	bl	80011b8 <HAL_Delay>
  
  // Inicializar módulos
  USB_Comm_Init();
 80006ae:	f000 fcaf 	bl	8001010 <USB_Comm_Init>
  Hall_Init(&hall_sensor);  // Já inicia o TIM8 Hall Interface
 80006b2:	482c      	ldr	r0, [pc, #176]	@ (8000764 <main+0xe0>)
 80006b4:	f7ff fe88 	bl	80003c8 <Hall_Init>
  
  USB_Comm_Print("\r\n=== KINEMATECH TORQ ESC ===\r\n");
 80006b8:	482b      	ldr	r0, [pc, #172]	@ (8000768 <main+0xe4>)
 80006ba:	f000 fd05 	bl	80010c8 <USB_Comm_Print>
  USB_Comm_Print("Firmware v0.1 - Oct 2025\r\n");
 80006be:	482b      	ldr	r0, [pc, #172]	@ (800076c <main+0xe8>)
 80006c0:	f000 fd02 	bl	80010c8 <USB_Comm_Print>
  USB_Comm_Print("Hall Interface (TIM8) - Hardware Accelerated\r\n");
 80006c4:	482a      	ldr	r0, [pc, #168]	@ (8000770 <main+0xec>)
 80006c6:	f000 fcff 	bl	80010c8 <USB_Comm_Print>
  USB_Comm_Print("System ready! Rotate motor manually.\r\n\r\n");
 80006ca:	482a      	ldr	r0, [pc, #168]	@ (8000774 <main+0xf0>)
 80006cc:	f000 fcfc 	bl	80010c8 <USB_Comm_Print>

    /* USER CODE BEGIN 3 */
    
    // LED pisca a cada 500ms para indicar que está funcionando
    static uint32_t last_led_toggle = 0;
    if (HAL_GetTick() - last_led_toggle >= 500) {
 80006d0:	f000 fd66 	bl	80011a0 <HAL_GetTick>
 80006d4:	4602      	mov	r2, r0
 80006d6:	4b28      	ldr	r3, [pc, #160]	@ (8000778 <main+0xf4>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	1ad3      	subs	r3, r2, r3
 80006dc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80006e0:	d309      	bcc.n	80006f6 <main+0x72>
      last_led_toggle = HAL_GetTick();
 80006e2:	f000 fd5d 	bl	80011a0 <HAL_GetTick>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4a23      	ldr	r2, [pc, #140]	@ (8000778 <main+0xf4>)
 80006ea:	6013      	str	r3, [r2, #0]
      HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80006ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006f0:	4822      	ldr	r0, [pc, #136]	@ (800077c <main+0xf8>)
 80006f2:	f000 fffd 	bl	80016f0 <HAL_GPIO_TogglePin>
    }
    
    // ===== PROCESSAR DADOS DO HALL (main loop) =====
    Hall_ProcessData(&hall_sensor);
 80006f6:	481b      	ldr	r0, [pc, #108]	@ (8000764 <main+0xe0>)
 80006f8:	f7ff fee0 	bl	80004bc <Hall_ProcessData>
    
    // ===== TELEMETRIA VIA USB (100Hz) =====
    uint32_t current_time = HAL_GetTick();
 80006fc:	f000 fd50 	bl	80011a0 <HAL_GetTick>
 8000700:	6078      	str	r0, [r7, #4]
    if (current_time - last_telemetry_ms >= (1000 / TELEMETRY_RATE_HZ)) {
 8000702:	4b1f      	ldr	r3, [pc, #124]	@ (8000780 <main+0xfc>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	2b09      	cmp	r3, #9
 800070c:	d924      	bls.n	8000758 <main+0xd4>
      last_telemetry_ms = current_time;
 800070e:	4a1c      	ldr	r2, [pc, #112]	@ (8000780 <main+0xfc>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6013      	str	r3, [r2, #0]
      
      telemetry.hall_state = hall_sensor.hall_state;
 8000714:	4b13      	ldr	r3, [pc, #76]	@ (8000764 <main+0xe0>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <main+0x100>)
 800071c:	701a      	strb	r2, [r3, #0]
      telemetry.hall_angle = Hall_GetAngle(&hall_sensor);
 800071e:	4811      	ldr	r0, [pc, #68]	@ (8000764 <main+0xe0>)
 8000720:	f7ff ff92 	bl	8000648 <Hall_GetAngle>
 8000724:	eef0 7a40 	vmov.f32	s15, s0
 8000728:	4b16      	ldr	r3, [pc, #88]	@ (8000784 <main+0x100>)
 800072a:	edc3 7a01 	vstr	s15, [r3, #4]
      telemetry.hall_velocity = Hall_GetVelocity(&hall_sensor);
 800072e:	480d      	ldr	r0, [pc, #52]	@ (8000764 <main+0xe0>)
 8000730:	f7ff ff99 	bl	8000666 <Hall_GetVelocity>
 8000734:	eef0 7a40 	vmov.f32	s15, s0
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <main+0x100>)
 800073a:	edc3 7a02 	vstr	s15, [r3, #8]
      telemetry.isr_counter = hall_sensor.isr_counter;  // DEBUG
 800073e:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <main+0xe0>)
 8000740:	691b      	ldr	r3, [r3, #16]
 8000742:	4a10      	ldr	r2, [pc, #64]	@ (8000784 <main+0x100>)
 8000744:	60d3      	str	r3, [r2, #12]
      telemetry.uptime_ms = current_time;
 8000746:	4a0f      	ldr	r2, [pc, #60]	@ (8000784 <main+0x100>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6113      	str	r3, [r2, #16]
      telemetry.errors = 0;
 800074c:	4b0d      	ldr	r3, [pc, #52]	@ (8000784 <main+0x100>)
 800074e:	2200      	movs	r2, #0
 8000750:	751a      	strb	r2, [r3, #20]
      
      USB_Comm_SendTelemetry(&telemetry);
 8000752:	480c      	ldr	r0, [pc, #48]	@ (8000784 <main+0x100>)
 8000754:	f000 fc74 	bl	8001040 <USB_Comm_SendTelemetry>
    }

    USB_Comm_ProcessCommands();
 8000758:	f000 fcc7 	bl	80010ea <USB_Comm_ProcessCommands>
    
    HAL_Delay(100);
 800075c:	2064      	movs	r0, #100	@ 0x64
 800075e:	f000 fd2b 	bl	80011b8 <HAL_Delay>
  {
 8000762:	e7b5      	b.n	80006d0 <main+0x4c>
 8000764:	200001fc 	.word	0x200001fc
 8000768:	0800adb8 	.word	0x0800adb8
 800076c:	0800add8 	.word	0x0800add8
 8000770:	0800adf4 	.word	0x0800adf4
 8000774:	0800ae24 	.word	0x0800ae24
 8000778:	20000240 	.word	0x20000240
 800077c:	48000800 	.word	0x48000800
 8000780:	2000023c 	.word	0x2000023c
 8000784:	20000224 	.word	0x20000224

08000788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b094      	sub	sp, #80	@ 0x50
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 0318 	add.w	r3, r7, #24
 8000792:	2238      	movs	r2, #56	@ 0x38
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f009 fb01 	bl	8009d9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007aa:	2000      	movs	r0, #0
 80007ac:	f002 fcbc 	bl	8003128 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007b0:	2321      	movs	r3, #33	@ 0x21
 80007b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007b8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007ba:	2301      	movs	r3, #1
 80007bc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007be:	2302      	movs	r3, #2
 80007c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c2:	2303      	movs	r3, #3
 80007c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80007c6:	2306      	movs	r3, #6
 80007c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007ca:	2355      	movs	r3, #85	@ 0x55
 80007cc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007da:	f107 0318 	add.w	r3, r7, #24
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 fd56 	bl	8003290 <HAL_RCC_OscConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007ea:	f000 f848 	bl	800087e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ee:	230f      	movs	r3, #15
 80007f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f2:	2303      	movs	r3, #3
 80007f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2104      	movs	r1, #4
 8000806:	4618      	mov	r0, r3
 8000808:	f003 f854 	bl	80038b4 <HAL_RCC_ClockConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000812:	f000 f834 	bl	800087e <Error_Handler>
  }
}
 8000816:	bf00      	nop
 8000818:	3750      	adds	r7, #80	@ 0x50
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	af00      	add	r7, sp, #0
  /* USB_LP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);  // Mesma prioridade que USB_HP
 8000822:	2200      	movs	r2, #0
 8000824:	2105      	movs	r1, #5
 8000826:	2014      	movs	r0, #20
 8000828:	f000 fda0 	bl	800136c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800082c:	2014      	movs	r0, #20
 800082e:	f000 fdb7 	bl	80013a0 <HAL_NVIC_EnableIRQ>
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <HAL_TIMEx_CommutCallback>:
/**
 * @brief Callback de captura do TIM8 (Hall Interface)
 * @note Chamado automaticamente pelo HAL a cada transição Hall
 */
void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM8) {
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a04      	ldr	r2, [pc, #16]	@ (8000858 <HAL_TIMEx_CommutCallback+0x20>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d102      	bne.n	8000850 <HAL_TIMEx_CommutCallback+0x18>
        // ISR ultra rápida: apenas capturar dados
        Hall_TIM_CaptureCallback(&hall_sensor);
 800084a:	4804      	ldr	r0, [pc, #16]	@ (800085c <HAL_TIMEx_CommutCallback+0x24>)
 800084c:	f7ff fede 	bl	800060c <Hall_TIM_CaptureCallback>
    }
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40013400 	.word	0x40013400
 800085c:	200001fc 	.word	0x200001fc

08000860 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000870:	d101      	bne.n	8000876 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000872:	f000 fc83 	bl	800117c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000882:	b672      	cpsid	i
}
 8000884:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000886:	bf00      	nop
 8000888:	e7fd      	b.n	8000886 <Error_Handler+0x8>
	...

0800088c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <HAL_MspInit+0x44>)
 8000894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000896:	4a0e      	ldr	r2, [pc, #56]	@ (80008d0 <HAL_MspInit+0x44>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6613      	str	r3, [r2, #96]	@ 0x60
 800089e:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <HAL_MspInit+0x44>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <HAL_MspInit+0x44>)
 80008ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ae:	4a08      	ldr	r2, [pc, #32]	@ (80008d0 <HAL_MspInit+0x44>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008b6:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <HAL_MspInit+0x44>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008c2:	f002 fcd5 	bl	8003270 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000

080008d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08c      	sub	sp, #48	@ 0x30
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80008e4:	4b2d      	ldr	r3, [pc, #180]	@ (800099c <HAL_InitTick+0xc8>)
 80008e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008e8:	4a2c      	ldr	r2, [pc, #176]	@ (800099c <HAL_InitTick+0xc8>)
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80008f0:	4b2a      	ldr	r3, [pc, #168]	@ (800099c <HAL_InitTick+0xc8>)
 80008f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008fc:	f107 020c 	add.w	r2, r7, #12
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	4611      	mov	r1, r2
 8000906:	4618      	mov	r0, r3
 8000908:	f003 f994 	bl	8003c34 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800090c:	f003 f97c 	bl	8003c08 <HAL_RCC_GetPCLK1Freq>
 8000910:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000914:	4a22      	ldr	r2, [pc, #136]	@ (80009a0 <HAL_InitTick+0xcc>)
 8000916:	fba2 2303 	umull	r2, r3, r2, r3
 800091a:	0c9b      	lsrs	r3, r3, #18
 800091c:	3b01      	subs	r3, #1
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000920:	4b20      	ldr	r3, [pc, #128]	@ (80009a4 <HAL_InitTick+0xd0>)
 8000922:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000926:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000928:	4b1e      	ldr	r3, [pc, #120]	@ (80009a4 <HAL_InitTick+0xd0>)
 800092a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800092e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000930:	4a1c      	ldr	r2, [pc, #112]	@ (80009a4 <HAL_InitTick+0xd0>)
 8000932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000934:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000936:	4b1b      	ldr	r3, [pc, #108]	@ (80009a4 <HAL_InitTick+0xd0>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093c:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <HAL_InitTick+0xd0>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 8000942:	4818      	ldr	r0, [pc, #96]	@ (80009a4 <HAL_InitTick+0xd0>)
 8000944:	f003 fc3c 	bl	80041c0 <HAL_TIM_Base_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800094e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000952:	2b00      	cmp	r3, #0
 8000954:	d11b      	bne.n	800098e <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000956:	4813      	ldr	r0, [pc, #76]	@ (80009a4 <HAL_InitTick+0xd0>)
 8000958:	f003 fc8a 	bl	8004270 <HAL_TIM_Base_Start_IT>
 800095c:	4603      	mov	r3, r0
 800095e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000962:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000966:	2b00      	cmp	r3, #0
 8000968:	d111      	bne.n	800098e <HAL_InitTick+0xba>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800096a:	201c      	movs	r0, #28
 800096c:	f000 fd18 	bl	80013a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2b0f      	cmp	r3, #15
 8000974:	d808      	bhi.n	8000988 <HAL_InitTick+0xb4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000976:	2200      	movs	r2, #0
 8000978:	6879      	ldr	r1, [r7, #4]
 800097a:	201c      	movs	r0, #28
 800097c:	f000 fcf6 	bl	800136c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000980:	4a09      	ldr	r2, [pc, #36]	@ (80009a8 <HAL_InitTick+0xd4>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6013      	str	r3, [r2, #0]
 8000986:	e002      	b.n	800098e <HAL_InitTick+0xba>
      }
      else
      {
        status = HAL_ERROR;
 8000988:	2301      	movs	r3, #1
 800098a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800098e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000992:	4618      	mov	r0, r3
 8000994:	3730      	adds	r7, #48	@ 0x30
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40021000 	.word	0x40021000
 80009a0:	431bde83 	.word	0x431bde83
 80009a4:	20000244 	.word	0x20000244
 80009a8:	20000004 	.word	0x20000004

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <NMI_Handler+0x4>

080009b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <MemManage_Handler+0x4>

080009c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a10:	4802      	ldr	r0, [pc, #8]	@ (8000a1c <USB_HP_IRQHandler+0x10>)
 8000a12:	f000 ff77 	bl	8001904 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20001988 	.word	0x20001988

08000a20 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a24:	4802      	ldr	r0, [pc, #8]	@ (8000a30 <USB_LP_IRQHandler+0x10>)
 8000a26:	f000 ff6d 	bl	8001904 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20001988 	.word	0x20001988

08000a34 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a38:	4802      	ldr	r0, [pc, #8]	@ (8000a44 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a3a:	f003 fcf2 	bl	8004422 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000294 	.word	0x20000294

08000a48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a4c:	4802      	ldr	r0, [pc, #8]	@ (8000a58 <TIM2_IRQHandler+0x10>)
 8000a4e:	f003 fce8 	bl	8004422 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000244 	.word	0x20000244

08000a5c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000a60:	4802      	ldr	r0, [pc, #8]	@ (8000a6c <TIM8_CC_IRQHandler+0x10>)
 8000a62:	f003 fcde 	bl	8004422 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200002e0 	.word	0x200002e0

08000a70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	e00a      	b.n	8000a98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a82:	f3af 8000 	nop.w
 8000a86:	4601      	mov	r1, r0
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	60ba      	str	r2, [r7, #8]
 8000a8e:	b2ca      	uxtb	r2, r1
 8000a90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3301      	adds	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	dbf0      	blt.n	8000a82 <_read+0x12>
  }

  return len;
 8000aa0:	687b      	ldr	r3, [r7, #4]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b086      	sub	sp, #24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	60f8      	str	r0, [r7, #12]
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	e009      	b.n	8000ad0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	60ba      	str	r2, [r7, #8]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3301      	adds	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697a      	ldr	r2, [r7, #20]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	dbf1      	blt.n	8000abc <_write+0x12>
  }
  return len;
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <_close>:

int _close(int file)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <_isatty>:

int _isatty(int file)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b54:	4a14      	ldr	r2, [pc, #80]	@ (8000ba8 <_sbrk+0x5c>)
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <_sbrk+0x60>)
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b60:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b68:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <_sbrk+0x64>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	@ (8000bb4 <_sbrk+0x68>)
 8000b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6e:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d207      	bcs.n	8000b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b7c:	f009 f95e 	bl	8009e3c <__errno>
 8000b80:	4603      	mov	r3, r0
 8000b82:	220c      	movs	r2, #12
 8000b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b8a:	e009      	b.n	8000ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b8c:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b92:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	4a05      	ldr	r2, [pc, #20]	@ (8000bb0 <_sbrk+0x64>)
 8000b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20020000 	.word	0x20020000
 8000bac:	00000400 	.word	0x00000400
 8000bb0:	20000290 	.word	0x20000290
 8000bb4:	20001fd0 	.word	0x20001fd0

08000bb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <SystemInit+0x20>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bc2:	4a05      	ldr	r2, [pc, #20]	@ (8000bd8 <SystemInit+0x20>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b09c      	sub	sp, #112	@ 0x70
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bfc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
 8000c0c:	615a      	str	r2, [r3, #20]
 8000c0e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2234      	movs	r2, #52	@ 0x34
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f009 f8c1 	bl	8009d9e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c1c:	4b53      	ldr	r3, [pc, #332]	@ (8000d6c <MX_TIM1_Init+0x190>)
 8000c1e:	4a54      	ldr	r2, [pc, #336]	@ (8000d70 <MX_TIM1_Init+0x194>)
 8000c20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c22:	4b52      	ldr	r3, [pc, #328]	@ (8000d6c <MX_TIM1_Init+0x190>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000c28:	4b50      	ldr	r3, [pc, #320]	@ (8000d6c <MX_TIM1_Init+0x190>)
 8000c2a:	2220      	movs	r2, #32
 8000c2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4249;
 8000c2e:	4b4f      	ldr	r3, [pc, #316]	@ (8000d6c <MX_TIM1_Init+0x190>)
 8000c30:	f241 0299 	movw	r2, #4249	@ 0x1099
 8000c34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c36:	4b4d      	ldr	r3, [pc, #308]	@ (8000d6c <MX_TIM1_Init+0x190>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c3c:	4b4b      	ldr	r3, [pc, #300]	@ (8000d6c <MX_TIM1_Init+0x190>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c42:	4b4a      	ldr	r3, [pc, #296]	@ (8000d6c <MX_TIM1_Init+0x190>)
 8000c44:	2280      	movs	r2, #128	@ 0x80
 8000c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c48:	4848      	ldr	r0, [pc, #288]	@ (8000d6c <MX_TIM1_Init+0x190>)
 8000c4a:	f003 fab9 	bl	80041c0 <HAL_TIM_Base_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000c54:	f7ff fe13 	bl	800087e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c5c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c5e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000c62:	4619      	mov	r1, r3
 8000c64:	4841      	ldr	r0, [pc, #260]	@ (8000d6c <MX_TIM1_Init+0x190>)
 8000c66:	f003 fe3f 	bl	80048e8 <HAL_TIM_ConfigClockSource>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000c70:	f7ff fe05 	bl	800087e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c74:	483d      	ldr	r0, [pc, #244]	@ (8000d6c <MX_TIM1_Init+0x190>)
 8000c76:	f003 fb73 	bl	8004360 <HAL_TIM_PWM_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000c80:	f7ff fdfd 	bl	800087e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c84:	2300      	movs	r3, #0
 8000c86:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c90:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c94:	4619      	mov	r1, r3
 8000c96:	4835      	ldr	r0, [pc, #212]	@ (8000d6c <MX_TIM1_Init+0x190>)
 8000c98:	f004 fdc4 	bl	8005824 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000ca2:	f7ff fdec 	bl	800087e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ca6:	2360      	movs	r3, #96	@ 0x60
 8000ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cc2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4828      	ldr	r0, [pc, #160]	@ (8000d6c <MX_TIM1_Init+0x190>)
 8000ccc:	f003 fcf8 	bl	80046c0 <HAL_TIM_PWM_ConfigChannel>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000cd6:	f7ff fdd2 	bl	800087e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cda:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cde:	2204      	movs	r2, #4
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4822      	ldr	r0, [pc, #136]	@ (8000d6c <MX_TIM1_Init+0x190>)
 8000ce4:	f003 fcec 	bl	80046c0 <HAL_TIM_PWM_ConfigChannel>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000cee:	f7ff fdc6 	bl	800087e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cf2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cf6:	2208      	movs	r2, #8
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	481c      	ldr	r0, [pc, #112]	@ (8000d6c <MX_TIM1_Init+0x190>)
 8000cfc:	f003 fce0 	bl	80046c0 <HAL_TIM_PWM_ConfigChannel>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000d06:	f7ff fdba 	bl	800087e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000d0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000d10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d14:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 5;
 8000d1a:	2305      	movs	r3, #5
 8000d1c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d26:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000d42:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d46:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4807      	ldr	r0, [pc, #28]	@ (8000d6c <MX_TIM1_Init+0x190>)
 8000d4e:	f004 fdff 	bl	8005950 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM1_Init+0x180>
  {
    Error_Handler();
 8000d58:	f7ff fd91 	bl	800087e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d5c:	4803      	ldr	r0, [pc, #12]	@ (8000d6c <MX_TIM1_Init+0x190>)
 8000d5e:	f000 f8ef 	bl	8000f40 <HAL_TIM_MspPostInit>

}
 8000d62:	bf00      	nop
 8000d64:	3770      	adds	r7, #112	@ 0x70
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000294 	.word	0x20000294
 8000d70:	40012c00 	.word	0x40012c00

08000d74 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08c      	sub	sp, #48	@ 0x30
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d7a:	f107 0320 	add.w	r3, r7, #32
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000da0:	4b29      	ldr	r3, [pc, #164]	@ (8000e48 <MX_TIM8_Init+0xd4>)
 8000da2:	4a2a      	ldr	r2, [pc, #168]	@ (8000e4c <MX_TIM8_Init+0xd8>)
 8000da4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 8000da6:	4b28      	ldr	r3, [pc, #160]	@ (8000e48 <MX_TIM8_Init+0xd4>)
 8000da8:	22a9      	movs	r2, #169	@ 0xa9
 8000daa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dac:	4b26      	ldr	r3, [pc, #152]	@ (8000e48 <MX_TIM8_Init+0xd4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000db2:	4b25      	ldr	r3, [pc, #148]	@ (8000e48 <MX_TIM8_Init+0xd4>)
 8000db4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000db8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dba:	4b23      	ldr	r3, [pc, #140]	@ (8000e48 <MX_TIM8_Init+0xd4>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000dc0:	4b21      	ldr	r3, [pc, #132]	@ (8000e48 <MX_TIM8_Init+0xd4>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc6:	4b20      	ldr	r3, [pc, #128]	@ (8000e48 <MX_TIM8_Init+0xd4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000dcc:	481e      	ldr	r0, [pc, #120]	@ (8000e48 <MX_TIM8_Init+0xd4>)
 8000dce:	f003 f9f7 	bl	80041c0 <HAL_TIM_Base_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8000dd8:	f7ff fd51 	bl	800087e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ddc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000de0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000de2:	f107 0320 	add.w	r3, r7, #32
 8000de6:	4619      	mov	r1, r3
 8000de8:	4817      	ldr	r0, [pc, #92]	@ (8000e48 <MX_TIM8_Init+0xd4>)
 8000dea:	f003 fd7d 	bl	80048e8 <HAL_TIM_ConfigClockSource>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000df4:	f7ff fd43 	bl	800087e <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim8, &sConfig) != HAL_OK)
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480e      	ldr	r0, [pc, #56]	@ (8000e48 <MX_TIM8_Init+0xd4>)
 8000e10:	f004 fbb1 	bl	8005576 <HAL_TIMEx_HallSensor_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8000e1a:	f7ff fd30 	bl	800087e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000e1e:	2350      	movs	r3, #80	@ 0x50
 8000e20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4806      	ldr	r0, [pc, #24]	@ (8000e48 <MX_TIM8_Init+0xd4>)
 8000e30:	f004 fcf8 	bl	8005824 <HAL_TIMEx_MasterConfigSynchronization>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000e3a:	f7ff fd20 	bl	800087e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	3730      	adds	r7, #48	@ 0x30
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200002e0 	.word	0x200002e0
 8000e4c:	40013400 	.word	0x40013400

08000e50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	@ 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a30      	ldr	r2, [pc, #192]	@ (8000f30 <HAL_TIM_Base_MspInit+0xe0>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d114      	bne.n	8000e9c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e72:	4b30      	ldr	r3, [pc, #192]	@ (8000f34 <HAL_TIM_Base_MspInit+0xe4>)
 8000e74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e76:	4a2f      	ldr	r2, [pc, #188]	@ (8000f34 <HAL_TIM_Base_MspInit+0xe4>)
 8000e78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e7e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f34 <HAL_TIM_Base_MspInit+0xe4>)
 8000e80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2019      	movs	r0, #25
 8000e90:	f000 fa6c 	bl	800136c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000e94:	2019      	movs	r0, #25
 8000e96:	f000 fa83 	bl	80013a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000e9a:	e045      	b.n	8000f28 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM8)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a25      	ldr	r2, [pc, #148]	@ (8000f38 <HAL_TIM_Base_MspInit+0xe8>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d140      	bne.n	8000f28 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000ea6:	4b23      	ldr	r3, [pc, #140]	@ (8000f34 <HAL_TIM_Base_MspInit+0xe4>)
 8000ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eaa:	4a22      	ldr	r2, [pc, #136]	@ (8000f34 <HAL_TIM_Base_MspInit+0xe4>)
 8000eac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000eb0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eb2:	4b20      	ldr	r3, [pc, #128]	@ (8000f34 <HAL_TIM_Base_MspInit+0xe4>)
 8000eb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8000f34 <HAL_TIM_Base_MspInit+0xe4>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec2:	4a1c      	ldr	r2, [pc, #112]	@ (8000f34 <HAL_TIM_Base_MspInit+0xe4>)
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eca:	4b1a      	ldr	r3, [pc, #104]	@ (8000f34 <HAL_TIM_Base_MspInit+0xe4>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HALL_A_Pin;
 8000ed6:	2340      	movs	r3, #64	@ 0x40
 8000ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8000ee6:	2305      	movs	r3, #5
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(HALL_A_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4812      	ldr	r0, [pc, #72]	@ (8000f3c <HAL_TIM_Base_MspInit+0xec>)
 8000ef2:	f000 fa63 	bl	80013bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HALL_B_Pin|HALL_C_Pin;
 8000ef6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f00:	2301      	movs	r3, #1
 8000f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8000f08:	230a      	movs	r3, #10
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	4619      	mov	r1, r3
 8000f12:	480a      	ldr	r0, [pc, #40]	@ (8000f3c <HAL_TIM_Base_MspInit+0xec>)
 8000f14:	f000 fa52 	bl	80013bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 2, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2102      	movs	r1, #2
 8000f1c:	202e      	movs	r0, #46	@ 0x2e
 8000f1e:	f000 fa25 	bl	800136c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8000f22:	202e      	movs	r0, #46	@ 0x2e
 8000f24:	f000 fa3c 	bl	80013a0 <HAL_NVIC_EnableIRQ>
}
 8000f28:	bf00      	nop
 8000f2a:	3728      	adds	r7, #40	@ 0x28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40012c00 	.word	0x40012c00
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40013400 	.word	0x40013400
 8000f3c:	48000400 	.word	0x48000400

08000f40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	@ 0x28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a29      	ldr	r2, [pc, #164]	@ (8001004 <HAL_TIM_MspPostInit+0xc4>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d14b      	bne.n	8000ffa <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f62:	4b29      	ldr	r3, [pc, #164]	@ (8001008 <HAL_TIM_MspPostInit+0xc8>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f66:	4a28      	ldr	r2, [pc, #160]	@ (8001008 <HAL_TIM_MspPostInit+0xc8>)
 8000f68:	f043 0302 	orr.w	r3, r3, #2
 8000f6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f6e:	4b26      	ldr	r3, [pc, #152]	@ (8001008 <HAL_TIM_MspPostInit+0xc8>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b23      	ldr	r3, [pc, #140]	@ (8001008 <HAL_TIM_MspPostInit+0xc8>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7e:	4a22      	ldr	r2, [pc, #136]	@ (8001008 <HAL_TIM_MspPostInit+0xc8>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f86:	4b20      	ldr	r3, [pc, #128]	@ (8001008 <HAL_TIM_MspPostInit+0xc8>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PA_LIN_Pin|PB_LIN_Pin;
 8000f92:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000fa4:	2306      	movs	r3, #6
 8000fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4619      	mov	r1, r3
 8000fae:	4817      	ldr	r0, [pc, #92]	@ (800100c <HAL_TIM_MspPostInit+0xcc>)
 8000fb0:	f000 fa04 	bl	80013bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PC_LIN_Pin;
 8000fb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PC_LIN_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480e      	ldr	r0, [pc, #56]	@ (800100c <HAL_TIM_MspPostInit+0xcc>)
 8000fd2:	f000 f9f3 	bl	80013bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PA_HIN_Pin|PB_HIN_Pin|PC_HIN_Pin;
 8000fd6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000fe8:	2306      	movs	r3, #6
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff6:	f000 f9e1 	bl	80013bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ffa:	bf00      	nop
 8000ffc:	3728      	adds	r7, #40	@ 0x28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40012c00 	.word	0x40012c00
 8001008:	40021000 	.word	0x40021000
 800100c:	48000400 	.word	0x48000400

08001010 <USB_Comm_Init>:
static uint8_t usb_rx_buffer[128];
static uint8_t rx_index = 0;

/* ========== PUBLIC FUNCTIONS ========== */

void USB_Comm_Init(void) {
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
    rx_index = 0;
 8001014:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <USB_Comm_Init+0x24>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
    memset(usb_tx_buffer, 0, sizeof(usb_tx_buffer));
 800101a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800101e:	2100      	movs	r1, #0
 8001020:	4805      	ldr	r0, [pc, #20]	@ (8001038 <USB_Comm_Init+0x28>)
 8001022:	f008 febc 	bl	8009d9e <memset>
    memset(usb_rx_buffer, 0, sizeof(usb_rx_buffer));
 8001026:	2280      	movs	r2, #128	@ 0x80
 8001028:	2100      	movs	r1, #0
 800102a:	4804      	ldr	r0, [pc, #16]	@ (800103c <USB_Comm_Init+0x2c>)
 800102c:	f008 feb7 	bl	8009d9e <memset>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200004ac 	.word	0x200004ac
 8001038:	2000032c 	.word	0x2000032c
 800103c:	2000042c 	.word	0x2000042c

08001040 <USB_Comm_SendTelemetry>:

void USB_Comm_SendTelemetry(Telemetry_t* telem) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af04      	add	r7, sp, #16
 8001046:	6078      	str	r0, [r7, #4]
    // Formato CSV simplificado - usando inteiros para evitar problema com float/printf
    // Ang e Vel multiplicados por 100 para manter 2 casas decimais
    int32_t ang_int = (int32_t)(telem->hall_angle * 100.0f);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	edd3 7a01 	vldr	s15, [r3, #4]
 800104e:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80010bc <USB_Comm_SendTelemetry+0x7c>
 8001052:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001056:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800105a:	ee17 3a90 	vmov	r3, s15
 800105e:	60fb      	str	r3, [r7, #12]
    int32_t vel_int = (int32_t)(telem->hall_velocity * 10.0f);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	edd3 7a02 	vldr	s15, [r3, #8]
 8001066:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800106a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800106e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001072:	ee17 3a90 	vmov	r3, s15
 8001076:	60bb      	str	r3, [r7, #8]
    
    snprintf(usb_tx_buffer, sizeof(usb_tx_buffer),
             "H:%d,Ang:%ld,Vel:%ld,ISR:%lu,Time:%lu\r\n",
             telem->hall_state,
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	781b      	ldrb	r3, [r3, #0]
    snprintf(usb_tx_buffer, sizeof(usb_tx_buffer),
 800107c:	4619      	mov	r1, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	6912      	ldr	r2, [r2, #16]
 8001086:	9203      	str	r2, [sp, #12]
 8001088:	9302      	str	r3, [sp, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	460b      	mov	r3, r1
 8001094:	4a0a      	ldr	r2, [pc, #40]	@ (80010c0 <USB_Comm_SendTelemetry+0x80>)
 8001096:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800109a:	480a      	ldr	r0, [pc, #40]	@ (80010c4 <USB_Comm_SendTelemetry+0x84>)
 800109c:	f008 fe06 	bl	8009cac <sniprintf>
             ang_int,      // Ângulo x100 (ex: 1.05 rad -> 105)
             vel_int,      // Velocidade x10 (ex: 123.4 eRPM -> 1234)
             telem->isr_counter,  // DEBUG: contador de ISR
             telem->uptime_ms);
    
    CDC_Transmit_FS((uint8_t*)usb_tx_buffer, strlen(usb_tx_buffer));
 80010a0:	4808      	ldr	r0, [pc, #32]	@ (80010c4 <USB_Comm_SendTelemetry+0x84>)
 80010a2:	f7ff f8bd 	bl	8000220 <strlen>
 80010a6:	4603      	mov	r3, r0
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	4619      	mov	r1, r3
 80010ac:	4805      	ldr	r0, [pc, #20]	@ (80010c4 <USB_Comm_SendTelemetry+0x84>)
 80010ae:	f008 f8d5 	bl	800925c <CDC_Transmit_FS>
}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	42c80000 	.word	0x42c80000
 80010c0:	0800ae50 	.word	0x0800ae50
 80010c4:	2000032c 	.word	0x2000032c

080010c8 <USB_Comm_Print>:

void USB_Comm_Print(const char* str) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    CDC_Transmit_FS((uint8_t*)str, strlen(str));
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff f8a5 	bl	8000220 <strlen>
 80010d6:	4603      	mov	r3, r0
 80010d8:	b29b      	uxth	r3, r3
 80010da:	4619      	mov	r1, r3
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f008 f8bd 	bl	800925c <CDC_Transmit_FS>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <USB_Comm_ProcessCommands>:
    va_end(args);
    
    CDC_Transmit_FS((uint8_t*)usb_tx_buffer, strlen(usb_tx_buffer));
}

void USB_Comm_ProcessCommands(void) {
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
    // TODO: Implementar parser de comandos
    // Por enquanto, apenas placeholder
    // Comandos futuros: "CAL", "START", "STOP", etc.
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010f8:	480d      	ldr	r0, [pc, #52]	@ (8001130 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010fa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80010fc:	f7ff fd5c 	bl	8000bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001100:	480c      	ldr	r0, [pc, #48]	@ (8001134 <LoopForever+0x6>)
  ldr r1, =_edata
 8001102:	490d      	ldr	r1, [pc, #52]	@ (8001138 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001104:	4a0d      	ldr	r2, [pc, #52]	@ (800113c <LoopForever+0xe>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001108:	e002      	b.n	8001110 <LoopCopyDataInit>

0800110a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800110c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110e:	3304      	adds	r3, #4

08001110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001114:	d3f9      	bcc.n	800110a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001116:	4a0a      	ldr	r2, [pc, #40]	@ (8001140 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001118:	4c0a      	ldr	r4, [pc, #40]	@ (8001144 <LoopForever+0x16>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800111c:	e001      	b.n	8001122 <LoopFillZerobss>

0800111e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001120:	3204      	adds	r2, #4

08001122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001124:	d3fb      	bcc.n	800111e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001126:	f008 fe8f 	bl	8009e48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800112a:	f7ff faab 	bl	8000684 <main>

0800112e <LoopForever>:

LoopForever:
    b LoopForever
 800112e:	e7fe      	b.n	800112e <LoopForever>
  ldr   r0, =_estack
 8001130:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001138:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800113c:	0800afb4 	.word	0x0800afb4
  ldr r2, =_sbss
 8001140:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001144:	20001fd0 	.word	0x20001fd0

08001148 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001148:	e7fe      	b.n	8001148 <ADC1_2_IRQHandler>

0800114a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001150:	2300      	movs	r3, #0
 8001152:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001154:	2003      	movs	r0, #3
 8001156:	f000 f8fe 	bl	8001356 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800115a:	200f      	movs	r0, #15
 800115c:	f7ff fbba 	bl	80008d4 <HAL_InitTick>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	71fb      	strb	r3, [r7, #7]
 800116a:	e001      	b.n	8001170 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800116c:	f7ff fb8e 	bl	800088c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001170:	79fb      	ldrb	r3, [r7, #7]

}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001180:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <HAL_IncTick+0x1c>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b05      	ldr	r3, [pc, #20]	@ (800119c <HAL_IncTick+0x20>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4413      	add	r3, r2
 800118a:	4a03      	ldr	r2, [pc, #12]	@ (8001198 <HAL_IncTick+0x1c>)
 800118c:	6013      	str	r3, [r2, #0]
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	200004b0 	.word	0x200004b0
 800119c:	20000008 	.word	0x20000008

080011a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b03      	ldr	r3, [pc, #12]	@ (80011b4 <HAL_GetTick+0x14>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	200004b0 	.word	0x200004b0

080011b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f7ff ffee 	bl	80011a0 <HAL_GetTick>
 80011c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011d0:	d004      	beq.n	80011dc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d2:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <HAL_Delay+0x40>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	4413      	add	r3, r2
 80011da:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011dc:	bf00      	nop
 80011de:	f7ff ffdf 	bl	80011a0 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d8f7      	bhi.n	80011de <HAL_Delay+0x26>
  {
  }
}
 80011ee:	bf00      	nop
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000008 	.word	0x20000008

080011fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800120c:	4b0c      	ldr	r3, [pc, #48]	@ (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001218:	4013      	ands	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001224:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001228:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800122c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122e:	4a04      	ldr	r2, [pc, #16]	@ (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	60d3      	str	r3, [r2, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001248:	4b04      	ldr	r3, [pc, #16]	@ (800125c <__NVIC_GetPriorityGrouping+0x18>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	f003 0307 	and.w	r3, r3, #7
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	2b00      	cmp	r3, #0
 8001270:	db0b      	blt.n	800128a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	f003 021f 	and.w	r2, r3, #31
 8001278:	4907      	ldr	r1, [pc, #28]	@ (8001298 <__NVIC_EnableIRQ+0x38>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	2001      	movs	r0, #1
 8001282:	fa00 f202 	lsl.w	r2, r0, r2
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000e100 	.word	0xe000e100

0800129c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	db0a      	blt.n	80012c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	490c      	ldr	r1, [pc, #48]	@ (80012e8 <__NVIC_SetPriority+0x4c>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	0112      	lsls	r2, r2, #4
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	440b      	add	r3, r1
 80012c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c4:	e00a      	b.n	80012dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4908      	ldr	r1, [pc, #32]	@ (80012ec <__NVIC_SetPriority+0x50>)
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	3b04      	subs	r3, #4
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	440b      	add	r3, r1
 80012da:	761a      	strb	r2, [r3, #24]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000e100 	.word	0xe000e100
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	@ 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f1c3 0307 	rsb	r3, r3, #7
 800130a:	2b04      	cmp	r3, #4
 800130c:	bf28      	it	cs
 800130e:	2304      	movcs	r3, #4
 8001310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3304      	adds	r3, #4
 8001316:	2b06      	cmp	r3, #6
 8001318:	d902      	bls.n	8001320 <NVIC_EncodePriority+0x30>
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3b03      	subs	r3, #3
 800131e:	e000      	b.n	8001322 <NVIC_EncodePriority+0x32>
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	401a      	ands	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001338:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43d9      	mvns	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	4313      	orrs	r3, r2
         );
}
 800134a:	4618      	mov	r0, r3
 800134c:	3724      	adds	r7, #36	@ 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ff4c 	bl	80011fc <__NVIC_SetPriorityGrouping>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
 8001378:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800137a:	f7ff ff63 	bl	8001244 <__NVIC_GetPriorityGrouping>
 800137e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	68b9      	ldr	r1, [r7, #8]
 8001384:	6978      	ldr	r0, [r7, #20]
 8001386:	f7ff ffb3 	bl	80012f0 <NVIC_EncodePriority>
 800138a:	4602      	mov	r2, r0
 800138c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001390:	4611      	mov	r1, r2
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff ff82 	bl	800129c <__NVIC_SetPriority>
}
 8001398:	bf00      	nop
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ff56 	bl	8001260 <__NVIC_EnableIRQ>
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013bc:	b480      	push	{r7}
 80013be:	b087      	sub	sp, #28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013ca:	e15a      	b.n	8001682 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	2101      	movs	r1, #1
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	fa01 f303 	lsl.w	r3, r1, r3
 80013d8:	4013      	ands	r3, r2
 80013da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f000 814c 	beq.w	800167c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d005      	beq.n	80013fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d130      	bne.n	800145e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	2203      	movs	r2, #3
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001432:	2201      	movs	r2, #1
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4013      	ands	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	091b      	lsrs	r3, r3, #4
 8001448:	f003 0201 	and.w	r2, r3, #1
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0303 	and.w	r3, r3, #3
 8001466:	2b03      	cmp	r3, #3
 8001468:	d017      	beq.n	800149a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d123      	bne.n	80014ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	08da      	lsrs	r2, r3, #3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3208      	adds	r2, #8
 80014ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	220f      	movs	r2, #15
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	691a      	ldr	r2, [r3, #16]
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	f003 0307 	and.w	r3, r3, #7
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	08da      	lsrs	r2, r3, #3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3208      	adds	r2, #8
 80014e8:	6939      	ldr	r1, [r7, #16]
 80014ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	2203      	movs	r2, #3
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4013      	ands	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 0203 	and.w	r2, r3, #3
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 80a6 	beq.w	800167c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001530:	4b5b      	ldr	r3, [pc, #364]	@ (80016a0 <HAL_GPIO_Init+0x2e4>)
 8001532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001534:	4a5a      	ldr	r2, [pc, #360]	@ (80016a0 <HAL_GPIO_Init+0x2e4>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	6613      	str	r3, [r2, #96]	@ 0x60
 800153c:	4b58      	ldr	r3, [pc, #352]	@ (80016a0 <HAL_GPIO_Init+0x2e4>)
 800153e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001548:	4a56      	ldr	r2, [pc, #344]	@ (80016a4 <HAL_GPIO_Init+0x2e8>)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	089b      	lsrs	r3, r3, #2
 800154e:	3302      	adds	r3, #2
 8001550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001554:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f003 0303 	and.w	r3, r3, #3
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	220f      	movs	r2, #15
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001572:	d01f      	beq.n	80015b4 <HAL_GPIO_Init+0x1f8>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a4c      	ldr	r2, [pc, #304]	@ (80016a8 <HAL_GPIO_Init+0x2ec>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d019      	beq.n	80015b0 <HAL_GPIO_Init+0x1f4>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a4b      	ldr	r2, [pc, #300]	@ (80016ac <HAL_GPIO_Init+0x2f0>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d013      	beq.n	80015ac <HAL_GPIO_Init+0x1f0>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a4a      	ldr	r2, [pc, #296]	@ (80016b0 <HAL_GPIO_Init+0x2f4>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d00d      	beq.n	80015a8 <HAL_GPIO_Init+0x1ec>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a49      	ldr	r2, [pc, #292]	@ (80016b4 <HAL_GPIO_Init+0x2f8>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d007      	beq.n	80015a4 <HAL_GPIO_Init+0x1e8>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a48      	ldr	r2, [pc, #288]	@ (80016b8 <HAL_GPIO_Init+0x2fc>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d101      	bne.n	80015a0 <HAL_GPIO_Init+0x1e4>
 800159c:	2305      	movs	r3, #5
 800159e:	e00a      	b.n	80015b6 <HAL_GPIO_Init+0x1fa>
 80015a0:	2306      	movs	r3, #6
 80015a2:	e008      	b.n	80015b6 <HAL_GPIO_Init+0x1fa>
 80015a4:	2304      	movs	r3, #4
 80015a6:	e006      	b.n	80015b6 <HAL_GPIO_Init+0x1fa>
 80015a8:	2303      	movs	r3, #3
 80015aa:	e004      	b.n	80015b6 <HAL_GPIO_Init+0x1fa>
 80015ac:	2302      	movs	r3, #2
 80015ae:	e002      	b.n	80015b6 <HAL_GPIO_Init+0x1fa>
 80015b0:	2301      	movs	r3, #1
 80015b2:	e000      	b.n	80015b6 <HAL_GPIO_Init+0x1fa>
 80015b4:	2300      	movs	r3, #0
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	f002 0203 	and.w	r2, r2, #3
 80015bc:	0092      	lsls	r2, r2, #2
 80015be:	4093      	lsls	r3, r2
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015c6:	4937      	ldr	r1, [pc, #220]	@ (80016a4 <HAL_GPIO_Init+0x2e8>)
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	089b      	lsrs	r3, r3, #2
 80015cc:	3302      	adds	r3, #2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015d4:	4b39      	ldr	r3, [pc, #228]	@ (80016bc <HAL_GPIO_Init+0x300>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015f8:	4a30      	ldr	r2, [pc, #192]	@ (80016bc <HAL_GPIO_Init+0x300>)
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015fe:	4b2f      	ldr	r3, [pc, #188]	@ (80016bc <HAL_GPIO_Init+0x300>)
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	43db      	mvns	r3, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4313      	orrs	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001622:	4a26      	ldr	r2, [pc, #152]	@ (80016bc <HAL_GPIO_Init+0x300>)
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001628:	4b24      	ldr	r3, [pc, #144]	@ (80016bc <HAL_GPIO_Init+0x300>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	43db      	mvns	r3, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800164c:	4a1b      	ldr	r2, [pc, #108]	@ (80016bc <HAL_GPIO_Init+0x300>)
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001652:	4b1a      	ldr	r3, [pc, #104]	@ (80016bc <HAL_GPIO_Init+0x300>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	43db      	mvns	r3, r3
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4313      	orrs	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001676:	4a11      	ldr	r2, [pc, #68]	@ (80016bc <HAL_GPIO_Init+0x300>)
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	3301      	adds	r3, #1
 8001680:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	fa22 f303 	lsr.w	r3, r2, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	f47f ae9d 	bne.w	80013cc <HAL_GPIO_Init+0x10>
  }
}
 8001692:	bf00      	nop
 8001694:	bf00      	nop
 8001696:	371c      	adds	r7, #28
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40010000 	.word	0x40010000
 80016a8:	48000400 	.word	0x48000400
 80016ac:	48000800 	.word	0x48000800
 80016b0:	48000c00 	.word	0x48000c00
 80016b4:	48001000 	.word	0x48001000
 80016b8:	48001400 	.word	0x48001400
 80016bc:	40010400 	.word	0x40010400

080016c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	807b      	strh	r3, [r7, #2]
 80016cc:	4613      	mov	r3, r2
 80016ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016d0:	787b      	ldrb	r3, [r7, #1]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016d6:	887a      	ldrh	r2, [r7, #2]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016dc:	e002      	b.n	80016e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016de:	887a      	ldrh	r2, [r7, #2]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001702:	887a      	ldrh	r2, [r7, #2]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4013      	ands	r3, r2
 8001708:	041a      	lsls	r2, r3, #16
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	43d9      	mvns	r1, r3
 800170e:	887b      	ldrh	r3, [r7, #2]
 8001710:	400b      	ands	r3, r1
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	619a      	str	r2, [r3, #24]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e0c0      	b.n	80018b8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d106      	bne.n	8001750 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f007 fece 	bl	80094ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2203      	movs	r2, #3
 8001754:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f004 f9de 	bl	8005b1e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001762:	2300      	movs	r3, #0
 8001764:	73fb      	strb	r3, [r7, #15]
 8001766:	e03e      	b.n	80017e6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001768:	7bfa      	ldrb	r2, [r7, #15]
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	440b      	add	r3, r1
 8001776:	3311      	adds	r3, #17
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800177c:	7bfa      	ldrb	r2, [r7, #15]
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	440b      	add	r3, r1
 800178a:	3310      	adds	r3, #16
 800178c:	7bfa      	ldrb	r2, [r7, #15]
 800178e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001790:	7bfa      	ldrb	r2, [r7, #15]
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	440b      	add	r3, r1
 800179e:	3313      	adds	r3, #19
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017a4:	7bfa      	ldrb	r2, [r7, #15]
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	440b      	add	r3, r1
 80017b2:	3320      	adds	r3, #32
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017b8:	7bfa      	ldrb	r2, [r7, #15]
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	4613      	mov	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	440b      	add	r3, r1
 80017c6:	3324      	adds	r3, #36	@ 0x24
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	440b      	add	r3, r1
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
 80017e2:	3301      	adds	r3, #1
 80017e4:	73fb      	strb	r3, [r7, #15]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	791b      	ldrb	r3, [r3, #4]
 80017ea:	7bfa      	ldrb	r2, [r7, #15]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d3bb      	bcc.n	8001768 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017f0:	2300      	movs	r3, #0
 80017f2:	73fb      	strb	r3, [r7, #15]
 80017f4:	e044      	b.n	8001880 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017f6:	7bfa      	ldrb	r2, [r7, #15]
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	440b      	add	r3, r1
 8001804:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800180c:	7bfa      	ldrb	r2, [r7, #15]
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	440b      	add	r3, r1
 800181a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800181e:	7bfa      	ldrb	r2, [r7, #15]
 8001820:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001822:	7bfa      	ldrb	r2, [r7, #15]
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	440b      	add	r3, r1
 8001830:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001838:	7bfa      	ldrb	r2, [r7, #15]
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	440b      	add	r3, r1
 8001846:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800184e:	7bfa      	ldrb	r2, [r7, #15]
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	440b      	add	r3, r1
 800185c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001864:	7bfa      	ldrb	r2, [r7, #15]
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	440b      	add	r3, r1
 8001872:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	3301      	adds	r3, #1
 800187e:	73fb      	strb	r3, [r7, #15]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	791b      	ldrb	r3, [r3, #4]
 8001884:	7bfa      	ldrb	r2, [r7, #15]
 8001886:	429a      	cmp	r2, r3
 8001888:	d3b5      	bcc.n	80017f6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6818      	ldr	r0, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3304      	adds	r3, #4
 8001892:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001896:	f004 f95d 	bl	8005b54 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7a9b      	ldrb	r3, [r3, #10]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d102      	bne.n	80018b6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f001 fc0e 	bl	80030d2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d101      	bne.n	80018d6 <HAL_PCD_Start+0x16>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e012      	b.n	80018fc <HAL_PCD_Start+0x3c>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f004 f904 	bl	8005af0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f005 fee1 	bl	80076b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f005 fee6 	bl	80076e2 <USB_ReadInterrupts>
 8001916:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 fb06 	bl	8001f34 <PCD_EP_ISR_Handler>

    return;
 8001928:	e110      	b.n	8001b4c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001930:	2b00      	cmp	r3, #0
 8001932:	d013      	beq.n	800195c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800193c:	b29a      	uxth	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001946:	b292      	uxth	r2, r2
 8001948:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f007 fe5e 	bl	800960e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001952:	2100      	movs	r1, #0
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 f8fc 	bl	8001b52 <HAL_PCD_SetAddress>

    return;
 800195a:	e0f7      	b.n	8001b4c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00c      	beq.n	8001980 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800196e:	b29a      	uxth	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001978:	b292      	uxth	r2, r2
 800197a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800197e:	e0e5      	b.n	8001b4c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00c      	beq.n	80019a4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001992:	b29a      	uxth	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800199c:	b292      	uxth	r2, r2
 800199e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80019a2:	e0d3      	b.n	8001b4c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d034      	beq.n	8001a18 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 0204 	bic.w	r2, r2, #4
 80019c0:	b292      	uxth	r2, r2
 80019c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0208 	bic.w	r2, r2, #8
 80019d8:	b292      	uxth	r2, r2
 80019da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d107      	bne.n	80019f8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019f0:	2100      	movs	r1, #0
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f007 fffe 	bl	80099f4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f007 fe41 	bl	8009680 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a10:	b292      	uxth	r2, r2
 8001a12:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001a16:	e099      	b.n	8001b4c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d027      	beq.n	8001a72 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f042 0208 	orr.w	r2, r2, #8
 8001a34:	b292      	uxth	r2, r2
 8001a36:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a4c:	b292      	uxth	r2, r2
 8001a4e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 0204 	orr.w	r2, r2, #4
 8001a64:	b292      	uxth	r2, r2
 8001a66:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f007 fdee 	bl	800964c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001a70:	e06c      	b.n	8001b4c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d040      	beq.n	8001afe <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a8e:	b292      	uxth	r2, r2
 8001a90:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d12b      	bne.n	8001af6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f042 0204 	orr.w	r2, r2, #4
 8001ab0:	b292      	uxth	r2, r2
 8001ab2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f042 0208 	orr.w	r2, r2, #8
 8001ac8:	b292      	uxth	r2, r2
 8001aca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001aec:	2101      	movs	r1, #1
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f007 ff80 	bl	80099f4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001af4:	e02a      	b.n	8001b4c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f007 fda8 	bl	800964c <HAL_PCD_SuspendCallback>
    return;
 8001afc:	e026      	b.n	8001b4c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00f      	beq.n	8001b28 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b1a:	b292      	uxth	r2, r2
 8001b1c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f007 fd66 	bl	80095f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b26:	e011      	b.n	8001b4c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00c      	beq.n	8001b4c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b44:	b292      	uxth	r2, r2
 8001b46:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001b4a:	bf00      	nop
  }
}
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_PCD_SetAddress+0x1a>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e012      	b.n	8001b92 <HAL_PCD_SetAddress+0x40>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	78fa      	ldrb	r2, [r7, #3]
 8001b78:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	78fa      	ldrb	r2, [r7, #3]
 8001b80:	4611      	mov	r1, r2
 8001b82:	4618      	mov	r0, r3
 8001b84:	f005 fd82 	bl	800768c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b084      	sub	sp, #16
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	4608      	mov	r0, r1
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4603      	mov	r3, r0
 8001baa:	70fb      	strb	r3, [r7, #3]
 8001bac:	460b      	mov	r3, r1
 8001bae:	803b      	strh	r3, [r7, #0]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	da0e      	bge.n	8001bde <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	f003 0207 	and.w	r2, r3, #7
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	3310      	adds	r3, #16
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	705a      	strb	r2, [r3, #1]
 8001bdc:	e00e      	b.n	8001bfc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bde:	78fb      	ldrb	r3, [r7, #3]
 8001be0:	f003 0207 	and.w	r2, r3, #7
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001c08:	883b      	ldrh	r3, [r7, #0]
 8001c0a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	78ba      	ldrb	r2, [r7, #2]
 8001c16:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c18:	78bb      	ldrb	r3, [r7, #2]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d102      	bne.n	8001c24 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <HAL_PCD_EP_Open+0x98>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e00e      	b.n	8001c50 <HAL_PCD_EP_Open+0xb6>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68f9      	ldr	r1, [r7, #12]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f003 ffa5 	bl	8005b90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001c4e:	7afb      	ldrb	r3, [r7, #11]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	da0e      	bge.n	8001c8a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	f003 0207 	and.w	r2, r3, #7
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	3310      	adds	r3, #16
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	4413      	add	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2201      	movs	r2, #1
 8001c86:	705a      	strb	r2, [r3, #1]
 8001c88:	e00e      	b.n	8001ca8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c8a:	78fb      	ldrb	r3, [r7, #3]
 8001c8c:	f003 0207 	and.w	r2, r3, #7
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_PCD_EP_Close+0x6a>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e00e      	b.n	8001ce0 <HAL_PCD_EP_Close+0x88>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68f9      	ldr	r1, [r7, #12]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f004 fc45 	bl	8006560 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cf8:	7afb      	ldrb	r3, [r7, #11]
 8001cfa:	f003 0207 	and.w	r2, r3, #7
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2200      	movs	r2, #0
 8001d26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d28:	7afb      	ldrb	r3, [r7, #11]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6979      	ldr	r1, [r7, #20]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f004 fdfd 	bl	800693a <USB_EPStartXfer>

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	460b      	mov	r3, r1
 8001d54:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d56:	78fb      	ldrb	r3, [r7, #3]
 8001d58:	f003 0207 	and.w	r2, r3, #7
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	440b      	add	r3, r1
 8001d68:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001d6c:	681b      	ldr	r3, [r3, #0]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b086      	sub	sp, #24
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	603b      	str	r3, [r7, #0]
 8001d86:	460b      	mov	r3, r1
 8001d88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d8a:	7afb      	ldrb	r3, [r7, #11]
 8001d8c:	f003 0207 	and.w	r2, r3, #7
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	3310      	adds	r3, #16
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dc6:	7afb      	ldrb	r3, [r7, #11]
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6979      	ldr	r1, [r7, #20]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f004 fdae 	bl	800693a <USB_EPStartXfer>

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	7912      	ldrb	r2, [r2, #4]
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e03e      	b.n	8001e84 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	da0e      	bge.n	8001e2c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	f003 0207 	and.w	r2, r3, #7
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	3310      	adds	r3, #16
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2201      	movs	r2, #1
 8001e28:	705a      	strb	r2, [r3, #1]
 8001e2a:	e00c      	b.n	8001e46 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e2c:	78fa      	ldrb	r2, [r7, #3]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d101      	bne.n	8001e66 <HAL_PCD_EP_SetStall+0x7e>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e00e      	b.n	8001e84 <HAL_PCD_EP_SetStall+0x9c>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68f9      	ldr	r1, [r7, #12]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f005 fb0f 	bl	8007498 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	7912      	ldrb	r2, [r2, #4]
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d901      	bls.n	8001eaa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e040      	b.n	8001f2c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	da0e      	bge.n	8001ed0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eb2:	78fb      	ldrb	r3, [r7, #3]
 8001eb4:	f003 0207 	and.w	r2, r3, #7
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	3310      	adds	r3, #16
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	705a      	strb	r2, [r3, #1]
 8001ece:	e00e      	b.n	8001eee <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	f003 0207 	and.w	r2, r3, #7
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d101      	bne.n	8001f0e <HAL_PCD_EP_ClrStall+0x82>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e00e      	b.n	8001f2c <HAL_PCD_EP_ClrStall+0xa0>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68f9      	ldr	r1, [r7, #12]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f005 fb0c 	bl	800753a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b092      	sub	sp, #72	@ 0x48
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f3c:	e333      	b.n	80025a6 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f46:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001f48:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	f003 030f 	and.w	r3, r3, #15
 8001f50:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8001f54:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f040 8108 	bne.w	800216e <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001f5e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001f60:	f003 0310 	and.w	r3, r3, #16
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d14c      	bne.n	8002002 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001f74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f78:	813b      	strh	r3, [r7, #8]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	893b      	ldrh	r3, [r7, #8]
 8001f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3310      	adds	r3, #16
 8001f90:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6812      	ldr	r2, [r2, #0]
 8001faa:	4413      	add	r3, r2
 8001fac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fb8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001fba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fbc:	695a      	ldr	r2, [r3, #20]
 8001fbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	441a      	add	r2, r3
 8001fc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fc6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001fc8:	2100      	movs	r1, #0
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f007 faf7 	bl	80095be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	7b1b      	ldrb	r3, [r3, #12]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 82e5 	beq.w	80025a6 <PCD_EP_ISR_Handler+0x672>
 8001fdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f040 82e0 	bne.w	80025a6 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	7b1b      	ldrb	r3, [r3, #12]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	731a      	strb	r2, [r3, #12]
 8002000:	e2d1      	b.n	80025a6 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002008:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002012:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002014:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002018:	2b00      	cmp	r3, #0
 800201a:	d032      	beq.n	8002082 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002024:	b29b      	uxth	r3, r3
 8002026:	461a      	mov	r2, r3
 8002028:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4413      	add	r3, r2
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	4413      	add	r3, r2
 8002036:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002040:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002042:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6818      	ldr	r0, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800204e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002050:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002052:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002054:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002056:	b29b      	uxth	r3, r3
 8002058:	f005 fb96 	bl	8007788 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	b29a      	uxth	r2, r3
 8002064:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002068:	4013      	ands	r3, r2
 800206a:	817b      	strh	r3, [r7, #10]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	897a      	ldrh	r2, [r7, #10]
 8002072:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002076:	b292      	uxth	r2, r2
 8002078:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f007 fa72 	bl	8009564 <HAL_PCD_SetupStageCallback>
 8002080:	e291      	b.n	80025a6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002082:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002086:	2b00      	cmp	r3, #0
 8002088:	f280 828d 	bge.w	80025a6 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	b29a      	uxth	r2, r3
 8002094:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002098:	4013      	ands	r3, r2
 800209a:	81fb      	strh	r3, [r7, #14]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	89fa      	ldrh	r2, [r7, #14]
 80020a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020a6:	b292      	uxth	r2, r2
 80020a8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4413      	add	r3, r2
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	4413      	add	r3, r2
 80020c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020d0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80020d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d019      	beq.n	800210e <PCD_EP_ISR_Handler+0x1da>
 80020da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d015      	beq.n	800210e <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6818      	ldr	r0, [r3, #0]
 80020e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020e8:	6959      	ldr	r1, [r3, #20]
 80020ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020ec:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80020ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	f005 fb48 	bl	8007788 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80020f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020fa:	695a      	ldr	r2, [r3, #20]
 80020fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	441a      	add	r2, r3
 8002102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002104:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002106:	2100      	movs	r1, #0
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f007 fa3d 	bl	8009588 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002116:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002118:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800211c:	2b00      	cmp	r3, #0
 800211e:	f040 8242 	bne.w	80025a6 <PCD_EP_ISR_Handler+0x672>
 8002122:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002124:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002128:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800212c:	f000 823b 	beq.w	80025a6 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	b29b      	uxth	r3, r3
 8002138:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800213c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002140:	81bb      	strh	r3, [r7, #12]
 8002142:	89bb      	ldrh	r3, [r7, #12]
 8002144:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002148:	81bb      	strh	r3, [r7, #12]
 800214a:	89bb      	ldrh	r3, [r7, #12]
 800214c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002150:	81bb      	strh	r3, [r7, #12]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	89bb      	ldrh	r3, [r7, #12]
 8002158:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800215c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002160:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002164:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002168:	b29b      	uxth	r3, r3
 800216a:	8013      	strh	r3, [r2, #0]
 800216c:	e21b      	b.n	80025a6 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002180:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002184:	2b00      	cmp	r3, #0
 8002186:	f280 80f1 	bge.w	800236c <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	b29a      	uxth	r2, r3
 800219c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80021a0:	4013      	ands	r3, r2
 80021a2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80021b4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80021b8:	b292      	uxth	r2, r2
 80021ba:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80021bc:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	4413      	add	r3, r2
 80021d0:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80021d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021d4:	7b1b      	ldrb	r3, [r3, #12]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d123      	bne.n	8002222 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	461a      	mov	r2, r3
 80021e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021fe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8002202:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 808b 	beq.w	8002322 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6818      	ldr	r0, [r3, #0]
 8002210:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002212:	6959      	ldr	r1, [r3, #20]
 8002214:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002216:	88da      	ldrh	r2, [r3, #6]
 8002218:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800221c:	f005 fab4 	bl	8007788 <USB_ReadPMA>
 8002220:	e07f      	b.n	8002322 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002224:	78db      	ldrb	r3, [r3, #3]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d109      	bne.n	800223e <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800222a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800222c:	461a      	mov	r2, r3
 800222e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f9c6 	bl	80025c2 <HAL_PCD_EP_DB_Receive>
 8002236:	4603      	mov	r3, r0
 8002238:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800223c:	e071      	b.n	8002322 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	b29b      	uxth	r3, r3
 8002250:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002254:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002258:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	441a      	add	r2, r3
 8002268:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800226a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800226e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002272:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002276:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800227a:	b29b      	uxth	r3, r3
 800227c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	b29b      	uxth	r3, r3
 8002290:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d022      	beq.n	80022de <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	461a      	mov	r2, r3
 80022a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	4413      	add	r3, r2
 80022b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022bc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80022c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d02c      	beq.n	8002322 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022ce:	6959      	ldr	r1, [r3, #20]
 80022d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022d2:	891a      	ldrh	r2, [r3, #8]
 80022d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80022d8:	f005 fa56 	bl	8007788 <USB_ReadPMA>
 80022dc:	e021      	b.n	8002322 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	461a      	mov	r2, r3
 80022ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6812      	ldr	r2, [r2, #0]
 80022f6:	4413      	add	r3, r2
 80022f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002302:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8002306:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800230a:	2b00      	cmp	r3, #0
 800230c:	d009      	beq.n	8002322 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002314:	6959      	ldr	r1, [r3, #20]
 8002316:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002318:	895a      	ldrh	r2, [r3, #10]
 800231a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800231e:	f005 fa33 	bl	8007788 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002324:	69da      	ldr	r2, [r3, #28]
 8002326:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800232a:	441a      	add	r2, r3
 800232c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800232e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002330:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002332:	695a      	ldr	r2, [r3, #20]
 8002334:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002338:	441a      	add	r2, r3
 800233a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800233c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800233e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d005      	beq.n	8002352 <PCD_EP_ISR_Handler+0x41e>
 8002346:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800234a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	429a      	cmp	r2, r3
 8002350:	d206      	bcs.n	8002360 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	4619      	mov	r1, r3
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f007 f915 	bl	8009588 <HAL_PCD_DataOutStageCallback>
 800235e:	e005      	b.n	800236c <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002366:	4618      	mov	r0, r3
 8002368:	f004 fae7 	bl	800693a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800236c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800236e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 8117 	beq.w	80025a6 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8002378:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	3310      	adds	r3, #16
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	b29b      	uxth	r3, r3
 800239e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80023a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023a6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	461a      	mov	r2, r3
 80023ae:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	441a      	add	r2, r3
 80023b6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80023b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80023c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023c6:	78db      	ldrb	r3, [r3, #3]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	f040 80a1 	bne.w	8002510 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80023ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80023d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023d6:	7b1b      	ldrb	r3, [r3, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 8092 	beq.w	8002502 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80023e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d046      	beq.n	8002476 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023ea:	785b      	ldrb	r3, [r3, #1]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d126      	bne.n	800243e <PCD_EP_ISR_Handler+0x50a>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023fe:	b29b      	uxth	r3, r3
 8002400:	461a      	mov	r2, r3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	4413      	add	r3, r2
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	00da      	lsls	r2, r3, #3
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	4413      	add	r3, r2
 8002412:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	b29b      	uxth	r3, r3
 800241e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002422:	b29a      	uxth	r2, r3
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	801a      	strh	r2, [r3, #0]
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	b29b      	uxth	r3, r3
 800242e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002436:	b29a      	uxth	r2, r3
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	801a      	strh	r2, [r3, #0]
 800243c:	e061      	b.n	8002502 <PCD_EP_ISR_Handler+0x5ce>
 800243e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002440:	785b      	ldrb	r3, [r3, #1]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d15d      	bne.n	8002502 <PCD_EP_ISR_Handler+0x5ce>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	61fb      	str	r3, [r7, #28]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002454:	b29b      	uxth	r3, r3
 8002456:	461a      	mov	r2, r3
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	4413      	add	r3, r2
 800245c:	61fb      	str	r3, [r7, #28]
 800245e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	00da      	lsls	r2, r3, #3
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	4413      	add	r3, r2
 8002468:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	2200      	movs	r2, #0
 8002472:	801a      	strh	r2, [r3, #0]
 8002474:	e045      	b.n	8002502 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800247c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800247e:	785b      	ldrb	r3, [r3, #1]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d126      	bne.n	80024d2 <PCD_EP_ISR_Handler+0x59e>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	627b      	str	r3, [r7, #36]	@ 0x24
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002492:	b29b      	uxth	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002498:	4413      	add	r3, r2
 800249a:	627b      	str	r3, [r7, #36]	@ 0x24
 800249c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	00da      	lsls	r2, r3, #3
 80024a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a4:	4413      	add	r3, r2
 80024a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80024aa:	623b      	str	r3, [r7, #32]
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	881b      	ldrh	r3, [r3, #0]
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	801a      	strh	r2, [r3, #0]
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	801a      	strh	r2, [r3, #0]
 80024d0:	e017      	b.n	8002502 <PCD_EP_ISR_Handler+0x5ce>
 80024d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024d4:	785b      	ldrb	r3, [r3, #1]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d113      	bne.n	8002502 <PCD_EP_ISR_Handler+0x5ce>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	461a      	mov	r2, r3
 80024e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024e8:	4413      	add	r3, r2
 80024ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	00da      	lsls	r2, r3, #3
 80024f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024f4:	4413      	add	r3, r2
 80024f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80024fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024fe:	2200      	movs	r2, #0
 8002500:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002502:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	4619      	mov	r1, r3
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f007 f858 	bl	80095be <HAL_PCD_DataInStageCallback>
 800250e:	e04a      	b.n	80025a6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002510:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002516:	2b00      	cmp	r3, #0
 8002518:	d13f      	bne.n	800259a <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002522:	b29b      	uxth	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4413      	add	r3, r2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6812      	ldr	r2, [r2, #0]
 8002532:	4413      	add	r3, r2
 8002534:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800253e:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8002540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002542:	699a      	ldr	r2, [r3, #24]
 8002544:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002546:	429a      	cmp	r2, r3
 8002548:	d906      	bls.n	8002558 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800254a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800254c:	699a      	ldr	r2, [r3, #24]
 800254e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002550:	1ad2      	subs	r2, r2, r3
 8002552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002554:	619a      	str	r2, [r3, #24]
 8002556:	e002      	b.n	800255e <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002558:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800255a:	2200      	movs	r2, #0
 800255c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800255e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d106      	bne.n	8002574 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002566:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	4619      	mov	r1, r3
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f007 f826 	bl	80095be <HAL_PCD_DataInStageCallback>
 8002572:	e018      	b.n	80025a6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002574:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002576:	695a      	ldr	r2, [r3, #20]
 8002578:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800257a:	441a      	add	r2, r3
 800257c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800257e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002580:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002582:	69da      	ldr	r2, [r3, #28]
 8002584:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002586:	441a      	add	r2, r3
 8002588:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800258a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002592:	4618      	mov	r0, r3
 8002594:	f004 f9d1 	bl	800693a <USB_EPStartXfer>
 8002598:	e005      	b.n	80025a6 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800259a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800259c:	461a      	mov	r2, r3
 800259e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f917 	bl	80027d4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	b21b      	sxth	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f6ff acc3 	blt.w	8001f3e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3748      	adds	r7, #72	@ 0x48
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b088      	sub	sp, #32
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	60f8      	str	r0, [r7, #12]
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	4613      	mov	r3, r2
 80025ce:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d07c      	beq.n	80026d4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	4413      	add	r3, r2
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	4413      	add	r3, r2
 80025f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025fe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	699a      	ldr	r2, [r3, #24]
 8002604:	8b7b      	ldrh	r3, [r7, #26]
 8002606:	429a      	cmp	r2, r3
 8002608:	d306      	bcc.n	8002618 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	699a      	ldr	r2, [r3, #24]
 800260e:	8b7b      	ldrh	r3, [r7, #26]
 8002610:	1ad2      	subs	r2, r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	619a      	str	r2, [r3, #24]
 8002616:	e002      	b.n	800261e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2200      	movs	r2, #0
 800261c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d123      	bne.n	800266e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	b29b      	uxth	r3, r3
 8002638:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800263c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002640:	833b      	strh	r3, [r7, #24]
 8002642:	8b3b      	ldrh	r3, [r7, #24]
 8002644:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002648:	833b      	strh	r3, [r7, #24]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	441a      	add	r2, r3
 8002658:	8b3b      	ldrh	r3, [r7, #24]
 800265a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800265e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002662:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800266a:	b29b      	uxth	r3, r3
 800266c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002674:	2b00      	cmp	r3, #0
 8002676:	d01f      	beq.n	80026b8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	b29b      	uxth	r3, r3
 800268a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800268e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002692:	82fb      	strh	r3, [r7, #22]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	441a      	add	r2, r3
 80026a2:	8afb      	ldrh	r3, [r7, #22]
 80026a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80026a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80026ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80026b8:	8b7b      	ldrh	r3, [r7, #26]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 8085 	beq.w	80027ca <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	6959      	ldr	r1, [r3, #20]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	891a      	ldrh	r2, [r3, #8]
 80026cc:	8b7b      	ldrh	r3, [r7, #26]
 80026ce:	f005 f85b 	bl	8007788 <USB_ReadPMA>
 80026d2:	e07a      	b.n	80027ca <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026dc:	b29b      	uxth	r3, r3
 80026de:	461a      	mov	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4413      	add	r3, r2
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	6812      	ldr	r2, [r2, #0]
 80026ec:	4413      	add	r3, r2
 80026ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026f8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	8b7b      	ldrh	r3, [r7, #26]
 8002700:	429a      	cmp	r2, r3
 8002702:	d306      	bcc.n	8002712 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	699a      	ldr	r2, [r3, #24]
 8002708:	8b7b      	ldrh	r3, [r7, #26]
 800270a:	1ad2      	subs	r2, r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	619a      	str	r2, [r3, #24]
 8002710:	e002      	b.n	8002718 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2200      	movs	r2, #0
 8002716:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d123      	bne.n	8002768 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	461a      	mov	r2, r3
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	b29b      	uxth	r3, r3
 8002732:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800273a:	83fb      	strh	r3, [r7, #30]
 800273c:	8bfb      	ldrh	r3, [r7, #30]
 800273e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002742:	83fb      	strh	r3, [r7, #30]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	461a      	mov	r2, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	441a      	add	r2, r3
 8002752:	8bfb      	ldrh	r3, [r7, #30]
 8002754:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002758:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800275c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002764:	b29b      	uxth	r3, r3
 8002766:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002768:	88fb      	ldrh	r3, [r7, #6]
 800276a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800276e:	2b00      	cmp	r3, #0
 8002770:	d11f      	bne.n	80027b2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	461a      	mov	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	b29b      	uxth	r3, r3
 8002784:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002788:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800278c:	83bb      	strh	r3, [r7, #28]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	441a      	add	r2, r3
 800279c:	8bbb      	ldrh	r3, [r7, #28]
 800279e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027b2:	8b7b      	ldrh	r3, [r7, #26]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	6959      	ldr	r1, [r3, #20]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	895a      	ldrh	r2, [r3, #10]
 80027c4:	8b7b      	ldrh	r3, [r7, #26]
 80027c6:	f004 ffdf 	bl	8007788 <USB_ReadPMA>
    }
  }

  return count;
 80027ca:	8b7b      	ldrh	r3, [r7, #26]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3720      	adds	r7, #32
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b0a6      	sub	sp, #152	@ 0x98
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	4613      	mov	r3, r2
 80027e0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027e2:	88fb      	ldrh	r3, [r7, #6]
 80027e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 81f7 	beq.w	8002bdc <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	4413      	add	r3, r2
 8002808:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002812:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	699a      	ldr	r2, [r3, #24]
 800281a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800281e:	429a      	cmp	r2, r3
 8002820:	d907      	bls.n	8002832 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	699a      	ldr	r2, [r3, #24]
 8002826:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800282a:	1ad2      	subs	r2, r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	619a      	str	r2, [r3, #24]
 8002830:	e002      	b.n	8002838 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2200      	movs	r2, #0
 8002836:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	2b00      	cmp	r3, #0
 800283e:	f040 80e1 	bne.w	8002a04 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	785b      	ldrb	r3, [r3, #1]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d126      	bne.n	8002898 <HAL_PCD_EP_DB_Transmit+0xc4>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002858:	b29b      	uxth	r3, r3
 800285a:	461a      	mov	r2, r3
 800285c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800285e:	4413      	add	r3, r2
 8002860:	633b      	str	r3, [r7, #48]	@ 0x30
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	00da      	lsls	r2, r3, #3
 8002868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800286a:	4413      	add	r3, r2
 800286c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	b29b      	uxth	r3, r3
 8002878:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800287c:	b29a      	uxth	r2, r3
 800287e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002880:	801a      	strh	r2, [r3, #0]
 8002882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	b29b      	uxth	r3, r3
 8002888:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800288c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002890:	b29a      	uxth	r2, r3
 8002892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002894:	801a      	strh	r2, [r3, #0]
 8002896:	e01a      	b.n	80028ce <HAL_PCD_EP_DB_Transmit+0xfa>
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	785b      	ldrb	r3, [r3, #1]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d116      	bne.n	80028ce <HAL_PCD_EP_DB_Transmit+0xfa>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	461a      	mov	r2, r3
 80028b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028b4:	4413      	add	r3, r2
 80028b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	00da      	lsls	r2, r3, #3
 80028be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028c0:	4413      	add	r3, r2
 80028c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80028c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80028c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ca:	2200      	movs	r2, #0
 80028cc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	785b      	ldrb	r3, [r3, #1]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d126      	bne.n	800292a <HAL_PCD_EP_DB_Transmit+0x156>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	623b      	str	r3, [r7, #32]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	461a      	mov	r2, r3
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	4413      	add	r3, r2
 80028f2:	623b      	str	r3, [r7, #32]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	00da      	lsls	r2, r3, #3
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	4413      	add	r3, r2
 80028fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002902:	61fb      	str	r3, [r7, #28]
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	b29b      	uxth	r3, r3
 800290a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800290e:	b29a      	uxth	r2, r3
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	801a      	strh	r2, [r3, #0]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	b29b      	uxth	r3, r3
 800291a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800291e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002922:	b29a      	uxth	r2, r3
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	801a      	strh	r2, [r3, #0]
 8002928:	e017      	b.n	800295a <HAL_PCD_EP_DB_Transmit+0x186>
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	785b      	ldrb	r3, [r3, #1]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d113      	bne.n	800295a <HAL_PCD_EP_DB_Transmit+0x186>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800293a:	b29b      	uxth	r3, r3
 800293c:	461a      	mov	r2, r3
 800293e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002940:	4413      	add	r3, r2
 8002942:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	00da      	lsls	r2, r3, #3
 800294a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800294c:	4413      	add	r3, r2
 800294e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002952:	627b      	str	r3, [r7, #36]	@ 0x24
 8002954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002956:	2200      	movs	r2, #0
 8002958:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	78db      	ldrb	r3, [r3, #3]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d123      	bne.n	80029aa <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	b29b      	uxth	r3, r3
 8002974:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002978:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800297c:	837b      	strh	r3, [r7, #26]
 800297e:	8b7b      	ldrh	r3, [r7, #26]
 8002980:	f083 0320 	eor.w	r3, r3, #32
 8002984:	837b      	strh	r3, [r7, #26]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	441a      	add	r2, r3
 8002994:	8b7b      	ldrh	r3, [r7, #26]
 8002996:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800299a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800299e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	4619      	mov	r1, r3
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f006 fe04 	bl	80095be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d01f      	beq.n	8002a00 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	461a      	mov	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029da:	833b      	strh	r3, [r7, #24]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	441a      	add	r2, r3
 80029ea:	8b3b      	ldrh	r3, [r7, #24]
 80029ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	e31f      	b.n	8003044 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d021      	beq.n	8002a52 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a28:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	441a      	add	r2, r3
 8002a3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	f040 82ca 	bne.w	8002ff2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	695a      	ldr	r2, [r3, #20]
 8002a62:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002a66:	441a      	add	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	69da      	ldr	r2, [r3, #28]
 8002a70:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002a74:	441a      	add	r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	6a1a      	ldr	r2, [r3, #32]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d309      	bcc.n	8002a9a <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	6a1a      	ldr	r2, [r3, #32]
 8002a90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a92:	1ad2      	subs	r2, r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	621a      	str	r2, [r3, #32]
 8002a98:	e015      	b.n	8002ac6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d107      	bne.n	8002ab2 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8002aa2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002aa6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002ab0:	e009      	b.n	8002ac6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	785b      	ldrb	r3, [r3, #1]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d15f      	bne.n	8002b8e <HAL_PCD_EP_DB_Transmit+0x3ba>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ae2:	4413      	add	r3, r2
 8002ae4:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	00da      	lsls	r2, r3, #3
 8002aec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002aee:	4413      	add	r3, r2
 8002af0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b04:	801a      	strh	r2, [r3, #0]
 8002b06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10a      	bne.n	8002b22 <HAL_PCD_EP_DB_Transmit+0x34e>
 8002b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b1e:	801a      	strh	r2, [r3, #0]
 8002b20:	e051      	b.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002b22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b24:	2b3e      	cmp	r3, #62	@ 0x3e
 8002b26:	d816      	bhi.n	8002b56 <HAL_PCD_EP_DB_Transmit+0x382>
 8002b28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b2a:	085b      	lsrs	r3, r3, #1
 8002b2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d002      	beq.n	8002b3e <HAL_PCD_EP_DB_Transmit+0x36a>
 8002b38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	029b      	lsls	r3, r3, #10
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b52:	801a      	strh	r2, [r3, #0]
 8002b54:	e037      	b.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002b56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b58:	095b      	lsrs	r3, r3, #5
 8002b5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b5e:	f003 031f 	and.w	r3, r3, #31
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d102      	bne.n	8002b6c <HAL_PCD_EP_DB_Transmit+0x398>
 8002b66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	029b      	lsls	r3, r3, #10
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b8a:	801a      	strh	r2, [r3, #0]
 8002b8c:	e01b      	b.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	785b      	ldrb	r3, [r3, #1]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d117      	bne.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002baa:	4413      	add	r3, r2
 8002bac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	00da      	lsls	r2, r3, #3
 8002bb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002bbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bc4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	6959      	ldr	r1, [r3, #20]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	891a      	ldrh	r2, [r3, #8]
 8002bd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	f004 fd94 	bl	8007702 <USB_WritePMA>
 8002bda:	e20a      	b.n	8002ff2 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	461a      	mov	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4413      	add	r3, r2
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	6812      	ldr	r2, [r2, #0]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c00:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	699a      	ldr	r2, [r3, #24]
 8002c08:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d307      	bcc.n	8002c20 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	699a      	ldr	r2, [r3, #24]
 8002c14:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002c18:	1ad2      	subs	r2, r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	619a      	str	r2, [r3, #24]
 8002c1e:	e002      	b.n	8002c26 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2200      	movs	r2, #0
 8002c24:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f040 80f6 	bne.w	8002e1c <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	785b      	ldrb	r3, [r3, #1]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d126      	bne.n	8002c86 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	677b      	str	r3, [r7, #116]	@ 0x74
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	461a      	mov	r2, r3
 8002c4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c4c:	4413      	add	r3, r2
 8002c4e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	00da      	lsls	r2, r3, #3
 8002c56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c58:	4413      	add	r3, r2
 8002c5a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002c5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c6e:	801a      	strh	r2, [r3, #0]
 8002c70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c82:	801a      	strh	r2, [r3, #0]
 8002c84:	e01a      	b.n	8002cbc <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	785b      	ldrb	r3, [r3, #1]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d116      	bne.n	8002cbc <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ca2:	4413      	add	r3, r2
 8002ca4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	00da      	lsls	r2, r3, #3
 8002cac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002cae:	4413      	add	r3, r2
 8002cb0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002cb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002cb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cb8:	2200      	movs	r2, #0
 8002cba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	785b      	ldrb	r3, [r3, #1]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d12f      	bne.n	8002d2c <HAL_PCD_EP_DB_Transmit+0x558>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	00da      	lsls	r2, r3, #3
 8002cf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002cfa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002cfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d10:	801a      	strh	r2, [r3, #0]
 8002d12:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d28:	801a      	strh	r2, [r3, #0]
 8002d2a:	e01c      	b.n	8002d66 <HAL_PCD_EP_DB_Transmit+0x592>
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	785b      	ldrb	r3, [r3, #1]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d118      	bne.n	8002d66 <HAL_PCD_EP_DB_Transmit+0x592>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	461a      	mov	r2, r3
 8002d40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d44:	4413      	add	r3, r2
 8002d46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	00da      	lsls	r2, r3, #3
 8002d50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d54:	4413      	add	r3, r2
 8002d56:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002d5a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d62:	2200      	movs	r2, #0
 8002d64:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	78db      	ldrb	r3, [r3, #3]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d127      	bne.n	8002dbe <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	461a      	mov	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d88:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002d8c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002d90:	f083 0320 	eor.w	r3, r3, #32
 8002d94:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	441a      	add	r2, r3
 8002da6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002daa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002dae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002db2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002db6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f006 fbfa 	bl	80095be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d121      	bne.n	8002e18 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dee:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	461a      	mov	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	441a      	add	r2, r3
 8002e00:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8002e04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	e113      	b.n	8003044 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e1c:	88fb      	ldrh	r3, [r7, #6]
 8002e1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d121      	bne.n	8002e6a <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e40:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	441a      	add	r2, r3
 8002e52:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002e56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	f040 80be 	bne.w	8002ff2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	695a      	ldr	r2, [r3, #20]
 8002e7a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002e7e:	441a      	add	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	69da      	ldr	r2, [r3, #28]
 8002e88:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002e8c:	441a      	add	r2, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	6a1a      	ldr	r2, [r3, #32]
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d309      	bcc.n	8002eb2 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	6a1a      	ldr	r2, [r3, #32]
 8002ea8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002eaa:	1ad2      	subs	r2, r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	621a      	str	r2, [r3, #32]
 8002eb0:	e015      	b.n	8002ede <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d107      	bne.n	8002eca <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8002eba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002ebe:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002ec8:	e009      	b.n	8002ede <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	785b      	ldrb	r3, [r3, #1]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d15f      	bne.n	8002fac <HAL_PCD_EP_DB_Transmit+0x7d8>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	461a      	mov	r2, r3
 8002efe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f00:	4413      	add	r3, r2
 8002f02:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	00da      	lsls	r2, r3, #3
 8002f0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002f12:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f16:	881b      	ldrh	r3, [r3, #0]
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f22:	801a      	strh	r2, [r3, #0]
 8002f24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10a      	bne.n	8002f40 <HAL_PCD_EP_DB_Transmit+0x76c>
 8002f2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f3c:	801a      	strh	r2, [r3, #0]
 8002f3e:	e04e      	b.n	8002fde <HAL_PCD_EP_DB_Transmit+0x80a>
 8002f40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f42:	2b3e      	cmp	r3, #62	@ 0x3e
 8002f44:	d816      	bhi.n	8002f74 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8002f46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f48:	085b      	lsrs	r3, r3, #1
 8002f4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <HAL_PCD_EP_DB_Transmit+0x788>
 8002f56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f58:	3301      	adds	r3, #1
 8002f5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	029b      	lsls	r3, r3, #10
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f70:	801a      	strh	r2, [r3, #0]
 8002f72:	e034      	b.n	8002fde <HAL_PCD_EP_DB_Transmit+0x80a>
 8002f74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f7c:	f003 031f 	and.w	r3, r3, #31
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d102      	bne.n	8002f8a <HAL_PCD_EP_DB_Transmit+0x7b6>
 8002f84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f86:	3b01      	subs	r3, #1
 8002f88:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	029b      	lsls	r3, r3, #10
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fa8:	801a      	strh	r2, [r3, #0]
 8002faa:	e018      	b.n	8002fde <HAL_PCD_EP_DB_Transmit+0x80a>
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	785b      	ldrb	r3, [r3, #1]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d114      	bne.n	8002fde <HAL_PCD_EP_DB_Transmit+0x80a>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fc2:	4413      	add	r3, r2
 8002fc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	00da      	lsls	r2, r3, #3
 8002fcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fce:	4413      	add	r3, r2
 8002fd0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002fd4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002fd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fdc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	6959      	ldr	r1, [r3, #20]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	895a      	ldrh	r2, [r3, #10]
 8002fea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	f004 fb88 	bl	8007702 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	b29b      	uxth	r3, r3
 8003004:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003008:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800300c:	82fb      	strh	r3, [r7, #22]
 800300e:	8afb      	ldrh	r3, [r7, #22]
 8003010:	f083 0310 	eor.w	r3, r3, #16
 8003014:	82fb      	strh	r3, [r7, #22]
 8003016:	8afb      	ldrh	r3, [r7, #22]
 8003018:	f083 0320 	eor.w	r3, r3, #32
 800301c:	82fb      	strh	r3, [r7, #22]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	461a      	mov	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	441a      	add	r2, r3
 800302c:	8afb      	ldrh	r3, [r7, #22]
 800302e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003032:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003036:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800303a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800303e:	b29b      	uxth	r3, r3
 8003040:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3798      	adds	r7, #152	@ 0x98
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	607b      	str	r3, [r7, #4]
 8003056:	460b      	mov	r3, r1
 8003058:	817b      	strh	r3, [r7, #10]
 800305a:	4613      	mov	r3, r2
 800305c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800305e:	897b      	ldrh	r3, [r7, #10]
 8003060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003064:	b29b      	uxth	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00b      	beq.n	8003082 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800306a:	897b      	ldrh	r3, [r7, #10]
 800306c:	f003 0207 	and.w	r2, r3, #7
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	3310      	adds	r3, #16
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4413      	add	r3, r2
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	e009      	b.n	8003096 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003082:	897a      	ldrh	r2, [r7, #10]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	4413      	add	r3, r2
 8003094:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003096:	893b      	ldrh	r3, [r7, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d107      	bne.n	80030ac <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	2200      	movs	r2, #0
 80030a0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	80da      	strh	r2, [r3, #6]
 80030aa:	e00b      	b.n	80030c4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	2201      	movs	r2, #1
 80030b0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	b29a      	uxth	r2, r3
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	371c      	adds	r7, #28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b085      	sub	sp, #20
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800310a:	b29b      	uxth	r3, r3
 800310c:	f043 0302 	orr.w	r3, r3, #2
 8003110:	b29a      	uxth	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d141      	bne.n	80031ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003136:	4b4b      	ldr	r3, [pc, #300]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800313e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003142:	d131      	bne.n	80031a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003144:	4b47      	ldr	r3, [pc, #284]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003146:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800314a:	4a46      	ldr	r2, [pc, #280]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800314c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003150:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003154:	4b43      	ldr	r3, [pc, #268]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800315c:	4a41      	ldr	r2, [pc, #260]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800315e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003162:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003164:	4b40      	ldr	r3, [pc, #256]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2232      	movs	r2, #50	@ 0x32
 800316a:	fb02 f303 	mul.w	r3, r2, r3
 800316e:	4a3f      	ldr	r2, [pc, #252]	@ (800326c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003170:	fba2 2303 	umull	r2, r3, r2, r3
 8003174:	0c9b      	lsrs	r3, r3, #18
 8003176:	3301      	adds	r3, #1
 8003178:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800317a:	e002      	b.n	8003182 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	3b01      	subs	r3, #1
 8003180:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003182:	4b38      	ldr	r3, [pc, #224]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800318a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800318e:	d102      	bne.n	8003196 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f2      	bne.n	800317c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003196:	4b33      	ldr	r3, [pc, #204]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800319e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031a2:	d158      	bne.n	8003256 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e057      	b.n	8003258 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80031b8:	e04d      	b.n	8003256 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031c0:	d141      	bne.n	8003246 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031c2:	4b28      	ldr	r3, [pc, #160]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ce:	d131      	bne.n	8003234 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031d0:	4b24      	ldr	r3, [pc, #144]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031d6:	4a23      	ldr	r2, [pc, #140]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031e0:	4b20      	ldr	r3, [pc, #128]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2232      	movs	r2, #50	@ 0x32
 80031f6:	fb02 f303 	mul.w	r3, r2, r3
 80031fa:	4a1c      	ldr	r2, [pc, #112]	@ (800326c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003200:	0c9b      	lsrs	r3, r3, #18
 8003202:	3301      	adds	r3, #1
 8003204:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003206:	e002      	b.n	800320e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	3b01      	subs	r3, #1
 800320c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800320e:	4b15      	ldr	r3, [pc, #84]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800321a:	d102      	bne.n	8003222 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f2      	bne.n	8003208 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003222:	4b10      	ldr	r3, [pc, #64]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800322a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800322e:	d112      	bne.n	8003256 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e011      	b.n	8003258 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003234:	4b0b      	ldr	r3, [pc, #44]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800323a:	4a0a      	ldr	r2, [pc, #40]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003240:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003244:	e007      	b.n	8003256 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003246:	4b07      	ldr	r3, [pc, #28]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800324e:	4a05      	ldr	r2, [pc, #20]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003250:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003254:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	40007000 	.word	0x40007000
 8003268:	20000000 	.word	0x20000000
 800326c:	431bde83 	.word	0x431bde83

08003270 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003274:	4b05      	ldr	r3, [pc, #20]	@ (800328c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	4a04      	ldr	r2, [pc, #16]	@ (800328c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800327a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800327e:	6093      	str	r3, [r2, #8]
}
 8003280:	bf00      	nop
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40007000 	.word	0x40007000

08003290 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e2fe      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d075      	beq.n	800339a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ae:	4b97      	ldr	r3, [pc, #604]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032b8:	4b94      	ldr	r3, [pc, #592]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f003 0303 	and.w	r3, r3, #3
 80032c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	2b0c      	cmp	r3, #12
 80032c6:	d102      	bne.n	80032ce <HAL_RCC_OscConfig+0x3e>
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	2b03      	cmp	r3, #3
 80032cc:	d002      	beq.n	80032d4 <HAL_RCC_OscConfig+0x44>
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d10b      	bne.n	80032ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d4:	4b8d      	ldr	r3, [pc, #564]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d05b      	beq.n	8003398 <HAL_RCC_OscConfig+0x108>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d157      	bne.n	8003398 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e2d9      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032f4:	d106      	bne.n	8003304 <HAL_RCC_OscConfig+0x74>
 80032f6:	4b85      	ldr	r3, [pc, #532]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a84      	ldr	r2, [pc, #528]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80032fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	e01d      	b.n	8003340 <HAL_RCC_OscConfig+0xb0>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800330c:	d10c      	bne.n	8003328 <HAL_RCC_OscConfig+0x98>
 800330e:	4b7f      	ldr	r3, [pc, #508]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a7e      	ldr	r2, [pc, #504]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 8003314:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	4b7c      	ldr	r3, [pc, #496]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a7b      	ldr	r2, [pc, #492]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 8003320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	e00b      	b.n	8003340 <HAL_RCC_OscConfig+0xb0>
 8003328:	4b78      	ldr	r3, [pc, #480]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a77      	ldr	r2, [pc, #476]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 800332e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	4b75      	ldr	r3, [pc, #468]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a74      	ldr	r2, [pc, #464]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 800333a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800333e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d013      	beq.n	8003370 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fd ff2a 	bl	80011a0 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003350:	f7fd ff26 	bl	80011a0 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b64      	cmp	r3, #100	@ 0x64
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e29e      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003362:	4b6a      	ldr	r3, [pc, #424]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0xc0>
 800336e:	e014      	b.n	800339a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003370:	f7fd ff16 	bl	80011a0 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003378:	f7fd ff12 	bl	80011a0 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b64      	cmp	r3, #100	@ 0x64
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e28a      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800338a:	4b60      	ldr	r3, [pc, #384]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f0      	bne.n	8003378 <HAL_RCC_OscConfig+0xe8>
 8003396:	e000      	b.n	800339a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d075      	beq.n	8003492 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033a6:	4b59      	ldr	r3, [pc, #356]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033b0:	4b56      	ldr	r3, [pc, #344]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	2b0c      	cmp	r3, #12
 80033be:	d102      	bne.n	80033c6 <HAL_RCC_OscConfig+0x136>
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d002      	beq.n	80033cc <HAL_RCC_OscConfig+0x13c>
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d11f      	bne.n	800340c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033cc:	4b4f      	ldr	r3, [pc, #316]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_RCC_OscConfig+0x154>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e25d      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e4:	4b49      	ldr	r3, [pc, #292]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	061b      	lsls	r3, r3, #24
 80033f2:	4946      	ldr	r1, [pc, #280]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033f8:	4b45      	ldr	r3, [pc, #276]	@ (8003510 <HAL_RCC_OscConfig+0x280>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fd fa69 	bl	80008d4 <HAL_InitTick>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d043      	beq.n	8003490 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e249      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d023      	beq.n	800345c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003414:	4b3d      	ldr	r3, [pc, #244]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a3c      	ldr	r2, [pc, #240]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 800341a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800341e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7fd febe 	bl	80011a0 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003428:	f7fd feba 	bl	80011a0 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e232      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800343a:	4b34      	ldr	r3, [pc, #208]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003446:	4b31      	ldr	r3, [pc, #196]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	061b      	lsls	r3, r3, #24
 8003454:	492d      	ldr	r1, [pc, #180]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 8003456:	4313      	orrs	r3, r2
 8003458:	604b      	str	r3, [r1, #4]
 800345a:	e01a      	b.n	8003492 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800345c:	4b2b      	ldr	r3, [pc, #172]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a2a      	ldr	r2, [pc, #168]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 8003462:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7fd fe9a 	bl	80011a0 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003470:	f7fd fe96 	bl	80011a0 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e20e      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003482:	4b22      	ldr	r3, [pc, #136]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0x1e0>
 800348e:	e000      	b.n	8003492 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003490:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d041      	beq.n	8003522 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d01c      	beq.n	80034e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034a6:	4b19      	ldr	r3, [pc, #100]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80034a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034ac:	4a17      	ldr	r2, [pc, #92]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b6:	f7fd fe73 	bl	80011a0 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034be:	f7fd fe6f 	bl	80011a0 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e1e7      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034d0:	4b0e      	ldr	r3, [pc, #56]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80034d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0ef      	beq.n	80034be <HAL_RCC_OscConfig+0x22e>
 80034de:	e020      	b.n	8003522 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034e0:	4b0a      	ldr	r3, [pc, #40]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80034e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034e6:	4a09      	ldr	r2, [pc, #36]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80034e8:	f023 0301 	bic.w	r3, r3, #1
 80034ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f0:	f7fd fe56 	bl	80011a0 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034f6:	e00d      	b.n	8003514 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f8:	f7fd fe52 	bl	80011a0 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d906      	bls.n	8003514 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e1ca      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
 800350a:	bf00      	nop
 800350c:	40021000 	.word	0x40021000
 8003510:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003514:	4b8c      	ldr	r3, [pc, #560]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 8003516:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1ea      	bne.n	80034f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 80a6 	beq.w	800367c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003530:	2300      	movs	r3, #0
 8003532:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003534:	4b84      	ldr	r3, [pc, #528]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 8003536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_RCC_OscConfig+0x2b4>
 8003540:	2301      	movs	r3, #1
 8003542:	e000      	b.n	8003546 <HAL_RCC_OscConfig+0x2b6>
 8003544:	2300      	movs	r3, #0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00d      	beq.n	8003566 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800354a:	4b7f      	ldr	r3, [pc, #508]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 800354c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354e:	4a7e      	ldr	r2, [pc, #504]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 8003550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003554:	6593      	str	r3, [r2, #88]	@ 0x58
 8003556:	4b7c      	ldr	r3, [pc, #496]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 8003558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003562:	2301      	movs	r3, #1
 8003564:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003566:	4b79      	ldr	r3, [pc, #484]	@ (800374c <HAL_RCC_OscConfig+0x4bc>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356e:	2b00      	cmp	r3, #0
 8003570:	d118      	bne.n	80035a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003572:	4b76      	ldr	r3, [pc, #472]	@ (800374c <HAL_RCC_OscConfig+0x4bc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a75      	ldr	r2, [pc, #468]	@ (800374c <HAL_RCC_OscConfig+0x4bc>)
 8003578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800357c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800357e:	f7fd fe0f 	bl	80011a0 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003586:	f7fd fe0b 	bl	80011a0 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e183      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003598:	4b6c      	ldr	r3, [pc, #432]	@ (800374c <HAL_RCC_OscConfig+0x4bc>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0f0      	beq.n	8003586 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d108      	bne.n	80035be <HAL_RCC_OscConfig+0x32e>
 80035ac:	4b66      	ldr	r3, [pc, #408]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 80035ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b2:	4a65      	ldr	r2, [pc, #404]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035bc:	e024      	b.n	8003608 <HAL_RCC_OscConfig+0x378>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b05      	cmp	r3, #5
 80035c4:	d110      	bne.n	80035e8 <HAL_RCC_OscConfig+0x358>
 80035c6:	4b60      	ldr	r3, [pc, #384]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 80035c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035cc:	4a5e      	ldr	r2, [pc, #376]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 80035ce:	f043 0304 	orr.w	r3, r3, #4
 80035d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035d6:	4b5c      	ldr	r3, [pc, #368]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035dc:	4a5a      	ldr	r2, [pc, #360]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035e6:	e00f      	b.n	8003608 <HAL_RCC_OscConfig+0x378>
 80035e8:	4b57      	ldr	r3, [pc, #348]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ee:	4a56      	ldr	r2, [pc, #344]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 80035f0:	f023 0301 	bic.w	r3, r3, #1
 80035f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035f8:	4b53      	ldr	r3, [pc, #332]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035fe:	4a52      	ldr	r2, [pc, #328]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 8003600:	f023 0304 	bic.w	r3, r3, #4
 8003604:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d016      	beq.n	800363e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003610:	f7fd fdc6 	bl	80011a0 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003616:	e00a      	b.n	800362e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003618:	f7fd fdc2 	bl	80011a0 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003626:	4293      	cmp	r3, r2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e138      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800362e:	4b46      	ldr	r3, [pc, #280]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 8003630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0ed      	beq.n	8003618 <HAL_RCC_OscConfig+0x388>
 800363c:	e015      	b.n	800366a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363e:	f7fd fdaf 	bl	80011a0 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003644:	e00a      	b.n	800365c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003646:	f7fd fdab 	bl	80011a0 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003654:	4293      	cmp	r3, r2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e121      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800365c:	4b3a      	ldr	r3, [pc, #232]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1ed      	bne.n	8003646 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800366a:	7ffb      	ldrb	r3, [r7, #31]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d105      	bne.n	800367c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003670:	4b35      	ldr	r3, [pc, #212]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 8003672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003674:	4a34      	ldr	r2, [pc, #208]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 8003676:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800367a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0320 	and.w	r3, r3, #32
 8003684:	2b00      	cmp	r3, #0
 8003686:	d03c      	beq.n	8003702 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d01c      	beq.n	80036ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003690:	4b2d      	ldr	r3, [pc, #180]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 8003692:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003696:	4a2c      	ldr	r2, [pc, #176]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a0:	f7fd fd7e 	bl	80011a0 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036a8:	f7fd fd7a 	bl	80011a0 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e0f2      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036ba:	4b23      	ldr	r3, [pc, #140]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 80036bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0ef      	beq.n	80036a8 <HAL_RCC_OscConfig+0x418>
 80036c8:	e01b      	b.n	8003702 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 80036cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 80036d2:	f023 0301 	bic.w	r3, r3, #1
 80036d6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036da:	f7fd fd61 	bl	80011a0 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036e2:	f7fd fd5d 	bl	80011a0 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e0d5      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036f4:	4b14      	ldr	r3, [pc, #80]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 80036f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1ef      	bne.n	80036e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 80c9 	beq.w	800389e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800370c:	4b0e      	ldr	r3, [pc, #56]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 030c 	and.w	r3, r3, #12
 8003714:	2b0c      	cmp	r3, #12
 8003716:	f000 8083 	beq.w	8003820 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d15e      	bne.n	80037e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003722:	4b09      	ldr	r3, [pc, #36]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a08      	ldr	r2, [pc, #32]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 8003728:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800372c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372e:	f7fd fd37 	bl	80011a0 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003734:	e00c      	b.n	8003750 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003736:	f7fd fd33 	bl	80011a0 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d905      	bls.n	8003750 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e0ab      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
 8003748:	40021000 	.word	0x40021000
 800374c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003750:	4b55      	ldr	r3, [pc, #340]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1ec      	bne.n	8003736 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800375c:	4b52      	ldr	r3, [pc, #328]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	4b52      	ldr	r3, [pc, #328]	@ (80038ac <HAL_RCC_OscConfig+0x61c>)
 8003762:	4013      	ands	r3, r2
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6a11      	ldr	r1, [r2, #32]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800376c:	3a01      	subs	r2, #1
 800376e:	0112      	lsls	r2, r2, #4
 8003770:	4311      	orrs	r1, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003776:	0212      	lsls	r2, r2, #8
 8003778:	4311      	orrs	r1, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800377e:	0852      	lsrs	r2, r2, #1
 8003780:	3a01      	subs	r2, #1
 8003782:	0552      	lsls	r2, r2, #21
 8003784:	4311      	orrs	r1, r2
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800378a:	0852      	lsrs	r2, r2, #1
 800378c:	3a01      	subs	r2, #1
 800378e:	0652      	lsls	r2, r2, #25
 8003790:	4311      	orrs	r1, r2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003796:	06d2      	lsls	r2, r2, #27
 8003798:	430a      	orrs	r2, r1
 800379a:	4943      	ldr	r1, [pc, #268]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 800379c:	4313      	orrs	r3, r2
 800379e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a0:	4b41      	ldr	r3, [pc, #260]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a40      	ldr	r2, [pc, #256]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 80037a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037ac:	4b3e      	ldr	r3, [pc, #248]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4a3d      	ldr	r2, [pc, #244]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 80037b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b8:	f7fd fcf2 	bl	80011a0 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c0:	f7fd fcee 	bl	80011a0 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e066      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037d2:	4b35      	ldr	r3, [pc, #212]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0f0      	beq.n	80037c0 <HAL_RCC_OscConfig+0x530>
 80037de:	e05e      	b.n	800389e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e0:	4b31      	ldr	r3, [pc, #196]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a30      	ldr	r2, [pc, #192]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 80037e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ec:	f7fd fcd8 	bl	80011a0 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f4:	f7fd fcd4 	bl	80011a0 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e04c      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003806:	4b28      	ldr	r3, [pc, #160]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003812:	4b25      	ldr	r3, [pc, #148]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	4924      	ldr	r1, [pc, #144]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 8003818:	4b25      	ldr	r3, [pc, #148]	@ (80038b0 <HAL_RCC_OscConfig+0x620>)
 800381a:	4013      	ands	r3, r2
 800381c:	60cb      	str	r3, [r1, #12]
 800381e:	e03e      	b.n	800389e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e039      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800382c:	4b1e      	ldr	r3, [pc, #120]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f003 0203 	and.w	r2, r3, #3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	429a      	cmp	r2, r3
 800383e:	d12c      	bne.n	800389a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384a:	3b01      	subs	r3, #1
 800384c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384e:	429a      	cmp	r2, r3
 8003850:	d123      	bne.n	800389a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800385c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800385e:	429a      	cmp	r2, r3
 8003860:	d11b      	bne.n	800389a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800386e:	429a      	cmp	r2, r3
 8003870:	d113      	bne.n	800389a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387c:	085b      	lsrs	r3, r3, #1
 800387e:	3b01      	subs	r3, #1
 8003880:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003882:	429a      	cmp	r2, r3
 8003884:	d109      	bne.n	800389a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003890:	085b      	lsrs	r3, r3, #1
 8003892:	3b01      	subs	r3, #1
 8003894:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003896:	429a      	cmp	r2, r3
 8003898:	d001      	beq.n	800389e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3720      	adds	r7, #32
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40021000 	.word	0x40021000
 80038ac:	019f800c 	.word	0x019f800c
 80038b0:	feeefffc 	.word	0xfeeefffc

080038b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80038be:	2300      	movs	r3, #0
 80038c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e11e      	b.n	8003b0a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038cc:	4b91      	ldr	r3, [pc, #580]	@ (8003b14 <HAL_RCC_ClockConfig+0x260>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d910      	bls.n	80038fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038da:	4b8e      	ldr	r3, [pc, #568]	@ (8003b14 <HAL_RCC_ClockConfig+0x260>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 020f 	bic.w	r2, r3, #15
 80038e2:	498c      	ldr	r1, [pc, #560]	@ (8003b14 <HAL_RCC_ClockConfig+0x260>)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ea:	4b8a      	ldr	r3, [pc, #552]	@ (8003b14 <HAL_RCC_ClockConfig+0x260>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d001      	beq.n	80038fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e106      	b.n	8003b0a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d073      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2b03      	cmp	r3, #3
 800390e:	d129      	bne.n	8003964 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003910:	4b81      	ldr	r3, [pc, #516]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0f4      	b.n	8003b0a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003920:	f000 f9ba 	bl	8003c98 <RCC_GetSysClockFreqFromPLLSource>
 8003924:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4a7c      	ldr	r2, [pc, #496]	@ (8003b1c <HAL_RCC_ClockConfig+0x268>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d93f      	bls.n	80039ae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800392e:	4b7a      	ldr	r3, [pc, #488]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d009      	beq.n	800394e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003942:	2b00      	cmp	r3, #0
 8003944:	d033      	beq.n	80039ae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800394a:	2b00      	cmp	r3, #0
 800394c:	d12f      	bne.n	80039ae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800394e:	4b72      	ldr	r3, [pc, #456]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003956:	4a70      	ldr	r2, [pc, #448]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003958:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800395c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800395e:	2380      	movs	r3, #128	@ 0x80
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	e024      	b.n	80039ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d107      	bne.n	800397c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800396c:	4b6a      	ldr	r3, [pc, #424]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d109      	bne.n	800398c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0c6      	b.n	8003b0a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800397c:	4b66      	ldr	r3, [pc, #408]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e0be      	b.n	8003b0a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800398c:	f000 f8ce 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 8003990:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4a61      	ldr	r2, [pc, #388]	@ (8003b1c <HAL_RCC_ClockConfig+0x268>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d909      	bls.n	80039ae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800399a:	4b5f      	ldr	r3, [pc, #380]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039a2:	4a5d      	ldr	r2, [pc, #372]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 80039a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80039aa:	2380      	movs	r3, #128	@ 0x80
 80039ac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039ae:	4b5a      	ldr	r3, [pc, #360]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f023 0203 	bic.w	r2, r3, #3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	4957      	ldr	r1, [pc, #348]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c0:	f7fd fbee 	bl	80011a0 <HAL_GetTick>
 80039c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c6:	e00a      	b.n	80039de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c8:	f7fd fbea 	bl	80011a0 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e095      	b.n	8003b0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039de:	4b4e      	ldr	r3, [pc, #312]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 020c 	and.w	r2, r3, #12
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d1eb      	bne.n	80039c8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d023      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a08:	4b43      	ldr	r3, [pc, #268]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	4a42      	ldr	r2, [pc, #264]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003a0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a12:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d007      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003a20:	4b3d      	ldr	r3, [pc, #244]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003a28:	4a3b      	ldr	r2, [pc, #236]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003a2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a30:	4b39      	ldr	r3, [pc, #228]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	4936      	ldr	r1, [pc, #216]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	608b      	str	r3, [r1, #8]
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	2b80      	cmp	r3, #128	@ 0x80
 8003a48:	d105      	bne.n	8003a56 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a4a:	4b33      	ldr	r3, [pc, #204]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	4a32      	ldr	r2, [pc, #200]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003a50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a54:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a56:	4b2f      	ldr	r3, [pc, #188]	@ (8003b14 <HAL_RCC_ClockConfig+0x260>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d21d      	bcs.n	8003aa0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a64:	4b2b      	ldr	r3, [pc, #172]	@ (8003b14 <HAL_RCC_ClockConfig+0x260>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f023 020f 	bic.w	r2, r3, #15
 8003a6c:	4929      	ldr	r1, [pc, #164]	@ (8003b14 <HAL_RCC_ClockConfig+0x260>)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a74:	f7fd fb94 	bl	80011a0 <HAL_GetTick>
 8003a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7a:	e00a      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a7c:	f7fd fb90 	bl	80011a0 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e03b      	b.n	8003b0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a92:	4b20      	ldr	r3, [pc, #128]	@ (8003b14 <HAL_RCC_ClockConfig+0x260>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d1ed      	bne.n	8003a7c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d008      	beq.n	8003abe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aac:	4b1a      	ldr	r3, [pc, #104]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	4917      	ldr	r1, [pc, #92]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d009      	beq.n	8003ade <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aca:	4b13      	ldr	r3, [pc, #76]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	490f      	ldr	r1, [pc, #60]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ade:	f000 f825 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	091b      	lsrs	r3, r3, #4
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	490c      	ldr	r1, [pc, #48]	@ (8003b20 <HAL_RCC_ClockConfig+0x26c>)
 8003af0:	5ccb      	ldrb	r3, [r1, r3]
 8003af2:	f003 031f 	and.w	r3, r3, #31
 8003af6:	fa22 f303 	lsr.w	r3, r2, r3
 8003afa:	4a0a      	ldr	r2, [pc, #40]	@ (8003b24 <HAL_RCC_ClockConfig+0x270>)
 8003afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003afe:	4b0a      	ldr	r3, [pc, #40]	@ (8003b28 <HAL_RCC_ClockConfig+0x274>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fc fee6 	bl	80008d4 <HAL_InitTick>
 8003b08:	4603      	mov	r3, r0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40022000 	.word	0x40022000
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	04c4b400 	.word	0x04c4b400
 8003b20:	0800af58 	.word	0x0800af58
 8003b24:	20000000 	.word	0x20000000
 8003b28:	20000004 	.word	0x20000004

08003b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b32:	4b2c      	ldr	r3, [pc, #176]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d102      	bne.n	8003b44 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b3e:	4b2a      	ldr	r3, [pc, #168]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	e047      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b44:	4b27      	ldr	r3, [pc, #156]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 030c 	and.w	r3, r3, #12
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d102      	bne.n	8003b56 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b50:	4b26      	ldr	r3, [pc, #152]	@ (8003bec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	e03e      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b56:	4b23      	ldr	r3, [pc, #140]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
 8003b5e:	2b0c      	cmp	r3, #12
 8003b60:	d136      	bne.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b62:	4b20      	ldr	r3, [pc, #128]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	091b      	lsrs	r3, r3, #4
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	3301      	adds	r3, #1
 8003b78:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	d10c      	bne.n	8003b9a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b80:	4a1a      	ldr	r2, [pc, #104]	@ (8003bec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	4a16      	ldr	r2, [pc, #88]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b8a:	68d2      	ldr	r2, [r2, #12]
 8003b8c:	0a12      	lsrs	r2, r2, #8
 8003b8e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b92:	fb02 f303 	mul.w	r3, r2, r3
 8003b96:	617b      	str	r3, [r7, #20]
      break;
 8003b98:	e00c      	b.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b9a:	4a13      	ldr	r2, [pc, #76]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba2:	4a10      	ldr	r2, [pc, #64]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ba4:	68d2      	ldr	r2, [r2, #12]
 8003ba6:	0a12      	lsrs	r2, r2, #8
 8003ba8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003bac:	fb02 f303 	mul.w	r3, r2, r3
 8003bb0:	617b      	str	r3, [r7, #20]
      break;
 8003bb2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	0e5b      	lsrs	r3, r3, #25
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	e001      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003bd4:	693b      	ldr	r3, [r7, #16]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	371c      	adds	r7, #28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40021000 	.word	0x40021000
 8003be8:	00f42400 	.word	0x00f42400
 8003bec:	016e3600 	.word	0x016e3600

08003bf0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf4:	4b03      	ldr	r3, [pc, #12]	@ (8003c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	20000000 	.word	0x20000000

08003c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c0c:	f7ff fff0 	bl	8003bf0 <HAL_RCC_GetHCLKFreq>
 8003c10:	4602      	mov	r2, r0
 8003c12:	4b06      	ldr	r3, [pc, #24]	@ (8003c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	0a1b      	lsrs	r3, r3, #8
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	4904      	ldr	r1, [pc, #16]	@ (8003c30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c1e:	5ccb      	ldrb	r3, [r1, r3]
 8003c20:	f003 031f 	and.w	r3, r3, #31
 8003c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	0800af68 	.word	0x0800af68

08003c34 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	220f      	movs	r2, #15
 8003c42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003c44:	4b12      	ldr	r3, [pc, #72]	@ (8003c90 <HAL_RCC_GetClockConfig+0x5c>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 0203 	and.w	r2, r3, #3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003c50:	4b0f      	ldr	r3, [pc, #60]	@ (8003c90 <HAL_RCC_GetClockConfig+0x5c>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c90 <HAL_RCC_GetClockConfig+0x5c>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003c68:	4b09      	ldr	r3, [pc, #36]	@ (8003c90 <HAL_RCC_GetClockConfig+0x5c>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	08db      	lsrs	r3, r3, #3
 8003c6e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003c76:	4b07      	ldr	r3, [pc, #28]	@ (8003c94 <HAL_RCC_GetClockConfig+0x60>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 020f 	and.w	r2, r3, #15
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	601a      	str	r2, [r3, #0]
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40021000 	.word	0x40021000
 8003c94:	40022000 	.word	0x40022000

08003c98 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003d18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	091b      	lsrs	r3, r3, #4
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d10c      	bne.n	8003cd6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cbc:	4a17      	ldr	r2, [pc, #92]	@ (8003d1c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc4:	4a14      	ldr	r2, [pc, #80]	@ (8003d18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cc6:	68d2      	ldr	r2, [r2, #12]
 8003cc8:	0a12      	lsrs	r2, r2, #8
 8003cca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003cce:	fb02 f303 	mul.w	r3, r2, r3
 8003cd2:	617b      	str	r3, [r7, #20]
    break;
 8003cd4:	e00c      	b.n	8003cf0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cd6:	4a12      	ldr	r2, [pc, #72]	@ (8003d20 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cde:	4a0e      	ldr	r2, [pc, #56]	@ (8003d18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ce0:	68d2      	ldr	r2, [r2, #12]
 8003ce2:	0a12      	lsrs	r2, r2, #8
 8003ce4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ce8:	fb02 f303 	mul.w	r3, r2, r3
 8003cec:	617b      	str	r3, [r7, #20]
    break;
 8003cee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cf0:	4b09      	ldr	r3, [pc, #36]	@ (8003d18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	0e5b      	lsrs	r3, r3, #25
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d08:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d0a:	687b      	ldr	r3, [r7, #4]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	371c      	adds	r7, #28
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	016e3600 	.word	0x016e3600
 8003d20:	00f42400 	.word	0x00f42400

08003d24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d30:	2300      	movs	r3, #0
 8003d32:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 8098 	beq.w	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d42:	2300      	movs	r3, #0
 8003d44:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d46:	4b43      	ldr	r3, [pc, #268]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10d      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d52:	4b40      	ldr	r3, [pc, #256]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d56:	4a3f      	ldr	r2, [pc, #252]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d66:	60bb      	str	r3, [r7, #8]
 8003d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d6e:	4b3a      	ldr	r3, [pc, #232]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a39      	ldr	r2, [pc, #228]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d7a:	f7fd fa11 	bl	80011a0 <HAL_GetTick>
 8003d7e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d80:	e009      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d82:	f7fd fa0d 	bl	80011a0 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d902      	bls.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	74fb      	strb	r3, [r7, #19]
        break;
 8003d94:	e005      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d96:	4b30      	ldr	r3, [pc, #192]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0ef      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003da2:	7cfb      	ldrb	r3, [r7, #19]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d159      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003da8:	4b2a      	ldr	r3, [pc, #168]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003db2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d01e      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d019      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dc4:	4b23      	ldr	r3, [pc, #140]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dd0:	4b20      	ldr	r3, [pc, #128]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd6:	4a1f      	ldr	r2, [pc, #124]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ddc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003de0:	4b1c      	ldr	r3, [pc, #112]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de6:	4a1b      	ldr	r2, [pc, #108]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003df0:	4a18      	ldr	r2, [pc, #96]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d016      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e02:	f7fd f9cd 	bl	80011a0 <HAL_GetTick>
 8003e06:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e08:	e00b      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e0a:	f7fd f9c9 	bl	80011a0 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d902      	bls.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	74fb      	strb	r3, [r7, #19]
            break;
 8003e20:	e006      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e22:	4b0c      	ldr	r3, [pc, #48]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0ec      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e30:	7cfb      	ldrb	r3, [r7, #19]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10b      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e36:	4b07      	ldr	r3, [pc, #28]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e44:	4903      	ldr	r1, [pc, #12]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e4c:	e008      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e4e:	7cfb      	ldrb	r3, [r7, #19]
 8003e50:	74bb      	strb	r3, [r7, #18]
 8003e52:	e005      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e54:	40021000 	.word	0x40021000
 8003e58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5c:	7cfb      	ldrb	r3, [r7, #19]
 8003e5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e60:	7c7b      	ldrb	r3, [r7, #17]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d105      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e66:	4ba7      	ldr	r3, [pc, #668]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e6a:	4aa6      	ldr	r2, [pc, #664]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e70:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e7e:	4ba1      	ldr	r3, [pc, #644]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e84:	f023 0203 	bic.w	r2, r3, #3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	499d      	ldr	r1, [pc, #628]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ea0:	4b98      	ldr	r3, [pc, #608]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea6:	f023 020c 	bic.w	r2, r3, #12
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	4995      	ldr	r1, [pc, #596]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ec2:	4b90      	ldr	r3, [pc, #576]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	498c      	ldr	r1, [pc, #560]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ee4:	4b87      	ldr	r3, [pc, #540]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	4984      	ldr	r1, [pc, #528]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0310 	and.w	r3, r3, #16
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f06:	4b7f      	ldr	r3, [pc, #508]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	497b      	ldr	r1, [pc, #492]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0320 	and.w	r3, r3, #32
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f28:	4b76      	ldr	r3, [pc, #472]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	4973      	ldr	r1, [pc, #460]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f4a:	4b6e      	ldr	r3, [pc, #440]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f50:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	496a      	ldr	r1, [pc, #424]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f6c:	4b65      	ldr	r3, [pc, #404]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f72:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	4962      	ldr	r1, [pc, #392]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f8e:	4b5d      	ldr	r3, [pc, #372]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f94:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	4959      	ldr	r1, [pc, #356]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fb0:	4b54      	ldr	r3, [pc, #336]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fb6:	f023 0203 	bic.w	r2, r3, #3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbe:	4951      	ldr	r1, [pc, #324]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fd2:	4b4c      	ldr	r3, [pc, #304]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe0:	4948      	ldr	r1, [pc, #288]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d015      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ff4:	4b43      	ldr	r3, [pc, #268]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004002:	4940      	ldr	r1, [pc, #256]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004012:	d105      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004014:	4b3b      	ldr	r3, [pc, #236]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	4a3a      	ldr	r2, [pc, #232]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800401a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800401e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004028:	2b00      	cmp	r3, #0
 800402a:	d015      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800402c:	4b35      	ldr	r3, [pc, #212]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800402e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004032:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800403a:	4932      	ldr	r1, [pc, #200]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004046:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800404a:	d105      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800404c:	4b2d      	ldr	r3, [pc, #180]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	4a2c      	ldr	r2, [pc, #176]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004052:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004056:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d015      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004064:	4b27      	ldr	r3, [pc, #156]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800406a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004072:	4924      	ldr	r1, [pc, #144]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004074:	4313      	orrs	r3, r2
 8004076:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800407e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004082:	d105      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004084:	4b1f      	ldr	r3, [pc, #124]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	4a1e      	ldr	r2, [pc, #120]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800408a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800408e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d015      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800409c:	4b19      	ldr	r3, [pc, #100]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040aa:	4916      	ldr	r1, [pc, #88]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040ba:	d105      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040bc:	4b11      	ldr	r3, [pc, #68]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	4a10      	ldr	r2, [pc, #64]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040c6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d019      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e2:	4908      	ldr	r1, [pc, #32]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040f2:	d109      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040f4:	4b03      	ldr	r3, [pc, #12]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4a02      	ldr	r2, [pc, #8]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040fe:	60d3      	str	r3, [r2, #12]
 8004100:	e002      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004102:	bf00      	nop
 8004104:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d015      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004114:	4b29      	ldr	r3, [pc, #164]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800411a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004122:	4926      	ldr	r1, [pc, #152]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004132:	d105      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004134:	4b21      	ldr	r3, [pc, #132]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	4a20      	ldr	r2, [pc, #128]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800413a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800413e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d015      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800414c:	4b1b      	ldr	r3, [pc, #108]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004152:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800415a:	4918      	ldr	r1, [pc, #96]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800416a:	d105      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800416c:	4b13      	ldr	r3, [pc, #76]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	4a12      	ldr	r2, [pc, #72]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004172:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004176:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d015      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004184:	4b0d      	ldr	r3, [pc, #52]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004186:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800418a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004192:	490a      	ldr	r1, [pc, #40]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800419e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041a2:	d105      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041a4:	4b05      	ldr	r3, [pc, #20]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	4a04      	ldr	r2, [pc, #16]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80041b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40021000 	.word	0x40021000

080041c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e049      	b.n	8004266 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d106      	bne.n	80041ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7fc fe32 	bl	8000e50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3304      	adds	r3, #4
 80041fc:	4619      	mov	r1, r3
 80041fe:	4610      	mov	r0, r2
 8004200:	f000 fca6 	bl	8004b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
	...

08004270 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b01      	cmp	r3, #1
 8004282:	d001      	beq.n	8004288 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e054      	b.n	8004332 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a26      	ldr	r2, [pc, #152]	@ (8004340 <HAL_TIM_Base_Start_IT+0xd0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d022      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0x80>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b2:	d01d      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0x80>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a22      	ldr	r2, [pc, #136]	@ (8004344 <HAL_TIM_Base_Start_IT+0xd4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d018      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0x80>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a21      	ldr	r2, [pc, #132]	@ (8004348 <HAL_TIM_Base_Start_IT+0xd8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d013      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0x80>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a1f      	ldr	r2, [pc, #124]	@ (800434c <HAL_TIM_Base_Start_IT+0xdc>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d00e      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0x80>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004350 <HAL_TIM_Base_Start_IT+0xe0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d009      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0x80>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004354 <HAL_TIM_Base_Start_IT+0xe4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d004      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0x80>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004358 <HAL_TIM_Base_Start_IT+0xe8>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d115      	bne.n	800431c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	4b19      	ldr	r3, [pc, #100]	@ (800435c <HAL_TIM_Base_Start_IT+0xec>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b06      	cmp	r3, #6
 8004300:	d015      	beq.n	800432e <HAL_TIM_Base_Start_IT+0xbe>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004308:	d011      	beq.n	800432e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f042 0201 	orr.w	r2, r2, #1
 8004318:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431a:	e008      	b.n	800432e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	e000      	b.n	8004330 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	40012c00 	.word	0x40012c00
 8004344:	40000400 	.word	0x40000400
 8004348:	40000800 	.word	0x40000800
 800434c:	40000c00 	.word	0x40000c00
 8004350:	40013400 	.word	0x40013400
 8004354:	40014000 	.word	0x40014000
 8004358:	40015000 	.word	0x40015000
 800435c:	00010007 	.word	0x00010007

08004360 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e049      	b.n	8004406 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d106      	bne.n	800438c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f841 	bl	800440e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3304      	adds	r3, #4
 800439c:	4619      	mov	r1, r3
 800439e:	4610      	mov	r0, r2
 80043a0:	f000 fbd6 	bl	8004b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d020      	beq.n	8004486 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d01b      	beq.n	8004486 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f06f 0202 	mvn.w	r2, #2
 8004456:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	f003 0303 	and.w	r3, r3, #3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fb51 	bl	8004b14 <HAL_TIM_IC_CaptureCallback>
 8004472:	e005      	b.n	8004480 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 fb43 	bl	8004b00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 fb54 	bl	8004b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	d020      	beq.n	80044d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	2b00      	cmp	r3, #0
 8004498:	d01b      	beq.n	80044d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f06f 0204 	mvn.w	r2, #4
 80044a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 fb2b 	bl	8004b14 <HAL_TIM_IC_CaptureCallback>
 80044be:	e005      	b.n	80044cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fb1d 	bl	8004b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fb2e 	bl	8004b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f003 0308 	and.w	r3, r3, #8
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d020      	beq.n	800451e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f003 0308 	and.w	r3, r3, #8
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d01b      	beq.n	800451e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f06f 0208 	mvn.w	r2, #8
 80044ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2204      	movs	r2, #4
 80044f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 fb05 	bl	8004b14 <HAL_TIM_IC_CaptureCallback>
 800450a:	e005      	b.n	8004518 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 faf7 	bl	8004b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fb08 	bl	8004b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f003 0310 	and.w	r3, r3, #16
 8004524:	2b00      	cmp	r3, #0
 8004526:	d020      	beq.n	800456a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f003 0310 	and.w	r3, r3, #16
 800452e:	2b00      	cmp	r3, #0
 8004530:	d01b      	beq.n	800456a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f06f 0210 	mvn.w	r2, #16
 800453a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2208      	movs	r2, #8
 8004540:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 fadf 	bl	8004b14 <HAL_TIM_IC_CaptureCallback>
 8004556:	e005      	b.n	8004564 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 fad1 	bl	8004b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fae2 	bl	8004b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00c      	beq.n	800458e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d007      	beq.n	800458e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f06f 0201 	mvn.w	r2, #1
 8004586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7fc f969 	bl	8000860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004594:	2b00      	cmp	r3, #0
 8004596:	d104      	bne.n	80045a2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00c      	beq.n	80045bc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d007      	beq.n	80045bc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80045b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f001 fa5e 	bl	8005a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00c      	beq.n	80045e0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d007      	beq.n	80045e0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80045d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f001 fa56 	bl	8005a8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00c      	beq.n	8004604 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d007      	beq.n	8004604 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fa9c 	bl	8004b3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00c      	beq.n	8004628 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f003 0320 	and.w	r3, r3, #32
 8004614:	2b00      	cmp	r3, #0
 8004616:	d007      	beq.n	8004628 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f06f 0220 	mvn.w	r2, #32
 8004620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7fc f908 	bl	8000838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00c      	beq.n	800464c <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d007      	beq.n	800464c <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f001 fa2a 	bl	8005aa0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00c      	beq.n	8004670 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d007      	beq.n	8004670 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f001 fa22 	bl	8005ab4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00c      	beq.n	8004694 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d007      	beq.n	8004694 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800468c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f001 fa1a 	bl	8005ac8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00c      	beq.n	80046b8 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d007      	beq.n	80046b8 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80046b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f001 fa12 	bl	8005adc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046b8:	bf00      	nop
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046da:	2302      	movs	r3, #2
 80046dc:	e0ff      	b.n	80048de <HAL_TIM_PWM_ConfigChannel+0x21e>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b14      	cmp	r3, #20
 80046ea:	f200 80f0 	bhi.w	80048ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 80046ee:	a201      	add	r2, pc, #4	@ (adr r2, 80046f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f4:	08004749 	.word	0x08004749
 80046f8:	080048cf 	.word	0x080048cf
 80046fc:	080048cf 	.word	0x080048cf
 8004700:	080048cf 	.word	0x080048cf
 8004704:	08004789 	.word	0x08004789
 8004708:	080048cf 	.word	0x080048cf
 800470c:	080048cf 	.word	0x080048cf
 8004710:	080048cf 	.word	0x080048cf
 8004714:	080047cb 	.word	0x080047cb
 8004718:	080048cf 	.word	0x080048cf
 800471c:	080048cf 	.word	0x080048cf
 8004720:	080048cf 	.word	0x080048cf
 8004724:	0800480b 	.word	0x0800480b
 8004728:	080048cf 	.word	0x080048cf
 800472c:	080048cf 	.word	0x080048cf
 8004730:	080048cf 	.word	0x080048cf
 8004734:	0800484d 	.word	0x0800484d
 8004738:	080048cf 	.word	0x080048cf
 800473c:	080048cf 	.word	0x080048cf
 8004740:	080048cf 	.word	0x080048cf
 8004744:	0800488d 	.word	0x0800488d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68b9      	ldr	r1, [r7, #8]
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fab2 	bl	8004cb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699a      	ldr	r2, [r3, #24]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0208 	orr.w	r2, r2, #8
 8004762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699a      	ldr	r2, [r3, #24]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0204 	bic.w	r2, r2, #4
 8004772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6999      	ldr	r1, [r3, #24]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	691a      	ldr	r2, [r3, #16]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	619a      	str	r2, [r3, #24]
      break;
 8004786:	e0a5      	b.n	80048d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68b9      	ldr	r1, [r7, #8]
 800478e:	4618      	mov	r0, r3
 8004790:	f000 fb2c 	bl	8004dec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699a      	ldr	r2, [r3, #24]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699a      	ldr	r2, [r3, #24]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6999      	ldr	r1, [r3, #24]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	021a      	lsls	r2, r3, #8
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	619a      	str	r2, [r3, #24]
      break;
 80047c8:	e084      	b.n	80048d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68b9      	ldr	r1, [r7, #8]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 fb9f 	bl	8004f14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69da      	ldr	r2, [r3, #28]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0208 	orr.w	r2, r2, #8
 80047e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69da      	ldr	r2, [r3, #28]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0204 	bic.w	r2, r2, #4
 80047f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69d9      	ldr	r1, [r3, #28]
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	691a      	ldr	r2, [r3, #16]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	61da      	str	r2, [r3, #28]
      break;
 8004808:	e064      	b.n	80048d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68b9      	ldr	r1, [r7, #8]
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fc11 	bl	8005038 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	69da      	ldr	r2, [r3, #28]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004824:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	69da      	ldr	r2, [r3, #28]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	69d9      	ldr	r1, [r3, #28]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	021a      	lsls	r2, r3, #8
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	61da      	str	r2, [r3, #28]
      break;
 800484a:	e043      	b.n	80048d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68b9      	ldr	r1, [r7, #8]
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fc84 	bl	8005160 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0208 	orr.w	r2, r2, #8
 8004866:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0204 	bic.w	r2, r2, #4
 8004876:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	691a      	ldr	r2, [r3, #16]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800488a:	e023      	b.n	80048d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68b9      	ldr	r1, [r7, #8]
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fcce 	bl	8005234 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048a6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048b6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	021a      	lsls	r2, r3, #8
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80048cc:	e002      	b.n	80048d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	75fb      	strb	r3, [r7, #23]
      break;
 80048d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop

080048e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d101      	bne.n	8004904 <HAL_TIM_ConfigClockSource+0x1c>
 8004900:	2302      	movs	r3, #2
 8004902:	e0ee      	b.n	8004ae2 <HAL_TIM_ConfigClockSource+0x1fa>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004922:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800492e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a6b      	ldr	r2, [pc, #428]	@ (8004aec <HAL_TIM_ConfigClockSource+0x204>)
 800493e:	4293      	cmp	r3, r2
 8004940:	f000 80b9 	beq.w	8004ab6 <HAL_TIM_ConfigClockSource+0x1ce>
 8004944:	4a69      	ldr	r2, [pc, #420]	@ (8004aec <HAL_TIM_ConfigClockSource+0x204>)
 8004946:	4293      	cmp	r3, r2
 8004948:	f200 80be 	bhi.w	8004ac8 <HAL_TIM_ConfigClockSource+0x1e0>
 800494c:	4a68      	ldr	r2, [pc, #416]	@ (8004af0 <HAL_TIM_ConfigClockSource+0x208>)
 800494e:	4293      	cmp	r3, r2
 8004950:	f000 80b1 	beq.w	8004ab6 <HAL_TIM_ConfigClockSource+0x1ce>
 8004954:	4a66      	ldr	r2, [pc, #408]	@ (8004af0 <HAL_TIM_ConfigClockSource+0x208>)
 8004956:	4293      	cmp	r3, r2
 8004958:	f200 80b6 	bhi.w	8004ac8 <HAL_TIM_ConfigClockSource+0x1e0>
 800495c:	4a65      	ldr	r2, [pc, #404]	@ (8004af4 <HAL_TIM_ConfigClockSource+0x20c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	f000 80a9 	beq.w	8004ab6 <HAL_TIM_ConfigClockSource+0x1ce>
 8004964:	4a63      	ldr	r2, [pc, #396]	@ (8004af4 <HAL_TIM_ConfigClockSource+0x20c>)
 8004966:	4293      	cmp	r3, r2
 8004968:	f200 80ae 	bhi.w	8004ac8 <HAL_TIM_ConfigClockSource+0x1e0>
 800496c:	4a62      	ldr	r2, [pc, #392]	@ (8004af8 <HAL_TIM_ConfigClockSource+0x210>)
 800496e:	4293      	cmp	r3, r2
 8004970:	f000 80a1 	beq.w	8004ab6 <HAL_TIM_ConfigClockSource+0x1ce>
 8004974:	4a60      	ldr	r2, [pc, #384]	@ (8004af8 <HAL_TIM_ConfigClockSource+0x210>)
 8004976:	4293      	cmp	r3, r2
 8004978:	f200 80a6 	bhi.w	8004ac8 <HAL_TIM_ConfigClockSource+0x1e0>
 800497c:	4a5f      	ldr	r2, [pc, #380]	@ (8004afc <HAL_TIM_ConfigClockSource+0x214>)
 800497e:	4293      	cmp	r3, r2
 8004980:	f000 8099 	beq.w	8004ab6 <HAL_TIM_ConfigClockSource+0x1ce>
 8004984:	4a5d      	ldr	r2, [pc, #372]	@ (8004afc <HAL_TIM_ConfigClockSource+0x214>)
 8004986:	4293      	cmp	r3, r2
 8004988:	f200 809e 	bhi.w	8004ac8 <HAL_TIM_ConfigClockSource+0x1e0>
 800498c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004990:	f000 8091 	beq.w	8004ab6 <HAL_TIM_ConfigClockSource+0x1ce>
 8004994:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004998:	f200 8096 	bhi.w	8004ac8 <HAL_TIM_ConfigClockSource+0x1e0>
 800499c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049a0:	f000 8089 	beq.w	8004ab6 <HAL_TIM_ConfigClockSource+0x1ce>
 80049a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049a8:	f200 808e 	bhi.w	8004ac8 <HAL_TIM_ConfigClockSource+0x1e0>
 80049ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049b0:	d03e      	beq.n	8004a30 <HAL_TIM_ConfigClockSource+0x148>
 80049b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049b6:	f200 8087 	bhi.w	8004ac8 <HAL_TIM_ConfigClockSource+0x1e0>
 80049ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049be:	f000 8086 	beq.w	8004ace <HAL_TIM_ConfigClockSource+0x1e6>
 80049c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049c6:	d87f      	bhi.n	8004ac8 <HAL_TIM_ConfigClockSource+0x1e0>
 80049c8:	2b70      	cmp	r3, #112	@ 0x70
 80049ca:	d01a      	beq.n	8004a02 <HAL_TIM_ConfigClockSource+0x11a>
 80049cc:	2b70      	cmp	r3, #112	@ 0x70
 80049ce:	d87b      	bhi.n	8004ac8 <HAL_TIM_ConfigClockSource+0x1e0>
 80049d0:	2b60      	cmp	r3, #96	@ 0x60
 80049d2:	d050      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0x18e>
 80049d4:	2b60      	cmp	r3, #96	@ 0x60
 80049d6:	d877      	bhi.n	8004ac8 <HAL_TIM_ConfigClockSource+0x1e0>
 80049d8:	2b50      	cmp	r3, #80	@ 0x50
 80049da:	d03c      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x16e>
 80049dc:	2b50      	cmp	r3, #80	@ 0x50
 80049de:	d873      	bhi.n	8004ac8 <HAL_TIM_ConfigClockSource+0x1e0>
 80049e0:	2b40      	cmp	r3, #64	@ 0x40
 80049e2:	d058      	beq.n	8004a96 <HAL_TIM_ConfigClockSource+0x1ae>
 80049e4:	2b40      	cmp	r3, #64	@ 0x40
 80049e6:	d86f      	bhi.n	8004ac8 <HAL_TIM_ConfigClockSource+0x1e0>
 80049e8:	2b30      	cmp	r3, #48	@ 0x30
 80049ea:	d064      	beq.n	8004ab6 <HAL_TIM_ConfigClockSource+0x1ce>
 80049ec:	2b30      	cmp	r3, #48	@ 0x30
 80049ee:	d86b      	bhi.n	8004ac8 <HAL_TIM_ConfigClockSource+0x1e0>
 80049f0:	2b20      	cmp	r3, #32
 80049f2:	d060      	beq.n	8004ab6 <HAL_TIM_ConfigClockSource+0x1ce>
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d867      	bhi.n	8004ac8 <HAL_TIM_ConfigClockSource+0x1e0>
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d05c      	beq.n	8004ab6 <HAL_TIM_ConfigClockSource+0x1ce>
 80049fc:	2b10      	cmp	r3, #16
 80049fe:	d05a      	beq.n	8004ab6 <HAL_TIM_ConfigClockSource+0x1ce>
 8004a00:	e062      	b.n	8004ac8 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a12:	f000 fd6b 	bl	80054ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	609a      	str	r2, [r3, #8]
      break;
 8004a2e:	e04f      	b.n	8004ad0 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a40:	f000 fd54 	bl	80054ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689a      	ldr	r2, [r3, #8]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a52:	609a      	str	r2, [r3, #8]
      break;
 8004a54:	e03c      	b.n	8004ad0 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a62:	461a      	mov	r2, r3
 8004a64:	f000 fcc6 	bl	80053f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2150      	movs	r1, #80	@ 0x50
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fd1f 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 8004a74:	e02c      	b.n	8004ad0 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a82:	461a      	mov	r2, r3
 8004a84:	f000 fce5 	bl	8005452 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2160      	movs	r1, #96	@ 0x60
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fd0f 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 8004a94:	e01c      	b.n	8004ad0 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	f000 fca6 	bl	80053f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2140      	movs	r1, #64	@ 0x40
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 fcff 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 8004ab4:	e00c      	b.n	8004ad0 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4619      	mov	r1, r3
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	f000 fcf6 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 8004ac6:	e003      	b.n	8004ad0 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	73fb      	strb	r3, [r7, #15]
      break;
 8004acc:	e000      	b.n	8004ad0 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8004ace:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	00100070 	.word	0x00100070
 8004af0:	00100050 	.word	0x00100050
 8004af4:	00100040 	.word	0x00100040
 8004af8:	00100030 	.word	0x00100030
 8004afc:	00100020 	.word	0x00100020

08004b00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a4c      	ldr	r2, [pc, #304]	@ (8004c94 <TIM_Base_SetConfig+0x144>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d017      	beq.n	8004b98 <TIM_Base_SetConfig+0x48>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b6e:	d013      	beq.n	8004b98 <TIM_Base_SetConfig+0x48>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a49      	ldr	r2, [pc, #292]	@ (8004c98 <TIM_Base_SetConfig+0x148>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d00f      	beq.n	8004b98 <TIM_Base_SetConfig+0x48>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a48      	ldr	r2, [pc, #288]	@ (8004c9c <TIM_Base_SetConfig+0x14c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00b      	beq.n	8004b98 <TIM_Base_SetConfig+0x48>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a47      	ldr	r2, [pc, #284]	@ (8004ca0 <TIM_Base_SetConfig+0x150>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d007      	beq.n	8004b98 <TIM_Base_SetConfig+0x48>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a46      	ldr	r2, [pc, #280]	@ (8004ca4 <TIM_Base_SetConfig+0x154>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d003      	beq.n	8004b98 <TIM_Base_SetConfig+0x48>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a45      	ldr	r2, [pc, #276]	@ (8004ca8 <TIM_Base_SetConfig+0x158>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d108      	bne.n	8004baa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a39      	ldr	r2, [pc, #228]	@ (8004c94 <TIM_Base_SetConfig+0x144>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d023      	beq.n	8004bfa <TIM_Base_SetConfig+0xaa>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bb8:	d01f      	beq.n	8004bfa <TIM_Base_SetConfig+0xaa>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a36      	ldr	r2, [pc, #216]	@ (8004c98 <TIM_Base_SetConfig+0x148>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d01b      	beq.n	8004bfa <TIM_Base_SetConfig+0xaa>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a35      	ldr	r2, [pc, #212]	@ (8004c9c <TIM_Base_SetConfig+0x14c>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d017      	beq.n	8004bfa <TIM_Base_SetConfig+0xaa>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a34      	ldr	r2, [pc, #208]	@ (8004ca0 <TIM_Base_SetConfig+0x150>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <TIM_Base_SetConfig+0xaa>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a33      	ldr	r2, [pc, #204]	@ (8004ca4 <TIM_Base_SetConfig+0x154>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00f      	beq.n	8004bfa <TIM_Base_SetConfig+0xaa>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a33      	ldr	r2, [pc, #204]	@ (8004cac <TIM_Base_SetConfig+0x15c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00b      	beq.n	8004bfa <TIM_Base_SetConfig+0xaa>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a32      	ldr	r2, [pc, #200]	@ (8004cb0 <TIM_Base_SetConfig+0x160>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d007      	beq.n	8004bfa <TIM_Base_SetConfig+0xaa>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a31      	ldr	r2, [pc, #196]	@ (8004cb4 <TIM_Base_SetConfig+0x164>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d003      	beq.n	8004bfa <TIM_Base_SetConfig+0xaa>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a2c      	ldr	r2, [pc, #176]	@ (8004ca8 <TIM_Base_SetConfig+0x158>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d108      	bne.n	8004c0c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a18      	ldr	r2, [pc, #96]	@ (8004c94 <TIM_Base_SetConfig+0x144>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d013      	beq.n	8004c60 <TIM_Base_SetConfig+0x110>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a1a      	ldr	r2, [pc, #104]	@ (8004ca4 <TIM_Base_SetConfig+0x154>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d00f      	beq.n	8004c60 <TIM_Base_SetConfig+0x110>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a1a      	ldr	r2, [pc, #104]	@ (8004cac <TIM_Base_SetConfig+0x15c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d00b      	beq.n	8004c60 <TIM_Base_SetConfig+0x110>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a19      	ldr	r2, [pc, #100]	@ (8004cb0 <TIM_Base_SetConfig+0x160>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d007      	beq.n	8004c60 <TIM_Base_SetConfig+0x110>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a18      	ldr	r2, [pc, #96]	@ (8004cb4 <TIM_Base_SetConfig+0x164>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d003      	beq.n	8004c60 <TIM_Base_SetConfig+0x110>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a13      	ldr	r2, [pc, #76]	@ (8004ca8 <TIM_Base_SetConfig+0x158>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d103      	bne.n	8004c68 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	691a      	ldr	r2, [r3, #16]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d105      	bne.n	8004c86 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f023 0201 	bic.w	r2, r3, #1
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	611a      	str	r2, [r3, #16]
  }
}
 8004c86:	bf00      	nop
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40012c00 	.word	0x40012c00
 8004c98:	40000400 	.word	0x40000400
 8004c9c:	40000800 	.word	0x40000800
 8004ca0:	40000c00 	.word	0x40000c00
 8004ca4:	40013400 	.word	0x40013400
 8004ca8:	40015000 	.word	0x40015000
 8004cac:	40014000 	.word	0x40014000
 8004cb0:	40014400 	.word	0x40014400
 8004cb4:	40014800 	.word	0x40014800

08004cb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	f023 0201 	bic.w	r2, r3, #1
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 0303 	bic.w	r3, r3, #3
 8004cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f023 0302 	bic.w	r3, r3, #2
 8004d04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a30      	ldr	r2, [pc, #192]	@ (8004dd4 <TIM_OC1_SetConfig+0x11c>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d013      	beq.n	8004d40 <TIM_OC1_SetConfig+0x88>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a2f      	ldr	r2, [pc, #188]	@ (8004dd8 <TIM_OC1_SetConfig+0x120>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00f      	beq.n	8004d40 <TIM_OC1_SetConfig+0x88>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a2e      	ldr	r2, [pc, #184]	@ (8004ddc <TIM_OC1_SetConfig+0x124>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d00b      	beq.n	8004d40 <TIM_OC1_SetConfig+0x88>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a2d      	ldr	r2, [pc, #180]	@ (8004de0 <TIM_OC1_SetConfig+0x128>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d007      	beq.n	8004d40 <TIM_OC1_SetConfig+0x88>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a2c      	ldr	r2, [pc, #176]	@ (8004de4 <TIM_OC1_SetConfig+0x12c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d003      	beq.n	8004d40 <TIM_OC1_SetConfig+0x88>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a2b      	ldr	r2, [pc, #172]	@ (8004de8 <TIM_OC1_SetConfig+0x130>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d10c      	bne.n	8004d5a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f023 0308 	bic.w	r3, r3, #8
 8004d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f023 0304 	bic.w	r3, r3, #4
 8004d58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8004dd4 <TIM_OC1_SetConfig+0x11c>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d013      	beq.n	8004d8a <TIM_OC1_SetConfig+0xd2>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a1c      	ldr	r2, [pc, #112]	@ (8004dd8 <TIM_OC1_SetConfig+0x120>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d00f      	beq.n	8004d8a <TIM_OC1_SetConfig+0xd2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8004ddc <TIM_OC1_SetConfig+0x124>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d00b      	beq.n	8004d8a <TIM_OC1_SetConfig+0xd2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a1a      	ldr	r2, [pc, #104]	@ (8004de0 <TIM_OC1_SetConfig+0x128>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d007      	beq.n	8004d8a <TIM_OC1_SetConfig+0xd2>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a19      	ldr	r2, [pc, #100]	@ (8004de4 <TIM_OC1_SetConfig+0x12c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d003      	beq.n	8004d8a <TIM_OC1_SetConfig+0xd2>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a18      	ldr	r2, [pc, #96]	@ (8004de8 <TIM_OC1_SetConfig+0x130>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d111      	bne.n	8004dae <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	621a      	str	r2, [r3, #32]
}
 8004dc8:	bf00      	nop
 8004dca:	371c      	adds	r7, #28
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	40012c00 	.word	0x40012c00
 8004dd8:	40013400 	.word	0x40013400
 8004ddc:	40014000 	.word	0x40014000
 8004de0:	40014400 	.word	0x40014400
 8004de4:	40014800 	.word	0x40014800
 8004de8:	40015000 	.word	0x40015000

08004dec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	f023 0210 	bic.w	r2, r3, #16
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	021b      	lsls	r3, r3, #8
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f023 0320 	bic.w	r3, r3, #32
 8004e3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	011b      	lsls	r3, r3, #4
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a2c      	ldr	r2, [pc, #176]	@ (8004efc <TIM_OC2_SetConfig+0x110>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d007      	beq.n	8004e60 <TIM_OC2_SetConfig+0x74>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a2b      	ldr	r2, [pc, #172]	@ (8004f00 <TIM_OC2_SetConfig+0x114>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d003      	beq.n	8004e60 <TIM_OC2_SetConfig+0x74>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a2a      	ldr	r2, [pc, #168]	@ (8004f04 <TIM_OC2_SetConfig+0x118>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d10d      	bne.n	8004e7c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a1f      	ldr	r2, [pc, #124]	@ (8004efc <TIM_OC2_SetConfig+0x110>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d013      	beq.n	8004eac <TIM_OC2_SetConfig+0xc0>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a1e      	ldr	r2, [pc, #120]	@ (8004f00 <TIM_OC2_SetConfig+0x114>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00f      	beq.n	8004eac <TIM_OC2_SetConfig+0xc0>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8004f08 <TIM_OC2_SetConfig+0x11c>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d00b      	beq.n	8004eac <TIM_OC2_SetConfig+0xc0>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a1d      	ldr	r2, [pc, #116]	@ (8004f0c <TIM_OC2_SetConfig+0x120>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d007      	beq.n	8004eac <TIM_OC2_SetConfig+0xc0>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8004f10 <TIM_OC2_SetConfig+0x124>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d003      	beq.n	8004eac <TIM_OC2_SetConfig+0xc0>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a17      	ldr	r2, [pc, #92]	@ (8004f04 <TIM_OC2_SetConfig+0x118>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d113      	bne.n	8004ed4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004eb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004eba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	621a      	str	r2, [r3, #32]
}
 8004eee:	bf00      	nop
 8004ef0:	371c      	adds	r7, #28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	40012c00 	.word	0x40012c00
 8004f00:	40013400 	.word	0x40013400
 8004f04:	40015000 	.word	0x40015000
 8004f08:	40014000 	.word	0x40014000
 8004f0c:	40014400 	.word	0x40014400
 8004f10:	40014800 	.word	0x40014800

08004f14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0303 	bic.w	r3, r3, #3
 8004f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	021b      	lsls	r3, r3, #8
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a2b      	ldr	r2, [pc, #172]	@ (8005020 <TIM_OC3_SetConfig+0x10c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d007      	beq.n	8004f86 <TIM_OC3_SetConfig+0x72>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a2a      	ldr	r2, [pc, #168]	@ (8005024 <TIM_OC3_SetConfig+0x110>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d003      	beq.n	8004f86 <TIM_OC3_SetConfig+0x72>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a29      	ldr	r2, [pc, #164]	@ (8005028 <TIM_OC3_SetConfig+0x114>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d10d      	bne.n	8004fa2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	021b      	lsls	r3, r3, #8
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004fa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a1e      	ldr	r2, [pc, #120]	@ (8005020 <TIM_OC3_SetConfig+0x10c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d013      	beq.n	8004fd2 <TIM_OC3_SetConfig+0xbe>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a1d      	ldr	r2, [pc, #116]	@ (8005024 <TIM_OC3_SetConfig+0x110>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00f      	beq.n	8004fd2 <TIM_OC3_SetConfig+0xbe>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a1d      	ldr	r2, [pc, #116]	@ (800502c <TIM_OC3_SetConfig+0x118>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d00b      	beq.n	8004fd2 <TIM_OC3_SetConfig+0xbe>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a1c      	ldr	r2, [pc, #112]	@ (8005030 <TIM_OC3_SetConfig+0x11c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d007      	beq.n	8004fd2 <TIM_OC3_SetConfig+0xbe>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8005034 <TIM_OC3_SetConfig+0x120>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d003      	beq.n	8004fd2 <TIM_OC3_SetConfig+0xbe>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a16      	ldr	r2, [pc, #88]	@ (8005028 <TIM_OC3_SetConfig+0x114>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d113      	bne.n	8004ffa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	621a      	str	r2, [r3, #32]
}
 8005014:	bf00      	nop
 8005016:	371c      	adds	r7, #28
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	40012c00 	.word	0x40012c00
 8005024:	40013400 	.word	0x40013400
 8005028:	40015000 	.word	0x40015000
 800502c:	40014000 	.word	0x40014000
 8005030:	40014400 	.word	0x40014400
 8005034:	40014800 	.word	0x40014800

08005038 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005038:	b480      	push	{r7}
 800503a:	b087      	sub	sp, #28
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005066:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800506a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	021b      	lsls	r3, r3, #8
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4313      	orrs	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005086:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	031b      	lsls	r3, r3, #12
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	4313      	orrs	r3, r2
 8005092:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a2c      	ldr	r2, [pc, #176]	@ (8005148 <TIM_OC4_SetConfig+0x110>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d007      	beq.n	80050ac <TIM_OC4_SetConfig+0x74>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a2b      	ldr	r2, [pc, #172]	@ (800514c <TIM_OC4_SetConfig+0x114>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d003      	beq.n	80050ac <TIM_OC4_SetConfig+0x74>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a2a      	ldr	r2, [pc, #168]	@ (8005150 <TIM_OC4_SetConfig+0x118>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d10d      	bne.n	80050c8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80050b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	031b      	lsls	r3, r3, #12
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	4313      	orrs	r3, r2
 80050be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a1f      	ldr	r2, [pc, #124]	@ (8005148 <TIM_OC4_SetConfig+0x110>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d013      	beq.n	80050f8 <TIM_OC4_SetConfig+0xc0>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a1e      	ldr	r2, [pc, #120]	@ (800514c <TIM_OC4_SetConfig+0x114>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d00f      	beq.n	80050f8 <TIM_OC4_SetConfig+0xc0>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a1e      	ldr	r2, [pc, #120]	@ (8005154 <TIM_OC4_SetConfig+0x11c>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00b      	beq.n	80050f8 <TIM_OC4_SetConfig+0xc0>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a1d      	ldr	r2, [pc, #116]	@ (8005158 <TIM_OC4_SetConfig+0x120>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d007      	beq.n	80050f8 <TIM_OC4_SetConfig+0xc0>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a1c      	ldr	r2, [pc, #112]	@ (800515c <TIM_OC4_SetConfig+0x124>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d003      	beq.n	80050f8 <TIM_OC4_SetConfig+0xc0>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a17      	ldr	r2, [pc, #92]	@ (8005150 <TIM_OC4_SetConfig+0x118>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d113      	bne.n	8005120 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050fe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005106:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	019b      	lsls	r3, r3, #6
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	4313      	orrs	r3, r2
 8005112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	019b      	lsls	r3, r3, #6
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	4313      	orrs	r3, r2
 800511e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	621a      	str	r2, [r3, #32]
}
 800513a:	bf00      	nop
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40012c00 	.word	0x40012c00
 800514c:	40013400 	.word	0x40013400
 8005150:	40015000 	.word	0x40015000
 8005154:	40014000 	.word	0x40014000
 8005158:	40014400 	.word	0x40014400
 800515c:	40014800 	.word	0x40014800

08005160 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800518e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80051a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	041b      	lsls	r3, r3, #16
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a19      	ldr	r2, [pc, #100]	@ (800521c <TIM_OC5_SetConfig+0xbc>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d013      	beq.n	80051e2 <TIM_OC5_SetConfig+0x82>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a18      	ldr	r2, [pc, #96]	@ (8005220 <TIM_OC5_SetConfig+0xc0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d00f      	beq.n	80051e2 <TIM_OC5_SetConfig+0x82>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a17      	ldr	r2, [pc, #92]	@ (8005224 <TIM_OC5_SetConfig+0xc4>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00b      	beq.n	80051e2 <TIM_OC5_SetConfig+0x82>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a16      	ldr	r2, [pc, #88]	@ (8005228 <TIM_OC5_SetConfig+0xc8>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d007      	beq.n	80051e2 <TIM_OC5_SetConfig+0x82>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a15      	ldr	r2, [pc, #84]	@ (800522c <TIM_OC5_SetConfig+0xcc>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d003      	beq.n	80051e2 <TIM_OC5_SetConfig+0x82>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a14      	ldr	r2, [pc, #80]	@ (8005230 <TIM_OC5_SetConfig+0xd0>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d109      	bne.n	80051f6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	021b      	lsls	r3, r3, #8
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	621a      	str	r2, [r3, #32]
}
 8005210:	bf00      	nop
 8005212:	371c      	adds	r7, #28
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	40012c00 	.word	0x40012c00
 8005220:	40013400 	.word	0x40013400
 8005224:	40014000 	.word	0x40014000
 8005228:	40014400 	.word	0x40014400
 800522c:	40014800 	.word	0x40014800
 8005230:	40015000 	.word	0x40015000

08005234 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800525a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005262:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	021b      	lsls	r3, r3, #8
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	4313      	orrs	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800527a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	051b      	lsls	r3, r3, #20
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	4313      	orrs	r3, r2
 8005286:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a1a      	ldr	r2, [pc, #104]	@ (80052f4 <TIM_OC6_SetConfig+0xc0>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d013      	beq.n	80052b8 <TIM_OC6_SetConfig+0x84>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a19      	ldr	r2, [pc, #100]	@ (80052f8 <TIM_OC6_SetConfig+0xc4>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00f      	beq.n	80052b8 <TIM_OC6_SetConfig+0x84>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a18      	ldr	r2, [pc, #96]	@ (80052fc <TIM_OC6_SetConfig+0xc8>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00b      	beq.n	80052b8 <TIM_OC6_SetConfig+0x84>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a17      	ldr	r2, [pc, #92]	@ (8005300 <TIM_OC6_SetConfig+0xcc>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d007      	beq.n	80052b8 <TIM_OC6_SetConfig+0x84>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a16      	ldr	r2, [pc, #88]	@ (8005304 <TIM_OC6_SetConfig+0xd0>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d003      	beq.n	80052b8 <TIM_OC6_SetConfig+0x84>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a15      	ldr	r2, [pc, #84]	@ (8005308 <TIM_OC6_SetConfig+0xd4>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d109      	bne.n	80052cc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	029b      	lsls	r3, r3, #10
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	621a      	str	r2, [r3, #32]
}
 80052e6:	bf00      	nop
 80052e8:	371c      	adds	r7, #28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	40012c00 	.word	0x40012c00
 80052f8:	40013400 	.word	0x40013400
 80052fc:	40014000 	.word	0x40014000
 8005300:	40014400 	.word	0x40014400
 8005304:	40014800 	.word	0x40014800
 8005308:	40015000 	.word	0x40015000

0800530c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
 8005318:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	f023 0201 	bic.w	r2, r3, #1
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4a28      	ldr	r2, [pc, #160]	@ (80053d8 <TIM_TI1_SetConfig+0xcc>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d01b      	beq.n	8005372 <TIM_TI1_SetConfig+0x66>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005340:	d017      	beq.n	8005372 <TIM_TI1_SetConfig+0x66>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4a25      	ldr	r2, [pc, #148]	@ (80053dc <TIM_TI1_SetConfig+0xd0>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d013      	beq.n	8005372 <TIM_TI1_SetConfig+0x66>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	4a24      	ldr	r2, [pc, #144]	@ (80053e0 <TIM_TI1_SetConfig+0xd4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00f      	beq.n	8005372 <TIM_TI1_SetConfig+0x66>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4a23      	ldr	r2, [pc, #140]	@ (80053e4 <TIM_TI1_SetConfig+0xd8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d00b      	beq.n	8005372 <TIM_TI1_SetConfig+0x66>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	4a22      	ldr	r2, [pc, #136]	@ (80053e8 <TIM_TI1_SetConfig+0xdc>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d007      	beq.n	8005372 <TIM_TI1_SetConfig+0x66>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	4a21      	ldr	r2, [pc, #132]	@ (80053ec <TIM_TI1_SetConfig+0xe0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d003      	beq.n	8005372 <TIM_TI1_SetConfig+0x66>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4a20      	ldr	r2, [pc, #128]	@ (80053f0 <TIM_TI1_SetConfig+0xe4>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d101      	bne.n	8005376 <TIM_TI1_SetConfig+0x6a>
 8005372:	2301      	movs	r3, #1
 8005374:	e000      	b.n	8005378 <TIM_TI1_SetConfig+0x6c>
 8005376:	2300      	movs	r3, #0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d008      	beq.n	800538e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f023 0303 	bic.w	r3, r3, #3
 8005382:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4313      	orrs	r3, r2
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	e003      	b.n	8005396 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f043 0301 	orr.w	r3, r3, #1
 8005394:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800539c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f023 030a 	bic.w	r3, r3, #10
 80053b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f003 030a 	and.w	r3, r3, #10
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	621a      	str	r2, [r3, #32]
}
 80053ca:	bf00      	nop
 80053cc:	371c      	adds	r7, #28
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40012c00 	.word	0x40012c00
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40000800 	.word	0x40000800
 80053e4:	40000c00 	.word	0x40000c00
 80053e8:	40013400 	.word	0x40013400
 80053ec:	40014000 	.word	0x40014000
 80053f0:	40015000 	.word	0x40015000

080053f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f023 0201 	bic.w	r2, r3, #1
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800541e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	4313      	orrs	r3, r2
 8005428:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f023 030a 	bic.w	r3, r3, #10
 8005430:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	4313      	orrs	r3, r2
 8005438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	621a      	str	r2, [r3, #32]
}
 8005446:	bf00      	nop
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005452:	b480      	push	{r7}
 8005454:	b087      	sub	sp, #28
 8005456:	af00      	add	r7, sp, #0
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	60b9      	str	r1, [r7, #8]
 800545c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	f023 0210 	bic.w	r2, r3, #16
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800547c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	031b      	lsls	r3, r3, #12
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	4313      	orrs	r3, r2
 8005486:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800548e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	4313      	orrs	r3, r2
 8005498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	621a      	str	r2, [r3, #32]
}
 80054a6:	bf00      	nop
 80054a8:	371c      	adds	r7, #28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b085      	sub	sp, #20
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80054c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f043 0307 	orr.w	r3, r3, #7
 80054d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	609a      	str	r2, [r3, #8]
}
 80054e0:	bf00      	nop
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
 80054f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005506:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	021a      	lsls	r2, r3, #8
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	431a      	orrs	r2, r3
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	4313      	orrs	r3, r2
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	4313      	orrs	r3, r2
 8005518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	609a      	str	r2, [r3, #8]
}
 8005520:	bf00      	nop
 8005522:	371c      	adds	r7, #28
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f003 031f 	and.w	r3, r3, #31
 800553e:	2201      	movs	r2, #1
 8005540:	fa02 f303 	lsl.w	r3, r2, r3
 8005544:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6a1a      	ldr	r2, [r3, #32]
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	43db      	mvns	r3, r3
 800554e:	401a      	ands	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6a1a      	ldr	r2, [r3, #32]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f003 031f 	and.w	r3, r3, #31
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	fa01 f303 	lsl.w	r3, r1, r3
 8005564:	431a      	orrs	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	621a      	str	r2, [r3, #32]
}
 800556a:	bf00      	nop
 800556c:	371c      	adds	r7, #28
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b08a      	sub	sp, #40	@ 0x28
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
 800557e:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e0a0      	b.n	80056cc <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d106      	bne.n	80055a4 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f898 	bl	80056d4 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3304      	adds	r3, #4
 80055b4:	4619      	mov	r1, r3
 80055b6:	4610      	mov	r0, r2
 80055b8:	f7ff faca 	bl	8004b50 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6818      	ldr	r0, [r3, #0]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	6819      	ldr	r1, [r3, #0]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	2203      	movs	r2, #3
 80055ca:	f7ff fe9f 	bl	800530c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	699a      	ldr	r2, [r3, #24]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 020c 	bic.w	r2, r2, #12
 80055dc:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6999      	ldr	r1, [r3, #24]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80055fe:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6812      	ldr	r2, [r2, #0]
 800560a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800560e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005612:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689a      	ldr	r2, [r3, #8]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005622:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	6812      	ldr	r2, [r2, #0]
 800562e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005632:	f023 0307 	bic.w	r3, r3, #7
 8005636:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689a      	ldr	r2, [r3, #8]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0204 	orr.w	r2, r2, #4
 8005646:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005648:	2300      	movs	r3, #0
 800564a:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800564c:	2300      	movs	r3, #0
 800564e:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005650:	2370      	movs	r3, #112	@ 0x70
 8005652:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005654:	2300      	movs	r3, #0
 8005656:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005658:	2300      	movs	r3, #0
 800565a:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800565c:	2300      	movs	r3, #0
 800565e:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f107 020c 	add.w	r2, r7, #12
 800566e:	4611      	mov	r1, r2
 8005670:	4618      	mov	r0, r3
 8005672:	f7ff fbbb 	bl	8004dec <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6812      	ldr	r2, [r2, #0]
 8005680:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005684:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005688:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8005698:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3728      	adds	r7, #40	@ 0x28
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056f6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056fe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005706:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800570e:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d108      	bne.n	8005728 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005716:	7bbb      	ldrb	r3, [r7, #14]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d105      	bne.n	8005728 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800571c:	7b7b      	ldrb	r3, [r7, #13]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d102      	bne.n	8005728 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005722:	7b3b      	ldrb	r3, [r7, #12]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d001      	beq.n	800572c <HAL_TIMEx_HallSensor_Start_IT+0x44>
  {
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e067      	b.n	80057fc <HAL_TIMEx_HallSensor_Start_IT+0x114>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2202      	movs	r2, #2
 8005738:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0202 	orr.w	r2, r2, #2
 800575a:	60da      	str	r2, [r3, #12]

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2201      	movs	r2, #1
 8005762:	2100      	movs	r1, #0
 8005764:	4618      	mov	r0, r3
 8005766:	f7ff fee1 	bl	800552c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a25      	ldr	r2, [pc, #148]	@ (8005804 <HAL_TIMEx_HallSensor_Start_IT+0x11c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d022      	beq.n	80057ba <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800577c:	d01d      	beq.n	80057ba <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a21      	ldr	r2, [pc, #132]	@ (8005808 <HAL_TIMEx_HallSensor_Start_IT+0x120>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d018      	beq.n	80057ba <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a1f      	ldr	r2, [pc, #124]	@ (800580c <HAL_TIMEx_HallSensor_Start_IT+0x124>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d013      	beq.n	80057ba <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a1e      	ldr	r2, [pc, #120]	@ (8005810 <HAL_TIMEx_HallSensor_Start_IT+0x128>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d00e      	beq.n	80057ba <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005814 <HAL_TIMEx_HallSensor_Start_IT+0x12c>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d009      	beq.n	80057ba <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005818 <HAL_TIMEx_HallSensor_Start_IT+0x130>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d004      	beq.n	80057ba <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a19      	ldr	r2, [pc, #100]	@ (800581c <HAL_TIMEx_HallSensor_Start_IT+0x134>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d115      	bne.n	80057e6 <HAL_TIMEx_HallSensor_Start_IT+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	4b17      	ldr	r3, [pc, #92]	@ (8005820 <HAL_TIMEx_HallSensor_Start_IT+0x138>)
 80057c2:	4013      	ands	r3, r2
 80057c4:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2b06      	cmp	r3, #6
 80057ca:	d015      	beq.n	80057f8 <HAL_TIMEx_HallSensor_Start_IT+0x110>
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057d2:	d011      	beq.n	80057f8 <HAL_TIMEx_HallSensor_Start_IT+0x110>
    {
      __HAL_TIM_ENABLE(htim);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0201 	orr.w	r2, r2, #1
 80057e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e4:	e008      	b.n	80057f8 <HAL_TIMEx_HallSensor_Start_IT+0x110>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f042 0201 	orr.w	r2, r2, #1
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	e000      	b.n	80057fa <HAL_TIMEx_HallSensor_Start_IT+0x112>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	40012c00 	.word	0x40012c00
 8005808:	40000400 	.word	0x40000400
 800580c:	40000800 	.word	0x40000800
 8005810:	40000c00 	.word	0x40000c00
 8005814:	40013400 	.word	0x40013400
 8005818:	40014000 	.word	0x40014000
 800581c:	40015000 	.word	0x40015000
 8005820:	00010007 	.word	0x00010007

08005824 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005834:	2b01      	cmp	r3, #1
 8005836:	d101      	bne.n	800583c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005838:	2302      	movs	r3, #2
 800583a:	e074      	b.n	8005926 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a34      	ldr	r2, [pc, #208]	@ (8005934 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d009      	beq.n	800587a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a33      	ldr	r2, [pc, #204]	@ (8005938 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d004      	beq.n	800587a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a31      	ldr	r2, [pc, #196]	@ (800593c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d108      	bne.n	800588c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005880:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	4313      	orrs	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005896:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	4313      	orrs	r3, r2
 80058a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a21      	ldr	r2, [pc, #132]	@ (8005934 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d022      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058bc:	d01d      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a1f      	ldr	r2, [pc, #124]	@ (8005940 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d018      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005944 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d013      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a1c      	ldr	r2, [pc, #112]	@ (8005948 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d00e      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a15      	ldr	r2, [pc, #84]	@ (8005938 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d009      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a18      	ldr	r2, [pc, #96]	@ (800594c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d004      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a11      	ldr	r2, [pc, #68]	@ (800593c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d10c      	bne.n	8005914 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005900:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	4313      	orrs	r3, r2
 800590a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40012c00 	.word	0x40012c00
 8005938:	40013400 	.word	0x40013400
 800593c:	40015000 	.word	0x40015000
 8005940:	40000400 	.word	0x40000400
 8005944:	40000800 	.word	0x40000800
 8005948:	40000c00 	.word	0x40000c00
 800594c:	40014000 	.word	0x40014000

08005950 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005968:	2302      	movs	r3, #2
 800596a:	e078      	b.n	8005a5e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	4313      	orrs	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	041b      	lsls	r3, r3, #16
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1c      	ldr	r2, [pc, #112]	@ (8005a6c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d009      	beq.n	8005a12 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1b      	ldr	r2, [pc, #108]	@ (8005a70 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d004      	beq.n	8005a12 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a19      	ldr	r2, [pc, #100]	@ (8005a74 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d11c      	bne.n	8005a4c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a1c:	051b      	lsls	r3, r3, #20
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	40012c00 	.word	0x40012c00
 8005a70:	40013400 	.word	0x40013400
 8005a74:	40015000 	.word	0x40015000

08005a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b00:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005b04:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b085      	sub	sp, #20
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b26:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005b2a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	43db      	mvns	r3, r3
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	1d3b      	adds	r3, r7, #4
 8005b5e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b0a7      	sub	sp, #156	@ 0x9c
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	881b      	ldrh	r3, [r3, #0]
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bb6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	78db      	ldrb	r3, [r3, #3]
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	d81f      	bhi.n	8005c02 <USB_ActivateEndpoint+0x72>
 8005bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bc8 <USB_ActivateEndpoint+0x38>)
 8005bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc8:	08005bd9 	.word	0x08005bd9
 8005bcc:	08005bf5 	.word	0x08005bf5
 8005bd0:	08005c0b 	.word	0x08005c0b
 8005bd4:	08005be7 	.word	0x08005be7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005bd8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005bdc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005be0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005be4:	e012      	b.n	8005c0c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005be6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005bea:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005bee:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005bf2:	e00b      	b.n	8005c0c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005bf4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005bf8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005bfc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005c00:	e004      	b.n	8005c0c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8005c08:	e000      	b.n	8005c0c <USB_ActivateEndpoint+0x7c>
      break;
 8005c0a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	441a      	add	r2, r3
 8005c16:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005c1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	b21b      	sxth	r3, r3
 8005c3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c46:	b21a      	sxth	r2, r3
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	b21b      	sxth	r3, r3
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	b21b      	sxth	r3, r3
 8005c52:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	441a      	add	r2, r3
 8005c60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005c64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	7b1b      	ldrb	r3, [r3, #12]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f040 8180 	bne.w	8005f82 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	785b      	ldrb	r3, [r3, #1]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f000 8084 	beq.w	8005d94 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	61bb      	str	r3, [r7, #24]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	461a      	mov	r2, r3
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	61bb      	str	r3, [r7, #24]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	00da      	lsls	r2, r3, #3
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cae:	617b      	str	r3, [r7, #20]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	88db      	ldrh	r3, [r3, #6]
 8005cb4:	085b      	lsrs	r3, r3, #1
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4413      	add	r3, r2
 8005cca:	881b      	ldrh	r3, [r3, #0]
 8005ccc:	827b      	strh	r3, [r7, #18]
 8005cce:	8a7b      	ldrh	r3, [r7, #18]
 8005cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d01b      	beq.n	8005d10 <USB_ActivateEndpoint+0x180>
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cee:	823b      	strh	r3, [r7, #16]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	441a      	add	r2, r3
 8005cfa:	8a3b      	ldrh	r3, [r7, #16]
 8005cfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d08:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	78db      	ldrb	r3, [r3, #3]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d020      	beq.n	8005d5a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d2e:	81bb      	strh	r3, [r7, #12]
 8005d30:	89bb      	ldrh	r3, [r7, #12]
 8005d32:	f083 0320 	eor.w	r3, r3, #32
 8005d36:	81bb      	strh	r3, [r7, #12]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	441a      	add	r2, r3
 8005d42:	89bb      	ldrh	r3, [r7, #12]
 8005d44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	8013      	strh	r3, [r2, #0]
 8005d58:	e3f9      	b.n	800654e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4413      	add	r3, r2
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d70:	81fb      	strh	r3, [r7, #14]
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	441a      	add	r2, r3
 8005d7c:	89fb      	ldrh	r3, [r7, #14]
 8005d7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	8013      	strh	r3, [r2, #0]
 8005d92:	e3dc      	b.n	800654e <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da4:	4413      	add	r3, r2
 8005da6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	00da      	lsls	r2, r3, #3
 8005dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db0:	4413      	add	r3, r2
 8005db2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	88db      	ldrh	r3, [r3, #6]
 8005dbc:	085b      	lsrs	r3, r3, #1
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd8:	4413      	add	r3, r2
 8005dda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	00da      	lsls	r2, r3, #3
 8005de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de4:	4413      	add	r3, r2
 8005de6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfa:	801a      	strh	r2, [r3, #0]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10a      	bne.n	8005e1a <USB_ActivateEndpoint+0x28a>
 8005e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e16:	801a      	strh	r2, [r3, #0]
 8005e18:	e041      	b.n	8005e9e <USB_ActivateEndpoint+0x30e>
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e20:	d81c      	bhi.n	8005e5c <USB_ActivateEndpoint+0x2cc>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	085b      	lsrs	r3, r3, #1
 8005e28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d004      	beq.n	8005e42 <USB_ActivateEndpoint+0x2b2>
 8005e38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	029b      	lsls	r3, r3, #10
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	4313      	orrs	r3, r2
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e58:	801a      	strh	r2, [r3, #0]
 8005e5a:	e020      	b.n	8005e9e <USB_ActivateEndpoint+0x30e>
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	095b      	lsrs	r3, r3, #5
 8005e62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	f003 031f 	and.w	r3, r3, #31
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d104      	bne.n	8005e7c <USB_ActivateEndpoint+0x2ec>
 8005e72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e76:	3b01      	subs	r3, #1
 8005e78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	029b      	lsls	r3, r3, #10
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	881b      	ldrh	r3, [r3, #0]
 8005eaa:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005eac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005eae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d01b      	beq.n	8005eee <USB_ActivateEndpoint+0x35e>
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	881b      	ldrh	r3, [r3, #0]
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ec8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ecc:	843b      	strh	r3, [r7, #32]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	441a      	add	r2, r3
 8005ed8:	8c3b      	ldrh	r3, [r7, #32]
 8005eda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ede:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ee2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d124      	bne.n	8005f40 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	881b      	ldrh	r3, [r3, #0]
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f0c:	83bb      	strh	r3, [r7, #28]
 8005f0e:	8bbb      	ldrh	r3, [r7, #28]
 8005f10:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005f14:	83bb      	strh	r3, [r7, #28]
 8005f16:	8bbb      	ldrh	r3, [r7, #28]
 8005f18:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005f1c:	83bb      	strh	r3, [r7, #28]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	441a      	add	r2, r3
 8005f28:	8bbb      	ldrh	r3, [r7, #28]
 8005f2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	8013      	strh	r3, [r2, #0]
 8005f3e:	e306      	b.n	800654e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	881b      	ldrh	r3, [r3, #0]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f56:	83fb      	strh	r3, [r7, #30]
 8005f58:	8bfb      	ldrh	r3, [r7, #30]
 8005f5a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005f5e:	83fb      	strh	r3, [r7, #30]
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	441a      	add	r2, r3
 8005f6a:	8bfb      	ldrh	r3, [r7, #30]
 8005f6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	8013      	strh	r3, [r2, #0]
 8005f80:	e2e5      	b.n	800654e <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	78db      	ldrb	r3, [r3, #3]
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d11e      	bne.n	8005fc8 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fa0:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	441a      	add	r2, r3
 8005fae:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8005fb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fba:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	8013      	strh	r3, [r2, #0]
 8005fc6:	e01d      	b.n	8006004 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fde:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	441a      	add	r2, r3
 8005fec:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8005ff0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ff4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ff8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ffc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006000:	b29b      	uxth	r3, r3
 8006002:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800600e:	b29b      	uxth	r3, r3
 8006010:	461a      	mov	r2, r3
 8006012:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006014:	4413      	add	r3, r2
 8006016:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	00da      	lsls	r2, r3, #3
 800601e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006020:	4413      	add	r3, r2
 8006022:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006026:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	891b      	ldrh	r3, [r3, #8]
 800602c:	085b      	lsrs	r3, r3, #1
 800602e:	b29b      	uxth	r3, r3
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	b29a      	uxth	r2, r3
 8006034:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006036:	801a      	strh	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	677b      	str	r3, [r7, #116]	@ 0x74
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006042:	b29b      	uxth	r3, r3
 8006044:	461a      	mov	r2, r3
 8006046:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006048:	4413      	add	r3, r2
 800604a:	677b      	str	r3, [r7, #116]	@ 0x74
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	00da      	lsls	r2, r3, #3
 8006052:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006054:	4413      	add	r3, r2
 8006056:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800605a:	673b      	str	r3, [r7, #112]	@ 0x70
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	895b      	ldrh	r3, [r3, #10]
 8006060:	085b      	lsrs	r3, r3, #1
 8006062:	b29b      	uxth	r3, r3
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	b29a      	uxth	r2, r3
 8006068:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800606a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	785b      	ldrb	r3, [r3, #1]
 8006070:	2b00      	cmp	r3, #0
 8006072:	f040 81af 	bne.w	80063d4 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4413      	add	r3, r2
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8006086:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800608a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d01d      	beq.n	80060ce <USB_ActivateEndpoint+0x53e>
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	b29b      	uxth	r3, r3
 80060a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060a8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	441a      	add	r2, r3
 80060b6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80060ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4413      	add	r3, r2
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80060de:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80060e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d01d      	beq.n	8006126 <USB_ActivateEndpoint+0x596>
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006100:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	441a      	add	r2, r3
 800610e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006112:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006116:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800611a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800611e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006122:	b29b      	uxth	r3, r3
 8006124:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	785b      	ldrb	r3, [r3, #1]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d16b      	bne.n	8006206 <USB_ActivateEndpoint+0x676>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006138:	b29b      	uxth	r3, r3
 800613a:	461a      	mov	r2, r3
 800613c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800613e:	4413      	add	r3, r2
 8006140:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	00da      	lsls	r2, r3, #3
 8006148:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800614a:	4413      	add	r3, r2
 800614c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006150:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006152:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	b29b      	uxth	r3, r3
 8006158:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800615c:	b29a      	uxth	r2, r3
 800615e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006160:	801a      	strh	r2, [r3, #0]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10a      	bne.n	8006180 <USB_ActivateEndpoint+0x5f0>
 800616a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	b29b      	uxth	r3, r3
 8006170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006178:	b29a      	uxth	r2, r3
 800617a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800617c:	801a      	strh	r2, [r3, #0]
 800617e:	e05d      	b.n	800623c <USB_ActivateEndpoint+0x6ac>
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	2b3e      	cmp	r3, #62	@ 0x3e
 8006186:	d81c      	bhi.n	80061c2 <USB_ActivateEndpoint+0x632>
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	085b      	lsrs	r3, r3, #1
 800618e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	d004      	beq.n	80061a8 <USB_ActivateEndpoint+0x618>
 800619e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061a2:	3301      	adds	r3, #1
 80061a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80061a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	029b      	lsls	r3, r3, #10
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	4313      	orrs	r3, r2
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061be:	801a      	strh	r2, [r3, #0]
 80061c0:	e03c      	b.n	800623c <USB_ActivateEndpoint+0x6ac>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	095b      	lsrs	r3, r3, #5
 80061c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	f003 031f 	and.w	r3, r3, #31
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d104      	bne.n	80061e2 <USB_ActivateEndpoint+0x652>
 80061d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061dc:	3b01      	subs	r3, #1
 80061de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80061e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	029b      	lsls	r3, r3, #10
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	4313      	orrs	r3, r2
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061fe:	b29a      	uxth	r2, r3
 8006200:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006202:	801a      	strh	r2, [r3, #0]
 8006204:	e01a      	b.n	800623c <USB_ActivateEndpoint+0x6ac>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	785b      	ldrb	r3, [r3, #1]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d116      	bne.n	800623c <USB_ActivateEndpoint+0x6ac>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	657b      	str	r3, [r7, #84]	@ 0x54
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006218:	b29b      	uxth	r3, r3
 800621a:	461a      	mov	r2, r3
 800621c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800621e:	4413      	add	r3, r2
 8006220:	657b      	str	r3, [r7, #84]	@ 0x54
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	00da      	lsls	r2, r3, #3
 8006228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800622a:	4413      	add	r3, r2
 800622c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006230:	653b      	str	r3, [r7, #80]	@ 0x50
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	b29a      	uxth	r2, r3
 8006238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800623a:	801a      	strh	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	785b      	ldrb	r3, [r3, #1]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d16b      	bne.n	8006320 <USB_ActivateEndpoint+0x790>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006252:	b29b      	uxth	r3, r3
 8006254:	461a      	mov	r2, r3
 8006256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006258:	4413      	add	r3, r2
 800625a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	00da      	lsls	r2, r3, #3
 8006262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006264:	4413      	add	r3, r2
 8006266:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800626a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800626c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800626e:	881b      	ldrh	r3, [r3, #0]
 8006270:	b29b      	uxth	r3, r3
 8006272:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006276:	b29a      	uxth	r2, r3
 8006278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800627a:	801a      	strh	r2, [r3, #0]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10a      	bne.n	800629a <USB_ActivateEndpoint+0x70a>
 8006284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	b29b      	uxth	r3, r3
 800628a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800628e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006292:	b29a      	uxth	r2, r3
 8006294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006296:	801a      	strh	r2, [r3, #0]
 8006298:	e05b      	b.n	8006352 <USB_ActivateEndpoint+0x7c2>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	2b3e      	cmp	r3, #62	@ 0x3e
 80062a0:	d81c      	bhi.n	80062dc <USB_ActivateEndpoint+0x74c>
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	085b      	lsrs	r3, r3, #1
 80062a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d004      	beq.n	80062c2 <USB_ActivateEndpoint+0x732>
 80062b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062bc:	3301      	adds	r3, #1
 80062be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	029b      	lsls	r3, r3, #10
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	4313      	orrs	r3, r2
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d8:	801a      	strh	r2, [r3, #0]
 80062da:	e03a      	b.n	8006352 <USB_ActivateEndpoint+0x7c2>
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	095b      	lsrs	r3, r3, #5
 80062e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f003 031f 	and.w	r3, r3, #31
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d104      	bne.n	80062fc <USB_ActivateEndpoint+0x76c>
 80062f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062f6:	3b01      	subs	r3, #1
 80062f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	b29a      	uxth	r2, r3
 8006302:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006306:	b29b      	uxth	r3, r3
 8006308:	029b      	lsls	r3, r3, #10
 800630a:	b29b      	uxth	r3, r3
 800630c:	4313      	orrs	r3, r2
 800630e:	b29b      	uxth	r3, r3
 8006310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006318:	b29a      	uxth	r2, r3
 800631a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631c:	801a      	strh	r2, [r3, #0]
 800631e:	e018      	b.n	8006352 <USB_ActivateEndpoint+0x7c2>
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	785b      	ldrb	r3, [r3, #1]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d114      	bne.n	8006352 <USB_ActivateEndpoint+0x7c2>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800632e:	b29b      	uxth	r3, r3
 8006330:	461a      	mov	r2, r3
 8006332:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006334:	4413      	add	r3, r2
 8006336:	647b      	str	r3, [r7, #68]	@ 0x44
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	00da      	lsls	r2, r3, #3
 800633e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006340:	4413      	add	r3, r2
 8006342:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006346:	643b      	str	r3, [r7, #64]	@ 0x40
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	b29a      	uxth	r2, r3
 800634e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006350:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	b29b      	uxth	r3, r3
 8006360:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006364:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006368:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800636a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800636c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006370:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006372:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006374:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006378:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	441a      	add	r2, r3
 8006384:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006386:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800638a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800638e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006396:	b29b      	uxth	r3, r3
 8006398:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4413      	add	r3, r2
 80063a4:	881b      	ldrh	r3, [r3, #0]
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063b0:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	441a      	add	r2, r3
 80063bc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80063be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	8013      	strh	r3, [r2, #0]
 80063d2:	e0bc      	b.n	800654e <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4413      	add	r3, r2
 80063de:	881b      	ldrh	r3, [r3, #0]
 80063e0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80063e4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80063e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d01d      	beq.n	800642c <USB_ActivateEndpoint+0x89c>
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006402:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006406:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	441a      	add	r2, r3
 8006414:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006418:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800641c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006420:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006428:	b29b      	uxth	r3, r3
 800642a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800643c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8006440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006444:	2b00      	cmp	r3, #0
 8006446:	d01d      	beq.n	8006484 <USB_ActivateEndpoint+0x8f4>
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	b29b      	uxth	r3, r3
 8006456:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800645a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800645e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	441a      	add	r2, r3
 800646c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8006470:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006474:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006478:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800647c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006480:	b29b      	uxth	r3, r3
 8006482:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	78db      	ldrb	r3, [r3, #3]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d024      	beq.n	80064d6 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	b29b      	uxth	r3, r3
 800649a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800649e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064a2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80064a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80064aa:	f083 0320 	eor.w	r3, r3, #32
 80064ae:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	441a      	add	r2, r3
 80064bc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80064c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	8013      	strh	r3, [r2, #0]
 80064d4:	e01d      	b.n	8006512 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064ec:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	441a      	add	r2, r3
 80064fa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80064fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006502:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006506:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800650a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800650e:	b29b      	uxth	r3, r3
 8006510:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	b29b      	uxth	r3, r3
 8006520:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006524:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006528:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	441a      	add	r2, r3
 8006536:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800653a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800653e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006542:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800654a:	b29b      	uxth	r3, r3
 800654c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800654e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8006552:	4618      	mov	r0, r3
 8006554:	379c      	adds	r7, #156	@ 0x9c
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop

08006560 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006560:	b480      	push	{r7}
 8006562:	b08d      	sub	sp, #52	@ 0x34
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	7b1b      	ldrb	r3, [r3, #12]
 800656e:	2b00      	cmp	r3, #0
 8006570:	f040 808e 	bne.w	8006690 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	785b      	ldrb	r3, [r3, #1]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d044      	beq.n	8006606 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	81bb      	strh	r3, [r7, #12]
 800658a:	89bb      	ldrh	r3, [r7, #12]
 800658c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006590:	2b00      	cmp	r3, #0
 8006592:	d01b      	beq.n	80065cc <USB_DeactivateEndpoint+0x6c>
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	881b      	ldrh	r3, [r3, #0]
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065aa:	817b      	strh	r3, [r7, #10]
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	441a      	add	r2, r3
 80065b6:	897b      	ldrh	r3, [r7, #10]
 80065b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	b29b      	uxth	r3, r3
 80065da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065e2:	813b      	strh	r3, [r7, #8]
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	441a      	add	r2, r3
 80065ee:	893b      	ldrh	r3, [r7, #8]
 80065f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006600:	b29b      	uxth	r3, r3
 8006602:	8013      	strh	r3, [r2, #0]
 8006604:	e192      	b.n	800692c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	881b      	ldrh	r3, [r3, #0]
 8006612:	827b      	strh	r3, [r7, #18]
 8006614:	8a7b      	ldrh	r3, [r7, #18]
 8006616:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d01b      	beq.n	8006656 <USB_DeactivateEndpoint+0xf6>
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	4413      	add	r3, r2
 8006628:	881b      	ldrh	r3, [r3, #0]
 800662a:	b29b      	uxth	r3, r3
 800662c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006630:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006634:	823b      	strh	r3, [r7, #16]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	441a      	add	r2, r3
 8006640:	8a3b      	ldrh	r3, [r7, #16]
 8006642:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006646:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800664a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800664e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006652:	b29b      	uxth	r3, r3
 8006654:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	b29b      	uxth	r3, r3
 8006664:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006668:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800666c:	81fb      	strh	r3, [r7, #14]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	441a      	add	r2, r3
 8006678:	89fb      	ldrh	r3, [r7, #14]
 800667a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800667e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006682:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800668a:	b29b      	uxth	r3, r3
 800668c:	8013      	strh	r3, [r2, #0]
 800668e:	e14d      	b.n	800692c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	785b      	ldrb	r3, [r3, #1]
 8006694:	2b00      	cmp	r3, #0
 8006696:	f040 80a5 	bne.w	80067e4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4413      	add	r3, r2
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	843b      	strh	r3, [r7, #32]
 80066a8:	8c3b      	ldrh	r3, [r7, #32]
 80066aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d01b      	beq.n	80066ea <USB_DeactivateEndpoint+0x18a>
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4413      	add	r3, r2
 80066bc:	881b      	ldrh	r3, [r3, #0]
 80066be:	b29b      	uxth	r3, r3
 80066c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066c8:	83fb      	strh	r3, [r7, #30]
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	441a      	add	r2, r3
 80066d4:	8bfb      	ldrh	r3, [r7, #30]
 80066d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	83bb      	strh	r3, [r7, #28]
 80066f8:	8bbb      	ldrh	r3, [r7, #28]
 80066fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d01b      	beq.n	800673a <USB_DeactivateEndpoint+0x1da>
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4413      	add	r3, r2
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	b29b      	uxth	r3, r3
 8006710:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006714:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006718:	837b      	strh	r3, [r7, #26]
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	441a      	add	r2, r3
 8006724:	8b7b      	ldrh	r3, [r7, #26]
 8006726:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800672a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800672e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006732:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006736:	b29b      	uxth	r3, r3
 8006738:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	b29b      	uxth	r3, r3
 8006748:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800674c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006750:	833b      	strh	r3, [r7, #24]
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	441a      	add	r2, r3
 800675c:	8b3b      	ldrh	r3, [r7, #24]
 800675e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006762:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006766:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800676a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800676e:	b29b      	uxth	r3, r3
 8006770:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	881b      	ldrh	r3, [r3, #0]
 800677e:	b29b      	uxth	r3, r3
 8006780:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006784:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006788:	82fb      	strh	r3, [r7, #22]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	441a      	add	r2, r3
 8006794:	8afb      	ldrh	r3, [r7, #22]
 8006796:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800679a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800679e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067c0:	82bb      	strh	r3, [r7, #20]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	441a      	add	r2, r3
 80067cc:	8abb      	ldrh	r3, [r7, #20]
 80067ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067de:	b29b      	uxth	r3, r3
 80067e0:	8013      	strh	r3, [r2, #0]
 80067e2:	e0a3      	b.n	800692c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	881b      	ldrh	r3, [r3, #0]
 80067f0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80067f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80067f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d01b      	beq.n	8006834 <USB_DeactivateEndpoint+0x2d4>
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4413      	add	r3, r2
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	b29b      	uxth	r3, r3
 800680a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800680e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006812:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	441a      	add	r2, r3
 800681e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006820:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006824:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006828:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800682c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006830:	b29b      	uxth	r3, r3
 8006832:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4413      	add	r3, r2
 800683e:	881b      	ldrh	r3, [r3, #0]
 8006840:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006842:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006848:	2b00      	cmp	r3, #0
 800684a:	d01b      	beq.n	8006884 <USB_DeactivateEndpoint+0x324>
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	881b      	ldrh	r3, [r3, #0]
 8006858:	b29b      	uxth	r3, r3
 800685a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800685e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006862:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	441a      	add	r2, r3
 800686e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006870:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006874:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006878:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800687c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006880:	b29b      	uxth	r3, r3
 8006882:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	b29b      	uxth	r3, r3
 8006892:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800689a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	441a      	add	r2, r3
 80068a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80068a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80068b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068d2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	441a      	add	r2, r3
 80068de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4413      	add	r3, r2
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	b29b      	uxth	r3, r3
 8006902:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800690a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	441a      	add	r2, r3
 8006916:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006918:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800691c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006920:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006928:	b29b      	uxth	r3, r3
 800692a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3734      	adds	r7, #52	@ 0x34
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b0ac      	sub	sp, #176	@ 0xb0
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	785b      	ldrb	r3, [r3, #1]
 8006948:	2b01      	cmp	r3, #1
 800694a:	f040 84ca 	bne.w	80072e2 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	699a      	ldr	r2, [r3, #24]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	429a      	cmp	r2, r3
 8006958:	d904      	bls.n	8006964 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006962:	e003      	b.n	800696c <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	7b1b      	ldrb	r3, [r3, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d122      	bne.n	80069ba <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	6959      	ldr	r1, [r3, #20]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	88da      	ldrh	r2, [r3, #6]
 800697c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006980:	b29b      	uxth	r3, r3
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 febd 	bl	8007702 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	613b      	str	r3, [r7, #16]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006992:	b29b      	uxth	r3, r3
 8006994:	461a      	mov	r2, r3
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	4413      	add	r3, r2
 800699a:	613b      	str	r3, [r7, #16]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	00da      	lsls	r2, r3, #3
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	4413      	add	r3, r2
 80069a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	801a      	strh	r2, [r3, #0]
 80069b6:	f000 bc6f 	b.w	8007298 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	78db      	ldrb	r3, [r3, #3]
 80069be:	2b02      	cmp	r3, #2
 80069c0:	f040 831e 	bne.w	8007000 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	6a1a      	ldr	r2, [r3, #32]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	f240 82cf 	bls.w	8006f70 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	b29b      	uxth	r3, r3
 80069e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069e8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	441a      	add	r2, r3
 80069f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80069fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a02:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006a06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	6a1a      	ldr	r2, [r3, #32]
 8006a12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a16:	1ad2      	subs	r2, r2, r3
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f000 814f 	beq.w	8006cd2 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	785b      	ldrb	r3, [r3, #1]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d16b      	bne.n	8006b18 <USB_EPStartXfer+0x1de>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a50:	4413      	add	r3, r2
 8006a52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	00da      	lsls	r2, r3, #3
 8006a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a62:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a66:	881b      	ldrh	r3, [r3, #0]
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a72:	801a      	strh	r2, [r3, #0]
 8006a74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10a      	bne.n	8006a92 <USB_EPStartXfer+0x158>
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8e:	801a      	strh	r2, [r3, #0]
 8006a90:	e05b      	b.n	8006b4a <USB_EPStartXfer+0x210>
 8006a92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a96:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a98:	d81c      	bhi.n	8006ad4 <USB_EPStartXfer+0x19a>
 8006a9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a9e:	085b      	lsrs	r3, r3, #1
 8006aa0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006aa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d004      	beq.n	8006aba <USB_EPStartXfer+0x180>
 8006ab0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abc:	881b      	ldrh	r3, [r3, #0]
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	029b      	lsls	r3, r3, #10
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	4313      	orrs	r3, r2
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad0:	801a      	strh	r2, [r3, #0]
 8006ad2:	e03a      	b.n	8006b4a <USB_EPStartXfer+0x210>
 8006ad4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ad8:	095b      	lsrs	r3, r3, #5
 8006ada:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ae2:	f003 031f 	and.w	r3, r3, #31
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d104      	bne.n	8006af4 <USB_EPStartXfer+0x1ba>
 8006aea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006aee:	3b01      	subs	r3, #1
 8006af0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	029b      	lsls	r3, r3, #10
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	4313      	orrs	r3, r2
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b14:	801a      	strh	r2, [r3, #0]
 8006b16:	e018      	b.n	8006b4a <USB_EPStartXfer+0x210>
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	785b      	ldrb	r3, [r3, #1]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d114      	bne.n	8006b4a <USB_EPStartXfer+0x210>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	461a      	mov	r2, r3
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2c:	4413      	add	r3, r2
 8006b2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	00da      	lsls	r2, r3, #3
 8006b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b38:	4413      	add	r3, r2
 8006b3a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b48:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	895b      	ldrh	r3, [r3, #10]
 8006b4e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	6959      	ldr	r1, [r3, #20]
 8006b56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fdce 	bl	8007702 <USB_WritePMA>
            ep->xfer_buff += len;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	695a      	ldr	r2, [r3, #20]
 8006b6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b6e:	441a      	add	r2, r3
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	6a1a      	ldr	r2, [r3, #32]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d907      	bls.n	8006b90 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	6a1a      	ldr	r2, [r3, #32]
 8006b84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b88:	1ad2      	subs	r2, r2, r3
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	621a      	str	r2, [r3, #32]
 8006b8e:	e006      	b.n	8006b9e <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	785b      	ldrb	r3, [r3, #1]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d16b      	bne.n	8006c7e <USB_EPStartXfer+0x344>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	61bb      	str	r3, [r7, #24]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	61bb      	str	r3, [r7, #24]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	00da      	lsls	r2, r3, #3
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006bc8:	617b      	str	r3, [r7, #20]
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	801a      	strh	r2, [r3, #0]
 8006bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10a      	bne.n	8006bf8 <USB_EPStartXfer+0x2be>
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	881b      	ldrh	r3, [r3, #0]
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	801a      	strh	r2, [r3, #0]
 8006bf6:	e05d      	b.n	8006cb4 <USB_EPStartXfer+0x37a>
 8006bf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006bfc:	2b3e      	cmp	r3, #62	@ 0x3e
 8006bfe:	d81c      	bhi.n	8006c3a <USB_EPStartXfer+0x300>
 8006c00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c04:	085b      	lsrs	r3, r3, #1
 8006c06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d004      	beq.n	8006c20 <USB_EPStartXfer+0x2e6>
 8006c16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	881b      	ldrh	r3, [r3, #0]
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	029b      	lsls	r3, r3, #10
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	4313      	orrs	r3, r2
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	801a      	strh	r2, [r3, #0]
 8006c38:	e03c      	b.n	8006cb4 <USB_EPStartXfer+0x37a>
 8006c3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c3e:	095b      	lsrs	r3, r3, #5
 8006c40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c48:	f003 031f 	and.w	r3, r3, #31
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d104      	bne.n	8006c5a <USB_EPStartXfer+0x320>
 8006c50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006c54:	3b01      	subs	r3, #1
 8006c56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	029b      	lsls	r3, r3, #10
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	801a      	strh	r2, [r3, #0]
 8006c7c:	e01a      	b.n	8006cb4 <USB_EPStartXfer+0x37a>
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	785b      	ldrb	r3, [r3, #1]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d116      	bne.n	8006cb4 <USB_EPStartXfer+0x37a>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	623b      	str	r3, [r7, #32]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	461a      	mov	r2, r3
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	4413      	add	r3, r2
 8006c98:	623b      	str	r3, [r7, #32]
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	00da      	lsls	r2, r3, #3
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ca8:	61fb      	str	r3, [r7, #28]
 8006caa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	891b      	ldrh	r3, [r3, #8]
 8006cb8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	6959      	ldr	r1, [r3, #20]
 8006cc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fd19 	bl	8007702 <USB_WritePMA>
 8006cd0:	e2e2      	b.n	8007298 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	785b      	ldrb	r3, [r3, #1]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d16b      	bne.n	8006db2 <USB_EPStartXfer+0x478>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cea:	4413      	add	r3, r2
 8006cec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	00da      	lsls	r2, r3, #3
 8006cf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006cfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d0c:	801a      	strh	r2, [r3, #0]
 8006d0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10a      	bne.n	8006d2c <USB_EPStartXfer+0x3f2>
 8006d16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d28:	801a      	strh	r2, [r3, #0]
 8006d2a:	e05d      	b.n	8006de8 <USB_EPStartXfer+0x4ae>
 8006d2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d30:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d32:	d81c      	bhi.n	8006d6e <USB_EPStartXfer+0x434>
 8006d34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d38:	085b      	lsrs	r3, r3, #1
 8006d3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d004      	beq.n	8006d54 <USB_EPStartXfer+0x41a>
 8006d4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d4e:	3301      	adds	r3, #1
 8006d50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	029b      	lsls	r3, r3, #10
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	4313      	orrs	r3, r2
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d6a:	801a      	strh	r2, [r3, #0]
 8006d6c:	e03c      	b.n	8006de8 <USB_EPStartXfer+0x4ae>
 8006d6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d72:	095b      	lsrs	r3, r3, #5
 8006d74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d7c:	f003 031f 	and.w	r3, r3, #31
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d104      	bne.n	8006d8e <USB_EPStartXfer+0x454>
 8006d84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d90:	881b      	ldrh	r3, [r3, #0]
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	029b      	lsls	r3, r3, #10
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dae:	801a      	strh	r2, [r3, #0]
 8006db0:	e01a      	b.n	8006de8 <USB_EPStartXfer+0x4ae>
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	785b      	ldrb	r3, [r3, #1]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d116      	bne.n	8006de8 <USB_EPStartXfer+0x4ae>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dca:	4413      	add	r3, r2
 8006dcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	00da      	lsls	r2, r3, #3
 8006dd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006de6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	891b      	ldrh	r3, [r3, #8]
 8006dec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	6959      	ldr	r1, [r3, #20]
 8006df4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fc7f 	bl	8007702 <USB_WritePMA>
            ep->xfer_buff += len;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	695a      	ldr	r2, [r3, #20]
 8006e08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e0c:	441a      	add	r2, r3
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	6a1a      	ldr	r2, [r3, #32]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d907      	bls.n	8006e2e <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	6a1a      	ldr	r2, [r3, #32]
 8006e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e26:	1ad2      	subs	r2, r2, r3
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	621a      	str	r2, [r3, #32]
 8006e2c:	e006      	b.n	8006e3c <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	785b      	ldrb	r3, [r3, #1]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d16b      	bne.n	8006f20 <USB_EPStartXfer+0x5e6>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	461a      	mov	r2, r3
 8006e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e58:	4413      	add	r3, r2
 8006e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	00da      	lsls	r2, r3, #3
 8006e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e64:	4413      	add	r3, r2
 8006e66:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e7a:	801a      	strh	r2, [r3, #0]
 8006e7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10a      	bne.n	8006e9a <USB_EPStartXfer+0x560>
 8006e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e86:	881b      	ldrh	r3, [r3, #0]
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e96:	801a      	strh	r2, [r3, #0]
 8006e98:	e05b      	b.n	8006f52 <USB_EPStartXfer+0x618>
 8006e9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e9e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ea0:	d81c      	bhi.n	8006edc <USB_EPStartXfer+0x5a2>
 8006ea2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ea6:	085b      	lsrs	r3, r3, #1
 8006ea8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006eac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d004      	beq.n	8006ec2 <USB_EPStartXfer+0x588>
 8006eb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	029b      	lsls	r3, r3, #10
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ed8:	801a      	strh	r2, [r3, #0]
 8006eda:	e03a      	b.n	8006f52 <USB_EPStartXfer+0x618>
 8006edc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ee0:	095b      	lsrs	r3, r3, #5
 8006ee2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006eea:	f003 031f 	and.w	r3, r3, #31
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d104      	bne.n	8006efc <USB_EPStartXfer+0x5c2>
 8006ef2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006efe:	881b      	ldrh	r3, [r3, #0]
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	029b      	lsls	r3, r3, #10
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f1c:	801a      	strh	r2, [r3, #0]
 8006f1e:	e018      	b.n	8006f52 <USB_EPStartXfer+0x618>
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	785b      	ldrb	r3, [r3, #1]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d114      	bne.n	8006f52 <USB_EPStartXfer+0x618>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	461a      	mov	r2, r3
 8006f32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f34:	4413      	add	r3, r2
 8006f36:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	00da      	lsls	r2, r3, #3
 8006f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f40:	4413      	add	r3, r2
 8006f42:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	895b      	ldrh	r3, [r3, #10]
 8006f56:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	6959      	ldr	r1, [r3, #20]
 8006f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fbca 	bl	8007702 <USB_WritePMA>
 8006f6e:	e193      	b.n	8007298 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4413      	add	r3, r2
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f8e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	441a      	add	r2, r3
 8006f9c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006fa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fc4:	4413      	add	r3, r2
 8006fc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	00da      	lsls	r2, r3, #3
 8006fce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006fd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006fd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006fe0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	891b      	ldrh	r3, [r3, #8]
 8006fe6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	6959      	ldr	r1, [r3, #20]
 8006fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fb82 	bl	8007702 <USB_WritePMA>
 8006ffe:	e14b      	b.n	8007298 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	6a1a      	ldr	r2, [r3, #32]
 8007004:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007008:	1ad2      	subs	r2, r2, r3
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	b29b      	uxth	r3, r3
 800701c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 809a 	beq.w	800715a <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	673b      	str	r3, [r7, #112]	@ 0x70
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	785b      	ldrb	r3, [r3, #1]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d16b      	bne.n	800710a <USB_EPStartXfer+0x7d0>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800703c:	b29b      	uxth	r3, r3
 800703e:	461a      	mov	r2, r3
 8007040:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007042:	4413      	add	r3, r2
 8007044:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	00da      	lsls	r2, r3, #3
 800704c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800704e:	4413      	add	r3, r2
 8007050:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007054:	667b      	str	r3, [r7, #100]	@ 0x64
 8007056:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	b29b      	uxth	r3, r3
 800705c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007060:	b29a      	uxth	r2, r3
 8007062:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007064:	801a      	strh	r2, [r3, #0]
 8007066:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10a      	bne.n	8007084 <USB_EPStartXfer+0x74a>
 800706e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	b29b      	uxth	r3, r3
 8007074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800707c:	b29a      	uxth	r2, r3
 800707e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007080:	801a      	strh	r2, [r3, #0]
 8007082:	e05b      	b.n	800713c <USB_EPStartXfer+0x802>
 8007084:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007088:	2b3e      	cmp	r3, #62	@ 0x3e
 800708a:	d81c      	bhi.n	80070c6 <USB_EPStartXfer+0x78c>
 800708c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007090:	085b      	lsrs	r3, r3, #1
 8007092:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d004      	beq.n	80070ac <USB_EPStartXfer+0x772>
 80070a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070a6:	3301      	adds	r3, #1
 80070a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80070ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070ae:	881b      	ldrh	r3, [r3, #0]
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	029b      	lsls	r3, r3, #10
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	4313      	orrs	r3, r2
 80070be:	b29a      	uxth	r2, r3
 80070c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070c2:	801a      	strh	r2, [r3, #0]
 80070c4:	e03a      	b.n	800713c <USB_EPStartXfer+0x802>
 80070c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070ca:	095b      	lsrs	r3, r3, #5
 80070cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80070d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070d4:	f003 031f 	and.w	r3, r3, #31
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d104      	bne.n	80070e6 <USB_EPStartXfer+0x7ac>
 80070dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070e0:	3b01      	subs	r3, #1
 80070e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80070e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070e8:	881b      	ldrh	r3, [r3, #0]
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	029b      	lsls	r3, r3, #10
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	4313      	orrs	r3, r2
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007102:	b29a      	uxth	r2, r3
 8007104:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007106:	801a      	strh	r2, [r3, #0]
 8007108:	e018      	b.n	800713c <USB_EPStartXfer+0x802>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	785b      	ldrb	r3, [r3, #1]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d114      	bne.n	800713c <USB_EPStartXfer+0x802>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007118:	b29b      	uxth	r3, r3
 800711a:	461a      	mov	r2, r3
 800711c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800711e:	4413      	add	r3, r2
 8007120:	673b      	str	r3, [r7, #112]	@ 0x70
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	00da      	lsls	r2, r3, #3
 8007128:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800712a:	4413      	add	r3, r2
 800712c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007130:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007136:	b29a      	uxth	r2, r3
 8007138:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800713a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	895b      	ldrh	r3, [r3, #10]
 8007140:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	6959      	ldr	r1, [r3, #20]
 8007148:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800714c:	b29b      	uxth	r3, r3
 800714e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fad5 	bl	8007702 <USB_WritePMA>
 8007158:	e09e      	b.n	8007298 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	785b      	ldrb	r3, [r3, #1]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d16b      	bne.n	800723a <USB_EPStartXfer+0x900>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800716c:	b29b      	uxth	r3, r3
 800716e:	461a      	mov	r2, r3
 8007170:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007172:	4413      	add	r3, r2
 8007174:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	00da      	lsls	r2, r3, #3
 800717c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800717e:	4413      	add	r3, r2
 8007180:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007184:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007186:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	b29b      	uxth	r3, r3
 800718c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007190:	b29a      	uxth	r2, r3
 8007192:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007194:	801a      	strh	r2, [r3, #0]
 8007196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10a      	bne.n	80071b4 <USB_EPStartXfer+0x87a>
 800719e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071b0:	801a      	strh	r2, [r3, #0]
 80071b2:	e063      	b.n	800727c <USB_EPStartXfer+0x942>
 80071b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80071ba:	d81c      	bhi.n	80071f6 <USB_EPStartXfer+0x8bc>
 80071bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071c0:	085b      	lsrs	r3, r3, #1
 80071c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80071c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d004      	beq.n	80071dc <USB_EPStartXfer+0x8a2>
 80071d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80071d6:	3301      	adds	r3, #1
 80071d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80071dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071de:	881b      	ldrh	r3, [r3, #0]
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	029b      	lsls	r3, r3, #10
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	4313      	orrs	r3, r2
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071f2:	801a      	strh	r2, [r3, #0]
 80071f4:	e042      	b.n	800727c <USB_EPStartXfer+0x942>
 80071f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071fa:	095b      	lsrs	r3, r3, #5
 80071fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007200:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007204:	f003 031f 	and.w	r3, r3, #31
 8007208:	2b00      	cmp	r3, #0
 800720a:	d104      	bne.n	8007216 <USB_EPStartXfer+0x8dc>
 800720c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007210:	3b01      	subs	r3, #1
 8007212:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007216:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	b29a      	uxth	r2, r3
 800721c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007220:	b29b      	uxth	r3, r3
 8007222:	029b      	lsls	r3, r3, #10
 8007224:	b29b      	uxth	r3, r3
 8007226:	4313      	orrs	r3, r2
 8007228:	b29b      	uxth	r3, r3
 800722a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800722e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007232:	b29a      	uxth	r2, r3
 8007234:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007236:	801a      	strh	r2, [r3, #0]
 8007238:	e020      	b.n	800727c <USB_EPStartXfer+0x942>
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	785b      	ldrb	r3, [r3, #1]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d11c      	bne.n	800727c <USB_EPStartXfer+0x942>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800724e:	b29b      	uxth	r3, r3
 8007250:	461a      	mov	r2, r3
 8007252:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007256:	4413      	add	r3, r2
 8007258:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	00da      	lsls	r2, r3, #3
 8007262:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007266:	4413      	add	r3, r2
 8007268:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800726c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007274:	b29a      	uxth	r2, r3
 8007276:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800727a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	891b      	ldrh	r3, [r3, #8]
 8007280:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	6959      	ldr	r1, [r3, #20]
 8007288:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800728c:	b29b      	uxth	r3, r3
 800728e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fa35 	bl	8007702 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	881b      	ldrh	r3, [r3, #0]
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072ae:	817b      	strh	r3, [r7, #10]
 80072b0:	897b      	ldrh	r3, [r7, #10]
 80072b2:	f083 0310 	eor.w	r3, r3, #16
 80072b6:	817b      	strh	r3, [r7, #10]
 80072b8:	897b      	ldrh	r3, [r7, #10]
 80072ba:	f083 0320 	eor.w	r3, r3, #32
 80072be:	817b      	strh	r3, [r7, #10]
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	441a      	add	r2, r3
 80072ca:	897b      	ldrh	r3, [r7, #10]
 80072cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072dc:	b29b      	uxth	r3, r3
 80072de:	8013      	strh	r3, [r2, #0]
 80072e0:	e0d5      	b.n	800748e <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	7b1b      	ldrb	r3, [r3, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d156      	bne.n	8007398 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d122      	bne.n	8007338 <USB_EPStartXfer+0x9fe>
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	78db      	ldrb	r3, [r3, #3]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d11e      	bne.n	8007338 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	4413      	add	r3, r2
 8007304:	881b      	ldrh	r3, [r3, #0]
 8007306:	b29b      	uxth	r3, r3
 8007308:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800730c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007310:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	441a      	add	r2, r3
 800731e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007322:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007326:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800732a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800732e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007332:	b29b      	uxth	r3, r3
 8007334:	8013      	strh	r3, [r2, #0]
 8007336:	e01d      	b.n	8007374 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	881b      	ldrh	r3, [r3, #0]
 8007344:	b29b      	uxth	r3, r3
 8007346:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800734a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800734e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	441a      	add	r2, r3
 800735c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8007360:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007364:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007368:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800736c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007370:	b29b      	uxth	r3, r3
 8007372:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	699a      	ldr	r2, [r3, #24]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	429a      	cmp	r2, r3
 800737e:	d907      	bls.n	8007390 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	699a      	ldr	r2, [r3, #24]
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	1ad2      	subs	r2, r2, r3
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	619a      	str	r2, [r3, #24]
 800738e:	e054      	b.n	800743a <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	2200      	movs	r2, #0
 8007394:	619a      	str	r2, [r3, #24]
 8007396:	e050      	b.n	800743a <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	78db      	ldrb	r3, [r3, #3]
 800739c:	2b02      	cmp	r3, #2
 800739e:	d142      	bne.n	8007426 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d048      	beq.n	800743a <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4413      	add	r3, r2
 80073b2:	881b      	ldrh	r3, [r3, #0]
 80073b4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073b8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80073bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d005      	beq.n	80073d0 <USB_EPStartXfer+0xa96>
 80073c4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80073c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10b      	bne.n	80073e8 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80073d0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80073d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d12e      	bne.n	800743a <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80073dc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80073e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d128      	bne.n	800743a <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4413      	add	r3, r2
 80073f2:	881b      	ldrh	r3, [r3, #0]
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073fe:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	441a      	add	r2, r3
 800740c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8007410:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007414:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007418:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800741c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007420:	b29b      	uxth	r3, r3
 8007422:	8013      	strh	r3, [r2, #0]
 8007424:	e009      	b.n	800743a <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	78db      	ldrb	r3, [r3, #3]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d103      	bne.n	8007436 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2200      	movs	r2, #0
 8007432:	619a      	str	r2, [r3, #24]
 8007434:	e001      	b.n	800743a <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e02a      	b.n	8007490 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	881b      	ldrh	r3, [r3, #0]
 8007446:	b29b      	uxth	r3, r3
 8007448:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800744c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007450:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007454:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007458:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800745c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007460:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007464:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007468:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	441a      	add	r2, r3
 8007476:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800747a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800747e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007482:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007486:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800748a:	b29b      	uxth	r3, r3
 800748c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	37b0      	adds	r7, #176	@ 0xb0
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	785b      	ldrb	r3, [r3, #1]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d020      	beq.n	80074ec <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4413      	add	r3, r2
 80074b4:	881b      	ldrh	r3, [r3, #0]
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074c0:	81bb      	strh	r3, [r7, #12]
 80074c2:	89bb      	ldrh	r3, [r7, #12]
 80074c4:	f083 0310 	eor.w	r3, r3, #16
 80074c8:	81bb      	strh	r3, [r7, #12]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	441a      	add	r2, r3
 80074d4:	89bb      	ldrh	r3, [r7, #12]
 80074d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	8013      	strh	r3, [r2, #0]
 80074ea:	e01f      	b.n	800752c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	881b      	ldrh	r3, [r3, #0]
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007502:	81fb      	strh	r3, [r7, #14]
 8007504:	89fb      	ldrh	r3, [r7, #14]
 8007506:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800750a:	81fb      	strh	r3, [r7, #14]
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	441a      	add	r2, r3
 8007516:	89fb      	ldrh	r3, [r7, #14]
 8007518:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800751c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007520:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007528:	b29b      	uxth	r3, r3
 800752a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3714      	adds	r7, #20
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800753a:	b480      	push	{r7}
 800753c:	b087      	sub	sp, #28
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	785b      	ldrb	r3, [r3, #1]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d04c      	beq.n	80075e6 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	881b      	ldrh	r3, [r3, #0]
 8007558:	823b      	strh	r3, [r7, #16]
 800755a:	8a3b      	ldrh	r3, [r7, #16]
 800755c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007560:	2b00      	cmp	r3, #0
 8007562:	d01b      	beq.n	800759c <USB_EPClearStall+0x62>
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4413      	add	r3, r2
 800756e:	881b      	ldrh	r3, [r3, #0]
 8007570:	b29b      	uxth	r3, r3
 8007572:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800757a:	81fb      	strh	r3, [r7, #14]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	441a      	add	r2, r3
 8007586:	89fb      	ldrh	r3, [r7, #14]
 8007588:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800758c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007590:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007594:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007598:	b29b      	uxth	r3, r3
 800759a:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	78db      	ldrb	r3, [r3, #3]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d06c      	beq.n	800767e <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	881b      	ldrh	r3, [r3, #0]
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075ba:	81bb      	strh	r3, [r7, #12]
 80075bc:	89bb      	ldrh	r3, [r7, #12]
 80075be:	f083 0320 	eor.w	r3, r3, #32
 80075c2:	81bb      	strh	r3, [r7, #12]
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	441a      	add	r2, r3
 80075ce:	89bb      	ldrh	r3, [r7, #12]
 80075d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	8013      	strh	r3, [r2, #0]
 80075e4:	e04b      	b.n	800767e <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	881b      	ldrh	r3, [r3, #0]
 80075f2:	82fb      	strh	r3, [r7, #22]
 80075f4:	8afb      	ldrh	r3, [r7, #22]
 80075f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d01b      	beq.n	8007636 <USB_EPClearStall+0xfc>
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4413      	add	r3, r2
 8007608:	881b      	ldrh	r3, [r3, #0]
 800760a:	b29b      	uxth	r3, r3
 800760c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007610:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007614:	82bb      	strh	r3, [r7, #20]
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	441a      	add	r2, r3
 8007620:	8abb      	ldrh	r3, [r7, #20]
 8007622:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007626:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800762a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800762e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007632:	b29b      	uxth	r3, r3
 8007634:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	b29b      	uxth	r3, r3
 8007644:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007648:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800764c:	827b      	strh	r3, [r7, #18]
 800764e:	8a7b      	ldrh	r3, [r7, #18]
 8007650:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007654:	827b      	strh	r3, [r7, #18]
 8007656:	8a7b      	ldrh	r3, [r7, #18]
 8007658:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800765c:	827b      	strh	r3, [r7, #18]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	441a      	add	r2, r3
 8007668:	8a7b      	ldrh	r3, [r7, #18]
 800766a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800766e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800767a:	b29b      	uxth	r3, r3
 800767c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	371c      	adds	r7, #28
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	460b      	mov	r3, r1
 8007696:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007698:	78fb      	ldrb	r3, [r7, #3]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d103      	bne.n	80076a6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2280      	movs	r2, #128	@ 0x80
 80076a2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	370c      	adds	r7, #12
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b085      	sub	sp, #20
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80076f4:	68fb      	ldr	r3, [r7, #12]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007702:	b480      	push	{r7}
 8007704:	b08b      	sub	sp, #44	@ 0x2c
 8007706:	af00      	add	r7, sp, #0
 8007708:	60f8      	str	r0, [r7, #12]
 800770a:	60b9      	str	r1, [r7, #8]
 800770c:	4611      	mov	r1, r2
 800770e:	461a      	mov	r2, r3
 8007710:	460b      	mov	r3, r1
 8007712:	80fb      	strh	r3, [r7, #6]
 8007714:	4613      	mov	r3, r2
 8007716:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007718:	88bb      	ldrh	r3, [r7, #4]
 800771a:	3301      	adds	r3, #1
 800771c:	085b      	lsrs	r3, r3, #1
 800771e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007728:	88fa      	ldrh	r2, [r7, #6]
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	4413      	add	r3, r2
 800772e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007732:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	627b      	str	r3, [r7, #36]	@ 0x24
 8007738:	e01c      	b.n	8007774 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	3301      	adds	r3, #1
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	b21b      	sxth	r3, r3
 8007748:	021b      	lsls	r3, r3, #8
 800774a:	b21a      	sxth	r2, r3
 800774c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007750:	4313      	orrs	r3, r2
 8007752:	b21b      	sxth	r3, r3
 8007754:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	8a7a      	ldrh	r2, [r7, #18]
 800775a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	3302      	adds	r3, #2
 8007760:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	3301      	adds	r3, #1
 8007766:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	3301      	adds	r3, #1
 800776c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800776e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007770:	3b01      	subs	r3, #1
 8007772:	627b      	str	r3, [r7, #36]	@ 0x24
 8007774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1df      	bne.n	800773a <USB_WritePMA+0x38>
  }
}
 800777a:	bf00      	nop
 800777c:	bf00      	nop
 800777e:	372c      	adds	r7, #44	@ 0x2c
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007788:	b480      	push	{r7}
 800778a:	b08b      	sub	sp, #44	@ 0x2c
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	4611      	mov	r1, r2
 8007794:	461a      	mov	r2, r3
 8007796:	460b      	mov	r3, r1
 8007798:	80fb      	strh	r3, [r7, #6]
 800779a:	4613      	mov	r3, r2
 800779c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800779e:	88bb      	ldrh	r3, [r7, #4]
 80077a0:	085b      	lsrs	r3, r3, #1
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80077ae:	88fa      	ldrh	r2, [r7, #6]
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	4413      	add	r3, r2
 80077b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80077b8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80077be:	e018      	b.n	80077f2 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80077c0:	6a3b      	ldr	r3, [r7, #32]
 80077c2:	881b      	ldrh	r3, [r3, #0]
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80077c8:	6a3b      	ldr	r3, [r7, #32]
 80077ca:	3302      	adds	r3, #2
 80077cc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	b2da      	uxtb	r2, r3
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	3301      	adds	r3, #1
 80077da:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	0a1b      	lsrs	r3, r3, #8
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	3301      	adds	r3, #1
 80077ea:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80077ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ee:	3b01      	subs	r3, #1
 80077f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80077f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1e3      	bne.n	80077c0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80077f8:	88bb      	ldrh	r3, [r7, #4]
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	b29b      	uxth	r3, r3
 8007800:	2b00      	cmp	r3, #0
 8007802:	d007      	beq.n	8007814 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007804:	6a3b      	ldr	r3, [r7, #32]
 8007806:	881b      	ldrh	r3, [r3, #0]
 8007808:	b29b      	uxth	r3, r3
 800780a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	b2da      	uxtb	r2, r3
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	701a      	strb	r2, [r3, #0]
  }
}
 8007814:	bf00      	nop
 8007816:	372c      	adds	r7, #44	@ 0x2c
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	460b      	mov	r3, r1
 800782a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800782c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007830:	f002 f916 	bl	8009a60 <USBD_static_malloc>
 8007834:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d105      	bne.n	8007848 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8007844:	2302      	movs	r3, #2
 8007846:	e066      	b.n	8007916 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	7c1b      	ldrb	r3, [r3, #16]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d119      	bne.n	800788c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007858:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800785c:	2202      	movs	r2, #2
 800785e:	2181      	movs	r1, #129	@ 0x81
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f001 ffa4 	bl	80097ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2201      	movs	r2, #1
 800786a:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800786c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007870:	2202      	movs	r2, #2
 8007872:	2101      	movs	r1, #1
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f001 ff9a 	bl	80097ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2201      	movs	r2, #1
 800787e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2210      	movs	r2, #16
 8007886:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800788a:	e016      	b.n	80078ba <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800788c:	2340      	movs	r3, #64	@ 0x40
 800788e:	2202      	movs	r2, #2
 8007890:	2181      	movs	r1, #129	@ 0x81
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f001 ff8b 	bl	80097ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800789e:	2340      	movs	r3, #64	@ 0x40
 80078a0:	2202      	movs	r2, #2
 80078a2:	2101      	movs	r1, #1
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f001 ff82 	bl	80097ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2210      	movs	r2, #16
 80078b6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80078ba:	2308      	movs	r3, #8
 80078bc:	2203      	movs	r2, #3
 80078be:	2182      	movs	r1, #130	@ 0x82
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f001 ff74 	bl	80097ae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	7c1b      	ldrb	r3, [r3, #16]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d109      	bne.n	8007904 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80078f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80078fa:	2101      	movs	r1, #1
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f002 f845 	bl	800998c <USBD_LL_PrepareReceive>
 8007902:	e007      	b.n	8007914 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800790a:	2340      	movs	r3, #64	@ 0x40
 800790c:	2101      	movs	r1, #1
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f002 f83c 	bl	800998c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b082      	sub	sp, #8
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	460b      	mov	r3, r1
 8007928:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800792a:	2181      	movs	r1, #129	@ 0x81
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f001 ff64 	bl	80097fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007938:	2101      	movs	r1, #1
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f001 ff5d 	bl	80097fa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007948:	2182      	movs	r1, #130	@ 0x82
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f001 ff55 	bl	80097fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00e      	beq.n	8007988 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800797a:	4618      	mov	r0, r3
 800797c:	f002 f87e 	bl	8009a7c <USBD_static_free>
    pdev->pClassData = NULL;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
	...

08007994 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80079a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80079a6:	2300      	movs	r3, #0
 80079a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80079aa:	2300      	movs	r3, #0
 80079ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e0af      	b.n	8007b1c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d03f      	beq.n	8007a48 <USBD_CDC_Setup+0xb4>
 80079c8:	2b20      	cmp	r3, #32
 80079ca:	f040 809f 	bne.w	8007b0c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	88db      	ldrh	r3, [r3, #6]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d02e      	beq.n	8007a34 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	b25b      	sxtb	r3, r3
 80079dc:	2b00      	cmp	r3, #0
 80079de:	da16      	bge.n	8007a0e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80079ec:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	88d2      	ldrh	r2, [r2, #6]
 80079f2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	88db      	ldrh	r3, [r3, #6]
 80079f8:	2b07      	cmp	r3, #7
 80079fa:	bf28      	it	cs
 80079fc:	2307      	movcs	r3, #7
 80079fe:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	89fa      	ldrh	r2, [r7, #14]
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f001 fae9 	bl	8008fde <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007a0c:	e085      	b.n	8007b1a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	785a      	ldrb	r2, [r3, #1]
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	88db      	ldrh	r3, [r3, #6]
 8007a1c:	b2da      	uxtb	r2, r3
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007a24:	6939      	ldr	r1, [r7, #16]
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	88db      	ldrh	r3, [r3, #6]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f001 fb02 	bl	8009036 <USBD_CtlPrepareRx>
      break;
 8007a32:	e072      	b.n	8007b1a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	7850      	ldrb	r0, [r2, #1]
 8007a40:	2200      	movs	r2, #0
 8007a42:	6839      	ldr	r1, [r7, #0]
 8007a44:	4798      	blx	r3
      break;
 8007a46:	e068      	b.n	8007b1a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	785b      	ldrb	r3, [r3, #1]
 8007a4c:	2b0b      	cmp	r3, #11
 8007a4e:	d852      	bhi.n	8007af6 <USBD_CDC_Setup+0x162>
 8007a50:	a201      	add	r2, pc, #4	@ (adr r2, 8007a58 <USBD_CDC_Setup+0xc4>)
 8007a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a56:	bf00      	nop
 8007a58:	08007a89 	.word	0x08007a89
 8007a5c:	08007b05 	.word	0x08007b05
 8007a60:	08007af7 	.word	0x08007af7
 8007a64:	08007af7 	.word	0x08007af7
 8007a68:	08007af7 	.word	0x08007af7
 8007a6c:	08007af7 	.word	0x08007af7
 8007a70:	08007af7 	.word	0x08007af7
 8007a74:	08007af7 	.word	0x08007af7
 8007a78:	08007af7 	.word	0x08007af7
 8007a7c:	08007af7 	.word	0x08007af7
 8007a80:	08007ab3 	.word	0x08007ab3
 8007a84:	08007add 	.word	0x08007add
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b03      	cmp	r3, #3
 8007a92:	d107      	bne.n	8007aa4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007a94:	f107 030a 	add.w	r3, r7, #10
 8007a98:	2202      	movs	r2, #2
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f001 fa9e 	bl	8008fde <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007aa2:	e032      	b.n	8007b0a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f001 fa28 	bl	8008efc <USBD_CtlError>
            ret = USBD_FAIL;
 8007aac:	2303      	movs	r3, #3
 8007aae:	75fb      	strb	r3, [r7, #23]
          break;
 8007ab0:	e02b      	b.n	8007b0a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b03      	cmp	r3, #3
 8007abc:	d107      	bne.n	8007ace <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007abe:	f107 030d 	add.w	r3, r7, #13
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f001 fa89 	bl	8008fde <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007acc:	e01d      	b.n	8007b0a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007ace:	6839      	ldr	r1, [r7, #0]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f001 fa13 	bl	8008efc <USBD_CtlError>
            ret = USBD_FAIL;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	75fb      	strb	r3, [r7, #23]
          break;
 8007ada:	e016      	b.n	8007b0a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d00f      	beq.n	8007b08 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007ae8:	6839      	ldr	r1, [r7, #0]
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f001 fa06 	bl	8008efc <USBD_CtlError>
            ret = USBD_FAIL;
 8007af0:	2303      	movs	r3, #3
 8007af2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007af4:	e008      	b.n	8007b08 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007af6:	6839      	ldr	r1, [r7, #0]
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 f9ff 	bl	8008efc <USBD_CtlError>
          ret = USBD_FAIL;
 8007afe:	2303      	movs	r3, #3
 8007b00:	75fb      	strb	r3, [r7, #23]
          break;
 8007b02:	e002      	b.n	8007b0a <USBD_CDC_Setup+0x176>
          break;
 8007b04:	bf00      	nop
 8007b06:	e008      	b.n	8007b1a <USBD_CDC_Setup+0x186>
          break;
 8007b08:	bf00      	nop
      }
      break;
 8007b0a:	e006      	b.n	8007b1a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007b0c:	6839      	ldr	r1, [r7, #0]
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f001 f9f4 	bl	8008efc <USBD_CtlError>
      ret = USBD_FAIL;
 8007b14:	2303      	movs	r3, #3
 8007b16:	75fb      	strb	r3, [r7, #23]
      break;
 8007b18:	bf00      	nop
  }

  return (uint8_t)ret;
 8007b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3718      	adds	r7, #24
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007b36:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e04f      	b.n	8007be6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007b4c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007b4e:	78fa      	ldrb	r2, [r7, #3]
 8007b50:	6879      	ldr	r1, [r7, #4]
 8007b52:	4613      	mov	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4413      	add	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	440b      	add	r3, r1
 8007b5c:	3318      	adds	r3, #24
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d029      	beq.n	8007bb8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007b64:	78fa      	ldrb	r2, [r7, #3]
 8007b66:	6879      	ldr	r1, [r7, #4]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	440b      	add	r3, r1
 8007b72:	3318      	adds	r3, #24
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	78f9      	ldrb	r1, [r7, #3]
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	440b      	add	r3, r1
 8007b80:	00db      	lsls	r3, r3, #3
 8007b82:	4403      	add	r3, r0
 8007b84:	3320      	adds	r3, #32
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b8c:	fb01 f303 	mul.w	r3, r1, r3
 8007b90:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d110      	bne.n	8007bb8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007b96:	78fa      	ldrb	r2, [r7, #3]
 8007b98:	6879      	ldr	r1, [r7, #4]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	4413      	add	r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	440b      	add	r3, r1
 8007ba4:	3318      	adds	r3, #24
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007baa:	78f9      	ldrb	r1, [r7, #3]
 8007bac:	2300      	movs	r3, #0
 8007bae:	2200      	movs	r2, #0
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f001 feca 	bl	800994a <USBD_LL_Transmit>
 8007bb6:	e015      	b.n	8007be4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00b      	beq.n	8007be4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007be0:	78fa      	ldrb	r2, [r7, #3]
 8007be2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c00:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d101      	bne.n	8007c10 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	e015      	b.n	8007c3c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007c10:	78fb      	ldrb	r3, [r7, #3]
 8007c12:	4619      	mov	r1, r3
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f001 feda 	bl	80099ce <USBD_LL_GetRxDataSize>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007c36:	4611      	mov	r1, r2
 8007c38:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c52:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d101      	bne.n	8007c5e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e01a      	b.n	8007c94 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d014      	beq.n	8007c92 <USBD_CDC_EP0_RxReady+0x4e>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007c6e:	2bff      	cmp	r3, #255	@ 0xff
 8007c70:	d00f      	beq.n	8007c92 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8007c80:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c88:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	22ff      	movs	r2, #255	@ 0xff
 8007c8e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2243      	movs	r2, #67	@ 0x43
 8007ca8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007caa:	4b03      	ldr	r3, [pc, #12]	@ (8007cb8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr
 8007cb8:	20000094 	.word	0x20000094

08007cbc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2243      	movs	r2, #67	@ 0x43
 8007cc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007cca:	4b03      	ldr	r3, [pc, #12]	@ (8007cd8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr
 8007cd8:	20000050 	.word	0x20000050

08007cdc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2243      	movs	r2, #67	@ 0x43
 8007ce8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007cea:	4b03      	ldr	r3, [pc, #12]	@ (8007cf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	200000d8 	.word	0x200000d8

08007cfc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	220a      	movs	r2, #10
 8007d08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007d0a:	4b03      	ldr	r3, [pc, #12]	@ (8007d18 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr
 8007d18:	2000000c 	.word	0x2000000c

08007d1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d101      	bne.n	8007d30 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e004      	b.n	8007d3a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	683a      	ldr	r2, [r7, #0]
 8007d34:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	370c      	adds	r7, #12
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b087      	sub	sp, #28
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	60f8      	str	r0, [r7, #12]
 8007d4e:	60b9      	str	r1, [r7, #8]
 8007d50:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007d58:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007d60:	2303      	movs	r3, #3
 8007d62:	e008      	b.n	8007d76 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	371c      	adds	r7, #28
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007d82:	b480      	push	{r7}
 8007d84:	b085      	sub	sp, #20
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007d92:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e004      	b.n	8007da8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	683a      	ldr	r2, [r7, #0]
 8007da2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3714      	adds	r7, #20
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007dc2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d101      	bne.n	8007dd6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e01a      	b.n	8007e0c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d114      	bne.n	8007e0a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007dfe:	2181      	movs	r1, #129	@ 0x81
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f001 fda2 	bl	800994a <USBD_LL_Transmit>

    ret = USBD_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e016      	b.n	8007e60 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	7c1b      	ldrb	r3, [r3, #16]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d109      	bne.n	8007e4e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e44:	2101      	movs	r1, #1
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f001 fda0 	bl	800998c <USBD_LL_PrepareReceive>
 8007e4c:	e007      	b.n	8007e5e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e54:	2340      	movs	r3, #64	@ 0x40
 8007e56:	2101      	movs	r1, #1
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f001 fd97 	bl	800998c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	4613      	mov	r3, r2
 8007e74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10a      	bne.n	8007e92 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8007e7c:	4817      	ldr	r0, [pc, #92]	@ (8007edc <USBD_Init+0x74>)
 8007e7e:	f001 fefb 	bl	8009c78 <iprintf>
 8007e82:	4817      	ldr	r0, [pc, #92]	@ (8007ee0 <USBD_Init+0x78>)
 8007e84:	f001 fef8 	bl	8009c78 <iprintf>
 8007e88:	200a      	movs	r0, #10
 8007e8a:	f001 ff07 	bl	8009c9c <putchar>
#endif
    return USBD_FAIL;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e01f      	b.n	8007ed2 <USBD_Init+0x6a>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d003      	beq.n	8007eb8 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	79fa      	ldrb	r2, [r7, #7]
 8007ec4:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f001 fbf6 	bl	80096b8 <USBD_LL_Init>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3718      	adds	r7, #24
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	0800ae78 	.word	0x0800ae78
 8007ee0:	0800ae80 	.word	0x0800ae80

08007ee4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d10a      	bne.n	8007f0e <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8007ef8:	4812      	ldr	r0, [pc, #72]	@ (8007f44 <USBD_RegisterClass+0x60>)
 8007efa:	f001 febd 	bl	8009c78 <iprintf>
 8007efe:	4812      	ldr	r0, [pc, #72]	@ (8007f48 <USBD_RegisterClass+0x64>)
 8007f00:	f001 feba 	bl	8009c78 <iprintf>
 8007f04:	200a      	movs	r0, #10
 8007f06:	f001 fec9 	bl	8009c9c <putchar>
#endif
    return USBD_FAIL;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e016      	b.n	8007f3c <USBD_RegisterClass+0x58>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	683a      	ldr	r2, [r7, #0]
 8007f12:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00b      	beq.n	8007f3a <USBD_RegisterClass+0x56>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f2a:	f107 020e 	add.w	r2, r7, #14
 8007f2e:	4610      	mov	r0, r2
 8007f30:	4798      	blx	r3
 8007f32:	4602      	mov	r2, r0
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	0800ae78 	.word	0x0800ae78
 8007f48:	0800ae98 	.word	0x0800ae98

08007f4c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f001 fc0f 	bl	8009778 <USBD_LL_Start>
 8007f5a:	4603      	mov	r3, r0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	370c      	adds	r7, #12
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr

08007f7a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b084      	sub	sp, #16
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
 8007f82:	460b      	mov	r3, r1
 8007f84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007f86:	2303      	movs	r3, #3
 8007f88:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d009      	beq.n	8007fa8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	78fa      	ldrb	r2, [r7, #3]
 8007f9e:	4611      	mov	r1, r2
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	4798      	blx	r3
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b082      	sub	sp, #8
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
 8007fba:	460b      	mov	r3, r1
 8007fbc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d007      	beq.n	8007fd8 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	78fa      	ldrb	r2, [r7, #3]
 8007fd2:	4611      	mov	r1, r2
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	4798      	blx	r3
  }

  return USBD_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b084      	sub	sp, #16
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007ff2:	6839      	ldr	r1, [r7, #0]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f000 ff47 	bl	8008e88 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008008:	461a      	mov	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008016:	f003 031f 	and.w	r3, r3, #31
 800801a:	2b02      	cmp	r3, #2
 800801c:	d01a      	beq.n	8008054 <USBD_LL_SetupStage+0x72>
 800801e:	2b02      	cmp	r3, #2
 8008020:	d822      	bhi.n	8008068 <USBD_LL_SetupStage+0x86>
 8008022:	2b00      	cmp	r3, #0
 8008024:	d002      	beq.n	800802c <USBD_LL_SetupStage+0x4a>
 8008026:	2b01      	cmp	r3, #1
 8008028:	d00a      	beq.n	8008040 <USBD_LL_SetupStage+0x5e>
 800802a:	e01d      	b.n	8008068 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f9ef 	bl	8008418 <USBD_StdDevReq>
 800803a:	4603      	mov	r3, r0
 800803c:	73fb      	strb	r3, [r7, #15]
      break;
 800803e:	e020      	b.n	8008082 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008046:	4619      	mov	r1, r3
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fa53 	bl	80084f4 <USBD_StdItfReq>
 800804e:	4603      	mov	r3, r0
 8008050:	73fb      	strb	r3, [r7, #15]
      break;
 8008052:	e016      	b.n	8008082 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800805a:	4619      	mov	r1, r3
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fa92 	bl	8008586 <USBD_StdEPReq>
 8008062:	4603      	mov	r3, r0
 8008064:	73fb      	strb	r3, [r7, #15]
      break;
 8008066:	e00c      	b.n	8008082 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800806e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008072:	b2db      	uxtb	r3, r3
 8008074:	4619      	mov	r1, r3
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f001 fbde 	bl	8009838 <USBD_LL_StallEP>
 800807c:	4603      	mov	r3, r0
 800807e:	73fb      	strb	r3, [r7, #15]
      break;
 8008080:	bf00      	nop
  }

  return ret;
 8008082:	7bfb      	ldrb	r3, [r7, #15]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	460b      	mov	r3, r1
 8008096:	607a      	str	r2, [r7, #4]
 8008098:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800809a:	7afb      	ldrb	r3, [r7, #11]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d138      	bne.n	8008112 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80080a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80080ae:	2b03      	cmp	r3, #3
 80080b0:	d14a      	bne.n	8008148 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	689a      	ldr	r2, [r3, #8]
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d913      	bls.n	80080e6 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	689a      	ldr	r2, [r3, #8]
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	1ad2      	subs	r2, r2, r3
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	68da      	ldr	r2, [r3, #12]
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	4293      	cmp	r3, r2
 80080d6:	bf28      	it	cs
 80080d8:	4613      	movcs	r3, r2
 80080da:	461a      	mov	r2, r3
 80080dc:	6879      	ldr	r1, [r7, #4]
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f000 ffc6 	bl	8009070 <USBD_CtlContinueRx>
 80080e4:	e030      	b.n	8008148 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	d10b      	bne.n	800810a <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d005      	beq.n	800810a <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f000 ffc1 	bl	8009092 <USBD_CtlSendStatus>
 8008110:	e01a      	b.n	8008148 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b03      	cmp	r3, #3
 800811c:	d114      	bne.n	8008148 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008124:	699b      	ldr	r3, [r3, #24]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00e      	beq.n	8008148 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	7afa      	ldrb	r2, [r7, #11]
 8008134:	4611      	mov	r1, r2
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	4798      	blx	r3
 800813a:	4603      	mov	r3, r0
 800813c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800813e:	7dfb      	ldrb	r3, [r7, #23]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d001      	beq.n	8008148 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008144:	7dfb      	ldrb	r3, [r7, #23]
 8008146:	e000      	b.n	800814a <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3718      	adds	r7, #24
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b086      	sub	sp, #24
 8008156:	af00      	add	r7, sp, #0
 8008158:	60f8      	str	r0, [r7, #12]
 800815a:	460b      	mov	r3, r1
 800815c:	607a      	str	r2, [r7, #4]
 800815e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008160:	7afb      	ldrb	r3, [r7, #11]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d16b      	bne.n	800823e <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	3314      	adds	r3, #20
 800816a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008172:	2b02      	cmp	r3, #2
 8008174:	d156      	bne.n	8008224 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	689a      	ldr	r2, [r3, #8]
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	429a      	cmp	r2, r3
 8008180:	d914      	bls.n	80081ac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	689a      	ldr	r2, [r3, #8]
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	1ad2      	subs	r2, r2, r3
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	461a      	mov	r2, r3
 8008196:	6879      	ldr	r1, [r7, #4]
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f000 ff3b 	bl	8009014 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800819e:	2300      	movs	r3, #0
 80081a0:	2200      	movs	r2, #0
 80081a2:	2100      	movs	r1, #0
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f001 fbf1 	bl	800998c <USBD_LL_PrepareReceive>
 80081aa:	e03b      	b.n	8008224 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	68da      	ldr	r2, [r3, #12]
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d11c      	bne.n	80081f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	685a      	ldr	r2, [r3, #4]
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d316      	bcc.n	80081f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d20f      	bcs.n	80081f2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80081d2:	2200      	movs	r2, #0
 80081d4:	2100      	movs	r1, #0
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f000 ff1c 	bl	8009014 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2200      	movs	r2, #0
 80081e0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081e4:	2300      	movs	r3, #0
 80081e6:	2200      	movs	r2, #0
 80081e8:	2100      	movs	r1, #0
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f001 fbce 	bl	800998c <USBD_LL_PrepareReceive>
 80081f0:	e018      	b.n	8008224 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b03      	cmp	r3, #3
 80081fc:	d10b      	bne.n	8008216 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d005      	beq.n	8008216 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008216:	2180      	movs	r1, #128	@ 0x80
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f001 fb0d 	bl	8009838 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f000 ff4a 	bl	80090b8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800822a:	2b01      	cmp	r3, #1
 800822c:	d122      	bne.n	8008274 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f7ff fe98 	bl	8007f64 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800823c:	e01a      	b.n	8008274 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008244:	b2db      	uxtb	r3, r3
 8008246:	2b03      	cmp	r3, #3
 8008248:	d114      	bne.n	8008274 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00e      	beq.n	8008274 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	7afa      	ldrb	r2, [r7, #11]
 8008260:	4611      	mov	r1, r2
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	4798      	blx	r3
 8008266:	4603      	mov	r3, r0
 8008268:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800826a:	7dfb      	ldrb	r3, [r7, #23]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d001      	beq.n	8008274 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008270:	7dfb      	ldrb	r3, [r7, #23]
 8008272:	e000      	b.n	8008276 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3718      	adds	r7, #24
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b082      	sub	sp, #8
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80082ae:	2303      	movs	r3, #3
 80082b0:	e02f      	b.n	8008312 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00f      	beq.n	80082dc <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d009      	beq.n	80082dc <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	6852      	ldr	r2, [r2, #4]
 80082d4:	b2d2      	uxtb	r2, r2
 80082d6:	4611      	mov	r1, r2
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082dc:	2340      	movs	r3, #64	@ 0x40
 80082de:	2200      	movs	r2, #0
 80082e0:	2100      	movs	r1, #0
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f001 fa63 	bl	80097ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2240      	movs	r2, #64	@ 0x40
 80082f4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082f8:	2340      	movs	r3, #64	@ 0x40
 80082fa:	2200      	movs	r2, #0
 80082fc:	2180      	movs	r1, #128	@ 0x80
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f001 fa55 	bl	80097ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2240      	movs	r2, #64	@ 0x40
 800830e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800831a:	b480      	push	{r7}
 800831c:	b083      	sub	sp, #12
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	460b      	mov	r3, r1
 8008324:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	78fa      	ldrb	r2, [r7, #3]
 800832a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	370c      	adds	r7, #12
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr

0800833a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800833a:	b480      	push	{r7}
 800833c:	b083      	sub	sp, #12
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008348:	b2da      	uxtb	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2204      	movs	r2, #4
 8008354:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	370c      	adds	r7, #12
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr

08008366 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008366:	b480      	push	{r7}
 8008368:	b083      	sub	sp, #12
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b04      	cmp	r3, #4
 8008378:	d106      	bne.n	8008388 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008380:	b2da      	uxtb	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	370c      	adds	r7, #12
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b082      	sub	sp, #8
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d101      	bne.n	80083ac <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80083a8:	2303      	movs	r3, #3
 80083aa:	e012      	b.n	80083d2 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	2b03      	cmp	r3, #3
 80083b6:	d10b      	bne.n	80083d0 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083be:	69db      	ldr	r3, [r3, #28]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d005      	beq.n	80083d0 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083ca:	69db      	ldr	r3, [r3, #28]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3708      	adds	r7, #8
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80083da:	b480      	push	{r7}
 80083dc:	b087      	sub	sp, #28
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	3301      	adds	r3, #1
 80083f0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80083f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80083fc:	021b      	lsls	r3, r3, #8
 80083fe:	b21a      	sxth	r2, r3
 8008400:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008404:	4313      	orrs	r3, r2
 8008406:	b21b      	sxth	r3, r3
 8008408:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800840a:	89fb      	ldrh	r3, [r7, #14]
}
 800840c:	4618      	mov	r0, r3
 800840e:	371c      	adds	r7, #28
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008422:	2300      	movs	r3, #0
 8008424:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800842e:	2b40      	cmp	r3, #64	@ 0x40
 8008430:	d005      	beq.n	800843e <USBD_StdDevReq+0x26>
 8008432:	2b40      	cmp	r3, #64	@ 0x40
 8008434:	d853      	bhi.n	80084de <USBD_StdDevReq+0xc6>
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00b      	beq.n	8008452 <USBD_StdDevReq+0x3a>
 800843a:	2b20      	cmp	r3, #32
 800843c:	d14f      	bne.n	80084de <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	4798      	blx	r3
 800844c:	4603      	mov	r3, r0
 800844e:	73fb      	strb	r3, [r7, #15]
      break;
 8008450:	e04a      	b.n	80084e8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	785b      	ldrb	r3, [r3, #1]
 8008456:	2b09      	cmp	r3, #9
 8008458:	d83b      	bhi.n	80084d2 <USBD_StdDevReq+0xba>
 800845a:	a201      	add	r2, pc, #4	@ (adr r2, 8008460 <USBD_StdDevReq+0x48>)
 800845c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008460:	080084b5 	.word	0x080084b5
 8008464:	080084c9 	.word	0x080084c9
 8008468:	080084d3 	.word	0x080084d3
 800846c:	080084bf 	.word	0x080084bf
 8008470:	080084d3 	.word	0x080084d3
 8008474:	08008493 	.word	0x08008493
 8008478:	08008489 	.word	0x08008489
 800847c:	080084d3 	.word	0x080084d3
 8008480:	080084ab 	.word	0x080084ab
 8008484:	0800849d 	.word	0x0800849d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 f9de 	bl	800884c <USBD_GetDescriptor>
          break;
 8008490:	e024      	b.n	80084dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008492:	6839      	ldr	r1, [r7, #0]
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 fb6d 	bl	8008b74 <USBD_SetAddress>
          break;
 800849a:	e01f      	b.n	80084dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800849c:	6839      	ldr	r1, [r7, #0]
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fbac 	bl	8008bfc <USBD_SetConfig>
 80084a4:	4603      	mov	r3, r0
 80084a6:	73fb      	strb	r3, [r7, #15]
          break;
 80084a8:	e018      	b.n	80084dc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80084aa:	6839      	ldr	r1, [r7, #0]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fc4b 	bl	8008d48 <USBD_GetConfig>
          break;
 80084b2:	e013      	b.n	80084dc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80084b4:	6839      	ldr	r1, [r7, #0]
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fc7c 	bl	8008db4 <USBD_GetStatus>
          break;
 80084bc:	e00e      	b.n	80084dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fcab 	bl	8008e1c <USBD_SetFeature>
          break;
 80084c6:	e009      	b.n	80084dc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fcba 	bl	8008e44 <USBD_ClrFeature>
          break;
 80084d0:	e004      	b.n	80084dc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80084d2:	6839      	ldr	r1, [r7, #0]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fd11 	bl	8008efc <USBD_CtlError>
          break;
 80084da:	bf00      	nop
      }
      break;
 80084dc:	e004      	b.n	80084e8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80084de:	6839      	ldr	r1, [r7, #0]
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 fd0b 	bl	8008efc <USBD_CtlError>
      break;
 80084e6:	bf00      	nop
  }

  return ret;
 80084e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop

080084f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084fe:	2300      	movs	r3, #0
 8008500:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800850a:	2b40      	cmp	r3, #64	@ 0x40
 800850c:	d005      	beq.n	800851a <USBD_StdItfReq+0x26>
 800850e:	2b40      	cmp	r3, #64	@ 0x40
 8008510:	d82f      	bhi.n	8008572 <USBD_StdItfReq+0x7e>
 8008512:	2b00      	cmp	r3, #0
 8008514:	d001      	beq.n	800851a <USBD_StdItfReq+0x26>
 8008516:	2b20      	cmp	r3, #32
 8008518:	d12b      	bne.n	8008572 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008520:	b2db      	uxtb	r3, r3
 8008522:	3b01      	subs	r3, #1
 8008524:	2b02      	cmp	r3, #2
 8008526:	d81d      	bhi.n	8008564 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	889b      	ldrh	r3, [r3, #4]
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b01      	cmp	r3, #1
 8008530:	d813      	bhi.n	800855a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	4798      	blx	r3
 8008540:	4603      	mov	r3, r0
 8008542:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	88db      	ldrh	r3, [r3, #6]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d110      	bne.n	800856e <USBD_StdItfReq+0x7a>
 800854c:	7bfb      	ldrb	r3, [r7, #15]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10d      	bne.n	800856e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fd9d 	bl	8009092 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008558:	e009      	b.n	800856e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800855a:	6839      	ldr	r1, [r7, #0]
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fccd 	bl	8008efc <USBD_CtlError>
          break;
 8008562:	e004      	b.n	800856e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fcc8 	bl	8008efc <USBD_CtlError>
          break;
 800856c:	e000      	b.n	8008570 <USBD_StdItfReq+0x7c>
          break;
 800856e:	bf00      	nop
      }
      break;
 8008570:	e004      	b.n	800857c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 fcc1 	bl	8008efc <USBD_CtlError>
      break;
 800857a:	bf00      	nop
  }

  return ret;
 800857c:	7bfb      	ldrb	r3, [r7, #15]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b084      	sub	sp, #16
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008590:	2300      	movs	r3, #0
 8008592:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	889b      	ldrh	r3, [r3, #4]
 8008598:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80085a2:	2b40      	cmp	r3, #64	@ 0x40
 80085a4:	d007      	beq.n	80085b6 <USBD_StdEPReq+0x30>
 80085a6:	2b40      	cmp	r3, #64	@ 0x40
 80085a8:	f200 8145 	bhi.w	8008836 <USBD_StdEPReq+0x2b0>
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00c      	beq.n	80085ca <USBD_StdEPReq+0x44>
 80085b0:	2b20      	cmp	r3, #32
 80085b2:	f040 8140 	bne.w	8008836 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	6839      	ldr	r1, [r7, #0]
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	4798      	blx	r3
 80085c4:	4603      	mov	r3, r0
 80085c6:	73fb      	strb	r3, [r7, #15]
      break;
 80085c8:	e13a      	b.n	8008840 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	785b      	ldrb	r3, [r3, #1]
 80085ce:	2b03      	cmp	r3, #3
 80085d0:	d007      	beq.n	80085e2 <USBD_StdEPReq+0x5c>
 80085d2:	2b03      	cmp	r3, #3
 80085d4:	f300 8129 	bgt.w	800882a <USBD_StdEPReq+0x2a4>
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d07f      	beq.n	80086dc <USBD_StdEPReq+0x156>
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d03c      	beq.n	800865a <USBD_StdEPReq+0xd4>
 80085e0:	e123      	b.n	800882a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d002      	beq.n	80085f4 <USBD_StdEPReq+0x6e>
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	d016      	beq.n	8008620 <USBD_StdEPReq+0x9a>
 80085f2:	e02c      	b.n	800864e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085f4:	7bbb      	ldrb	r3, [r7, #14]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00d      	beq.n	8008616 <USBD_StdEPReq+0x90>
 80085fa:	7bbb      	ldrb	r3, [r7, #14]
 80085fc:	2b80      	cmp	r3, #128	@ 0x80
 80085fe:	d00a      	beq.n	8008616 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008600:	7bbb      	ldrb	r3, [r7, #14]
 8008602:	4619      	mov	r1, r3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f001 f917 	bl	8009838 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800860a:	2180      	movs	r1, #128	@ 0x80
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f001 f913 	bl	8009838 <USBD_LL_StallEP>
 8008612:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008614:	e020      	b.n	8008658 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fc6f 	bl	8008efc <USBD_CtlError>
              break;
 800861e:	e01b      	b.n	8008658 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	885b      	ldrh	r3, [r3, #2]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10e      	bne.n	8008646 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008628:	7bbb      	ldrb	r3, [r7, #14]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00b      	beq.n	8008646 <USBD_StdEPReq+0xc0>
 800862e:	7bbb      	ldrb	r3, [r7, #14]
 8008630:	2b80      	cmp	r3, #128	@ 0x80
 8008632:	d008      	beq.n	8008646 <USBD_StdEPReq+0xc0>
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	88db      	ldrh	r3, [r3, #6]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d104      	bne.n	8008646 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800863c:	7bbb      	ldrb	r3, [r7, #14]
 800863e:	4619      	mov	r1, r3
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f001 f8f9 	bl	8009838 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fd23 	bl	8009092 <USBD_CtlSendStatus>

              break;
 800864c:	e004      	b.n	8008658 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fc53 	bl	8008efc <USBD_CtlError>
              break;
 8008656:	bf00      	nop
          }
          break;
 8008658:	e0ec      	b.n	8008834 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008660:	b2db      	uxtb	r3, r3
 8008662:	2b02      	cmp	r3, #2
 8008664:	d002      	beq.n	800866c <USBD_StdEPReq+0xe6>
 8008666:	2b03      	cmp	r3, #3
 8008668:	d016      	beq.n	8008698 <USBD_StdEPReq+0x112>
 800866a:	e030      	b.n	80086ce <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800866c:	7bbb      	ldrb	r3, [r7, #14]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00d      	beq.n	800868e <USBD_StdEPReq+0x108>
 8008672:	7bbb      	ldrb	r3, [r7, #14]
 8008674:	2b80      	cmp	r3, #128	@ 0x80
 8008676:	d00a      	beq.n	800868e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008678:	7bbb      	ldrb	r3, [r7, #14]
 800867a:	4619      	mov	r1, r3
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f001 f8db 	bl	8009838 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008682:	2180      	movs	r1, #128	@ 0x80
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f001 f8d7 	bl	8009838 <USBD_LL_StallEP>
 800868a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800868c:	e025      	b.n	80086da <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800868e:	6839      	ldr	r1, [r7, #0]
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fc33 	bl	8008efc <USBD_CtlError>
              break;
 8008696:	e020      	b.n	80086da <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	885b      	ldrh	r3, [r3, #2]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d11b      	bne.n	80086d8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80086a0:	7bbb      	ldrb	r3, [r7, #14]
 80086a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d004      	beq.n	80086b4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	4619      	mov	r1, r3
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f001 f8e1 	bl	8009876 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fcec 	bl	8009092 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	6839      	ldr	r1, [r7, #0]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	4798      	blx	r3
 80086c8:	4603      	mov	r3, r0
 80086ca:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80086cc:	e004      	b.n	80086d8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80086ce:	6839      	ldr	r1, [r7, #0]
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 fc13 	bl	8008efc <USBD_CtlError>
              break;
 80086d6:	e000      	b.n	80086da <USBD_StdEPReq+0x154>
              break;
 80086d8:	bf00      	nop
          }
          break;
 80086da:	e0ab      	b.n	8008834 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d002      	beq.n	80086ee <USBD_StdEPReq+0x168>
 80086e8:	2b03      	cmp	r3, #3
 80086ea:	d032      	beq.n	8008752 <USBD_StdEPReq+0x1cc>
 80086ec:	e097      	b.n	800881e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086ee:	7bbb      	ldrb	r3, [r7, #14]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d007      	beq.n	8008704 <USBD_StdEPReq+0x17e>
 80086f4:	7bbb      	ldrb	r3, [r7, #14]
 80086f6:	2b80      	cmp	r3, #128	@ 0x80
 80086f8:	d004      	beq.n	8008704 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80086fa:	6839      	ldr	r1, [r7, #0]
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 fbfd 	bl	8008efc <USBD_CtlError>
                break;
 8008702:	e091      	b.n	8008828 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008704:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008708:	2b00      	cmp	r3, #0
 800870a:	da0b      	bge.n	8008724 <USBD_StdEPReq+0x19e>
 800870c:	7bbb      	ldrb	r3, [r7, #14]
 800870e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008712:	4613      	mov	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4413      	add	r3, r2
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	3310      	adds	r3, #16
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	4413      	add	r3, r2
 8008720:	3304      	adds	r3, #4
 8008722:	e00b      	b.n	800873c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008724:	7bbb      	ldrb	r3, [r7, #14]
 8008726:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800872a:	4613      	mov	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4413      	add	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	4413      	add	r3, r2
 800873a:	3304      	adds	r3, #4
 800873c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	2200      	movs	r2, #0
 8008742:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	2202      	movs	r2, #2
 8008748:	4619      	mov	r1, r3
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 fc47 	bl	8008fde <USBD_CtlSendData>
              break;
 8008750:	e06a      	b.n	8008828 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008752:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008756:	2b00      	cmp	r3, #0
 8008758:	da11      	bge.n	800877e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800875a:	7bbb      	ldrb	r3, [r7, #14]
 800875c:	f003 020f 	and.w	r2, r3, #15
 8008760:	6879      	ldr	r1, [r7, #4]
 8008762:	4613      	mov	r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	4413      	add	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	440b      	add	r3, r1
 800876c:	3324      	adds	r3, #36	@ 0x24
 800876e:	881b      	ldrh	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d117      	bne.n	80087a4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008774:	6839      	ldr	r1, [r7, #0]
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 fbc0 	bl	8008efc <USBD_CtlError>
                  break;
 800877c:	e054      	b.n	8008828 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800877e:	7bbb      	ldrb	r3, [r7, #14]
 8008780:	f003 020f 	and.w	r2, r3, #15
 8008784:	6879      	ldr	r1, [r7, #4]
 8008786:	4613      	mov	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	4413      	add	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	440b      	add	r3, r1
 8008790:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008794:	881b      	ldrh	r3, [r3, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d104      	bne.n	80087a4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fbad 	bl	8008efc <USBD_CtlError>
                  break;
 80087a2:	e041      	b.n	8008828 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	da0b      	bge.n	80087c4 <USBD_StdEPReq+0x23e>
 80087ac:	7bbb      	ldrb	r3, [r7, #14]
 80087ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087b2:	4613      	mov	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4413      	add	r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	3310      	adds	r3, #16
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	4413      	add	r3, r2
 80087c0:	3304      	adds	r3, #4
 80087c2:	e00b      	b.n	80087dc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087c4:	7bbb      	ldrb	r3, [r7, #14]
 80087c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087ca:	4613      	mov	r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4413      	add	r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	4413      	add	r3, r2
 80087da:	3304      	adds	r3, #4
 80087dc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087de:	7bbb      	ldrb	r3, [r7, #14]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <USBD_StdEPReq+0x264>
 80087e4:	7bbb      	ldrb	r3, [r7, #14]
 80087e6:	2b80      	cmp	r3, #128	@ 0x80
 80087e8:	d103      	bne.n	80087f2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	2200      	movs	r2, #0
 80087ee:	601a      	str	r2, [r3, #0]
 80087f0:	e00e      	b.n	8008810 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80087f2:	7bbb      	ldrb	r3, [r7, #14]
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f001 f85c 	bl	80098b4 <USBD_LL_IsStallEP>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d003      	beq.n	800880a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	2201      	movs	r2, #1
 8008806:	601a      	str	r2, [r3, #0]
 8008808:	e002      	b.n	8008810 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	2200      	movs	r2, #0
 800880e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	2202      	movs	r2, #2
 8008814:	4619      	mov	r1, r3
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fbe1 	bl	8008fde <USBD_CtlSendData>
              break;
 800881c:	e004      	b.n	8008828 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800881e:	6839      	ldr	r1, [r7, #0]
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fb6b 	bl	8008efc <USBD_CtlError>
              break;
 8008826:	bf00      	nop
          }
          break;
 8008828:	e004      	b.n	8008834 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800882a:	6839      	ldr	r1, [r7, #0]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fb65 	bl	8008efc <USBD_CtlError>
          break;
 8008832:	bf00      	nop
      }
      break;
 8008834:	e004      	b.n	8008840 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fb5f 	bl	8008efc <USBD_CtlError>
      break;
 800883e:	bf00      	nop
  }

  return ret;
 8008840:	7bfb      	ldrb	r3, [r7, #15]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
	...

0800884c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008856:	2300      	movs	r3, #0
 8008858:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800885a:	2300      	movs	r3, #0
 800885c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800885e:	2300      	movs	r3, #0
 8008860:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	885b      	ldrh	r3, [r3, #2]
 8008866:	0a1b      	lsrs	r3, r3, #8
 8008868:	b29b      	uxth	r3, r3
 800886a:	3b01      	subs	r3, #1
 800886c:	2b0e      	cmp	r3, #14
 800886e:	f200 8152 	bhi.w	8008b16 <USBD_GetDescriptor+0x2ca>
 8008872:	a201      	add	r2, pc, #4	@ (adr r2, 8008878 <USBD_GetDescriptor+0x2c>)
 8008874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008878:	080088e9 	.word	0x080088e9
 800887c:	08008901 	.word	0x08008901
 8008880:	08008941 	.word	0x08008941
 8008884:	08008b17 	.word	0x08008b17
 8008888:	08008b17 	.word	0x08008b17
 800888c:	08008ab7 	.word	0x08008ab7
 8008890:	08008ae3 	.word	0x08008ae3
 8008894:	08008b17 	.word	0x08008b17
 8008898:	08008b17 	.word	0x08008b17
 800889c:	08008b17 	.word	0x08008b17
 80088a0:	08008b17 	.word	0x08008b17
 80088a4:	08008b17 	.word	0x08008b17
 80088a8:	08008b17 	.word	0x08008b17
 80088ac:	08008b17 	.word	0x08008b17
 80088b0:	080088b5 	.word	0x080088b5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088ba:	69db      	ldr	r3, [r3, #28]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00b      	beq.n	80088d8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088c6:	69db      	ldr	r3, [r3, #28]
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	7c12      	ldrb	r2, [r2, #16]
 80088cc:	f107 0108 	add.w	r1, r7, #8
 80088d0:	4610      	mov	r0, r2
 80088d2:	4798      	blx	r3
 80088d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088d6:	e126      	b.n	8008b26 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80088d8:	6839      	ldr	r1, [r7, #0]
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 fb0e 	bl	8008efc <USBD_CtlError>
        err++;
 80088e0:	7afb      	ldrb	r3, [r7, #11]
 80088e2:	3301      	adds	r3, #1
 80088e4:	72fb      	strb	r3, [r7, #11]
      break;
 80088e6:	e11e      	b.n	8008b26 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	7c12      	ldrb	r2, [r2, #16]
 80088f4:	f107 0108 	add.w	r1, r7, #8
 80088f8:	4610      	mov	r0, r2
 80088fa:	4798      	blx	r3
 80088fc:	60f8      	str	r0, [r7, #12]
      break;
 80088fe:	e112      	b.n	8008b26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	7c1b      	ldrb	r3, [r3, #16]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d10d      	bne.n	8008924 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800890e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008910:	f107 0208 	add.w	r2, r7, #8
 8008914:	4610      	mov	r0, r2
 8008916:	4798      	blx	r3
 8008918:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	3301      	adds	r3, #1
 800891e:	2202      	movs	r2, #2
 8008920:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008922:	e100      	b.n	8008b26 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800892a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800892c:	f107 0208 	add.w	r2, r7, #8
 8008930:	4610      	mov	r0, r2
 8008932:	4798      	blx	r3
 8008934:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	3301      	adds	r3, #1
 800893a:	2202      	movs	r2, #2
 800893c:	701a      	strb	r2, [r3, #0]
      break;
 800893e:	e0f2      	b.n	8008b26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	885b      	ldrh	r3, [r3, #2]
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b05      	cmp	r3, #5
 8008948:	f200 80ac 	bhi.w	8008aa4 <USBD_GetDescriptor+0x258>
 800894c:	a201      	add	r2, pc, #4	@ (adr r2, 8008954 <USBD_GetDescriptor+0x108>)
 800894e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008952:	bf00      	nop
 8008954:	0800896d 	.word	0x0800896d
 8008958:	080089a1 	.word	0x080089a1
 800895c:	080089d5 	.word	0x080089d5
 8008960:	08008a09 	.word	0x08008a09
 8008964:	08008a3d 	.word	0x08008a3d
 8008968:	08008a71 	.word	0x08008a71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00b      	beq.n	8008990 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	7c12      	ldrb	r2, [r2, #16]
 8008984:	f107 0108 	add.w	r1, r7, #8
 8008988:	4610      	mov	r0, r2
 800898a:	4798      	blx	r3
 800898c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800898e:	e091      	b.n	8008ab4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fab2 	bl	8008efc <USBD_CtlError>
            err++;
 8008998:	7afb      	ldrb	r3, [r7, #11]
 800899a:	3301      	adds	r3, #1
 800899c:	72fb      	strb	r3, [r7, #11]
          break;
 800899e:	e089      	b.n	8008ab4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00b      	beq.n	80089c4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	7c12      	ldrb	r2, [r2, #16]
 80089b8:	f107 0108 	add.w	r1, r7, #8
 80089bc:	4610      	mov	r0, r2
 80089be:	4798      	blx	r3
 80089c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089c2:	e077      	b.n	8008ab4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089c4:	6839      	ldr	r1, [r7, #0]
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 fa98 	bl	8008efc <USBD_CtlError>
            err++;
 80089cc:	7afb      	ldrb	r3, [r7, #11]
 80089ce:	3301      	adds	r3, #1
 80089d0:	72fb      	strb	r3, [r7, #11]
          break;
 80089d2:	e06f      	b.n	8008ab4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00b      	beq.n	80089f8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	7c12      	ldrb	r2, [r2, #16]
 80089ec:	f107 0108 	add.w	r1, r7, #8
 80089f0:	4610      	mov	r0, r2
 80089f2:	4798      	blx	r3
 80089f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089f6:	e05d      	b.n	8008ab4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089f8:	6839      	ldr	r1, [r7, #0]
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fa7e 	bl	8008efc <USBD_CtlError>
            err++;
 8008a00:	7afb      	ldrb	r3, [r7, #11]
 8008a02:	3301      	adds	r3, #1
 8008a04:	72fb      	strb	r3, [r7, #11]
          break;
 8008a06:	e055      	b.n	8008ab4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00b      	beq.n	8008a2c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	7c12      	ldrb	r2, [r2, #16]
 8008a20:	f107 0108 	add.w	r1, r7, #8
 8008a24:	4610      	mov	r0, r2
 8008a26:	4798      	blx	r3
 8008a28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a2a:	e043      	b.n	8008ab4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fa64 	bl	8008efc <USBD_CtlError>
            err++;
 8008a34:	7afb      	ldrb	r3, [r7, #11]
 8008a36:	3301      	adds	r3, #1
 8008a38:	72fb      	strb	r3, [r7, #11]
          break;
 8008a3a:	e03b      	b.n	8008ab4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a42:	695b      	ldr	r3, [r3, #20]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00b      	beq.n	8008a60 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a4e:	695b      	ldr	r3, [r3, #20]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	7c12      	ldrb	r2, [r2, #16]
 8008a54:	f107 0108 	add.w	r1, r7, #8
 8008a58:	4610      	mov	r0, r2
 8008a5a:	4798      	blx	r3
 8008a5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a5e:	e029      	b.n	8008ab4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a60:	6839      	ldr	r1, [r7, #0]
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fa4a 	bl	8008efc <USBD_CtlError>
            err++;
 8008a68:	7afb      	ldrb	r3, [r7, #11]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a6e:	e021      	b.n	8008ab4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00b      	beq.n	8008a94 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	7c12      	ldrb	r2, [r2, #16]
 8008a88:	f107 0108 	add.w	r1, r7, #8
 8008a8c:	4610      	mov	r0, r2
 8008a8e:	4798      	blx	r3
 8008a90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a92:	e00f      	b.n	8008ab4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a94:	6839      	ldr	r1, [r7, #0]
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fa30 	bl	8008efc <USBD_CtlError>
            err++;
 8008a9c:	7afb      	ldrb	r3, [r7, #11]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	72fb      	strb	r3, [r7, #11]
          break;
 8008aa2:	e007      	b.n	8008ab4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008aa4:	6839      	ldr	r1, [r7, #0]
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fa28 	bl	8008efc <USBD_CtlError>
          err++;
 8008aac:	7afb      	ldrb	r3, [r7, #11]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008ab2:	bf00      	nop
      }
      break;
 8008ab4:	e037      	b.n	8008b26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	7c1b      	ldrb	r3, [r3, #16]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d109      	bne.n	8008ad2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ac6:	f107 0208 	add.w	r2, r7, #8
 8008aca:	4610      	mov	r0, r2
 8008acc:	4798      	blx	r3
 8008ace:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ad0:	e029      	b.n	8008b26 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 fa11 	bl	8008efc <USBD_CtlError>
        err++;
 8008ada:	7afb      	ldrb	r3, [r7, #11]
 8008adc:	3301      	adds	r3, #1
 8008ade:	72fb      	strb	r3, [r7, #11]
      break;
 8008ae0:	e021      	b.n	8008b26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	7c1b      	ldrb	r3, [r3, #16]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10d      	bne.n	8008b06 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008af2:	f107 0208 	add.w	r2, r7, #8
 8008af6:	4610      	mov	r0, r2
 8008af8:	4798      	blx	r3
 8008afa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	3301      	adds	r3, #1
 8008b00:	2207      	movs	r2, #7
 8008b02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b04:	e00f      	b.n	8008b26 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008b06:	6839      	ldr	r1, [r7, #0]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 f9f7 	bl	8008efc <USBD_CtlError>
        err++;
 8008b0e:	7afb      	ldrb	r3, [r7, #11]
 8008b10:	3301      	adds	r3, #1
 8008b12:	72fb      	strb	r3, [r7, #11]
      break;
 8008b14:	e007      	b.n	8008b26 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f9ef 	bl	8008efc <USBD_CtlError>
      err++;
 8008b1e:	7afb      	ldrb	r3, [r7, #11]
 8008b20:	3301      	adds	r3, #1
 8008b22:	72fb      	strb	r3, [r7, #11]
      break;
 8008b24:	bf00      	nop
  }

  if (err != 0U)
 8008b26:	7afb      	ldrb	r3, [r7, #11]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d11e      	bne.n	8008b6a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	88db      	ldrh	r3, [r3, #6]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d016      	beq.n	8008b62 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008b34:	893b      	ldrh	r3, [r7, #8]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00e      	beq.n	8008b58 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	88da      	ldrh	r2, [r3, #6]
 8008b3e:	893b      	ldrh	r3, [r7, #8]
 8008b40:	4293      	cmp	r3, r2
 8008b42:	bf28      	it	cs
 8008b44:	4613      	movcs	r3, r2
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b4a:	893b      	ldrh	r3, [r7, #8]
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	68f9      	ldr	r1, [r7, #12]
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fa44 	bl	8008fde <USBD_CtlSendData>
 8008b56:	e009      	b.n	8008b6c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b58:	6839      	ldr	r1, [r7, #0]
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 f9ce 	bl	8008efc <USBD_CtlError>
 8008b60:	e004      	b.n	8008b6c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fa95 	bl	8009092 <USBD_CtlSendStatus>
 8008b68:	e000      	b.n	8008b6c <USBD_GetDescriptor+0x320>
    return;
 8008b6a:	bf00      	nop
  }
}
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop

08008b74 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	889b      	ldrh	r3, [r3, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d131      	bne.n	8008bea <USBD_SetAddress+0x76>
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	88db      	ldrh	r3, [r3, #6]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d12d      	bne.n	8008bea <USBD_SetAddress+0x76>
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	885b      	ldrh	r3, [r3, #2]
 8008b92:	2b7f      	cmp	r3, #127	@ 0x7f
 8008b94:	d829      	bhi.n	8008bea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	885b      	ldrh	r3, [r3, #2]
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ba0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	2b03      	cmp	r3, #3
 8008bac:	d104      	bne.n	8008bb8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008bae:	6839      	ldr	r1, [r7, #0]
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f9a3 	bl	8008efc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bb6:	e01d      	b.n	8008bf4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	7bfa      	ldrb	r2, [r7, #15]
 8008bbc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 fea1 	bl	800990c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fa61 	bl	8009092 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008bd0:	7bfb      	ldrb	r3, [r7, #15]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d004      	beq.n	8008be0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2202      	movs	r2, #2
 8008bda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bde:	e009      	b.n	8008bf4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008be8:	e004      	b.n	8008bf4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bea:	6839      	ldr	r1, [r7, #0]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f985 	bl	8008efc <USBD_CtlError>
  }
}
 8008bf2:	bf00      	nop
 8008bf4:	bf00      	nop
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	885b      	ldrh	r3, [r3, #2]
 8008c0e:	b2da      	uxtb	r2, r3
 8008c10:	4b4c      	ldr	r3, [pc, #304]	@ (8008d44 <USBD_SetConfig+0x148>)
 8008c12:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c14:	4b4b      	ldr	r3, [pc, #300]	@ (8008d44 <USBD_SetConfig+0x148>)
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d905      	bls.n	8008c28 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008c1c:	6839      	ldr	r1, [r7, #0]
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f96c 	bl	8008efc <USBD_CtlError>
    return USBD_FAIL;
 8008c24:	2303      	movs	r3, #3
 8008c26:	e088      	b.n	8008d3a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	d002      	beq.n	8008c3a <USBD_SetConfig+0x3e>
 8008c34:	2b03      	cmp	r3, #3
 8008c36:	d025      	beq.n	8008c84 <USBD_SetConfig+0x88>
 8008c38:	e071      	b.n	8008d1e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008c3a:	4b42      	ldr	r3, [pc, #264]	@ (8008d44 <USBD_SetConfig+0x148>)
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d01c      	beq.n	8008c7c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008c42:	4b40      	ldr	r3, [pc, #256]	@ (8008d44 <USBD_SetConfig+0x148>)
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	461a      	mov	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c4c:	4b3d      	ldr	r3, [pc, #244]	@ (8008d44 <USBD_SetConfig+0x148>)
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	4619      	mov	r1, r3
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f7ff f991 	bl	8007f7a <USBD_SetClassConfig>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c5c:	7bfb      	ldrb	r3, [r7, #15]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d004      	beq.n	8008c6c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008c62:	6839      	ldr	r1, [r7, #0]
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 f949 	bl	8008efc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c6a:	e065      	b.n	8008d38 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fa10 	bl	8009092 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2203      	movs	r2, #3
 8008c76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008c7a:	e05d      	b.n	8008d38 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 fa08 	bl	8009092 <USBD_CtlSendStatus>
      break;
 8008c82:	e059      	b.n	8008d38 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c84:	4b2f      	ldr	r3, [pc, #188]	@ (8008d44 <USBD_SetConfig+0x148>)
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d112      	bne.n	8008cb2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2202      	movs	r2, #2
 8008c90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008c94:	4b2b      	ldr	r3, [pc, #172]	@ (8008d44 <USBD_SetConfig+0x148>)
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	461a      	mov	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c9e:	4b29      	ldr	r3, [pc, #164]	@ (8008d44 <USBD_SetConfig+0x148>)
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f7ff f984 	bl	8007fb2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 f9f1 	bl	8009092 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008cb0:	e042      	b.n	8008d38 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008cb2:	4b24      	ldr	r3, [pc, #144]	@ (8008d44 <USBD_SetConfig+0x148>)
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d02a      	beq.n	8008d16 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f7ff f972 	bl	8007fb2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008cce:	4b1d      	ldr	r3, [pc, #116]	@ (8008d44 <USBD_SetConfig+0x148>)
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8008d44 <USBD_SetConfig+0x148>)
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7ff f94b 	bl	8007f7a <USBD_SetClassConfig>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00f      	beq.n	8008d0e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008cee:	6839      	ldr	r1, [r7, #0]
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f903 	bl	8008efc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f7ff f957 	bl	8007fb2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2202      	movs	r2, #2
 8008d08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008d0c:	e014      	b.n	8008d38 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f9bf 	bl	8009092 <USBD_CtlSendStatus>
      break;
 8008d14:	e010      	b.n	8008d38 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f9bb 	bl	8009092 <USBD_CtlSendStatus>
      break;
 8008d1c:	e00c      	b.n	8008d38 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008d1e:	6839      	ldr	r1, [r7, #0]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 f8eb 	bl	8008efc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d26:	4b07      	ldr	r3, [pc, #28]	@ (8008d44 <USBD_SetConfig+0x148>)
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f7ff f940 	bl	8007fb2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008d32:	2303      	movs	r3, #3
 8008d34:	73fb      	strb	r3, [r7, #15]
      break;
 8008d36:	bf00      	nop
  }

  return ret;
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	200004b4 	.word	0x200004b4

08008d48 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	88db      	ldrh	r3, [r3, #6]
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d004      	beq.n	8008d64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d5a:	6839      	ldr	r1, [r7, #0]
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f8cd 	bl	8008efc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d62:	e023      	b.n	8008dac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	dc02      	bgt.n	8008d76 <USBD_GetConfig+0x2e>
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	dc03      	bgt.n	8008d7c <USBD_GetConfig+0x34>
 8008d74:	e015      	b.n	8008da2 <USBD_GetConfig+0x5a>
 8008d76:	2b03      	cmp	r3, #3
 8008d78:	d00b      	beq.n	8008d92 <USBD_GetConfig+0x4a>
 8008d7a:	e012      	b.n	8008da2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	3308      	adds	r3, #8
 8008d86:	2201      	movs	r2, #1
 8008d88:	4619      	mov	r1, r3
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 f927 	bl	8008fde <USBD_CtlSendData>
        break;
 8008d90:	e00c      	b.n	8008dac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	3304      	adds	r3, #4
 8008d96:	2201      	movs	r2, #1
 8008d98:	4619      	mov	r1, r3
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f91f 	bl	8008fde <USBD_CtlSendData>
        break;
 8008da0:	e004      	b.n	8008dac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008da2:	6839      	ldr	r1, [r7, #0]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 f8a9 	bl	8008efc <USBD_CtlError>
        break;
 8008daa:	bf00      	nop
}
 8008dac:	bf00      	nop
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	d81e      	bhi.n	8008e0a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	88db      	ldrh	r3, [r3, #6]
 8008dd0:	2b02      	cmp	r3, #2
 8008dd2:	d004      	beq.n	8008dde <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008dd4:	6839      	ldr	r1, [r7, #0]
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 f890 	bl	8008efc <USBD_CtlError>
        break;
 8008ddc:	e01a      	b.n	8008e14 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2201      	movs	r2, #1
 8008de2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d005      	beq.n	8008dfa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	f043 0202 	orr.w	r2, r3, #2
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	330c      	adds	r3, #12
 8008dfe:	2202      	movs	r2, #2
 8008e00:	4619      	mov	r1, r3
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f8eb 	bl	8008fde <USBD_CtlSendData>
      break;
 8008e08:	e004      	b.n	8008e14 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008e0a:	6839      	ldr	r1, [r7, #0]
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f875 	bl	8008efc <USBD_CtlError>
      break;
 8008e12:	bf00      	nop
  }
}
 8008e14:	bf00      	nop
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	885b      	ldrh	r3, [r3, #2]
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d106      	bne.n	8008e3c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2201      	movs	r2, #1
 8008e32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f92b 	bl	8009092 <USBD_CtlSendStatus>
  }
}
 8008e3c:	bf00      	nop
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	3b01      	subs	r3, #1
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d80b      	bhi.n	8008e74 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	885b      	ldrh	r3, [r3, #2]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d10c      	bne.n	8008e7e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 f910 	bl	8009092 <USBD_CtlSendStatus>
      }
      break;
 8008e72:	e004      	b.n	8008e7e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e74:	6839      	ldr	r1, [r7, #0]
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f840 	bl	8008efc <USBD_CtlError>
      break;
 8008e7c:	e000      	b.n	8008e80 <USBD_ClrFeature+0x3c>
      break;
 8008e7e:	bf00      	nop
  }
}
 8008e80:	bf00      	nop
 8008e82:	3708      	adds	r7, #8
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	781a      	ldrb	r2, [r3, #0]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	781a      	ldrb	r2, [r3, #0]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f7ff fa91 	bl	80083da <SWAPBYTE>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	461a      	mov	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f7ff fa84 	bl	80083da <SWAPBYTE>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	3301      	adds	r3, #1
 8008ede:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f7ff fa77 	bl	80083da <SWAPBYTE>
 8008eec:	4603      	mov	r3, r0
 8008eee:	461a      	mov	r2, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	80da      	strh	r2, [r3, #6]
}
 8008ef4:	bf00      	nop
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f06:	2180      	movs	r1, #128	@ 0x80
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fc95 	bl	8009838 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f0e:	2100      	movs	r1, #0
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 fc91 	bl	8009838 <USBD_LL_StallEP>
}
 8008f16:	bf00      	nop
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b086      	sub	sp, #24
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	60f8      	str	r0, [r7, #12]
 8008f26:	60b9      	str	r1, [r7, #8]
 8008f28:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d036      	beq.n	8008fa2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f38:	6938      	ldr	r0, [r7, #16]
 8008f3a:	f000 f836 	bl	8008faa <USBD_GetLen>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	3301      	adds	r3, #1
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	005b      	lsls	r3, r3, #1
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f4c:	7dfb      	ldrb	r3, [r7, #23]
 8008f4e:	68ba      	ldr	r2, [r7, #8]
 8008f50:	4413      	add	r3, r2
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	7812      	ldrb	r2, [r2, #0]
 8008f56:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f58:	7dfb      	ldrb	r3, [r7, #23]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f5e:	7dfb      	ldrb	r3, [r7, #23]
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	4413      	add	r3, r2
 8008f64:	2203      	movs	r2, #3
 8008f66:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f68:	7dfb      	ldrb	r3, [r7, #23]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f6e:	e013      	b.n	8008f98 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f70:	7dfb      	ldrb	r3, [r7, #23]
 8008f72:	68ba      	ldr	r2, [r7, #8]
 8008f74:	4413      	add	r3, r2
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	7812      	ldrb	r2, [r2, #0]
 8008f7a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	613b      	str	r3, [r7, #16]
    idx++;
 8008f82:	7dfb      	ldrb	r3, [r7, #23]
 8008f84:	3301      	adds	r3, #1
 8008f86:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f88:	7dfb      	ldrb	r3, [r7, #23]
 8008f8a:	68ba      	ldr	r2, [r7, #8]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	2200      	movs	r2, #0
 8008f90:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f92:	7dfb      	ldrb	r3, [r7, #23]
 8008f94:	3301      	adds	r3, #1
 8008f96:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1e7      	bne.n	8008f70 <USBD_GetString+0x52>
 8008fa0:	e000      	b.n	8008fa4 <USBD_GetString+0x86>
    return;
 8008fa2:	bf00      	nop
  }
}
 8008fa4:	3718      	adds	r7, #24
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008faa:	b480      	push	{r7}
 8008fac:	b085      	sub	sp, #20
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008fba:	e005      	b.n	8008fc8 <USBD_GetLen+0x1e>
  {
    len++;
 8008fbc:	7bfb      	ldrb	r3, [r7, #15]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1f5      	bne.n	8008fbc <USBD_GetLen+0x12>
  }

  return len;
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3714      	adds	r7, #20
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr

08008fde <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b084      	sub	sp, #16
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	60f8      	str	r0, [r7, #12]
 8008fe6:	60b9      	str	r1, [r7, #8]
 8008fe8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2202      	movs	r2, #2
 8008fee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	68ba      	ldr	r2, [r7, #8]
 8009002:	2100      	movs	r1, #0
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	f000 fca0 	bl	800994a <USBD_LL_Transmit>

  return USBD_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	68ba      	ldr	r2, [r7, #8]
 8009024:	2100      	movs	r1, #0
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f000 fc8f 	bl	800994a <USBD_LL_Transmit>

  return USBD_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b084      	sub	sp, #16
 800903a:	af00      	add	r7, sp, #0
 800903c:	60f8      	str	r0, [r7, #12]
 800903e:	60b9      	str	r1, [r7, #8]
 8009040:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2203      	movs	r2, #3
 8009046:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	2100      	movs	r1, #0
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f000 fc93 	bl	800998c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	68ba      	ldr	r2, [r7, #8]
 8009080:	2100      	movs	r1, #0
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f000 fc82 	bl	800998c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b082      	sub	sp, #8
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2204      	movs	r2, #4
 800909e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80090a2:	2300      	movs	r3, #0
 80090a4:	2200      	movs	r2, #0
 80090a6:	2100      	movs	r1, #0
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 fc4e 	bl	800994a <USBD_LL_Transmit>

  return USBD_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3708      	adds	r7, #8
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2205      	movs	r2, #5
 80090c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090c8:	2300      	movs	r3, #0
 80090ca:	2200      	movs	r2, #0
 80090cc:	2100      	movs	r1, #0
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fc5c 	bl	800998c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
	...

080090e0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80090e4:	2200      	movs	r2, #0
 80090e6:	4912      	ldr	r1, [pc, #72]	@ (8009130 <MX_USB_Device_Init+0x50>)
 80090e8:	4812      	ldr	r0, [pc, #72]	@ (8009134 <MX_USB_Device_Init+0x54>)
 80090ea:	f7fe febd 	bl	8007e68 <USBD_Init>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d001      	beq.n	80090f8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80090f4:	f7f7 fbc3 	bl	800087e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80090f8:	490f      	ldr	r1, [pc, #60]	@ (8009138 <MX_USB_Device_Init+0x58>)
 80090fa:	480e      	ldr	r0, [pc, #56]	@ (8009134 <MX_USB_Device_Init+0x54>)
 80090fc:	f7fe fef2 	bl	8007ee4 <USBD_RegisterClass>
 8009100:	4603      	mov	r3, r0
 8009102:	2b00      	cmp	r3, #0
 8009104:	d001      	beq.n	800910a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009106:	f7f7 fbba 	bl	800087e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800910a:	490c      	ldr	r1, [pc, #48]	@ (800913c <MX_USB_Device_Init+0x5c>)
 800910c:	4809      	ldr	r0, [pc, #36]	@ (8009134 <MX_USB_Device_Init+0x54>)
 800910e:	f7fe fe05 	bl	8007d1c <USBD_CDC_RegisterInterface>
 8009112:	4603      	mov	r3, r0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d001      	beq.n	800911c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009118:	f7f7 fbb1 	bl	800087e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800911c:	4805      	ldr	r0, [pc, #20]	@ (8009134 <MX_USB_Device_Init+0x54>)
 800911e:	f7fe ff15 	bl	8007f4c <USBD_Start>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d001      	beq.n	800912c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009128:	f7f7 fba9 	bl	800087e <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800912c:	bf00      	nop
 800912e:	bd80      	pop	{r7, pc}
 8009130:	20000130 	.word	0x20000130
 8009134:	200004b8 	.word	0x200004b8
 8009138:	20000018 	.word	0x20000018
 800913c:	2000011c 	.word	0x2000011c

08009140 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009144:	2200      	movs	r2, #0
 8009146:	4905      	ldr	r1, [pc, #20]	@ (800915c <CDC_Init_FS+0x1c>)
 8009148:	4805      	ldr	r0, [pc, #20]	@ (8009160 <CDC_Init_FS+0x20>)
 800914a:	f7fe fdfc 	bl	8007d46 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800914e:	4905      	ldr	r1, [pc, #20]	@ (8009164 <CDC_Init_FS+0x24>)
 8009150:	4803      	ldr	r0, [pc, #12]	@ (8009160 <CDC_Init_FS+0x20>)
 8009152:	f7fe fe16 	bl	8007d82 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009156:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009158:	4618      	mov	r0, r3
 800915a:	bd80      	pop	{r7, pc}
 800915c:	20000f88 	.word	0x20000f88
 8009160:	200004b8 	.word	0x200004b8
 8009164:	20000788 	.word	0x20000788

08009168 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009168:	b480      	push	{r7}
 800916a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800916c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800916e:	4618      	mov	r0, r3
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	4603      	mov	r3, r0
 8009180:	6039      	str	r1, [r7, #0]
 8009182:	71fb      	strb	r3, [r7, #7]
 8009184:	4613      	mov	r3, r2
 8009186:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009188:	79fb      	ldrb	r3, [r7, #7]
 800918a:	2b23      	cmp	r3, #35	@ 0x23
 800918c:	d84a      	bhi.n	8009224 <CDC_Control_FS+0xac>
 800918e:	a201      	add	r2, pc, #4	@ (adr r2, 8009194 <CDC_Control_FS+0x1c>)
 8009190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009194:	08009225 	.word	0x08009225
 8009198:	08009225 	.word	0x08009225
 800919c:	08009225 	.word	0x08009225
 80091a0:	08009225 	.word	0x08009225
 80091a4:	08009225 	.word	0x08009225
 80091a8:	08009225 	.word	0x08009225
 80091ac:	08009225 	.word	0x08009225
 80091b0:	08009225 	.word	0x08009225
 80091b4:	08009225 	.word	0x08009225
 80091b8:	08009225 	.word	0x08009225
 80091bc:	08009225 	.word	0x08009225
 80091c0:	08009225 	.word	0x08009225
 80091c4:	08009225 	.word	0x08009225
 80091c8:	08009225 	.word	0x08009225
 80091cc:	08009225 	.word	0x08009225
 80091d0:	08009225 	.word	0x08009225
 80091d4:	08009225 	.word	0x08009225
 80091d8:	08009225 	.word	0x08009225
 80091dc:	08009225 	.word	0x08009225
 80091e0:	08009225 	.word	0x08009225
 80091e4:	08009225 	.word	0x08009225
 80091e8:	08009225 	.word	0x08009225
 80091ec:	08009225 	.word	0x08009225
 80091f0:	08009225 	.word	0x08009225
 80091f4:	08009225 	.word	0x08009225
 80091f8:	08009225 	.word	0x08009225
 80091fc:	08009225 	.word	0x08009225
 8009200:	08009225 	.word	0x08009225
 8009204:	08009225 	.word	0x08009225
 8009208:	08009225 	.word	0x08009225
 800920c:	08009225 	.word	0x08009225
 8009210:	08009225 	.word	0x08009225
 8009214:	08009225 	.word	0x08009225
 8009218:	08009225 	.word	0x08009225
 800921c:	08009225 	.word	0x08009225
 8009220:	08009225 	.word	0x08009225
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009224:	bf00      	nop
  }

  return (USBD_OK);
 8009226:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009228:	4618      	mov	r0, r3
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800923e:	6879      	ldr	r1, [r7, #4]
 8009240:	4805      	ldr	r0, [pc, #20]	@ (8009258 <CDC_Receive_FS+0x24>)
 8009242:	f7fe fd9e 	bl	8007d82 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009246:	4804      	ldr	r0, [pc, #16]	@ (8009258 <CDC_Receive_FS+0x24>)
 8009248:	f7fe fde4 	bl	8007e14 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800924c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800924e:	4618      	mov	r0, r3
 8009250:	3708      	adds	r7, #8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	200004b8 	.word	0x200004b8

0800925c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	460b      	mov	r3, r1
 8009266:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009268:	2300      	movs	r3, #0
 800926a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800926c:	4b0d      	ldr	r3, [pc, #52]	@ (80092a4 <CDC_Transmit_FS+0x48>)
 800926e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009272:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800927a:	2b00      	cmp	r3, #0
 800927c:	d001      	beq.n	8009282 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800927e:	2301      	movs	r3, #1
 8009280:	e00b      	b.n	800929a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009282:	887b      	ldrh	r3, [r7, #2]
 8009284:	461a      	mov	r2, r3
 8009286:	6879      	ldr	r1, [r7, #4]
 8009288:	4806      	ldr	r0, [pc, #24]	@ (80092a4 <CDC_Transmit_FS+0x48>)
 800928a:	f7fe fd5c 	bl	8007d46 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800928e:	4805      	ldr	r0, [pc, #20]	@ (80092a4 <CDC_Transmit_FS+0x48>)
 8009290:	f7fe fd90 	bl	8007db4 <USBD_CDC_TransmitPacket>
 8009294:	4603      	mov	r3, r0
 8009296:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009298:	7bfb      	ldrb	r3, [r7, #15]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	200004b8 	.word	0x200004b8

080092a8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b087      	sub	sp, #28
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	4613      	mov	r3, r2
 80092b4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80092b6:	2300      	movs	r3, #0
 80092b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80092ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	371c      	adds	r7, #28
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
	...

080092cc <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	4603      	mov	r3, r0
 80092d4:	6039      	str	r1, [r7, #0]
 80092d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	2212      	movs	r2, #18
 80092dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80092de:	4b03      	ldr	r3, [pc, #12]	@ (80092ec <USBD_CDC_DeviceDescriptor+0x20>)
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr
 80092ec:	20000150 	.word	0x20000150

080092f0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	4603      	mov	r3, r0
 80092f8:	6039      	str	r1, [r7, #0]
 80092fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	2204      	movs	r2, #4
 8009300:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009302:	4b03      	ldr	r3, [pc, #12]	@ (8009310 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009304:	4618      	mov	r0, r3
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr
 8009310:	20000164 	.word	0x20000164

08009314 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	4603      	mov	r3, r0
 800931c:	6039      	str	r1, [r7, #0]
 800931e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009320:	79fb      	ldrb	r3, [r7, #7]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d105      	bne.n	8009332 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009326:	683a      	ldr	r2, [r7, #0]
 8009328:	4907      	ldr	r1, [pc, #28]	@ (8009348 <USBD_CDC_ProductStrDescriptor+0x34>)
 800932a:	4808      	ldr	r0, [pc, #32]	@ (800934c <USBD_CDC_ProductStrDescriptor+0x38>)
 800932c:	f7ff fdf7 	bl	8008f1e <USBD_GetString>
 8009330:	e004      	b.n	800933c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009332:	683a      	ldr	r2, [r7, #0]
 8009334:	4904      	ldr	r1, [pc, #16]	@ (8009348 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009336:	4805      	ldr	r0, [pc, #20]	@ (800934c <USBD_CDC_ProductStrDescriptor+0x38>)
 8009338:	f7ff fdf1 	bl	8008f1e <USBD_GetString>
  }
  return USBD_StrDesc;
 800933c:	4b02      	ldr	r3, [pc, #8]	@ (8009348 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800933e:	4618      	mov	r0, r3
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	20001788 	.word	0x20001788
 800934c:	0800aeb0 	.word	0x0800aeb0

08009350 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	4603      	mov	r3, r0
 8009358:	6039      	str	r1, [r7, #0]
 800935a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800935c:	683a      	ldr	r2, [r7, #0]
 800935e:	4904      	ldr	r1, [pc, #16]	@ (8009370 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009360:	4804      	ldr	r0, [pc, #16]	@ (8009374 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009362:	f7ff fddc 	bl	8008f1e <USBD_GetString>
  return USBD_StrDesc;
 8009366:	4b02      	ldr	r3, [pc, #8]	@ (8009370 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009368:	4618      	mov	r0, r3
 800936a:	3708      	adds	r7, #8
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	20001788 	.word	0x20001788
 8009374:	0800aec8 	.word	0x0800aec8

08009378 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	4603      	mov	r3, r0
 8009380:	6039      	str	r1, [r7, #0]
 8009382:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	221a      	movs	r2, #26
 8009388:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800938a:	f000 f843 	bl	8009414 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800938e:	4b02      	ldr	r3, [pc, #8]	@ (8009398 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009390:	4618      	mov	r0, r3
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	20000168 	.word	0x20000168

0800939c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	4603      	mov	r3, r0
 80093a4:	6039      	str	r1, [r7, #0]
 80093a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80093a8:	79fb      	ldrb	r3, [r7, #7]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d105      	bne.n	80093ba <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80093ae:	683a      	ldr	r2, [r7, #0]
 80093b0:	4907      	ldr	r1, [pc, #28]	@ (80093d0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80093b2:	4808      	ldr	r0, [pc, #32]	@ (80093d4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80093b4:	f7ff fdb3 	bl	8008f1e <USBD_GetString>
 80093b8:	e004      	b.n	80093c4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80093ba:	683a      	ldr	r2, [r7, #0]
 80093bc:	4904      	ldr	r1, [pc, #16]	@ (80093d0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80093be:	4805      	ldr	r0, [pc, #20]	@ (80093d4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80093c0:	f7ff fdad 	bl	8008f1e <USBD_GetString>
  }
  return USBD_StrDesc;
 80093c4:	4b02      	ldr	r3, [pc, #8]	@ (80093d0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3708      	adds	r7, #8
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	20001788 	.word	0x20001788
 80093d4:	0800aedc 	.word	0x0800aedc

080093d8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	4603      	mov	r3, r0
 80093e0:	6039      	str	r1, [r7, #0]
 80093e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093e4:	79fb      	ldrb	r3, [r7, #7]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d105      	bne.n	80093f6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80093ea:	683a      	ldr	r2, [r7, #0]
 80093ec:	4907      	ldr	r1, [pc, #28]	@ (800940c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80093ee:	4808      	ldr	r0, [pc, #32]	@ (8009410 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80093f0:	f7ff fd95 	bl	8008f1e <USBD_GetString>
 80093f4:	e004      	b.n	8009400 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80093f6:	683a      	ldr	r2, [r7, #0]
 80093f8:	4904      	ldr	r1, [pc, #16]	@ (800940c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80093fa:	4805      	ldr	r0, [pc, #20]	@ (8009410 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80093fc:	f7ff fd8f 	bl	8008f1e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009400:	4b02      	ldr	r3, [pc, #8]	@ (800940c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009402:	4618      	mov	r0, r3
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	20001788 	.word	0x20001788
 8009410:	0800aee8 	.word	0x0800aee8

08009414 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800941a:	4b0f      	ldr	r3, [pc, #60]	@ (8009458 <Get_SerialNum+0x44>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009420:	4b0e      	ldr	r3, [pc, #56]	@ (800945c <Get_SerialNum+0x48>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009426:	4b0e      	ldr	r3, [pc, #56]	@ (8009460 <Get_SerialNum+0x4c>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4413      	add	r3, r2
 8009432:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d009      	beq.n	800944e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800943a:	2208      	movs	r2, #8
 800943c:	4909      	ldr	r1, [pc, #36]	@ (8009464 <Get_SerialNum+0x50>)
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f000 f814 	bl	800946c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009444:	2204      	movs	r2, #4
 8009446:	4908      	ldr	r1, [pc, #32]	@ (8009468 <Get_SerialNum+0x54>)
 8009448:	68b8      	ldr	r0, [r7, #8]
 800944a:	f000 f80f 	bl	800946c <IntToUnicode>
  }
}
 800944e:	bf00      	nop
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	1fff7590 	.word	0x1fff7590
 800945c:	1fff7594 	.word	0x1fff7594
 8009460:	1fff7598 	.word	0x1fff7598
 8009464:	2000016a 	.word	0x2000016a
 8009468:	2000017a 	.word	0x2000017a

0800946c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800946c:	b480      	push	{r7}
 800946e:	b087      	sub	sp, #28
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	4613      	mov	r3, r2
 8009478:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800947a:	2300      	movs	r3, #0
 800947c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800947e:	2300      	movs	r3, #0
 8009480:	75fb      	strb	r3, [r7, #23]
 8009482:	e027      	b.n	80094d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	0f1b      	lsrs	r3, r3, #28
 8009488:	2b09      	cmp	r3, #9
 800948a:	d80b      	bhi.n	80094a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	0f1b      	lsrs	r3, r3, #28
 8009490:	b2da      	uxtb	r2, r3
 8009492:	7dfb      	ldrb	r3, [r7, #23]
 8009494:	005b      	lsls	r3, r3, #1
 8009496:	4619      	mov	r1, r3
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	440b      	add	r3, r1
 800949c:	3230      	adds	r2, #48	@ 0x30
 800949e:	b2d2      	uxtb	r2, r2
 80094a0:	701a      	strb	r2, [r3, #0]
 80094a2:	e00a      	b.n	80094ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	0f1b      	lsrs	r3, r3, #28
 80094a8:	b2da      	uxtb	r2, r3
 80094aa:	7dfb      	ldrb	r3, [r7, #23]
 80094ac:	005b      	lsls	r3, r3, #1
 80094ae:	4619      	mov	r1, r3
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	440b      	add	r3, r1
 80094b4:	3237      	adds	r2, #55	@ 0x37
 80094b6:	b2d2      	uxtb	r2, r2
 80094b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	011b      	lsls	r3, r3, #4
 80094be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80094c0:	7dfb      	ldrb	r3, [r7, #23]
 80094c2:	005b      	lsls	r3, r3, #1
 80094c4:	3301      	adds	r3, #1
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	4413      	add	r3, r2
 80094ca:	2200      	movs	r2, #0
 80094cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80094ce:	7dfb      	ldrb	r3, [r7, #23]
 80094d0:	3301      	adds	r3, #1
 80094d2:	75fb      	strb	r3, [r7, #23]
 80094d4:	7dfa      	ldrb	r2, [r7, #23]
 80094d6:	79fb      	ldrb	r3, [r7, #7]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d3d3      	bcc.n	8009484 <IntToUnicode+0x18>
  }
}
 80094dc:	bf00      	nop
 80094de:	bf00      	nop
 80094e0:	371c      	adds	r7, #28
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
	...

080094ec <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b098      	sub	sp, #96	@ 0x60
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80094f4:	f107 030c 	add.w	r3, r7, #12
 80094f8:	2254      	movs	r2, #84	@ 0x54
 80094fa:	2100      	movs	r1, #0
 80094fc:	4618      	mov	r0, r3
 80094fe:	f000 fc4e 	bl	8009d9e <memset>
  if(pcdHandle->Instance==USB)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a15      	ldr	r2, [pc, #84]	@ (800955c <HAL_PCD_MspInit+0x70>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d122      	bne.n	8009552 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800950c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009510:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009512:	2300      	movs	r3, #0
 8009514:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009516:	f107 030c 	add.w	r3, r7, #12
 800951a:	4618      	mov	r0, r3
 800951c:	f7fa fc02 	bl	8003d24 <HAL_RCCEx_PeriphCLKConfig>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d001      	beq.n	800952a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8009526:	f7f7 f9aa 	bl	800087e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800952a:	4b0d      	ldr	r3, [pc, #52]	@ (8009560 <HAL_PCD_MspInit+0x74>)
 800952c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800952e:	4a0c      	ldr	r2, [pc, #48]	@ (8009560 <HAL_PCD_MspInit+0x74>)
 8009530:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009534:	6593      	str	r3, [r2, #88]	@ 0x58
 8009536:	4b0a      	ldr	r3, [pc, #40]	@ (8009560 <HAL_PCD_MspInit+0x74>)
 8009538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800953a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800953e:	60bb      	str	r3, [r7, #8]
 8009540:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 5, 0);
 8009542:	2200      	movs	r2, #0
 8009544:	2105      	movs	r1, #5
 8009546:	2013      	movs	r0, #19
 8009548:	f7f7 ff10 	bl	800136c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800954c:	2013      	movs	r0, #19
 800954e:	f7f7 ff27 	bl	80013a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009552:	bf00      	nop
 8009554:	3760      	adds	r7, #96	@ 0x60
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	40005c00 	.word	0x40005c00
 8009560:	40021000 	.word	0x40021000

08009564 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009578:	4619      	mov	r1, r3
 800957a:	4610      	mov	r0, r2
 800957c:	f7fe fd31 	bl	8007fe2 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009580:	bf00      	nop
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	460b      	mov	r3, r1
 8009592:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800959a:	78fa      	ldrb	r2, [r7, #3]
 800959c:	6879      	ldr	r1, [r7, #4]
 800959e:	4613      	mov	r3, r2
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	4413      	add	r3, r2
 80095a4:	00db      	lsls	r3, r3, #3
 80095a6:	440b      	add	r3, r1
 80095a8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	78fb      	ldrb	r3, [r7, #3]
 80095b0:	4619      	mov	r1, r3
 80095b2:	f7fe fd6b 	bl	800808c <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80095b6:	bf00      	nop
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b082      	sub	sp, #8
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
 80095c6:	460b      	mov	r3, r1
 80095c8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80095d0:	78fa      	ldrb	r2, [r7, #3]
 80095d2:	6879      	ldr	r1, [r7, #4]
 80095d4:	4613      	mov	r3, r2
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	4413      	add	r3, r2
 80095da:	00db      	lsls	r3, r3, #3
 80095dc:	440b      	add	r3, r1
 80095de:	3324      	adds	r3, #36	@ 0x24
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	78fb      	ldrb	r3, [r7, #3]
 80095e4:	4619      	mov	r1, r3
 80095e6:	f7fe fdb4 	bl	8008152 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80095ea:	bf00      	nop
 80095ec:	3708      	adds	r7, #8
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b082      	sub	sp, #8
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009600:	4618      	mov	r0, r3
 8009602:	f7fe fec8 	bl	8008396 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009606:	bf00      	nop
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b084      	sub	sp, #16
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009616:	2301      	movs	r3, #1
 8009618:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	795b      	ldrb	r3, [r3, #5]
 800961e:	2b02      	cmp	r3, #2
 8009620:	d001      	beq.n	8009626 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009622:	f7f7 f92c 	bl	800087e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800962c:	7bfa      	ldrb	r2, [r7, #15]
 800962e:	4611      	mov	r1, r2
 8009630:	4618      	mov	r0, r3
 8009632:	f7fe fe72 	bl	800831a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800963c:	4618      	mov	r0, r3
 800963e:	f7fe fe1e 	bl	800827e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009642:	bf00      	nop
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
	...

0800964c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800965a:	4618      	mov	r0, r3
 800965c:	f7fe fe6d 	bl	800833a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	7a5b      	ldrb	r3, [r3, #9]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d005      	beq.n	8009674 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009668:	4b04      	ldr	r3, [pc, #16]	@ (800967c <HAL_PCD_SuspendCallback+0x30>)
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	4a03      	ldr	r2, [pc, #12]	@ (800967c <HAL_PCD_SuspendCallback+0x30>)
 800966e:	f043 0306 	orr.w	r3, r3, #6
 8009672:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009674:	bf00      	nop
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	e000ed00 	.word	0xe000ed00

08009680 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	7a5b      	ldrb	r3, [r3, #9]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d007      	beq.n	80096a0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009690:	4b08      	ldr	r3, [pc, #32]	@ (80096b4 <HAL_PCD_ResumeCallback+0x34>)
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	4a07      	ldr	r2, [pc, #28]	@ (80096b4 <HAL_PCD_ResumeCallback+0x34>)
 8009696:	f023 0306 	bic.w	r3, r3, #6
 800969a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800969c:	f000 f9f8 	bl	8009a90 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fe fe5d 	bl	8008366 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80096ac:	bf00      	nop
 80096ae:	3708      	adds	r7, #8
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	e000ed00 	.word	0xe000ed00

080096b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80096c0:	4a2b      	ldr	r2, [pc, #172]	@ (8009770 <USBD_LL_Init+0xb8>)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a29      	ldr	r2, [pc, #164]	@ (8009770 <USBD_LL_Init+0xb8>)
 80096cc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 80096d0:	4b27      	ldr	r3, [pc, #156]	@ (8009770 <USBD_LL_Init+0xb8>)
 80096d2:	4a28      	ldr	r2, [pc, #160]	@ (8009774 <USBD_LL_Init+0xbc>)
 80096d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80096d6:	4b26      	ldr	r3, [pc, #152]	@ (8009770 <USBD_LL_Init+0xb8>)
 80096d8:	2208      	movs	r2, #8
 80096da:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80096dc:	4b24      	ldr	r3, [pc, #144]	@ (8009770 <USBD_LL_Init+0xb8>)
 80096de:	2202      	movs	r2, #2
 80096e0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80096e2:	4b23      	ldr	r3, [pc, #140]	@ (8009770 <USBD_LL_Init+0xb8>)
 80096e4:	2202      	movs	r2, #2
 80096e6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80096e8:	4b21      	ldr	r3, [pc, #132]	@ (8009770 <USBD_LL_Init+0xb8>)
 80096ea:	2200      	movs	r2, #0
 80096ec:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80096ee:	4b20      	ldr	r3, [pc, #128]	@ (8009770 <USBD_LL_Init+0xb8>)
 80096f0:	2200      	movs	r2, #0
 80096f2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80096f4:	4b1e      	ldr	r3, [pc, #120]	@ (8009770 <USBD_LL_Init+0xb8>)
 80096f6:	2200      	movs	r2, #0
 80096f8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80096fa:	4b1d      	ldr	r3, [pc, #116]	@ (8009770 <USBD_LL_Init+0xb8>)
 80096fc:	2200      	movs	r2, #0
 80096fe:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009700:	481b      	ldr	r0, [pc, #108]	@ (8009770 <USBD_LL_Init+0xb8>)
 8009702:	f7f8 f80f 	bl	8001724 <HAL_PCD_Init>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d001      	beq.n	8009710 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800970c:	f7f7 f8b7 	bl	800087e <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009716:	2318      	movs	r3, #24
 8009718:	2200      	movs	r2, #0
 800971a:	2100      	movs	r1, #0
 800971c:	f7f9 fc96 	bl	800304c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009726:	2358      	movs	r3, #88	@ 0x58
 8009728:	2200      	movs	r2, #0
 800972a:	2180      	movs	r1, #128	@ 0x80
 800972c:	f7f9 fc8e 	bl	800304c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009736:	23c0      	movs	r3, #192	@ 0xc0
 8009738:	2200      	movs	r2, #0
 800973a:	2181      	movs	r1, #129	@ 0x81
 800973c:	f7f9 fc86 	bl	800304c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009746:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800974a:	2200      	movs	r2, #0
 800974c:	2101      	movs	r1, #1
 800974e:	f7f9 fc7d 	bl	800304c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009758:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800975c:	2200      	movs	r2, #0
 800975e:	2182      	movs	r1, #130	@ 0x82
 8009760:	f7f9 fc74 	bl	800304c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	20001988 	.word	0x20001988
 8009774:	40005c00 	.word	0x40005c00

08009778 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009780:	2300      	movs	r3, #0
 8009782:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800978e:	4618      	mov	r0, r3
 8009790:	f7f8 f896 	bl	80018c0 <HAL_PCD_Start>
 8009794:	4603      	mov	r3, r0
 8009796:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009798:	7bfb      	ldrb	r3, [r7, #15]
 800979a:	4618      	mov	r0, r3
 800979c:	f000 f97e 	bl	8009a9c <USBD_Get_USB_Status>
 80097a0:	4603      	mov	r3, r0
 80097a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b084      	sub	sp, #16
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	4608      	mov	r0, r1
 80097b8:	4611      	mov	r1, r2
 80097ba:	461a      	mov	r2, r3
 80097bc:	4603      	mov	r3, r0
 80097be:	70fb      	strb	r3, [r7, #3]
 80097c0:	460b      	mov	r3, r1
 80097c2:	70bb      	strb	r3, [r7, #2]
 80097c4:	4613      	mov	r3, r2
 80097c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097c8:	2300      	movs	r3, #0
 80097ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097cc:	2300      	movs	r3, #0
 80097ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80097d6:	78bb      	ldrb	r3, [r7, #2]
 80097d8:	883a      	ldrh	r2, [r7, #0]
 80097da:	78f9      	ldrb	r1, [r7, #3]
 80097dc:	f7f8 f9dd 	bl	8001b9a <HAL_PCD_EP_Open>
 80097e0:	4603      	mov	r3, r0
 80097e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097e4:	7bfb      	ldrb	r3, [r7, #15]
 80097e6:	4618      	mov	r0, r3
 80097e8:	f000 f958 	bl	8009a9c <USBD_Get_USB_Status>
 80097ec:	4603      	mov	r3, r0
 80097ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b084      	sub	sp, #16
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
 8009802:	460b      	mov	r3, r1
 8009804:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800980a:	2300      	movs	r3, #0
 800980c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009814:	78fa      	ldrb	r2, [r7, #3]
 8009816:	4611      	mov	r1, r2
 8009818:	4618      	mov	r0, r3
 800981a:	f7f8 fa1d 	bl	8001c58 <HAL_PCD_EP_Close>
 800981e:	4603      	mov	r3, r0
 8009820:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009822:	7bfb      	ldrb	r3, [r7, #15]
 8009824:	4618      	mov	r0, r3
 8009826:	f000 f939 	bl	8009a9c <USBD_Get_USB_Status>
 800982a:	4603      	mov	r3, r0
 800982c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800982e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009830:	4618      	mov	r0, r3
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	460b      	mov	r3, r1
 8009842:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009844:	2300      	movs	r3, #0
 8009846:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009848:	2300      	movs	r3, #0
 800984a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009852:	78fa      	ldrb	r2, [r7, #3]
 8009854:	4611      	mov	r1, r2
 8009856:	4618      	mov	r0, r3
 8009858:	f7f8 fac6 	bl	8001de8 <HAL_PCD_EP_SetStall>
 800985c:	4603      	mov	r3, r0
 800985e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009860:	7bfb      	ldrb	r3, [r7, #15]
 8009862:	4618      	mov	r0, r3
 8009864:	f000 f91a 	bl	8009a9c <USBD_Get_USB_Status>
 8009868:	4603      	mov	r3, r0
 800986a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800986c:	7bbb      	ldrb	r3, [r7, #14]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b084      	sub	sp, #16
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	460b      	mov	r3, r1
 8009880:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009890:	78fa      	ldrb	r2, [r7, #3]
 8009892:	4611      	mov	r1, r2
 8009894:	4618      	mov	r0, r3
 8009896:	f7f8 faf9 	bl	8001e8c <HAL_PCD_EP_ClrStall>
 800989a:	4603      	mov	r3, r0
 800989c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800989e:	7bfb      	ldrb	r3, [r7, #15]
 80098a0:	4618      	mov	r0, r3
 80098a2:	f000 f8fb 	bl	8009a9c <USBD_Get_USB_Status>
 80098a6:	4603      	mov	r3, r0
 80098a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3710      	adds	r7, #16
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b085      	sub	sp, #20
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	460b      	mov	r3, r1
 80098be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80098c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80098c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	da0b      	bge.n	80098e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098d0:	78fb      	ldrb	r3, [r7, #3]
 80098d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80098d6:	68f9      	ldr	r1, [r7, #12]
 80098d8:	4613      	mov	r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	4413      	add	r3, r2
 80098de:	00db      	lsls	r3, r3, #3
 80098e0:	440b      	add	r3, r1
 80098e2:	3312      	adds	r3, #18
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	e00b      	b.n	8009900 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80098e8:	78fb      	ldrb	r3, [r7, #3]
 80098ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80098ee:	68f9      	ldr	r1, [r7, #12]
 80098f0:	4613      	mov	r3, r2
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	4413      	add	r3, r2
 80098f6:	00db      	lsls	r3, r3, #3
 80098f8:	440b      	add	r3, r1
 80098fa:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80098fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009900:	4618      	mov	r0, r3
 8009902:	3714      	adds	r7, #20
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	460b      	mov	r3, r1
 8009916:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009918:	2300      	movs	r3, #0
 800991a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800991c:	2300      	movs	r3, #0
 800991e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009926:	78fa      	ldrb	r2, [r7, #3]
 8009928:	4611      	mov	r1, r2
 800992a:	4618      	mov	r0, r3
 800992c:	f7f8 f911 	bl	8001b52 <HAL_PCD_SetAddress>
 8009930:	4603      	mov	r3, r0
 8009932:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009934:	7bfb      	ldrb	r3, [r7, #15]
 8009936:	4618      	mov	r0, r3
 8009938:	f000 f8b0 	bl	8009a9c <USBD_Get_USB_Status>
 800993c:	4603      	mov	r3, r0
 800993e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009940:	7bbb      	ldrb	r3, [r7, #14]
}
 8009942:	4618      	mov	r0, r3
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b086      	sub	sp, #24
 800994e:	af00      	add	r7, sp, #0
 8009950:	60f8      	str	r0, [r7, #12]
 8009952:	607a      	str	r2, [r7, #4]
 8009954:	603b      	str	r3, [r7, #0]
 8009956:	460b      	mov	r3, r1
 8009958:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800995a:	2300      	movs	r3, #0
 800995c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800995e:	2300      	movs	r3, #0
 8009960:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009968:	7af9      	ldrb	r1, [r7, #11]
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	f7f8 fa04 	bl	8001d7a <HAL_PCD_EP_Transmit>
 8009972:	4603      	mov	r3, r0
 8009974:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009976:	7dfb      	ldrb	r3, [r7, #23]
 8009978:	4618      	mov	r0, r3
 800997a:	f000 f88f 	bl	8009a9c <USBD_Get_USB_Status>
 800997e:	4603      	mov	r3, r0
 8009980:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009982:	7dbb      	ldrb	r3, [r7, #22]
}
 8009984:	4618      	mov	r0, r3
 8009986:	3718      	adds	r7, #24
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b086      	sub	sp, #24
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	607a      	str	r2, [r7, #4]
 8009996:	603b      	str	r3, [r7, #0]
 8009998:	460b      	mov	r3, r1
 800999a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800999c:	2300      	movs	r3, #0
 800999e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099a0:	2300      	movs	r3, #0
 80099a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80099aa:	7af9      	ldrb	r1, [r7, #11]
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	f7f8 f99a 	bl	8001ce8 <HAL_PCD_EP_Receive>
 80099b4:	4603      	mov	r3, r0
 80099b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099b8:	7dfb      	ldrb	r3, [r7, #23]
 80099ba:	4618      	mov	r0, r3
 80099bc:	f000 f86e 	bl	8009a9c <USBD_Get_USB_Status>
 80099c0:	4603      	mov	r3, r0
 80099c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3718      	adds	r7, #24
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b082      	sub	sp, #8
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
 80099d6:	460b      	mov	r3, r1
 80099d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80099e0:	78fa      	ldrb	r2, [r7, #3]
 80099e2:	4611      	mov	r1, r2
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7f8 f9b0 	bl	8001d4a <HAL_PCD_EP_GetRxCount>
 80099ea:	4603      	mov	r3, r0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	460b      	mov	r3, r1
 80099fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009a00:	78fb      	ldrb	r3, [r7, #3]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d002      	beq.n	8009a0c <HAL_PCDEx_LPM_Callback+0x18>
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d013      	beq.n	8009a32 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009a0a:	e023      	b.n	8009a54 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	7a5b      	ldrb	r3, [r3, #9]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d007      	beq.n	8009a24 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009a14:	f000 f83c 	bl	8009a90 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a18:	4b10      	ldr	r3, [pc, #64]	@ (8009a5c <HAL_PCDEx_LPM_Callback+0x68>)
 8009a1a:	691b      	ldr	r3, [r3, #16]
 8009a1c:	4a0f      	ldr	r2, [pc, #60]	@ (8009a5c <HAL_PCDEx_LPM_Callback+0x68>)
 8009a1e:	f023 0306 	bic.w	r3, r3, #6
 8009a22:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7fe fc9b 	bl	8008366 <USBD_LL_Resume>
    break;
 8009a30:	e010      	b.n	8009a54 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7fe fc7e 	bl	800833a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	7a5b      	ldrb	r3, [r3, #9]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d005      	beq.n	8009a52 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a46:	4b05      	ldr	r3, [pc, #20]	@ (8009a5c <HAL_PCDEx_LPM_Callback+0x68>)
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	4a04      	ldr	r2, [pc, #16]	@ (8009a5c <HAL_PCDEx_LPM_Callback+0x68>)
 8009a4c:	f043 0306 	orr.w	r3, r3, #6
 8009a50:	6113      	str	r3, [r2, #16]
    break;
 8009a52:	bf00      	nop
}
 8009a54:	bf00      	nop
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	e000ed00 	.word	0xe000ed00

08009a60 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a68:	4b03      	ldr	r3, [pc, #12]	@ (8009a78 <USBD_static_malloc+0x18>)
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	370c      	adds	r7, #12
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	20001c64 	.word	0x20001c64

08009a7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]

}
 8009a84:	bf00      	nop
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009a94:	f7f6 fe78 	bl	8000788 <SystemClock_Config>
}
 8009a98:	bf00      	nop
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009aaa:	79fb      	ldrb	r3, [r7, #7]
 8009aac:	2b03      	cmp	r3, #3
 8009aae:	d817      	bhi.n	8009ae0 <USBD_Get_USB_Status+0x44>
 8009ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8009ab8 <USBD_Get_USB_Status+0x1c>)
 8009ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab6:	bf00      	nop
 8009ab8:	08009ac9 	.word	0x08009ac9
 8009abc:	08009acf 	.word	0x08009acf
 8009ac0:	08009ad5 	.word	0x08009ad5
 8009ac4:	08009adb 	.word	0x08009adb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	73fb      	strb	r3, [r7, #15]
    break;
 8009acc:	e00b      	b.n	8009ae6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ace:	2303      	movs	r3, #3
 8009ad0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ad2:	e008      	b.n	8009ae6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ad8:	e005      	b.n	8009ae6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ada:	2303      	movs	r3, #3
 8009adc:	73fb      	strb	r3, [r7, #15]
    break;
 8009ade:	e002      	b.n	8009ae6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009ae0:	2303      	movs	r3, #3
 8009ae2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ae4:	bf00      	nop
  }
  return usb_status;
 8009ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3714      	adds	r7, #20
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <std>:
 8009af4:	2300      	movs	r3, #0
 8009af6:	b510      	push	{r4, lr}
 8009af8:	4604      	mov	r4, r0
 8009afa:	e9c0 3300 	strd	r3, r3, [r0]
 8009afe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b02:	6083      	str	r3, [r0, #8]
 8009b04:	8181      	strh	r1, [r0, #12]
 8009b06:	6643      	str	r3, [r0, #100]	@ 0x64
 8009b08:	81c2      	strh	r2, [r0, #14]
 8009b0a:	6183      	str	r3, [r0, #24]
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	2208      	movs	r2, #8
 8009b10:	305c      	adds	r0, #92	@ 0x5c
 8009b12:	f000 f944 	bl	8009d9e <memset>
 8009b16:	4b0d      	ldr	r3, [pc, #52]	@ (8009b4c <std+0x58>)
 8009b18:	6263      	str	r3, [r4, #36]	@ 0x24
 8009b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8009b50 <std+0x5c>)
 8009b1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8009b54 <std+0x60>)
 8009b20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009b22:	4b0d      	ldr	r3, [pc, #52]	@ (8009b58 <std+0x64>)
 8009b24:	6323      	str	r3, [r4, #48]	@ 0x30
 8009b26:	4b0d      	ldr	r3, [pc, #52]	@ (8009b5c <std+0x68>)
 8009b28:	6224      	str	r4, [r4, #32]
 8009b2a:	429c      	cmp	r4, r3
 8009b2c:	d006      	beq.n	8009b3c <std+0x48>
 8009b2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009b32:	4294      	cmp	r4, r2
 8009b34:	d002      	beq.n	8009b3c <std+0x48>
 8009b36:	33d0      	adds	r3, #208	@ 0xd0
 8009b38:	429c      	cmp	r4, r3
 8009b3a:	d105      	bne.n	8009b48 <std+0x54>
 8009b3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b44:	f000 b9a4 	b.w	8009e90 <__retarget_lock_init_recursive>
 8009b48:	bd10      	pop	{r4, pc}
 8009b4a:	bf00      	nop
 8009b4c:	08009d19 	.word	0x08009d19
 8009b50:	08009d3b 	.word	0x08009d3b
 8009b54:	08009d73 	.word	0x08009d73
 8009b58:	08009d97 	.word	0x08009d97
 8009b5c:	20001e84 	.word	0x20001e84

08009b60 <stdio_exit_handler>:
 8009b60:	4a02      	ldr	r2, [pc, #8]	@ (8009b6c <stdio_exit_handler+0xc>)
 8009b62:	4903      	ldr	r1, [pc, #12]	@ (8009b70 <stdio_exit_handler+0x10>)
 8009b64:	4803      	ldr	r0, [pc, #12]	@ (8009b74 <stdio_exit_handler+0x14>)
 8009b66:	f000 b869 	b.w	8009c3c <_fwalk_sglue>
 8009b6a:	bf00      	nop
 8009b6c:	20000184 	.word	0x20000184
 8009b70:	0800a9dd 	.word	0x0800a9dd
 8009b74:	20000194 	.word	0x20000194

08009b78 <cleanup_stdio>:
 8009b78:	6841      	ldr	r1, [r0, #4]
 8009b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8009bac <cleanup_stdio+0x34>)
 8009b7c:	4299      	cmp	r1, r3
 8009b7e:	b510      	push	{r4, lr}
 8009b80:	4604      	mov	r4, r0
 8009b82:	d001      	beq.n	8009b88 <cleanup_stdio+0x10>
 8009b84:	f000 ff2a 	bl	800a9dc <_fflush_r>
 8009b88:	68a1      	ldr	r1, [r4, #8]
 8009b8a:	4b09      	ldr	r3, [pc, #36]	@ (8009bb0 <cleanup_stdio+0x38>)
 8009b8c:	4299      	cmp	r1, r3
 8009b8e:	d002      	beq.n	8009b96 <cleanup_stdio+0x1e>
 8009b90:	4620      	mov	r0, r4
 8009b92:	f000 ff23 	bl	800a9dc <_fflush_r>
 8009b96:	68e1      	ldr	r1, [r4, #12]
 8009b98:	4b06      	ldr	r3, [pc, #24]	@ (8009bb4 <cleanup_stdio+0x3c>)
 8009b9a:	4299      	cmp	r1, r3
 8009b9c:	d004      	beq.n	8009ba8 <cleanup_stdio+0x30>
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ba4:	f000 bf1a 	b.w	800a9dc <_fflush_r>
 8009ba8:	bd10      	pop	{r4, pc}
 8009baa:	bf00      	nop
 8009bac:	20001e84 	.word	0x20001e84
 8009bb0:	20001eec 	.word	0x20001eec
 8009bb4:	20001f54 	.word	0x20001f54

08009bb8 <global_stdio_init.part.0>:
 8009bb8:	b510      	push	{r4, lr}
 8009bba:	4b0b      	ldr	r3, [pc, #44]	@ (8009be8 <global_stdio_init.part.0+0x30>)
 8009bbc:	4c0b      	ldr	r4, [pc, #44]	@ (8009bec <global_stdio_init.part.0+0x34>)
 8009bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8009bf0 <global_stdio_init.part.0+0x38>)
 8009bc0:	601a      	str	r2, [r3, #0]
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	2104      	movs	r1, #4
 8009bc8:	f7ff ff94 	bl	8009af4 <std>
 8009bcc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	2109      	movs	r1, #9
 8009bd4:	f7ff ff8e 	bl	8009af4 <std>
 8009bd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009bdc:	2202      	movs	r2, #2
 8009bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009be2:	2112      	movs	r1, #18
 8009be4:	f7ff bf86 	b.w	8009af4 <std>
 8009be8:	20001fbc 	.word	0x20001fbc
 8009bec:	20001e84 	.word	0x20001e84
 8009bf0:	08009b61 	.word	0x08009b61

08009bf4 <__sfp_lock_acquire>:
 8009bf4:	4801      	ldr	r0, [pc, #4]	@ (8009bfc <__sfp_lock_acquire+0x8>)
 8009bf6:	f000 b94c 	b.w	8009e92 <__retarget_lock_acquire_recursive>
 8009bfa:	bf00      	nop
 8009bfc:	20001fc5 	.word	0x20001fc5

08009c00 <__sfp_lock_release>:
 8009c00:	4801      	ldr	r0, [pc, #4]	@ (8009c08 <__sfp_lock_release+0x8>)
 8009c02:	f000 b947 	b.w	8009e94 <__retarget_lock_release_recursive>
 8009c06:	bf00      	nop
 8009c08:	20001fc5 	.word	0x20001fc5

08009c0c <__sinit>:
 8009c0c:	b510      	push	{r4, lr}
 8009c0e:	4604      	mov	r4, r0
 8009c10:	f7ff fff0 	bl	8009bf4 <__sfp_lock_acquire>
 8009c14:	6a23      	ldr	r3, [r4, #32]
 8009c16:	b11b      	cbz	r3, 8009c20 <__sinit+0x14>
 8009c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c1c:	f7ff bff0 	b.w	8009c00 <__sfp_lock_release>
 8009c20:	4b04      	ldr	r3, [pc, #16]	@ (8009c34 <__sinit+0x28>)
 8009c22:	6223      	str	r3, [r4, #32]
 8009c24:	4b04      	ldr	r3, [pc, #16]	@ (8009c38 <__sinit+0x2c>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d1f5      	bne.n	8009c18 <__sinit+0xc>
 8009c2c:	f7ff ffc4 	bl	8009bb8 <global_stdio_init.part.0>
 8009c30:	e7f2      	b.n	8009c18 <__sinit+0xc>
 8009c32:	bf00      	nop
 8009c34:	08009b79 	.word	0x08009b79
 8009c38:	20001fbc 	.word	0x20001fbc

08009c3c <_fwalk_sglue>:
 8009c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c40:	4607      	mov	r7, r0
 8009c42:	4688      	mov	r8, r1
 8009c44:	4614      	mov	r4, r2
 8009c46:	2600      	movs	r6, #0
 8009c48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c4c:	f1b9 0901 	subs.w	r9, r9, #1
 8009c50:	d505      	bpl.n	8009c5e <_fwalk_sglue+0x22>
 8009c52:	6824      	ldr	r4, [r4, #0]
 8009c54:	2c00      	cmp	r4, #0
 8009c56:	d1f7      	bne.n	8009c48 <_fwalk_sglue+0xc>
 8009c58:	4630      	mov	r0, r6
 8009c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c5e:	89ab      	ldrh	r3, [r5, #12]
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d907      	bls.n	8009c74 <_fwalk_sglue+0x38>
 8009c64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	d003      	beq.n	8009c74 <_fwalk_sglue+0x38>
 8009c6c:	4629      	mov	r1, r5
 8009c6e:	4638      	mov	r0, r7
 8009c70:	47c0      	blx	r8
 8009c72:	4306      	orrs	r6, r0
 8009c74:	3568      	adds	r5, #104	@ 0x68
 8009c76:	e7e9      	b.n	8009c4c <_fwalk_sglue+0x10>

08009c78 <iprintf>:
 8009c78:	b40f      	push	{r0, r1, r2, r3}
 8009c7a:	b507      	push	{r0, r1, r2, lr}
 8009c7c:	4906      	ldr	r1, [pc, #24]	@ (8009c98 <iprintf+0x20>)
 8009c7e:	ab04      	add	r3, sp, #16
 8009c80:	6808      	ldr	r0, [r1, #0]
 8009c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c86:	6881      	ldr	r1, [r0, #8]
 8009c88:	9301      	str	r3, [sp, #4]
 8009c8a:	f000 fb7f 	bl	800a38c <_vfiprintf_r>
 8009c8e:	b003      	add	sp, #12
 8009c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c94:	b004      	add	sp, #16
 8009c96:	4770      	bx	lr
 8009c98:	20000190 	.word	0x20000190

08009c9c <putchar>:
 8009c9c:	4b02      	ldr	r3, [pc, #8]	@ (8009ca8 <putchar+0xc>)
 8009c9e:	4601      	mov	r1, r0
 8009ca0:	6818      	ldr	r0, [r3, #0]
 8009ca2:	6882      	ldr	r2, [r0, #8]
 8009ca4:	f000 bec2 	b.w	800aa2c <_putc_r>
 8009ca8:	20000190 	.word	0x20000190

08009cac <sniprintf>:
 8009cac:	b40c      	push	{r2, r3}
 8009cae:	b530      	push	{r4, r5, lr}
 8009cb0:	4b18      	ldr	r3, [pc, #96]	@ (8009d14 <sniprintf+0x68>)
 8009cb2:	1e0c      	subs	r4, r1, #0
 8009cb4:	681d      	ldr	r5, [r3, #0]
 8009cb6:	b09d      	sub	sp, #116	@ 0x74
 8009cb8:	da08      	bge.n	8009ccc <sniprintf+0x20>
 8009cba:	238b      	movs	r3, #139	@ 0x8b
 8009cbc:	602b      	str	r3, [r5, #0]
 8009cbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009cc2:	b01d      	add	sp, #116	@ 0x74
 8009cc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cc8:	b002      	add	sp, #8
 8009cca:	4770      	bx	lr
 8009ccc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009cd0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009cd4:	f04f 0300 	mov.w	r3, #0
 8009cd8:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009cda:	bf14      	ite	ne
 8009cdc:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8009ce0:	4623      	moveq	r3, r4
 8009ce2:	9304      	str	r3, [sp, #16]
 8009ce4:	9307      	str	r3, [sp, #28]
 8009ce6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009cea:	9002      	str	r0, [sp, #8]
 8009cec:	9006      	str	r0, [sp, #24]
 8009cee:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009cf2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009cf4:	ab21      	add	r3, sp, #132	@ 0x84
 8009cf6:	a902      	add	r1, sp, #8
 8009cf8:	4628      	mov	r0, r5
 8009cfa:	9301      	str	r3, [sp, #4]
 8009cfc:	f000 fa20 	bl	800a140 <_svfiprintf_r>
 8009d00:	1c43      	adds	r3, r0, #1
 8009d02:	bfbc      	itt	lt
 8009d04:	238b      	movlt	r3, #139	@ 0x8b
 8009d06:	602b      	strlt	r3, [r5, #0]
 8009d08:	2c00      	cmp	r4, #0
 8009d0a:	d0da      	beq.n	8009cc2 <sniprintf+0x16>
 8009d0c:	9b02      	ldr	r3, [sp, #8]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	701a      	strb	r2, [r3, #0]
 8009d12:	e7d6      	b.n	8009cc2 <sniprintf+0x16>
 8009d14:	20000190 	.word	0x20000190

08009d18 <__sread>:
 8009d18:	b510      	push	{r4, lr}
 8009d1a:	460c      	mov	r4, r1
 8009d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d20:	f000 f868 	bl	8009df4 <_read_r>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	bfab      	itete	ge
 8009d28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009d2a:	89a3      	ldrhlt	r3, [r4, #12]
 8009d2c:	181b      	addge	r3, r3, r0
 8009d2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009d32:	bfac      	ite	ge
 8009d34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009d36:	81a3      	strhlt	r3, [r4, #12]
 8009d38:	bd10      	pop	{r4, pc}

08009d3a <__swrite>:
 8009d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d3e:	461f      	mov	r7, r3
 8009d40:	898b      	ldrh	r3, [r1, #12]
 8009d42:	05db      	lsls	r3, r3, #23
 8009d44:	4605      	mov	r5, r0
 8009d46:	460c      	mov	r4, r1
 8009d48:	4616      	mov	r6, r2
 8009d4a:	d505      	bpl.n	8009d58 <__swrite+0x1e>
 8009d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d50:	2302      	movs	r3, #2
 8009d52:	2200      	movs	r2, #0
 8009d54:	f000 f83c 	bl	8009dd0 <_lseek_r>
 8009d58:	89a3      	ldrh	r3, [r4, #12]
 8009d5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d62:	81a3      	strh	r3, [r4, #12]
 8009d64:	4632      	mov	r2, r6
 8009d66:	463b      	mov	r3, r7
 8009d68:	4628      	mov	r0, r5
 8009d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d6e:	f000 b853 	b.w	8009e18 <_write_r>

08009d72 <__sseek>:
 8009d72:	b510      	push	{r4, lr}
 8009d74:	460c      	mov	r4, r1
 8009d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d7a:	f000 f829 	bl	8009dd0 <_lseek_r>
 8009d7e:	1c43      	adds	r3, r0, #1
 8009d80:	89a3      	ldrh	r3, [r4, #12]
 8009d82:	bf15      	itete	ne
 8009d84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009d86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009d8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009d8e:	81a3      	strheq	r3, [r4, #12]
 8009d90:	bf18      	it	ne
 8009d92:	81a3      	strhne	r3, [r4, #12]
 8009d94:	bd10      	pop	{r4, pc}

08009d96 <__sclose>:
 8009d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d9a:	f000 b809 	b.w	8009db0 <_close_r>

08009d9e <memset>:
 8009d9e:	4402      	add	r2, r0
 8009da0:	4603      	mov	r3, r0
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d100      	bne.n	8009da8 <memset+0xa>
 8009da6:	4770      	bx	lr
 8009da8:	f803 1b01 	strb.w	r1, [r3], #1
 8009dac:	e7f9      	b.n	8009da2 <memset+0x4>
	...

08009db0 <_close_r>:
 8009db0:	b538      	push	{r3, r4, r5, lr}
 8009db2:	4d06      	ldr	r5, [pc, #24]	@ (8009dcc <_close_r+0x1c>)
 8009db4:	2300      	movs	r3, #0
 8009db6:	4604      	mov	r4, r0
 8009db8:	4608      	mov	r0, r1
 8009dba:	602b      	str	r3, [r5, #0]
 8009dbc:	f7f6 fe91 	bl	8000ae2 <_close>
 8009dc0:	1c43      	adds	r3, r0, #1
 8009dc2:	d102      	bne.n	8009dca <_close_r+0x1a>
 8009dc4:	682b      	ldr	r3, [r5, #0]
 8009dc6:	b103      	cbz	r3, 8009dca <_close_r+0x1a>
 8009dc8:	6023      	str	r3, [r4, #0]
 8009dca:	bd38      	pop	{r3, r4, r5, pc}
 8009dcc:	20001fc0 	.word	0x20001fc0

08009dd0 <_lseek_r>:
 8009dd0:	b538      	push	{r3, r4, r5, lr}
 8009dd2:	4d07      	ldr	r5, [pc, #28]	@ (8009df0 <_lseek_r+0x20>)
 8009dd4:	4604      	mov	r4, r0
 8009dd6:	4608      	mov	r0, r1
 8009dd8:	4611      	mov	r1, r2
 8009dda:	2200      	movs	r2, #0
 8009ddc:	602a      	str	r2, [r5, #0]
 8009dde:	461a      	mov	r2, r3
 8009de0:	f7f6 fea6 	bl	8000b30 <_lseek>
 8009de4:	1c43      	adds	r3, r0, #1
 8009de6:	d102      	bne.n	8009dee <_lseek_r+0x1e>
 8009de8:	682b      	ldr	r3, [r5, #0]
 8009dea:	b103      	cbz	r3, 8009dee <_lseek_r+0x1e>
 8009dec:	6023      	str	r3, [r4, #0]
 8009dee:	bd38      	pop	{r3, r4, r5, pc}
 8009df0:	20001fc0 	.word	0x20001fc0

08009df4 <_read_r>:
 8009df4:	b538      	push	{r3, r4, r5, lr}
 8009df6:	4d07      	ldr	r5, [pc, #28]	@ (8009e14 <_read_r+0x20>)
 8009df8:	4604      	mov	r4, r0
 8009dfa:	4608      	mov	r0, r1
 8009dfc:	4611      	mov	r1, r2
 8009dfe:	2200      	movs	r2, #0
 8009e00:	602a      	str	r2, [r5, #0]
 8009e02:	461a      	mov	r2, r3
 8009e04:	f7f6 fe34 	bl	8000a70 <_read>
 8009e08:	1c43      	adds	r3, r0, #1
 8009e0a:	d102      	bne.n	8009e12 <_read_r+0x1e>
 8009e0c:	682b      	ldr	r3, [r5, #0]
 8009e0e:	b103      	cbz	r3, 8009e12 <_read_r+0x1e>
 8009e10:	6023      	str	r3, [r4, #0]
 8009e12:	bd38      	pop	{r3, r4, r5, pc}
 8009e14:	20001fc0 	.word	0x20001fc0

08009e18 <_write_r>:
 8009e18:	b538      	push	{r3, r4, r5, lr}
 8009e1a:	4d07      	ldr	r5, [pc, #28]	@ (8009e38 <_write_r+0x20>)
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	4608      	mov	r0, r1
 8009e20:	4611      	mov	r1, r2
 8009e22:	2200      	movs	r2, #0
 8009e24:	602a      	str	r2, [r5, #0]
 8009e26:	461a      	mov	r2, r3
 8009e28:	f7f6 fe3f 	bl	8000aaa <_write>
 8009e2c:	1c43      	adds	r3, r0, #1
 8009e2e:	d102      	bne.n	8009e36 <_write_r+0x1e>
 8009e30:	682b      	ldr	r3, [r5, #0]
 8009e32:	b103      	cbz	r3, 8009e36 <_write_r+0x1e>
 8009e34:	6023      	str	r3, [r4, #0]
 8009e36:	bd38      	pop	{r3, r4, r5, pc}
 8009e38:	20001fc0 	.word	0x20001fc0

08009e3c <__errno>:
 8009e3c:	4b01      	ldr	r3, [pc, #4]	@ (8009e44 <__errno+0x8>)
 8009e3e:	6818      	ldr	r0, [r3, #0]
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	20000190 	.word	0x20000190

08009e48 <__libc_init_array>:
 8009e48:	b570      	push	{r4, r5, r6, lr}
 8009e4a:	4d0d      	ldr	r5, [pc, #52]	@ (8009e80 <__libc_init_array+0x38>)
 8009e4c:	4c0d      	ldr	r4, [pc, #52]	@ (8009e84 <__libc_init_array+0x3c>)
 8009e4e:	1b64      	subs	r4, r4, r5
 8009e50:	10a4      	asrs	r4, r4, #2
 8009e52:	2600      	movs	r6, #0
 8009e54:	42a6      	cmp	r6, r4
 8009e56:	d109      	bne.n	8009e6c <__libc_init_array+0x24>
 8009e58:	4d0b      	ldr	r5, [pc, #44]	@ (8009e88 <__libc_init_array+0x40>)
 8009e5a:	4c0c      	ldr	r4, [pc, #48]	@ (8009e8c <__libc_init_array+0x44>)
 8009e5c:	f000 ffa0 	bl	800ada0 <_init>
 8009e60:	1b64      	subs	r4, r4, r5
 8009e62:	10a4      	asrs	r4, r4, #2
 8009e64:	2600      	movs	r6, #0
 8009e66:	42a6      	cmp	r6, r4
 8009e68:	d105      	bne.n	8009e76 <__libc_init_array+0x2e>
 8009e6a:	bd70      	pop	{r4, r5, r6, pc}
 8009e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e70:	4798      	blx	r3
 8009e72:	3601      	adds	r6, #1
 8009e74:	e7ee      	b.n	8009e54 <__libc_init_array+0xc>
 8009e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e7a:	4798      	blx	r3
 8009e7c:	3601      	adds	r6, #1
 8009e7e:	e7f2      	b.n	8009e66 <__libc_init_array+0x1e>
 8009e80:	0800afac 	.word	0x0800afac
 8009e84:	0800afac 	.word	0x0800afac
 8009e88:	0800afac 	.word	0x0800afac
 8009e8c:	0800afb0 	.word	0x0800afb0

08009e90 <__retarget_lock_init_recursive>:
 8009e90:	4770      	bx	lr

08009e92 <__retarget_lock_acquire_recursive>:
 8009e92:	4770      	bx	lr

08009e94 <__retarget_lock_release_recursive>:
 8009e94:	4770      	bx	lr
	...

08009e98 <_free_r>:
 8009e98:	b538      	push	{r3, r4, r5, lr}
 8009e9a:	4605      	mov	r5, r0
 8009e9c:	2900      	cmp	r1, #0
 8009e9e:	d041      	beq.n	8009f24 <_free_r+0x8c>
 8009ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ea4:	1f0c      	subs	r4, r1, #4
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	bfb8      	it	lt
 8009eaa:	18e4      	addlt	r4, r4, r3
 8009eac:	f000 f8e0 	bl	800a070 <__malloc_lock>
 8009eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8009f28 <_free_r+0x90>)
 8009eb2:	6813      	ldr	r3, [r2, #0]
 8009eb4:	b933      	cbnz	r3, 8009ec4 <_free_r+0x2c>
 8009eb6:	6063      	str	r3, [r4, #4]
 8009eb8:	6014      	str	r4, [r2, #0]
 8009eba:	4628      	mov	r0, r5
 8009ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ec0:	f000 b8dc 	b.w	800a07c <__malloc_unlock>
 8009ec4:	42a3      	cmp	r3, r4
 8009ec6:	d908      	bls.n	8009eda <_free_r+0x42>
 8009ec8:	6820      	ldr	r0, [r4, #0]
 8009eca:	1821      	adds	r1, r4, r0
 8009ecc:	428b      	cmp	r3, r1
 8009ece:	bf01      	itttt	eq
 8009ed0:	6819      	ldreq	r1, [r3, #0]
 8009ed2:	685b      	ldreq	r3, [r3, #4]
 8009ed4:	1809      	addeq	r1, r1, r0
 8009ed6:	6021      	streq	r1, [r4, #0]
 8009ed8:	e7ed      	b.n	8009eb6 <_free_r+0x1e>
 8009eda:	461a      	mov	r2, r3
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	b10b      	cbz	r3, 8009ee4 <_free_r+0x4c>
 8009ee0:	42a3      	cmp	r3, r4
 8009ee2:	d9fa      	bls.n	8009eda <_free_r+0x42>
 8009ee4:	6811      	ldr	r1, [r2, #0]
 8009ee6:	1850      	adds	r0, r2, r1
 8009ee8:	42a0      	cmp	r0, r4
 8009eea:	d10b      	bne.n	8009f04 <_free_r+0x6c>
 8009eec:	6820      	ldr	r0, [r4, #0]
 8009eee:	4401      	add	r1, r0
 8009ef0:	1850      	adds	r0, r2, r1
 8009ef2:	4283      	cmp	r3, r0
 8009ef4:	6011      	str	r1, [r2, #0]
 8009ef6:	d1e0      	bne.n	8009eba <_free_r+0x22>
 8009ef8:	6818      	ldr	r0, [r3, #0]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	6053      	str	r3, [r2, #4]
 8009efe:	4408      	add	r0, r1
 8009f00:	6010      	str	r0, [r2, #0]
 8009f02:	e7da      	b.n	8009eba <_free_r+0x22>
 8009f04:	d902      	bls.n	8009f0c <_free_r+0x74>
 8009f06:	230c      	movs	r3, #12
 8009f08:	602b      	str	r3, [r5, #0]
 8009f0a:	e7d6      	b.n	8009eba <_free_r+0x22>
 8009f0c:	6820      	ldr	r0, [r4, #0]
 8009f0e:	1821      	adds	r1, r4, r0
 8009f10:	428b      	cmp	r3, r1
 8009f12:	bf04      	itt	eq
 8009f14:	6819      	ldreq	r1, [r3, #0]
 8009f16:	685b      	ldreq	r3, [r3, #4]
 8009f18:	6063      	str	r3, [r4, #4]
 8009f1a:	bf04      	itt	eq
 8009f1c:	1809      	addeq	r1, r1, r0
 8009f1e:	6021      	streq	r1, [r4, #0]
 8009f20:	6054      	str	r4, [r2, #4]
 8009f22:	e7ca      	b.n	8009eba <_free_r+0x22>
 8009f24:	bd38      	pop	{r3, r4, r5, pc}
 8009f26:	bf00      	nop
 8009f28:	20001fcc 	.word	0x20001fcc

08009f2c <sbrk_aligned>:
 8009f2c:	b570      	push	{r4, r5, r6, lr}
 8009f2e:	4e0f      	ldr	r6, [pc, #60]	@ (8009f6c <sbrk_aligned+0x40>)
 8009f30:	460c      	mov	r4, r1
 8009f32:	6831      	ldr	r1, [r6, #0]
 8009f34:	4605      	mov	r5, r0
 8009f36:	b911      	cbnz	r1, 8009f3e <sbrk_aligned+0x12>
 8009f38:	f000 fe5a 	bl	800abf0 <_sbrk_r>
 8009f3c:	6030      	str	r0, [r6, #0]
 8009f3e:	4621      	mov	r1, r4
 8009f40:	4628      	mov	r0, r5
 8009f42:	f000 fe55 	bl	800abf0 <_sbrk_r>
 8009f46:	1c43      	adds	r3, r0, #1
 8009f48:	d103      	bne.n	8009f52 <sbrk_aligned+0x26>
 8009f4a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009f4e:	4620      	mov	r0, r4
 8009f50:	bd70      	pop	{r4, r5, r6, pc}
 8009f52:	1cc4      	adds	r4, r0, #3
 8009f54:	f024 0403 	bic.w	r4, r4, #3
 8009f58:	42a0      	cmp	r0, r4
 8009f5a:	d0f8      	beq.n	8009f4e <sbrk_aligned+0x22>
 8009f5c:	1a21      	subs	r1, r4, r0
 8009f5e:	4628      	mov	r0, r5
 8009f60:	f000 fe46 	bl	800abf0 <_sbrk_r>
 8009f64:	3001      	adds	r0, #1
 8009f66:	d1f2      	bne.n	8009f4e <sbrk_aligned+0x22>
 8009f68:	e7ef      	b.n	8009f4a <sbrk_aligned+0x1e>
 8009f6a:	bf00      	nop
 8009f6c:	20001fc8 	.word	0x20001fc8

08009f70 <_malloc_r>:
 8009f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f74:	1ccd      	adds	r5, r1, #3
 8009f76:	f025 0503 	bic.w	r5, r5, #3
 8009f7a:	3508      	adds	r5, #8
 8009f7c:	2d0c      	cmp	r5, #12
 8009f7e:	bf38      	it	cc
 8009f80:	250c      	movcc	r5, #12
 8009f82:	2d00      	cmp	r5, #0
 8009f84:	4606      	mov	r6, r0
 8009f86:	db01      	blt.n	8009f8c <_malloc_r+0x1c>
 8009f88:	42a9      	cmp	r1, r5
 8009f8a:	d904      	bls.n	8009f96 <_malloc_r+0x26>
 8009f8c:	230c      	movs	r3, #12
 8009f8e:	6033      	str	r3, [r6, #0]
 8009f90:	2000      	movs	r0, #0
 8009f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a06c <_malloc_r+0xfc>
 8009f9a:	f000 f869 	bl	800a070 <__malloc_lock>
 8009f9e:	f8d8 3000 	ldr.w	r3, [r8]
 8009fa2:	461c      	mov	r4, r3
 8009fa4:	bb44      	cbnz	r4, 8009ff8 <_malloc_r+0x88>
 8009fa6:	4629      	mov	r1, r5
 8009fa8:	4630      	mov	r0, r6
 8009faa:	f7ff ffbf 	bl	8009f2c <sbrk_aligned>
 8009fae:	1c43      	adds	r3, r0, #1
 8009fb0:	4604      	mov	r4, r0
 8009fb2:	d158      	bne.n	800a066 <_malloc_r+0xf6>
 8009fb4:	f8d8 4000 	ldr.w	r4, [r8]
 8009fb8:	4627      	mov	r7, r4
 8009fba:	2f00      	cmp	r7, #0
 8009fbc:	d143      	bne.n	800a046 <_malloc_r+0xd6>
 8009fbe:	2c00      	cmp	r4, #0
 8009fc0:	d04b      	beq.n	800a05a <_malloc_r+0xea>
 8009fc2:	6823      	ldr	r3, [r4, #0]
 8009fc4:	4639      	mov	r1, r7
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	eb04 0903 	add.w	r9, r4, r3
 8009fcc:	f000 fe10 	bl	800abf0 <_sbrk_r>
 8009fd0:	4581      	cmp	r9, r0
 8009fd2:	d142      	bne.n	800a05a <_malloc_r+0xea>
 8009fd4:	6821      	ldr	r1, [r4, #0]
 8009fd6:	1a6d      	subs	r5, r5, r1
 8009fd8:	4629      	mov	r1, r5
 8009fda:	4630      	mov	r0, r6
 8009fdc:	f7ff ffa6 	bl	8009f2c <sbrk_aligned>
 8009fe0:	3001      	adds	r0, #1
 8009fe2:	d03a      	beq.n	800a05a <_malloc_r+0xea>
 8009fe4:	6823      	ldr	r3, [r4, #0]
 8009fe6:	442b      	add	r3, r5
 8009fe8:	6023      	str	r3, [r4, #0]
 8009fea:	f8d8 3000 	ldr.w	r3, [r8]
 8009fee:	685a      	ldr	r2, [r3, #4]
 8009ff0:	bb62      	cbnz	r2, 800a04c <_malloc_r+0xdc>
 8009ff2:	f8c8 7000 	str.w	r7, [r8]
 8009ff6:	e00f      	b.n	800a018 <_malloc_r+0xa8>
 8009ff8:	6822      	ldr	r2, [r4, #0]
 8009ffa:	1b52      	subs	r2, r2, r5
 8009ffc:	d420      	bmi.n	800a040 <_malloc_r+0xd0>
 8009ffe:	2a0b      	cmp	r2, #11
 800a000:	d917      	bls.n	800a032 <_malloc_r+0xc2>
 800a002:	1961      	adds	r1, r4, r5
 800a004:	42a3      	cmp	r3, r4
 800a006:	6025      	str	r5, [r4, #0]
 800a008:	bf18      	it	ne
 800a00a:	6059      	strne	r1, [r3, #4]
 800a00c:	6863      	ldr	r3, [r4, #4]
 800a00e:	bf08      	it	eq
 800a010:	f8c8 1000 	streq.w	r1, [r8]
 800a014:	5162      	str	r2, [r4, r5]
 800a016:	604b      	str	r3, [r1, #4]
 800a018:	4630      	mov	r0, r6
 800a01a:	f000 f82f 	bl	800a07c <__malloc_unlock>
 800a01e:	f104 000b 	add.w	r0, r4, #11
 800a022:	1d23      	adds	r3, r4, #4
 800a024:	f020 0007 	bic.w	r0, r0, #7
 800a028:	1ac2      	subs	r2, r0, r3
 800a02a:	bf1c      	itt	ne
 800a02c:	1a1b      	subne	r3, r3, r0
 800a02e:	50a3      	strne	r3, [r4, r2]
 800a030:	e7af      	b.n	8009f92 <_malloc_r+0x22>
 800a032:	6862      	ldr	r2, [r4, #4]
 800a034:	42a3      	cmp	r3, r4
 800a036:	bf0c      	ite	eq
 800a038:	f8c8 2000 	streq.w	r2, [r8]
 800a03c:	605a      	strne	r2, [r3, #4]
 800a03e:	e7eb      	b.n	800a018 <_malloc_r+0xa8>
 800a040:	4623      	mov	r3, r4
 800a042:	6864      	ldr	r4, [r4, #4]
 800a044:	e7ae      	b.n	8009fa4 <_malloc_r+0x34>
 800a046:	463c      	mov	r4, r7
 800a048:	687f      	ldr	r7, [r7, #4]
 800a04a:	e7b6      	b.n	8009fba <_malloc_r+0x4a>
 800a04c:	461a      	mov	r2, r3
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	42a3      	cmp	r3, r4
 800a052:	d1fb      	bne.n	800a04c <_malloc_r+0xdc>
 800a054:	2300      	movs	r3, #0
 800a056:	6053      	str	r3, [r2, #4]
 800a058:	e7de      	b.n	800a018 <_malloc_r+0xa8>
 800a05a:	230c      	movs	r3, #12
 800a05c:	6033      	str	r3, [r6, #0]
 800a05e:	4630      	mov	r0, r6
 800a060:	f000 f80c 	bl	800a07c <__malloc_unlock>
 800a064:	e794      	b.n	8009f90 <_malloc_r+0x20>
 800a066:	6005      	str	r5, [r0, #0]
 800a068:	e7d6      	b.n	800a018 <_malloc_r+0xa8>
 800a06a:	bf00      	nop
 800a06c:	20001fcc 	.word	0x20001fcc

0800a070 <__malloc_lock>:
 800a070:	4801      	ldr	r0, [pc, #4]	@ (800a078 <__malloc_lock+0x8>)
 800a072:	f7ff bf0e 	b.w	8009e92 <__retarget_lock_acquire_recursive>
 800a076:	bf00      	nop
 800a078:	20001fc4 	.word	0x20001fc4

0800a07c <__malloc_unlock>:
 800a07c:	4801      	ldr	r0, [pc, #4]	@ (800a084 <__malloc_unlock+0x8>)
 800a07e:	f7ff bf09 	b.w	8009e94 <__retarget_lock_release_recursive>
 800a082:	bf00      	nop
 800a084:	20001fc4 	.word	0x20001fc4

0800a088 <__ssputs_r>:
 800a088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a08c:	688e      	ldr	r6, [r1, #8]
 800a08e:	461f      	mov	r7, r3
 800a090:	42be      	cmp	r6, r7
 800a092:	680b      	ldr	r3, [r1, #0]
 800a094:	4682      	mov	sl, r0
 800a096:	460c      	mov	r4, r1
 800a098:	4690      	mov	r8, r2
 800a09a:	d82d      	bhi.n	800a0f8 <__ssputs_r+0x70>
 800a09c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a0a4:	d026      	beq.n	800a0f4 <__ssputs_r+0x6c>
 800a0a6:	6965      	ldr	r5, [r4, #20]
 800a0a8:	6909      	ldr	r1, [r1, #16]
 800a0aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0ae:	eba3 0901 	sub.w	r9, r3, r1
 800a0b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0b6:	1c7b      	adds	r3, r7, #1
 800a0b8:	444b      	add	r3, r9
 800a0ba:	106d      	asrs	r5, r5, #1
 800a0bc:	429d      	cmp	r5, r3
 800a0be:	bf38      	it	cc
 800a0c0:	461d      	movcc	r5, r3
 800a0c2:	0553      	lsls	r3, r2, #21
 800a0c4:	d527      	bpl.n	800a116 <__ssputs_r+0x8e>
 800a0c6:	4629      	mov	r1, r5
 800a0c8:	f7ff ff52 	bl	8009f70 <_malloc_r>
 800a0cc:	4606      	mov	r6, r0
 800a0ce:	b360      	cbz	r0, 800a12a <__ssputs_r+0xa2>
 800a0d0:	6921      	ldr	r1, [r4, #16]
 800a0d2:	464a      	mov	r2, r9
 800a0d4:	f000 fd9c 	bl	800ac10 <memcpy>
 800a0d8:	89a3      	ldrh	r3, [r4, #12]
 800a0da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a0de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0e2:	81a3      	strh	r3, [r4, #12]
 800a0e4:	6126      	str	r6, [r4, #16]
 800a0e6:	6165      	str	r5, [r4, #20]
 800a0e8:	444e      	add	r6, r9
 800a0ea:	eba5 0509 	sub.w	r5, r5, r9
 800a0ee:	6026      	str	r6, [r4, #0]
 800a0f0:	60a5      	str	r5, [r4, #8]
 800a0f2:	463e      	mov	r6, r7
 800a0f4:	42be      	cmp	r6, r7
 800a0f6:	d900      	bls.n	800a0fa <__ssputs_r+0x72>
 800a0f8:	463e      	mov	r6, r7
 800a0fa:	6820      	ldr	r0, [r4, #0]
 800a0fc:	4632      	mov	r2, r6
 800a0fe:	4641      	mov	r1, r8
 800a100:	f000 fd5c 	bl	800abbc <memmove>
 800a104:	68a3      	ldr	r3, [r4, #8]
 800a106:	1b9b      	subs	r3, r3, r6
 800a108:	60a3      	str	r3, [r4, #8]
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	4433      	add	r3, r6
 800a10e:	6023      	str	r3, [r4, #0]
 800a110:	2000      	movs	r0, #0
 800a112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a116:	462a      	mov	r2, r5
 800a118:	f000 fd88 	bl	800ac2c <_realloc_r>
 800a11c:	4606      	mov	r6, r0
 800a11e:	2800      	cmp	r0, #0
 800a120:	d1e0      	bne.n	800a0e4 <__ssputs_r+0x5c>
 800a122:	6921      	ldr	r1, [r4, #16]
 800a124:	4650      	mov	r0, sl
 800a126:	f7ff feb7 	bl	8009e98 <_free_r>
 800a12a:	230c      	movs	r3, #12
 800a12c:	f8ca 3000 	str.w	r3, [sl]
 800a130:	89a3      	ldrh	r3, [r4, #12]
 800a132:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a136:	81a3      	strh	r3, [r4, #12]
 800a138:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a13c:	e7e9      	b.n	800a112 <__ssputs_r+0x8a>
	...

0800a140 <_svfiprintf_r>:
 800a140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a144:	4698      	mov	r8, r3
 800a146:	898b      	ldrh	r3, [r1, #12]
 800a148:	061b      	lsls	r3, r3, #24
 800a14a:	b09d      	sub	sp, #116	@ 0x74
 800a14c:	4607      	mov	r7, r0
 800a14e:	460d      	mov	r5, r1
 800a150:	4614      	mov	r4, r2
 800a152:	d510      	bpl.n	800a176 <_svfiprintf_r+0x36>
 800a154:	690b      	ldr	r3, [r1, #16]
 800a156:	b973      	cbnz	r3, 800a176 <_svfiprintf_r+0x36>
 800a158:	2140      	movs	r1, #64	@ 0x40
 800a15a:	f7ff ff09 	bl	8009f70 <_malloc_r>
 800a15e:	6028      	str	r0, [r5, #0]
 800a160:	6128      	str	r0, [r5, #16]
 800a162:	b930      	cbnz	r0, 800a172 <_svfiprintf_r+0x32>
 800a164:	230c      	movs	r3, #12
 800a166:	603b      	str	r3, [r7, #0]
 800a168:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a16c:	b01d      	add	sp, #116	@ 0x74
 800a16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a172:	2340      	movs	r3, #64	@ 0x40
 800a174:	616b      	str	r3, [r5, #20]
 800a176:	2300      	movs	r3, #0
 800a178:	9309      	str	r3, [sp, #36]	@ 0x24
 800a17a:	2320      	movs	r3, #32
 800a17c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a180:	f8cd 800c 	str.w	r8, [sp, #12]
 800a184:	2330      	movs	r3, #48	@ 0x30
 800a186:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a324 <_svfiprintf_r+0x1e4>
 800a18a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a18e:	f04f 0901 	mov.w	r9, #1
 800a192:	4623      	mov	r3, r4
 800a194:	469a      	mov	sl, r3
 800a196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a19a:	b10a      	cbz	r2, 800a1a0 <_svfiprintf_r+0x60>
 800a19c:	2a25      	cmp	r2, #37	@ 0x25
 800a19e:	d1f9      	bne.n	800a194 <_svfiprintf_r+0x54>
 800a1a0:	ebba 0b04 	subs.w	fp, sl, r4
 800a1a4:	d00b      	beq.n	800a1be <_svfiprintf_r+0x7e>
 800a1a6:	465b      	mov	r3, fp
 800a1a8:	4622      	mov	r2, r4
 800a1aa:	4629      	mov	r1, r5
 800a1ac:	4638      	mov	r0, r7
 800a1ae:	f7ff ff6b 	bl	800a088 <__ssputs_r>
 800a1b2:	3001      	adds	r0, #1
 800a1b4:	f000 80a7 	beq.w	800a306 <_svfiprintf_r+0x1c6>
 800a1b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1ba:	445a      	add	r2, fp
 800a1bc:	9209      	str	r2, [sp, #36]	@ 0x24
 800a1be:	f89a 3000 	ldrb.w	r3, [sl]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f000 809f 	beq.w	800a306 <_svfiprintf_r+0x1c6>
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a1ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1d2:	f10a 0a01 	add.w	sl, sl, #1
 800a1d6:	9304      	str	r3, [sp, #16]
 800a1d8:	9307      	str	r3, [sp, #28]
 800a1da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a1de:	931a      	str	r3, [sp, #104]	@ 0x68
 800a1e0:	4654      	mov	r4, sl
 800a1e2:	2205      	movs	r2, #5
 800a1e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1e8:	484e      	ldr	r0, [pc, #312]	@ (800a324 <_svfiprintf_r+0x1e4>)
 800a1ea:	f7f6 f821 	bl	8000230 <memchr>
 800a1ee:	9a04      	ldr	r2, [sp, #16]
 800a1f0:	b9d8      	cbnz	r0, 800a22a <_svfiprintf_r+0xea>
 800a1f2:	06d0      	lsls	r0, r2, #27
 800a1f4:	bf44      	itt	mi
 800a1f6:	2320      	movmi	r3, #32
 800a1f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1fc:	0711      	lsls	r1, r2, #28
 800a1fe:	bf44      	itt	mi
 800a200:	232b      	movmi	r3, #43	@ 0x2b
 800a202:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a206:	f89a 3000 	ldrb.w	r3, [sl]
 800a20a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a20c:	d015      	beq.n	800a23a <_svfiprintf_r+0xfa>
 800a20e:	9a07      	ldr	r2, [sp, #28]
 800a210:	4654      	mov	r4, sl
 800a212:	2000      	movs	r0, #0
 800a214:	f04f 0c0a 	mov.w	ip, #10
 800a218:	4621      	mov	r1, r4
 800a21a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a21e:	3b30      	subs	r3, #48	@ 0x30
 800a220:	2b09      	cmp	r3, #9
 800a222:	d94b      	bls.n	800a2bc <_svfiprintf_r+0x17c>
 800a224:	b1b0      	cbz	r0, 800a254 <_svfiprintf_r+0x114>
 800a226:	9207      	str	r2, [sp, #28]
 800a228:	e014      	b.n	800a254 <_svfiprintf_r+0x114>
 800a22a:	eba0 0308 	sub.w	r3, r0, r8
 800a22e:	fa09 f303 	lsl.w	r3, r9, r3
 800a232:	4313      	orrs	r3, r2
 800a234:	9304      	str	r3, [sp, #16]
 800a236:	46a2      	mov	sl, r4
 800a238:	e7d2      	b.n	800a1e0 <_svfiprintf_r+0xa0>
 800a23a:	9b03      	ldr	r3, [sp, #12]
 800a23c:	1d19      	adds	r1, r3, #4
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	9103      	str	r1, [sp, #12]
 800a242:	2b00      	cmp	r3, #0
 800a244:	bfbb      	ittet	lt
 800a246:	425b      	neglt	r3, r3
 800a248:	f042 0202 	orrlt.w	r2, r2, #2
 800a24c:	9307      	strge	r3, [sp, #28]
 800a24e:	9307      	strlt	r3, [sp, #28]
 800a250:	bfb8      	it	lt
 800a252:	9204      	strlt	r2, [sp, #16]
 800a254:	7823      	ldrb	r3, [r4, #0]
 800a256:	2b2e      	cmp	r3, #46	@ 0x2e
 800a258:	d10a      	bne.n	800a270 <_svfiprintf_r+0x130>
 800a25a:	7863      	ldrb	r3, [r4, #1]
 800a25c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a25e:	d132      	bne.n	800a2c6 <_svfiprintf_r+0x186>
 800a260:	9b03      	ldr	r3, [sp, #12]
 800a262:	1d1a      	adds	r2, r3, #4
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	9203      	str	r2, [sp, #12]
 800a268:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a26c:	3402      	adds	r4, #2
 800a26e:	9305      	str	r3, [sp, #20]
 800a270:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a334 <_svfiprintf_r+0x1f4>
 800a274:	7821      	ldrb	r1, [r4, #0]
 800a276:	2203      	movs	r2, #3
 800a278:	4650      	mov	r0, sl
 800a27a:	f7f5 ffd9 	bl	8000230 <memchr>
 800a27e:	b138      	cbz	r0, 800a290 <_svfiprintf_r+0x150>
 800a280:	9b04      	ldr	r3, [sp, #16]
 800a282:	eba0 000a 	sub.w	r0, r0, sl
 800a286:	2240      	movs	r2, #64	@ 0x40
 800a288:	4082      	lsls	r2, r0
 800a28a:	4313      	orrs	r3, r2
 800a28c:	3401      	adds	r4, #1
 800a28e:	9304      	str	r3, [sp, #16]
 800a290:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a294:	4824      	ldr	r0, [pc, #144]	@ (800a328 <_svfiprintf_r+0x1e8>)
 800a296:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a29a:	2206      	movs	r2, #6
 800a29c:	f7f5 ffc8 	bl	8000230 <memchr>
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	d036      	beq.n	800a312 <_svfiprintf_r+0x1d2>
 800a2a4:	4b21      	ldr	r3, [pc, #132]	@ (800a32c <_svfiprintf_r+0x1ec>)
 800a2a6:	bb1b      	cbnz	r3, 800a2f0 <_svfiprintf_r+0x1b0>
 800a2a8:	9b03      	ldr	r3, [sp, #12]
 800a2aa:	3307      	adds	r3, #7
 800a2ac:	f023 0307 	bic.w	r3, r3, #7
 800a2b0:	3308      	adds	r3, #8
 800a2b2:	9303      	str	r3, [sp, #12]
 800a2b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2b6:	4433      	add	r3, r6
 800a2b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2ba:	e76a      	b.n	800a192 <_svfiprintf_r+0x52>
 800a2bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2c0:	460c      	mov	r4, r1
 800a2c2:	2001      	movs	r0, #1
 800a2c4:	e7a8      	b.n	800a218 <_svfiprintf_r+0xd8>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	3401      	adds	r4, #1
 800a2ca:	9305      	str	r3, [sp, #20]
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	f04f 0c0a 	mov.w	ip, #10
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2d8:	3a30      	subs	r2, #48	@ 0x30
 800a2da:	2a09      	cmp	r2, #9
 800a2dc:	d903      	bls.n	800a2e6 <_svfiprintf_r+0x1a6>
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d0c6      	beq.n	800a270 <_svfiprintf_r+0x130>
 800a2e2:	9105      	str	r1, [sp, #20]
 800a2e4:	e7c4      	b.n	800a270 <_svfiprintf_r+0x130>
 800a2e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2ea:	4604      	mov	r4, r0
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	e7f0      	b.n	800a2d2 <_svfiprintf_r+0x192>
 800a2f0:	ab03      	add	r3, sp, #12
 800a2f2:	9300      	str	r3, [sp, #0]
 800a2f4:	462a      	mov	r2, r5
 800a2f6:	4b0e      	ldr	r3, [pc, #56]	@ (800a330 <_svfiprintf_r+0x1f0>)
 800a2f8:	a904      	add	r1, sp, #16
 800a2fa:	4638      	mov	r0, r7
 800a2fc:	f3af 8000 	nop.w
 800a300:	1c42      	adds	r2, r0, #1
 800a302:	4606      	mov	r6, r0
 800a304:	d1d6      	bne.n	800a2b4 <_svfiprintf_r+0x174>
 800a306:	89ab      	ldrh	r3, [r5, #12]
 800a308:	065b      	lsls	r3, r3, #25
 800a30a:	f53f af2d 	bmi.w	800a168 <_svfiprintf_r+0x28>
 800a30e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a310:	e72c      	b.n	800a16c <_svfiprintf_r+0x2c>
 800a312:	ab03      	add	r3, sp, #12
 800a314:	9300      	str	r3, [sp, #0]
 800a316:	462a      	mov	r2, r5
 800a318:	4b05      	ldr	r3, [pc, #20]	@ (800a330 <_svfiprintf_r+0x1f0>)
 800a31a:	a904      	add	r1, sp, #16
 800a31c:	4638      	mov	r0, r7
 800a31e:	f000 f9bb 	bl	800a698 <_printf_i>
 800a322:	e7ed      	b.n	800a300 <_svfiprintf_r+0x1c0>
 800a324:	0800af70 	.word	0x0800af70
 800a328:	0800af7a 	.word	0x0800af7a
 800a32c:	00000000 	.word	0x00000000
 800a330:	0800a089 	.word	0x0800a089
 800a334:	0800af76 	.word	0x0800af76

0800a338 <__sfputc_r>:
 800a338:	6893      	ldr	r3, [r2, #8]
 800a33a:	3b01      	subs	r3, #1
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	b410      	push	{r4}
 800a340:	6093      	str	r3, [r2, #8]
 800a342:	da08      	bge.n	800a356 <__sfputc_r+0x1e>
 800a344:	6994      	ldr	r4, [r2, #24]
 800a346:	42a3      	cmp	r3, r4
 800a348:	db01      	blt.n	800a34e <__sfputc_r+0x16>
 800a34a:	290a      	cmp	r1, #10
 800a34c:	d103      	bne.n	800a356 <__sfputc_r+0x1e>
 800a34e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a352:	f000 bb9f 	b.w	800aa94 <__swbuf_r>
 800a356:	6813      	ldr	r3, [r2, #0]
 800a358:	1c58      	adds	r0, r3, #1
 800a35a:	6010      	str	r0, [r2, #0]
 800a35c:	7019      	strb	r1, [r3, #0]
 800a35e:	4608      	mov	r0, r1
 800a360:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a364:	4770      	bx	lr

0800a366 <__sfputs_r>:
 800a366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a368:	4606      	mov	r6, r0
 800a36a:	460f      	mov	r7, r1
 800a36c:	4614      	mov	r4, r2
 800a36e:	18d5      	adds	r5, r2, r3
 800a370:	42ac      	cmp	r4, r5
 800a372:	d101      	bne.n	800a378 <__sfputs_r+0x12>
 800a374:	2000      	movs	r0, #0
 800a376:	e007      	b.n	800a388 <__sfputs_r+0x22>
 800a378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a37c:	463a      	mov	r2, r7
 800a37e:	4630      	mov	r0, r6
 800a380:	f7ff ffda 	bl	800a338 <__sfputc_r>
 800a384:	1c43      	adds	r3, r0, #1
 800a386:	d1f3      	bne.n	800a370 <__sfputs_r+0xa>
 800a388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a38c <_vfiprintf_r>:
 800a38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a390:	460d      	mov	r5, r1
 800a392:	b09d      	sub	sp, #116	@ 0x74
 800a394:	4614      	mov	r4, r2
 800a396:	4698      	mov	r8, r3
 800a398:	4606      	mov	r6, r0
 800a39a:	b118      	cbz	r0, 800a3a4 <_vfiprintf_r+0x18>
 800a39c:	6a03      	ldr	r3, [r0, #32]
 800a39e:	b90b      	cbnz	r3, 800a3a4 <_vfiprintf_r+0x18>
 800a3a0:	f7ff fc34 	bl	8009c0c <__sinit>
 800a3a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3a6:	07d9      	lsls	r1, r3, #31
 800a3a8:	d405      	bmi.n	800a3b6 <_vfiprintf_r+0x2a>
 800a3aa:	89ab      	ldrh	r3, [r5, #12]
 800a3ac:	059a      	lsls	r2, r3, #22
 800a3ae:	d402      	bmi.n	800a3b6 <_vfiprintf_r+0x2a>
 800a3b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3b2:	f7ff fd6e 	bl	8009e92 <__retarget_lock_acquire_recursive>
 800a3b6:	89ab      	ldrh	r3, [r5, #12]
 800a3b8:	071b      	lsls	r3, r3, #28
 800a3ba:	d501      	bpl.n	800a3c0 <_vfiprintf_r+0x34>
 800a3bc:	692b      	ldr	r3, [r5, #16]
 800a3be:	b99b      	cbnz	r3, 800a3e8 <_vfiprintf_r+0x5c>
 800a3c0:	4629      	mov	r1, r5
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	f000 fba4 	bl	800ab10 <__swsetup_r>
 800a3c8:	b170      	cbz	r0, 800a3e8 <_vfiprintf_r+0x5c>
 800a3ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3cc:	07dc      	lsls	r4, r3, #31
 800a3ce:	d504      	bpl.n	800a3da <_vfiprintf_r+0x4e>
 800a3d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a3d4:	b01d      	add	sp, #116	@ 0x74
 800a3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3da:	89ab      	ldrh	r3, [r5, #12]
 800a3dc:	0598      	lsls	r0, r3, #22
 800a3de:	d4f7      	bmi.n	800a3d0 <_vfiprintf_r+0x44>
 800a3e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3e2:	f7ff fd57 	bl	8009e94 <__retarget_lock_release_recursive>
 800a3e6:	e7f3      	b.n	800a3d0 <_vfiprintf_r+0x44>
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3ec:	2320      	movs	r3, #32
 800a3ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a3f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3f6:	2330      	movs	r3, #48	@ 0x30
 800a3f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a5a8 <_vfiprintf_r+0x21c>
 800a3fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a400:	f04f 0901 	mov.w	r9, #1
 800a404:	4623      	mov	r3, r4
 800a406:	469a      	mov	sl, r3
 800a408:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a40c:	b10a      	cbz	r2, 800a412 <_vfiprintf_r+0x86>
 800a40e:	2a25      	cmp	r2, #37	@ 0x25
 800a410:	d1f9      	bne.n	800a406 <_vfiprintf_r+0x7a>
 800a412:	ebba 0b04 	subs.w	fp, sl, r4
 800a416:	d00b      	beq.n	800a430 <_vfiprintf_r+0xa4>
 800a418:	465b      	mov	r3, fp
 800a41a:	4622      	mov	r2, r4
 800a41c:	4629      	mov	r1, r5
 800a41e:	4630      	mov	r0, r6
 800a420:	f7ff ffa1 	bl	800a366 <__sfputs_r>
 800a424:	3001      	adds	r0, #1
 800a426:	f000 80a7 	beq.w	800a578 <_vfiprintf_r+0x1ec>
 800a42a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a42c:	445a      	add	r2, fp
 800a42e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a430:	f89a 3000 	ldrb.w	r3, [sl]
 800a434:	2b00      	cmp	r3, #0
 800a436:	f000 809f 	beq.w	800a578 <_vfiprintf_r+0x1ec>
 800a43a:	2300      	movs	r3, #0
 800a43c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a440:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a444:	f10a 0a01 	add.w	sl, sl, #1
 800a448:	9304      	str	r3, [sp, #16]
 800a44a:	9307      	str	r3, [sp, #28]
 800a44c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a450:	931a      	str	r3, [sp, #104]	@ 0x68
 800a452:	4654      	mov	r4, sl
 800a454:	2205      	movs	r2, #5
 800a456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a45a:	4853      	ldr	r0, [pc, #332]	@ (800a5a8 <_vfiprintf_r+0x21c>)
 800a45c:	f7f5 fee8 	bl	8000230 <memchr>
 800a460:	9a04      	ldr	r2, [sp, #16]
 800a462:	b9d8      	cbnz	r0, 800a49c <_vfiprintf_r+0x110>
 800a464:	06d1      	lsls	r1, r2, #27
 800a466:	bf44      	itt	mi
 800a468:	2320      	movmi	r3, #32
 800a46a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a46e:	0713      	lsls	r3, r2, #28
 800a470:	bf44      	itt	mi
 800a472:	232b      	movmi	r3, #43	@ 0x2b
 800a474:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a478:	f89a 3000 	ldrb.w	r3, [sl]
 800a47c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a47e:	d015      	beq.n	800a4ac <_vfiprintf_r+0x120>
 800a480:	9a07      	ldr	r2, [sp, #28]
 800a482:	4654      	mov	r4, sl
 800a484:	2000      	movs	r0, #0
 800a486:	f04f 0c0a 	mov.w	ip, #10
 800a48a:	4621      	mov	r1, r4
 800a48c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a490:	3b30      	subs	r3, #48	@ 0x30
 800a492:	2b09      	cmp	r3, #9
 800a494:	d94b      	bls.n	800a52e <_vfiprintf_r+0x1a2>
 800a496:	b1b0      	cbz	r0, 800a4c6 <_vfiprintf_r+0x13a>
 800a498:	9207      	str	r2, [sp, #28]
 800a49a:	e014      	b.n	800a4c6 <_vfiprintf_r+0x13a>
 800a49c:	eba0 0308 	sub.w	r3, r0, r8
 800a4a0:	fa09 f303 	lsl.w	r3, r9, r3
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	9304      	str	r3, [sp, #16]
 800a4a8:	46a2      	mov	sl, r4
 800a4aa:	e7d2      	b.n	800a452 <_vfiprintf_r+0xc6>
 800a4ac:	9b03      	ldr	r3, [sp, #12]
 800a4ae:	1d19      	adds	r1, r3, #4
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	9103      	str	r1, [sp, #12]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	bfbb      	ittet	lt
 800a4b8:	425b      	neglt	r3, r3
 800a4ba:	f042 0202 	orrlt.w	r2, r2, #2
 800a4be:	9307      	strge	r3, [sp, #28]
 800a4c0:	9307      	strlt	r3, [sp, #28]
 800a4c2:	bfb8      	it	lt
 800a4c4:	9204      	strlt	r2, [sp, #16]
 800a4c6:	7823      	ldrb	r3, [r4, #0]
 800a4c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a4ca:	d10a      	bne.n	800a4e2 <_vfiprintf_r+0x156>
 800a4cc:	7863      	ldrb	r3, [r4, #1]
 800a4ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4d0:	d132      	bne.n	800a538 <_vfiprintf_r+0x1ac>
 800a4d2:	9b03      	ldr	r3, [sp, #12]
 800a4d4:	1d1a      	adds	r2, r3, #4
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	9203      	str	r2, [sp, #12]
 800a4da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a4de:	3402      	adds	r4, #2
 800a4e0:	9305      	str	r3, [sp, #20]
 800a4e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a5b8 <_vfiprintf_r+0x22c>
 800a4e6:	7821      	ldrb	r1, [r4, #0]
 800a4e8:	2203      	movs	r2, #3
 800a4ea:	4650      	mov	r0, sl
 800a4ec:	f7f5 fea0 	bl	8000230 <memchr>
 800a4f0:	b138      	cbz	r0, 800a502 <_vfiprintf_r+0x176>
 800a4f2:	9b04      	ldr	r3, [sp, #16]
 800a4f4:	eba0 000a 	sub.w	r0, r0, sl
 800a4f8:	2240      	movs	r2, #64	@ 0x40
 800a4fa:	4082      	lsls	r2, r0
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	3401      	adds	r4, #1
 800a500:	9304      	str	r3, [sp, #16]
 800a502:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a506:	4829      	ldr	r0, [pc, #164]	@ (800a5ac <_vfiprintf_r+0x220>)
 800a508:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a50c:	2206      	movs	r2, #6
 800a50e:	f7f5 fe8f 	bl	8000230 <memchr>
 800a512:	2800      	cmp	r0, #0
 800a514:	d03f      	beq.n	800a596 <_vfiprintf_r+0x20a>
 800a516:	4b26      	ldr	r3, [pc, #152]	@ (800a5b0 <_vfiprintf_r+0x224>)
 800a518:	bb1b      	cbnz	r3, 800a562 <_vfiprintf_r+0x1d6>
 800a51a:	9b03      	ldr	r3, [sp, #12]
 800a51c:	3307      	adds	r3, #7
 800a51e:	f023 0307 	bic.w	r3, r3, #7
 800a522:	3308      	adds	r3, #8
 800a524:	9303      	str	r3, [sp, #12]
 800a526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a528:	443b      	add	r3, r7
 800a52a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a52c:	e76a      	b.n	800a404 <_vfiprintf_r+0x78>
 800a52e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a532:	460c      	mov	r4, r1
 800a534:	2001      	movs	r0, #1
 800a536:	e7a8      	b.n	800a48a <_vfiprintf_r+0xfe>
 800a538:	2300      	movs	r3, #0
 800a53a:	3401      	adds	r4, #1
 800a53c:	9305      	str	r3, [sp, #20]
 800a53e:	4619      	mov	r1, r3
 800a540:	f04f 0c0a 	mov.w	ip, #10
 800a544:	4620      	mov	r0, r4
 800a546:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a54a:	3a30      	subs	r2, #48	@ 0x30
 800a54c:	2a09      	cmp	r2, #9
 800a54e:	d903      	bls.n	800a558 <_vfiprintf_r+0x1cc>
 800a550:	2b00      	cmp	r3, #0
 800a552:	d0c6      	beq.n	800a4e2 <_vfiprintf_r+0x156>
 800a554:	9105      	str	r1, [sp, #20]
 800a556:	e7c4      	b.n	800a4e2 <_vfiprintf_r+0x156>
 800a558:	fb0c 2101 	mla	r1, ip, r1, r2
 800a55c:	4604      	mov	r4, r0
 800a55e:	2301      	movs	r3, #1
 800a560:	e7f0      	b.n	800a544 <_vfiprintf_r+0x1b8>
 800a562:	ab03      	add	r3, sp, #12
 800a564:	9300      	str	r3, [sp, #0]
 800a566:	462a      	mov	r2, r5
 800a568:	4b12      	ldr	r3, [pc, #72]	@ (800a5b4 <_vfiprintf_r+0x228>)
 800a56a:	a904      	add	r1, sp, #16
 800a56c:	4630      	mov	r0, r6
 800a56e:	f3af 8000 	nop.w
 800a572:	4607      	mov	r7, r0
 800a574:	1c78      	adds	r0, r7, #1
 800a576:	d1d6      	bne.n	800a526 <_vfiprintf_r+0x19a>
 800a578:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a57a:	07d9      	lsls	r1, r3, #31
 800a57c:	d405      	bmi.n	800a58a <_vfiprintf_r+0x1fe>
 800a57e:	89ab      	ldrh	r3, [r5, #12]
 800a580:	059a      	lsls	r2, r3, #22
 800a582:	d402      	bmi.n	800a58a <_vfiprintf_r+0x1fe>
 800a584:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a586:	f7ff fc85 	bl	8009e94 <__retarget_lock_release_recursive>
 800a58a:	89ab      	ldrh	r3, [r5, #12]
 800a58c:	065b      	lsls	r3, r3, #25
 800a58e:	f53f af1f 	bmi.w	800a3d0 <_vfiprintf_r+0x44>
 800a592:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a594:	e71e      	b.n	800a3d4 <_vfiprintf_r+0x48>
 800a596:	ab03      	add	r3, sp, #12
 800a598:	9300      	str	r3, [sp, #0]
 800a59a:	462a      	mov	r2, r5
 800a59c:	4b05      	ldr	r3, [pc, #20]	@ (800a5b4 <_vfiprintf_r+0x228>)
 800a59e:	a904      	add	r1, sp, #16
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	f000 f879 	bl	800a698 <_printf_i>
 800a5a6:	e7e4      	b.n	800a572 <_vfiprintf_r+0x1e6>
 800a5a8:	0800af70 	.word	0x0800af70
 800a5ac:	0800af7a 	.word	0x0800af7a
 800a5b0:	00000000 	.word	0x00000000
 800a5b4:	0800a367 	.word	0x0800a367
 800a5b8:	0800af76 	.word	0x0800af76

0800a5bc <_printf_common>:
 800a5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c0:	4616      	mov	r6, r2
 800a5c2:	4698      	mov	r8, r3
 800a5c4:	688a      	ldr	r2, [r1, #8]
 800a5c6:	690b      	ldr	r3, [r1, #16]
 800a5c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	bfb8      	it	lt
 800a5d0:	4613      	movlt	r3, r2
 800a5d2:	6033      	str	r3, [r6, #0]
 800a5d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a5d8:	4607      	mov	r7, r0
 800a5da:	460c      	mov	r4, r1
 800a5dc:	b10a      	cbz	r2, 800a5e2 <_printf_common+0x26>
 800a5de:	3301      	adds	r3, #1
 800a5e0:	6033      	str	r3, [r6, #0]
 800a5e2:	6823      	ldr	r3, [r4, #0]
 800a5e4:	0699      	lsls	r1, r3, #26
 800a5e6:	bf42      	ittt	mi
 800a5e8:	6833      	ldrmi	r3, [r6, #0]
 800a5ea:	3302      	addmi	r3, #2
 800a5ec:	6033      	strmi	r3, [r6, #0]
 800a5ee:	6825      	ldr	r5, [r4, #0]
 800a5f0:	f015 0506 	ands.w	r5, r5, #6
 800a5f4:	d106      	bne.n	800a604 <_printf_common+0x48>
 800a5f6:	f104 0a19 	add.w	sl, r4, #25
 800a5fa:	68e3      	ldr	r3, [r4, #12]
 800a5fc:	6832      	ldr	r2, [r6, #0]
 800a5fe:	1a9b      	subs	r3, r3, r2
 800a600:	42ab      	cmp	r3, r5
 800a602:	dc26      	bgt.n	800a652 <_printf_common+0x96>
 800a604:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a608:	6822      	ldr	r2, [r4, #0]
 800a60a:	3b00      	subs	r3, #0
 800a60c:	bf18      	it	ne
 800a60e:	2301      	movne	r3, #1
 800a610:	0692      	lsls	r2, r2, #26
 800a612:	d42b      	bmi.n	800a66c <_printf_common+0xb0>
 800a614:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a618:	4641      	mov	r1, r8
 800a61a:	4638      	mov	r0, r7
 800a61c:	47c8      	blx	r9
 800a61e:	3001      	adds	r0, #1
 800a620:	d01e      	beq.n	800a660 <_printf_common+0xa4>
 800a622:	6823      	ldr	r3, [r4, #0]
 800a624:	6922      	ldr	r2, [r4, #16]
 800a626:	f003 0306 	and.w	r3, r3, #6
 800a62a:	2b04      	cmp	r3, #4
 800a62c:	bf02      	ittt	eq
 800a62e:	68e5      	ldreq	r5, [r4, #12]
 800a630:	6833      	ldreq	r3, [r6, #0]
 800a632:	1aed      	subeq	r5, r5, r3
 800a634:	68a3      	ldr	r3, [r4, #8]
 800a636:	bf0c      	ite	eq
 800a638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a63c:	2500      	movne	r5, #0
 800a63e:	4293      	cmp	r3, r2
 800a640:	bfc4      	itt	gt
 800a642:	1a9b      	subgt	r3, r3, r2
 800a644:	18ed      	addgt	r5, r5, r3
 800a646:	2600      	movs	r6, #0
 800a648:	341a      	adds	r4, #26
 800a64a:	42b5      	cmp	r5, r6
 800a64c:	d11a      	bne.n	800a684 <_printf_common+0xc8>
 800a64e:	2000      	movs	r0, #0
 800a650:	e008      	b.n	800a664 <_printf_common+0xa8>
 800a652:	2301      	movs	r3, #1
 800a654:	4652      	mov	r2, sl
 800a656:	4641      	mov	r1, r8
 800a658:	4638      	mov	r0, r7
 800a65a:	47c8      	blx	r9
 800a65c:	3001      	adds	r0, #1
 800a65e:	d103      	bne.n	800a668 <_printf_common+0xac>
 800a660:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a668:	3501      	adds	r5, #1
 800a66a:	e7c6      	b.n	800a5fa <_printf_common+0x3e>
 800a66c:	18e1      	adds	r1, r4, r3
 800a66e:	1c5a      	adds	r2, r3, #1
 800a670:	2030      	movs	r0, #48	@ 0x30
 800a672:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a676:	4422      	add	r2, r4
 800a678:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a67c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a680:	3302      	adds	r3, #2
 800a682:	e7c7      	b.n	800a614 <_printf_common+0x58>
 800a684:	2301      	movs	r3, #1
 800a686:	4622      	mov	r2, r4
 800a688:	4641      	mov	r1, r8
 800a68a:	4638      	mov	r0, r7
 800a68c:	47c8      	blx	r9
 800a68e:	3001      	adds	r0, #1
 800a690:	d0e6      	beq.n	800a660 <_printf_common+0xa4>
 800a692:	3601      	adds	r6, #1
 800a694:	e7d9      	b.n	800a64a <_printf_common+0x8e>
	...

0800a698 <_printf_i>:
 800a698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a69c:	7e0f      	ldrb	r7, [r1, #24]
 800a69e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a6a0:	2f78      	cmp	r7, #120	@ 0x78
 800a6a2:	4691      	mov	r9, r2
 800a6a4:	4680      	mov	r8, r0
 800a6a6:	460c      	mov	r4, r1
 800a6a8:	469a      	mov	sl, r3
 800a6aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a6ae:	d807      	bhi.n	800a6c0 <_printf_i+0x28>
 800a6b0:	2f62      	cmp	r7, #98	@ 0x62
 800a6b2:	d80a      	bhi.n	800a6ca <_printf_i+0x32>
 800a6b4:	2f00      	cmp	r7, #0
 800a6b6:	f000 80d1 	beq.w	800a85c <_printf_i+0x1c4>
 800a6ba:	2f58      	cmp	r7, #88	@ 0x58
 800a6bc:	f000 80b8 	beq.w	800a830 <_printf_i+0x198>
 800a6c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a6c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a6c8:	e03a      	b.n	800a740 <_printf_i+0xa8>
 800a6ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a6ce:	2b15      	cmp	r3, #21
 800a6d0:	d8f6      	bhi.n	800a6c0 <_printf_i+0x28>
 800a6d2:	a101      	add	r1, pc, #4	@ (adr r1, 800a6d8 <_printf_i+0x40>)
 800a6d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6d8:	0800a731 	.word	0x0800a731
 800a6dc:	0800a745 	.word	0x0800a745
 800a6e0:	0800a6c1 	.word	0x0800a6c1
 800a6e4:	0800a6c1 	.word	0x0800a6c1
 800a6e8:	0800a6c1 	.word	0x0800a6c1
 800a6ec:	0800a6c1 	.word	0x0800a6c1
 800a6f0:	0800a745 	.word	0x0800a745
 800a6f4:	0800a6c1 	.word	0x0800a6c1
 800a6f8:	0800a6c1 	.word	0x0800a6c1
 800a6fc:	0800a6c1 	.word	0x0800a6c1
 800a700:	0800a6c1 	.word	0x0800a6c1
 800a704:	0800a843 	.word	0x0800a843
 800a708:	0800a76f 	.word	0x0800a76f
 800a70c:	0800a7fd 	.word	0x0800a7fd
 800a710:	0800a6c1 	.word	0x0800a6c1
 800a714:	0800a6c1 	.word	0x0800a6c1
 800a718:	0800a865 	.word	0x0800a865
 800a71c:	0800a6c1 	.word	0x0800a6c1
 800a720:	0800a76f 	.word	0x0800a76f
 800a724:	0800a6c1 	.word	0x0800a6c1
 800a728:	0800a6c1 	.word	0x0800a6c1
 800a72c:	0800a805 	.word	0x0800a805
 800a730:	6833      	ldr	r3, [r6, #0]
 800a732:	1d1a      	adds	r2, r3, #4
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	6032      	str	r2, [r6, #0]
 800a738:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a73c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a740:	2301      	movs	r3, #1
 800a742:	e09c      	b.n	800a87e <_printf_i+0x1e6>
 800a744:	6833      	ldr	r3, [r6, #0]
 800a746:	6820      	ldr	r0, [r4, #0]
 800a748:	1d19      	adds	r1, r3, #4
 800a74a:	6031      	str	r1, [r6, #0]
 800a74c:	0606      	lsls	r6, r0, #24
 800a74e:	d501      	bpl.n	800a754 <_printf_i+0xbc>
 800a750:	681d      	ldr	r5, [r3, #0]
 800a752:	e003      	b.n	800a75c <_printf_i+0xc4>
 800a754:	0645      	lsls	r5, r0, #25
 800a756:	d5fb      	bpl.n	800a750 <_printf_i+0xb8>
 800a758:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a75c:	2d00      	cmp	r5, #0
 800a75e:	da03      	bge.n	800a768 <_printf_i+0xd0>
 800a760:	232d      	movs	r3, #45	@ 0x2d
 800a762:	426d      	negs	r5, r5
 800a764:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a768:	4858      	ldr	r0, [pc, #352]	@ (800a8cc <_printf_i+0x234>)
 800a76a:	230a      	movs	r3, #10
 800a76c:	e011      	b.n	800a792 <_printf_i+0xfa>
 800a76e:	6821      	ldr	r1, [r4, #0]
 800a770:	6833      	ldr	r3, [r6, #0]
 800a772:	0608      	lsls	r0, r1, #24
 800a774:	f853 5b04 	ldr.w	r5, [r3], #4
 800a778:	d402      	bmi.n	800a780 <_printf_i+0xe8>
 800a77a:	0649      	lsls	r1, r1, #25
 800a77c:	bf48      	it	mi
 800a77e:	b2ad      	uxthmi	r5, r5
 800a780:	2f6f      	cmp	r7, #111	@ 0x6f
 800a782:	4852      	ldr	r0, [pc, #328]	@ (800a8cc <_printf_i+0x234>)
 800a784:	6033      	str	r3, [r6, #0]
 800a786:	bf14      	ite	ne
 800a788:	230a      	movne	r3, #10
 800a78a:	2308      	moveq	r3, #8
 800a78c:	2100      	movs	r1, #0
 800a78e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a792:	6866      	ldr	r6, [r4, #4]
 800a794:	60a6      	str	r6, [r4, #8]
 800a796:	2e00      	cmp	r6, #0
 800a798:	db05      	blt.n	800a7a6 <_printf_i+0x10e>
 800a79a:	6821      	ldr	r1, [r4, #0]
 800a79c:	432e      	orrs	r6, r5
 800a79e:	f021 0104 	bic.w	r1, r1, #4
 800a7a2:	6021      	str	r1, [r4, #0]
 800a7a4:	d04b      	beq.n	800a83e <_printf_i+0x1a6>
 800a7a6:	4616      	mov	r6, r2
 800a7a8:	fbb5 f1f3 	udiv	r1, r5, r3
 800a7ac:	fb03 5711 	mls	r7, r3, r1, r5
 800a7b0:	5dc7      	ldrb	r7, [r0, r7]
 800a7b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a7b6:	462f      	mov	r7, r5
 800a7b8:	42bb      	cmp	r3, r7
 800a7ba:	460d      	mov	r5, r1
 800a7bc:	d9f4      	bls.n	800a7a8 <_printf_i+0x110>
 800a7be:	2b08      	cmp	r3, #8
 800a7c0:	d10b      	bne.n	800a7da <_printf_i+0x142>
 800a7c2:	6823      	ldr	r3, [r4, #0]
 800a7c4:	07df      	lsls	r7, r3, #31
 800a7c6:	d508      	bpl.n	800a7da <_printf_i+0x142>
 800a7c8:	6923      	ldr	r3, [r4, #16]
 800a7ca:	6861      	ldr	r1, [r4, #4]
 800a7cc:	4299      	cmp	r1, r3
 800a7ce:	bfde      	ittt	le
 800a7d0:	2330      	movle	r3, #48	@ 0x30
 800a7d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a7d6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a7da:	1b92      	subs	r2, r2, r6
 800a7dc:	6122      	str	r2, [r4, #16]
 800a7de:	f8cd a000 	str.w	sl, [sp]
 800a7e2:	464b      	mov	r3, r9
 800a7e4:	aa03      	add	r2, sp, #12
 800a7e6:	4621      	mov	r1, r4
 800a7e8:	4640      	mov	r0, r8
 800a7ea:	f7ff fee7 	bl	800a5bc <_printf_common>
 800a7ee:	3001      	adds	r0, #1
 800a7f0:	d14a      	bne.n	800a888 <_printf_i+0x1f0>
 800a7f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a7f6:	b004      	add	sp, #16
 800a7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7fc:	6823      	ldr	r3, [r4, #0]
 800a7fe:	f043 0320 	orr.w	r3, r3, #32
 800a802:	6023      	str	r3, [r4, #0]
 800a804:	4832      	ldr	r0, [pc, #200]	@ (800a8d0 <_printf_i+0x238>)
 800a806:	2778      	movs	r7, #120	@ 0x78
 800a808:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a80c:	6823      	ldr	r3, [r4, #0]
 800a80e:	6831      	ldr	r1, [r6, #0]
 800a810:	061f      	lsls	r7, r3, #24
 800a812:	f851 5b04 	ldr.w	r5, [r1], #4
 800a816:	d402      	bmi.n	800a81e <_printf_i+0x186>
 800a818:	065f      	lsls	r7, r3, #25
 800a81a:	bf48      	it	mi
 800a81c:	b2ad      	uxthmi	r5, r5
 800a81e:	6031      	str	r1, [r6, #0]
 800a820:	07d9      	lsls	r1, r3, #31
 800a822:	bf44      	itt	mi
 800a824:	f043 0320 	orrmi.w	r3, r3, #32
 800a828:	6023      	strmi	r3, [r4, #0]
 800a82a:	b11d      	cbz	r5, 800a834 <_printf_i+0x19c>
 800a82c:	2310      	movs	r3, #16
 800a82e:	e7ad      	b.n	800a78c <_printf_i+0xf4>
 800a830:	4826      	ldr	r0, [pc, #152]	@ (800a8cc <_printf_i+0x234>)
 800a832:	e7e9      	b.n	800a808 <_printf_i+0x170>
 800a834:	6823      	ldr	r3, [r4, #0]
 800a836:	f023 0320 	bic.w	r3, r3, #32
 800a83a:	6023      	str	r3, [r4, #0]
 800a83c:	e7f6      	b.n	800a82c <_printf_i+0x194>
 800a83e:	4616      	mov	r6, r2
 800a840:	e7bd      	b.n	800a7be <_printf_i+0x126>
 800a842:	6833      	ldr	r3, [r6, #0]
 800a844:	6825      	ldr	r5, [r4, #0]
 800a846:	6961      	ldr	r1, [r4, #20]
 800a848:	1d18      	adds	r0, r3, #4
 800a84a:	6030      	str	r0, [r6, #0]
 800a84c:	062e      	lsls	r6, r5, #24
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	d501      	bpl.n	800a856 <_printf_i+0x1be>
 800a852:	6019      	str	r1, [r3, #0]
 800a854:	e002      	b.n	800a85c <_printf_i+0x1c4>
 800a856:	0668      	lsls	r0, r5, #25
 800a858:	d5fb      	bpl.n	800a852 <_printf_i+0x1ba>
 800a85a:	8019      	strh	r1, [r3, #0]
 800a85c:	2300      	movs	r3, #0
 800a85e:	6123      	str	r3, [r4, #16]
 800a860:	4616      	mov	r6, r2
 800a862:	e7bc      	b.n	800a7de <_printf_i+0x146>
 800a864:	6833      	ldr	r3, [r6, #0]
 800a866:	1d1a      	adds	r2, r3, #4
 800a868:	6032      	str	r2, [r6, #0]
 800a86a:	681e      	ldr	r6, [r3, #0]
 800a86c:	6862      	ldr	r2, [r4, #4]
 800a86e:	2100      	movs	r1, #0
 800a870:	4630      	mov	r0, r6
 800a872:	f7f5 fcdd 	bl	8000230 <memchr>
 800a876:	b108      	cbz	r0, 800a87c <_printf_i+0x1e4>
 800a878:	1b80      	subs	r0, r0, r6
 800a87a:	6060      	str	r0, [r4, #4]
 800a87c:	6863      	ldr	r3, [r4, #4]
 800a87e:	6123      	str	r3, [r4, #16]
 800a880:	2300      	movs	r3, #0
 800a882:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a886:	e7aa      	b.n	800a7de <_printf_i+0x146>
 800a888:	6923      	ldr	r3, [r4, #16]
 800a88a:	4632      	mov	r2, r6
 800a88c:	4649      	mov	r1, r9
 800a88e:	4640      	mov	r0, r8
 800a890:	47d0      	blx	sl
 800a892:	3001      	adds	r0, #1
 800a894:	d0ad      	beq.n	800a7f2 <_printf_i+0x15a>
 800a896:	6823      	ldr	r3, [r4, #0]
 800a898:	079b      	lsls	r3, r3, #30
 800a89a:	d413      	bmi.n	800a8c4 <_printf_i+0x22c>
 800a89c:	68e0      	ldr	r0, [r4, #12]
 800a89e:	9b03      	ldr	r3, [sp, #12]
 800a8a0:	4298      	cmp	r0, r3
 800a8a2:	bfb8      	it	lt
 800a8a4:	4618      	movlt	r0, r3
 800a8a6:	e7a6      	b.n	800a7f6 <_printf_i+0x15e>
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	4632      	mov	r2, r6
 800a8ac:	4649      	mov	r1, r9
 800a8ae:	4640      	mov	r0, r8
 800a8b0:	47d0      	blx	sl
 800a8b2:	3001      	adds	r0, #1
 800a8b4:	d09d      	beq.n	800a7f2 <_printf_i+0x15a>
 800a8b6:	3501      	adds	r5, #1
 800a8b8:	68e3      	ldr	r3, [r4, #12]
 800a8ba:	9903      	ldr	r1, [sp, #12]
 800a8bc:	1a5b      	subs	r3, r3, r1
 800a8be:	42ab      	cmp	r3, r5
 800a8c0:	dcf2      	bgt.n	800a8a8 <_printf_i+0x210>
 800a8c2:	e7eb      	b.n	800a89c <_printf_i+0x204>
 800a8c4:	2500      	movs	r5, #0
 800a8c6:	f104 0619 	add.w	r6, r4, #25
 800a8ca:	e7f5      	b.n	800a8b8 <_printf_i+0x220>
 800a8cc:	0800af81 	.word	0x0800af81
 800a8d0:	0800af92 	.word	0x0800af92

0800a8d4 <__sflush_r>:
 800a8d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8dc:	0716      	lsls	r6, r2, #28
 800a8de:	4605      	mov	r5, r0
 800a8e0:	460c      	mov	r4, r1
 800a8e2:	d454      	bmi.n	800a98e <__sflush_r+0xba>
 800a8e4:	684b      	ldr	r3, [r1, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	dc02      	bgt.n	800a8f0 <__sflush_r+0x1c>
 800a8ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	dd48      	ble.n	800a982 <__sflush_r+0xae>
 800a8f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8f2:	2e00      	cmp	r6, #0
 800a8f4:	d045      	beq.n	800a982 <__sflush_r+0xae>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a8fc:	682f      	ldr	r7, [r5, #0]
 800a8fe:	6a21      	ldr	r1, [r4, #32]
 800a900:	602b      	str	r3, [r5, #0]
 800a902:	d030      	beq.n	800a966 <__sflush_r+0x92>
 800a904:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a906:	89a3      	ldrh	r3, [r4, #12]
 800a908:	0759      	lsls	r1, r3, #29
 800a90a:	d505      	bpl.n	800a918 <__sflush_r+0x44>
 800a90c:	6863      	ldr	r3, [r4, #4]
 800a90e:	1ad2      	subs	r2, r2, r3
 800a910:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a912:	b10b      	cbz	r3, 800a918 <__sflush_r+0x44>
 800a914:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a916:	1ad2      	subs	r2, r2, r3
 800a918:	2300      	movs	r3, #0
 800a91a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a91c:	6a21      	ldr	r1, [r4, #32]
 800a91e:	4628      	mov	r0, r5
 800a920:	47b0      	blx	r6
 800a922:	1c43      	adds	r3, r0, #1
 800a924:	89a3      	ldrh	r3, [r4, #12]
 800a926:	d106      	bne.n	800a936 <__sflush_r+0x62>
 800a928:	6829      	ldr	r1, [r5, #0]
 800a92a:	291d      	cmp	r1, #29
 800a92c:	d82b      	bhi.n	800a986 <__sflush_r+0xb2>
 800a92e:	4a2a      	ldr	r2, [pc, #168]	@ (800a9d8 <__sflush_r+0x104>)
 800a930:	40ca      	lsrs	r2, r1
 800a932:	07d6      	lsls	r6, r2, #31
 800a934:	d527      	bpl.n	800a986 <__sflush_r+0xb2>
 800a936:	2200      	movs	r2, #0
 800a938:	6062      	str	r2, [r4, #4]
 800a93a:	04d9      	lsls	r1, r3, #19
 800a93c:	6922      	ldr	r2, [r4, #16]
 800a93e:	6022      	str	r2, [r4, #0]
 800a940:	d504      	bpl.n	800a94c <__sflush_r+0x78>
 800a942:	1c42      	adds	r2, r0, #1
 800a944:	d101      	bne.n	800a94a <__sflush_r+0x76>
 800a946:	682b      	ldr	r3, [r5, #0]
 800a948:	b903      	cbnz	r3, 800a94c <__sflush_r+0x78>
 800a94a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a94c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a94e:	602f      	str	r7, [r5, #0]
 800a950:	b1b9      	cbz	r1, 800a982 <__sflush_r+0xae>
 800a952:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a956:	4299      	cmp	r1, r3
 800a958:	d002      	beq.n	800a960 <__sflush_r+0x8c>
 800a95a:	4628      	mov	r0, r5
 800a95c:	f7ff fa9c 	bl	8009e98 <_free_r>
 800a960:	2300      	movs	r3, #0
 800a962:	6363      	str	r3, [r4, #52]	@ 0x34
 800a964:	e00d      	b.n	800a982 <__sflush_r+0xae>
 800a966:	2301      	movs	r3, #1
 800a968:	4628      	mov	r0, r5
 800a96a:	47b0      	blx	r6
 800a96c:	4602      	mov	r2, r0
 800a96e:	1c50      	adds	r0, r2, #1
 800a970:	d1c9      	bne.n	800a906 <__sflush_r+0x32>
 800a972:	682b      	ldr	r3, [r5, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d0c6      	beq.n	800a906 <__sflush_r+0x32>
 800a978:	2b1d      	cmp	r3, #29
 800a97a:	d001      	beq.n	800a980 <__sflush_r+0xac>
 800a97c:	2b16      	cmp	r3, #22
 800a97e:	d11e      	bne.n	800a9be <__sflush_r+0xea>
 800a980:	602f      	str	r7, [r5, #0]
 800a982:	2000      	movs	r0, #0
 800a984:	e022      	b.n	800a9cc <__sflush_r+0xf8>
 800a986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a98a:	b21b      	sxth	r3, r3
 800a98c:	e01b      	b.n	800a9c6 <__sflush_r+0xf2>
 800a98e:	690f      	ldr	r7, [r1, #16]
 800a990:	2f00      	cmp	r7, #0
 800a992:	d0f6      	beq.n	800a982 <__sflush_r+0xae>
 800a994:	0793      	lsls	r3, r2, #30
 800a996:	680e      	ldr	r6, [r1, #0]
 800a998:	bf08      	it	eq
 800a99a:	694b      	ldreq	r3, [r1, #20]
 800a99c:	600f      	str	r7, [r1, #0]
 800a99e:	bf18      	it	ne
 800a9a0:	2300      	movne	r3, #0
 800a9a2:	eba6 0807 	sub.w	r8, r6, r7
 800a9a6:	608b      	str	r3, [r1, #8]
 800a9a8:	f1b8 0f00 	cmp.w	r8, #0
 800a9ac:	dde9      	ble.n	800a982 <__sflush_r+0xae>
 800a9ae:	6a21      	ldr	r1, [r4, #32]
 800a9b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a9b2:	4643      	mov	r3, r8
 800a9b4:	463a      	mov	r2, r7
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	47b0      	blx	r6
 800a9ba:	2800      	cmp	r0, #0
 800a9bc:	dc08      	bgt.n	800a9d0 <__sflush_r+0xfc>
 800a9be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9c6:	81a3      	strh	r3, [r4, #12]
 800a9c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9d0:	4407      	add	r7, r0
 800a9d2:	eba8 0800 	sub.w	r8, r8, r0
 800a9d6:	e7e7      	b.n	800a9a8 <__sflush_r+0xd4>
 800a9d8:	20400001 	.word	0x20400001

0800a9dc <_fflush_r>:
 800a9dc:	b538      	push	{r3, r4, r5, lr}
 800a9de:	690b      	ldr	r3, [r1, #16]
 800a9e0:	4605      	mov	r5, r0
 800a9e2:	460c      	mov	r4, r1
 800a9e4:	b913      	cbnz	r3, 800a9ec <_fflush_r+0x10>
 800a9e6:	2500      	movs	r5, #0
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	bd38      	pop	{r3, r4, r5, pc}
 800a9ec:	b118      	cbz	r0, 800a9f6 <_fflush_r+0x1a>
 800a9ee:	6a03      	ldr	r3, [r0, #32]
 800a9f0:	b90b      	cbnz	r3, 800a9f6 <_fflush_r+0x1a>
 800a9f2:	f7ff f90b 	bl	8009c0c <__sinit>
 800a9f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d0f3      	beq.n	800a9e6 <_fflush_r+0xa>
 800a9fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aa00:	07d0      	lsls	r0, r2, #31
 800aa02:	d404      	bmi.n	800aa0e <_fflush_r+0x32>
 800aa04:	0599      	lsls	r1, r3, #22
 800aa06:	d402      	bmi.n	800aa0e <_fflush_r+0x32>
 800aa08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa0a:	f7ff fa42 	bl	8009e92 <__retarget_lock_acquire_recursive>
 800aa0e:	4628      	mov	r0, r5
 800aa10:	4621      	mov	r1, r4
 800aa12:	f7ff ff5f 	bl	800a8d4 <__sflush_r>
 800aa16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa18:	07da      	lsls	r2, r3, #31
 800aa1a:	4605      	mov	r5, r0
 800aa1c:	d4e4      	bmi.n	800a9e8 <_fflush_r+0xc>
 800aa1e:	89a3      	ldrh	r3, [r4, #12]
 800aa20:	059b      	lsls	r3, r3, #22
 800aa22:	d4e1      	bmi.n	800a9e8 <_fflush_r+0xc>
 800aa24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa26:	f7ff fa35 	bl	8009e94 <__retarget_lock_release_recursive>
 800aa2a:	e7dd      	b.n	800a9e8 <_fflush_r+0xc>

0800aa2c <_putc_r>:
 800aa2c:	b570      	push	{r4, r5, r6, lr}
 800aa2e:	460d      	mov	r5, r1
 800aa30:	4614      	mov	r4, r2
 800aa32:	4606      	mov	r6, r0
 800aa34:	b118      	cbz	r0, 800aa3e <_putc_r+0x12>
 800aa36:	6a03      	ldr	r3, [r0, #32]
 800aa38:	b90b      	cbnz	r3, 800aa3e <_putc_r+0x12>
 800aa3a:	f7ff f8e7 	bl	8009c0c <__sinit>
 800aa3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa40:	07d8      	lsls	r0, r3, #31
 800aa42:	d405      	bmi.n	800aa50 <_putc_r+0x24>
 800aa44:	89a3      	ldrh	r3, [r4, #12]
 800aa46:	0599      	lsls	r1, r3, #22
 800aa48:	d402      	bmi.n	800aa50 <_putc_r+0x24>
 800aa4a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa4c:	f7ff fa21 	bl	8009e92 <__retarget_lock_acquire_recursive>
 800aa50:	68a3      	ldr	r3, [r4, #8]
 800aa52:	3b01      	subs	r3, #1
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	60a3      	str	r3, [r4, #8]
 800aa58:	da05      	bge.n	800aa66 <_putc_r+0x3a>
 800aa5a:	69a2      	ldr	r2, [r4, #24]
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	db12      	blt.n	800aa86 <_putc_r+0x5a>
 800aa60:	b2eb      	uxtb	r3, r5
 800aa62:	2b0a      	cmp	r3, #10
 800aa64:	d00f      	beq.n	800aa86 <_putc_r+0x5a>
 800aa66:	6823      	ldr	r3, [r4, #0]
 800aa68:	1c5a      	adds	r2, r3, #1
 800aa6a:	6022      	str	r2, [r4, #0]
 800aa6c:	701d      	strb	r5, [r3, #0]
 800aa6e:	b2ed      	uxtb	r5, r5
 800aa70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa72:	07da      	lsls	r2, r3, #31
 800aa74:	d405      	bmi.n	800aa82 <_putc_r+0x56>
 800aa76:	89a3      	ldrh	r3, [r4, #12]
 800aa78:	059b      	lsls	r3, r3, #22
 800aa7a:	d402      	bmi.n	800aa82 <_putc_r+0x56>
 800aa7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa7e:	f7ff fa09 	bl	8009e94 <__retarget_lock_release_recursive>
 800aa82:	4628      	mov	r0, r5
 800aa84:	bd70      	pop	{r4, r5, r6, pc}
 800aa86:	4629      	mov	r1, r5
 800aa88:	4622      	mov	r2, r4
 800aa8a:	4630      	mov	r0, r6
 800aa8c:	f000 f802 	bl	800aa94 <__swbuf_r>
 800aa90:	4605      	mov	r5, r0
 800aa92:	e7ed      	b.n	800aa70 <_putc_r+0x44>

0800aa94 <__swbuf_r>:
 800aa94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa96:	460e      	mov	r6, r1
 800aa98:	4614      	mov	r4, r2
 800aa9a:	4605      	mov	r5, r0
 800aa9c:	b118      	cbz	r0, 800aaa6 <__swbuf_r+0x12>
 800aa9e:	6a03      	ldr	r3, [r0, #32]
 800aaa0:	b90b      	cbnz	r3, 800aaa6 <__swbuf_r+0x12>
 800aaa2:	f7ff f8b3 	bl	8009c0c <__sinit>
 800aaa6:	69a3      	ldr	r3, [r4, #24]
 800aaa8:	60a3      	str	r3, [r4, #8]
 800aaaa:	89a3      	ldrh	r3, [r4, #12]
 800aaac:	071a      	lsls	r2, r3, #28
 800aaae:	d501      	bpl.n	800aab4 <__swbuf_r+0x20>
 800aab0:	6923      	ldr	r3, [r4, #16]
 800aab2:	b943      	cbnz	r3, 800aac6 <__swbuf_r+0x32>
 800aab4:	4621      	mov	r1, r4
 800aab6:	4628      	mov	r0, r5
 800aab8:	f000 f82a 	bl	800ab10 <__swsetup_r>
 800aabc:	b118      	cbz	r0, 800aac6 <__swbuf_r+0x32>
 800aabe:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800aac2:	4638      	mov	r0, r7
 800aac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aac6:	6823      	ldr	r3, [r4, #0]
 800aac8:	6922      	ldr	r2, [r4, #16]
 800aaca:	1a98      	subs	r0, r3, r2
 800aacc:	6963      	ldr	r3, [r4, #20]
 800aace:	b2f6      	uxtb	r6, r6
 800aad0:	4283      	cmp	r3, r0
 800aad2:	4637      	mov	r7, r6
 800aad4:	dc05      	bgt.n	800aae2 <__swbuf_r+0x4e>
 800aad6:	4621      	mov	r1, r4
 800aad8:	4628      	mov	r0, r5
 800aada:	f7ff ff7f 	bl	800a9dc <_fflush_r>
 800aade:	2800      	cmp	r0, #0
 800aae0:	d1ed      	bne.n	800aabe <__swbuf_r+0x2a>
 800aae2:	68a3      	ldr	r3, [r4, #8]
 800aae4:	3b01      	subs	r3, #1
 800aae6:	60a3      	str	r3, [r4, #8]
 800aae8:	6823      	ldr	r3, [r4, #0]
 800aaea:	1c5a      	adds	r2, r3, #1
 800aaec:	6022      	str	r2, [r4, #0]
 800aaee:	701e      	strb	r6, [r3, #0]
 800aaf0:	6962      	ldr	r2, [r4, #20]
 800aaf2:	1c43      	adds	r3, r0, #1
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d004      	beq.n	800ab02 <__swbuf_r+0x6e>
 800aaf8:	89a3      	ldrh	r3, [r4, #12]
 800aafa:	07db      	lsls	r3, r3, #31
 800aafc:	d5e1      	bpl.n	800aac2 <__swbuf_r+0x2e>
 800aafe:	2e0a      	cmp	r6, #10
 800ab00:	d1df      	bne.n	800aac2 <__swbuf_r+0x2e>
 800ab02:	4621      	mov	r1, r4
 800ab04:	4628      	mov	r0, r5
 800ab06:	f7ff ff69 	bl	800a9dc <_fflush_r>
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	d0d9      	beq.n	800aac2 <__swbuf_r+0x2e>
 800ab0e:	e7d6      	b.n	800aabe <__swbuf_r+0x2a>

0800ab10 <__swsetup_r>:
 800ab10:	b538      	push	{r3, r4, r5, lr}
 800ab12:	4b29      	ldr	r3, [pc, #164]	@ (800abb8 <__swsetup_r+0xa8>)
 800ab14:	4605      	mov	r5, r0
 800ab16:	6818      	ldr	r0, [r3, #0]
 800ab18:	460c      	mov	r4, r1
 800ab1a:	b118      	cbz	r0, 800ab24 <__swsetup_r+0x14>
 800ab1c:	6a03      	ldr	r3, [r0, #32]
 800ab1e:	b90b      	cbnz	r3, 800ab24 <__swsetup_r+0x14>
 800ab20:	f7ff f874 	bl	8009c0c <__sinit>
 800ab24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab28:	0719      	lsls	r1, r3, #28
 800ab2a:	d422      	bmi.n	800ab72 <__swsetup_r+0x62>
 800ab2c:	06da      	lsls	r2, r3, #27
 800ab2e:	d407      	bmi.n	800ab40 <__swsetup_r+0x30>
 800ab30:	2209      	movs	r2, #9
 800ab32:	602a      	str	r2, [r5, #0]
 800ab34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab38:	81a3      	strh	r3, [r4, #12]
 800ab3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab3e:	e033      	b.n	800aba8 <__swsetup_r+0x98>
 800ab40:	0758      	lsls	r0, r3, #29
 800ab42:	d512      	bpl.n	800ab6a <__swsetup_r+0x5a>
 800ab44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab46:	b141      	cbz	r1, 800ab5a <__swsetup_r+0x4a>
 800ab48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab4c:	4299      	cmp	r1, r3
 800ab4e:	d002      	beq.n	800ab56 <__swsetup_r+0x46>
 800ab50:	4628      	mov	r0, r5
 800ab52:	f7ff f9a1 	bl	8009e98 <_free_r>
 800ab56:	2300      	movs	r3, #0
 800ab58:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab5a:	89a3      	ldrh	r3, [r4, #12]
 800ab5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ab60:	81a3      	strh	r3, [r4, #12]
 800ab62:	2300      	movs	r3, #0
 800ab64:	6063      	str	r3, [r4, #4]
 800ab66:	6923      	ldr	r3, [r4, #16]
 800ab68:	6023      	str	r3, [r4, #0]
 800ab6a:	89a3      	ldrh	r3, [r4, #12]
 800ab6c:	f043 0308 	orr.w	r3, r3, #8
 800ab70:	81a3      	strh	r3, [r4, #12]
 800ab72:	6923      	ldr	r3, [r4, #16]
 800ab74:	b94b      	cbnz	r3, 800ab8a <__swsetup_r+0x7a>
 800ab76:	89a3      	ldrh	r3, [r4, #12]
 800ab78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ab7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab80:	d003      	beq.n	800ab8a <__swsetup_r+0x7a>
 800ab82:	4621      	mov	r1, r4
 800ab84:	4628      	mov	r0, r5
 800ab86:	f000 f8a5 	bl	800acd4 <__smakebuf_r>
 800ab8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab8e:	f013 0201 	ands.w	r2, r3, #1
 800ab92:	d00a      	beq.n	800abaa <__swsetup_r+0x9a>
 800ab94:	2200      	movs	r2, #0
 800ab96:	60a2      	str	r2, [r4, #8]
 800ab98:	6962      	ldr	r2, [r4, #20]
 800ab9a:	4252      	negs	r2, r2
 800ab9c:	61a2      	str	r2, [r4, #24]
 800ab9e:	6922      	ldr	r2, [r4, #16]
 800aba0:	b942      	cbnz	r2, 800abb4 <__swsetup_r+0xa4>
 800aba2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aba6:	d1c5      	bne.n	800ab34 <__swsetup_r+0x24>
 800aba8:	bd38      	pop	{r3, r4, r5, pc}
 800abaa:	0799      	lsls	r1, r3, #30
 800abac:	bf58      	it	pl
 800abae:	6962      	ldrpl	r2, [r4, #20]
 800abb0:	60a2      	str	r2, [r4, #8]
 800abb2:	e7f4      	b.n	800ab9e <__swsetup_r+0x8e>
 800abb4:	2000      	movs	r0, #0
 800abb6:	e7f7      	b.n	800aba8 <__swsetup_r+0x98>
 800abb8:	20000190 	.word	0x20000190

0800abbc <memmove>:
 800abbc:	4288      	cmp	r0, r1
 800abbe:	b510      	push	{r4, lr}
 800abc0:	eb01 0402 	add.w	r4, r1, r2
 800abc4:	d902      	bls.n	800abcc <memmove+0x10>
 800abc6:	4284      	cmp	r4, r0
 800abc8:	4623      	mov	r3, r4
 800abca:	d807      	bhi.n	800abdc <memmove+0x20>
 800abcc:	1e43      	subs	r3, r0, #1
 800abce:	42a1      	cmp	r1, r4
 800abd0:	d008      	beq.n	800abe4 <memmove+0x28>
 800abd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abda:	e7f8      	b.n	800abce <memmove+0x12>
 800abdc:	4402      	add	r2, r0
 800abde:	4601      	mov	r1, r0
 800abe0:	428a      	cmp	r2, r1
 800abe2:	d100      	bne.n	800abe6 <memmove+0x2a>
 800abe4:	bd10      	pop	{r4, pc}
 800abe6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800abea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800abee:	e7f7      	b.n	800abe0 <memmove+0x24>

0800abf0 <_sbrk_r>:
 800abf0:	b538      	push	{r3, r4, r5, lr}
 800abf2:	4d06      	ldr	r5, [pc, #24]	@ (800ac0c <_sbrk_r+0x1c>)
 800abf4:	2300      	movs	r3, #0
 800abf6:	4604      	mov	r4, r0
 800abf8:	4608      	mov	r0, r1
 800abfa:	602b      	str	r3, [r5, #0]
 800abfc:	f7f5 ffa6 	bl	8000b4c <_sbrk>
 800ac00:	1c43      	adds	r3, r0, #1
 800ac02:	d102      	bne.n	800ac0a <_sbrk_r+0x1a>
 800ac04:	682b      	ldr	r3, [r5, #0]
 800ac06:	b103      	cbz	r3, 800ac0a <_sbrk_r+0x1a>
 800ac08:	6023      	str	r3, [r4, #0]
 800ac0a:	bd38      	pop	{r3, r4, r5, pc}
 800ac0c:	20001fc0 	.word	0x20001fc0

0800ac10 <memcpy>:
 800ac10:	440a      	add	r2, r1
 800ac12:	4291      	cmp	r1, r2
 800ac14:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ac18:	d100      	bne.n	800ac1c <memcpy+0xc>
 800ac1a:	4770      	bx	lr
 800ac1c:	b510      	push	{r4, lr}
 800ac1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac26:	4291      	cmp	r1, r2
 800ac28:	d1f9      	bne.n	800ac1e <memcpy+0xe>
 800ac2a:	bd10      	pop	{r4, pc}

0800ac2c <_realloc_r>:
 800ac2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac30:	4607      	mov	r7, r0
 800ac32:	4614      	mov	r4, r2
 800ac34:	460d      	mov	r5, r1
 800ac36:	b921      	cbnz	r1, 800ac42 <_realloc_r+0x16>
 800ac38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac3c:	4611      	mov	r1, r2
 800ac3e:	f7ff b997 	b.w	8009f70 <_malloc_r>
 800ac42:	b92a      	cbnz	r2, 800ac50 <_realloc_r+0x24>
 800ac44:	f7ff f928 	bl	8009e98 <_free_r>
 800ac48:	4625      	mov	r5, r4
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac50:	f000 f89e 	bl	800ad90 <_malloc_usable_size_r>
 800ac54:	4284      	cmp	r4, r0
 800ac56:	4606      	mov	r6, r0
 800ac58:	d802      	bhi.n	800ac60 <_realloc_r+0x34>
 800ac5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac5e:	d8f4      	bhi.n	800ac4a <_realloc_r+0x1e>
 800ac60:	4621      	mov	r1, r4
 800ac62:	4638      	mov	r0, r7
 800ac64:	f7ff f984 	bl	8009f70 <_malloc_r>
 800ac68:	4680      	mov	r8, r0
 800ac6a:	b908      	cbnz	r0, 800ac70 <_realloc_r+0x44>
 800ac6c:	4645      	mov	r5, r8
 800ac6e:	e7ec      	b.n	800ac4a <_realloc_r+0x1e>
 800ac70:	42b4      	cmp	r4, r6
 800ac72:	4622      	mov	r2, r4
 800ac74:	4629      	mov	r1, r5
 800ac76:	bf28      	it	cs
 800ac78:	4632      	movcs	r2, r6
 800ac7a:	f7ff ffc9 	bl	800ac10 <memcpy>
 800ac7e:	4629      	mov	r1, r5
 800ac80:	4638      	mov	r0, r7
 800ac82:	f7ff f909 	bl	8009e98 <_free_r>
 800ac86:	e7f1      	b.n	800ac6c <_realloc_r+0x40>

0800ac88 <__swhatbuf_r>:
 800ac88:	b570      	push	{r4, r5, r6, lr}
 800ac8a:	460c      	mov	r4, r1
 800ac8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac90:	2900      	cmp	r1, #0
 800ac92:	b096      	sub	sp, #88	@ 0x58
 800ac94:	4615      	mov	r5, r2
 800ac96:	461e      	mov	r6, r3
 800ac98:	da0d      	bge.n	800acb6 <__swhatbuf_r+0x2e>
 800ac9a:	89a3      	ldrh	r3, [r4, #12]
 800ac9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aca0:	f04f 0100 	mov.w	r1, #0
 800aca4:	bf14      	ite	ne
 800aca6:	2340      	movne	r3, #64	@ 0x40
 800aca8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800acac:	2000      	movs	r0, #0
 800acae:	6031      	str	r1, [r6, #0]
 800acb0:	602b      	str	r3, [r5, #0]
 800acb2:	b016      	add	sp, #88	@ 0x58
 800acb4:	bd70      	pop	{r4, r5, r6, pc}
 800acb6:	466a      	mov	r2, sp
 800acb8:	f000 f848 	bl	800ad4c <_fstat_r>
 800acbc:	2800      	cmp	r0, #0
 800acbe:	dbec      	blt.n	800ac9a <__swhatbuf_r+0x12>
 800acc0:	9901      	ldr	r1, [sp, #4]
 800acc2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800acc6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800acca:	4259      	negs	r1, r3
 800accc:	4159      	adcs	r1, r3
 800acce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800acd2:	e7eb      	b.n	800acac <__swhatbuf_r+0x24>

0800acd4 <__smakebuf_r>:
 800acd4:	898b      	ldrh	r3, [r1, #12]
 800acd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acd8:	079d      	lsls	r5, r3, #30
 800acda:	4606      	mov	r6, r0
 800acdc:	460c      	mov	r4, r1
 800acde:	d507      	bpl.n	800acf0 <__smakebuf_r+0x1c>
 800ace0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ace4:	6023      	str	r3, [r4, #0]
 800ace6:	6123      	str	r3, [r4, #16]
 800ace8:	2301      	movs	r3, #1
 800acea:	6163      	str	r3, [r4, #20]
 800acec:	b003      	add	sp, #12
 800acee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acf0:	ab01      	add	r3, sp, #4
 800acf2:	466a      	mov	r2, sp
 800acf4:	f7ff ffc8 	bl	800ac88 <__swhatbuf_r>
 800acf8:	9f00      	ldr	r7, [sp, #0]
 800acfa:	4605      	mov	r5, r0
 800acfc:	4639      	mov	r1, r7
 800acfe:	4630      	mov	r0, r6
 800ad00:	f7ff f936 	bl	8009f70 <_malloc_r>
 800ad04:	b948      	cbnz	r0, 800ad1a <__smakebuf_r+0x46>
 800ad06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad0a:	059a      	lsls	r2, r3, #22
 800ad0c:	d4ee      	bmi.n	800acec <__smakebuf_r+0x18>
 800ad0e:	f023 0303 	bic.w	r3, r3, #3
 800ad12:	f043 0302 	orr.w	r3, r3, #2
 800ad16:	81a3      	strh	r3, [r4, #12]
 800ad18:	e7e2      	b.n	800ace0 <__smakebuf_r+0xc>
 800ad1a:	89a3      	ldrh	r3, [r4, #12]
 800ad1c:	6020      	str	r0, [r4, #0]
 800ad1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad22:	81a3      	strh	r3, [r4, #12]
 800ad24:	9b01      	ldr	r3, [sp, #4]
 800ad26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ad2a:	b15b      	cbz	r3, 800ad44 <__smakebuf_r+0x70>
 800ad2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad30:	4630      	mov	r0, r6
 800ad32:	f000 f81d 	bl	800ad70 <_isatty_r>
 800ad36:	b128      	cbz	r0, 800ad44 <__smakebuf_r+0x70>
 800ad38:	89a3      	ldrh	r3, [r4, #12]
 800ad3a:	f023 0303 	bic.w	r3, r3, #3
 800ad3e:	f043 0301 	orr.w	r3, r3, #1
 800ad42:	81a3      	strh	r3, [r4, #12]
 800ad44:	89a3      	ldrh	r3, [r4, #12]
 800ad46:	431d      	orrs	r5, r3
 800ad48:	81a5      	strh	r5, [r4, #12]
 800ad4a:	e7cf      	b.n	800acec <__smakebuf_r+0x18>

0800ad4c <_fstat_r>:
 800ad4c:	b538      	push	{r3, r4, r5, lr}
 800ad4e:	4d07      	ldr	r5, [pc, #28]	@ (800ad6c <_fstat_r+0x20>)
 800ad50:	2300      	movs	r3, #0
 800ad52:	4604      	mov	r4, r0
 800ad54:	4608      	mov	r0, r1
 800ad56:	4611      	mov	r1, r2
 800ad58:	602b      	str	r3, [r5, #0]
 800ad5a:	f7f5 fece 	bl	8000afa <_fstat>
 800ad5e:	1c43      	adds	r3, r0, #1
 800ad60:	d102      	bne.n	800ad68 <_fstat_r+0x1c>
 800ad62:	682b      	ldr	r3, [r5, #0]
 800ad64:	b103      	cbz	r3, 800ad68 <_fstat_r+0x1c>
 800ad66:	6023      	str	r3, [r4, #0]
 800ad68:	bd38      	pop	{r3, r4, r5, pc}
 800ad6a:	bf00      	nop
 800ad6c:	20001fc0 	.word	0x20001fc0

0800ad70 <_isatty_r>:
 800ad70:	b538      	push	{r3, r4, r5, lr}
 800ad72:	4d06      	ldr	r5, [pc, #24]	@ (800ad8c <_isatty_r+0x1c>)
 800ad74:	2300      	movs	r3, #0
 800ad76:	4604      	mov	r4, r0
 800ad78:	4608      	mov	r0, r1
 800ad7a:	602b      	str	r3, [r5, #0]
 800ad7c:	f7f5 fecd 	bl	8000b1a <_isatty>
 800ad80:	1c43      	adds	r3, r0, #1
 800ad82:	d102      	bne.n	800ad8a <_isatty_r+0x1a>
 800ad84:	682b      	ldr	r3, [r5, #0]
 800ad86:	b103      	cbz	r3, 800ad8a <_isatty_r+0x1a>
 800ad88:	6023      	str	r3, [r4, #0]
 800ad8a:	bd38      	pop	{r3, r4, r5, pc}
 800ad8c:	20001fc0 	.word	0x20001fc0

0800ad90 <_malloc_usable_size_r>:
 800ad90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad94:	1f18      	subs	r0, r3, #4
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	bfbc      	itt	lt
 800ad9a:	580b      	ldrlt	r3, [r1, r0]
 800ad9c:	18c0      	addlt	r0, r0, r3
 800ad9e:	4770      	bx	lr

0800ada0 <_init>:
 800ada0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ada2:	bf00      	nop
 800ada4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ada6:	bc08      	pop	{r3}
 800ada8:	469e      	mov	lr, r3
 800adaa:	4770      	bx	lr

0800adac <_fini>:
 800adac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adae:	bf00      	nop
 800adb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adb2:	bc08      	pop	{r3}
 800adb4:	469e      	mov	lr, r3
 800adb6:	4770      	bx	lr
