
kinematech-torq-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aba4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  0800ad84  0800ad84  0000bd84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af70  0800af70  0000c1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800af70  0800af70  0000bf70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af78  0800af78  0000c1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af78  0800af78  0000bf78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800af7c  0800af7c  0000bf7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800af80  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dec  200001e0  0800b160  0000c1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fcc  0800b160  0000cfcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018157  00000000  00000000  0000c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040e2  00000000  00000000  00024367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  00028450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fcc  00000000  00000000  00029948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000246a2  00000000  00000000  0002a914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ba4  00000000  00000000  0004efb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da13b  00000000  00000000  00067b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141c95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e88  00000000  00000000  00141cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00147b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ad6c 	.word	0x0800ad6c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800ad6c 	.word	0x0800ad6c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <MX_GPIO_Init>:
        * EXTI
     PA15   ------> I2C1_SCL
     PB7   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b08a      	sub	sp, #40	@ 0x28
 80002d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d6:	f107 0314 	add.w	r3, r7, #20
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
 80002e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e6:	4b35      	ldr	r3, [pc, #212]	@ (80003bc <MX_GPIO_Init+0xec>)
 80002e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ea:	4a34      	ldr	r2, [pc, #208]	@ (80003bc <MX_GPIO_Init+0xec>)
 80002ec:	f043 0304 	orr.w	r3, r3, #4
 80002f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002f2:	4b32      	ldr	r3, [pc, #200]	@ (80003bc <MX_GPIO_Init+0xec>)
 80002f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002f6:	f003 0304 	and.w	r3, r3, #4
 80002fa:	613b      	str	r3, [r7, #16]
 80002fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002fe:	4b2f      	ldr	r3, [pc, #188]	@ (80003bc <MX_GPIO_Init+0xec>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000302:	4a2e      	ldr	r2, [pc, #184]	@ (80003bc <MX_GPIO_Init+0xec>)
 8000304:	f043 0320 	orr.w	r3, r3, #32
 8000308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800030a:	4b2c      	ldr	r3, [pc, #176]	@ (80003bc <MX_GPIO_Init+0xec>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800030e:	f003 0320 	and.w	r3, r3, #32
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000316:	4b29      	ldr	r3, [pc, #164]	@ (80003bc <MX_GPIO_Init+0xec>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800031a:	4a28      	ldr	r2, [pc, #160]	@ (80003bc <MX_GPIO_Init+0xec>)
 800031c:	f043 0302 	orr.w	r3, r3, #2
 8000320:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000322:	4b26      	ldr	r3, [pc, #152]	@ (80003bc <MX_GPIO_Init+0xec>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000326:	f003 0302 	and.w	r3, r3, #2
 800032a:	60bb      	str	r3, [r7, #8]
 800032c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032e:	4b23      	ldr	r3, [pc, #140]	@ (80003bc <MX_GPIO_Init+0xec>)
 8000330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000332:	4a22      	ldr	r2, [pc, #136]	@ (80003bc <MX_GPIO_Init+0xec>)
 8000334:	f043 0301 	orr.w	r3, r3, #1
 8000338:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800033a:	4b20      	ldr	r3, [pc, #128]	@ (80003bc <MX_GPIO_Init+0xec>)
 800033c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800033e:	f003 0301 	and.w	r3, r3, #1
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_BLUE_Pin|LED_RED_Pin, GPIO_PIN_SET);
 8000346:	2201      	movs	r2, #1
 8000348:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 800034c:	481c      	ldr	r0, [pc, #112]	@ (80003c0 <MX_GPIO_Init+0xf0>)
 800034e:	f001 f99d 	bl	800168c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_BLUE_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_RED_Pin;
 8000352:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000358:	2301      	movs	r3, #1
 800035a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800035c:	2301      	movs	r3, #1
 800035e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000360:	2300      	movs	r3, #0
 8000362:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000364:	f107 0314 	add.w	r3, r7, #20
 8000368:	4619      	mov	r1, r3
 800036a:	4815      	ldr	r0, [pc, #84]	@ (80003c0 <MX_GPIO_Init+0xf0>)
 800036c:	f001 f80c 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_SCL_Pin */
  GPIO_InitStruct.Pin = ENCODER_SCL_Pin;
 8000370:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000376:	2312      	movs	r3, #18
 8000378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037a:	2300      	movs	r3, #0
 800037c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037e:	2300      	movs	r3, #0
 8000380:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000382:	2304      	movs	r3, #4
 8000384:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ENCODER_SCL_GPIO_Port, &GPIO_InitStruct);
 8000386:	f107 0314 	add.w	r3, r7, #20
 800038a:	4619      	mov	r1, r3
 800038c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000390:	f000 fffa 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_SDA_Pin */
  GPIO_InitStruct.Pin = ENCODER_SDA_Pin;
 8000394:	2380      	movs	r3, #128	@ 0x80
 8000396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000398:	2312      	movs	r3, #18
 800039a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039c:	2300      	movs	r3, #0
 800039e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a0:	2300      	movs	r3, #0
 80003a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80003a4:	2304      	movs	r3, #4
 80003a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ENCODER_SDA_GPIO_Port, &GPIO_InitStruct);
 80003a8:	f107 0314 	add.w	r3, r7, #20
 80003ac:	4619      	mov	r1, r3
 80003ae:	4805      	ldr	r0, [pc, #20]	@ (80003c4 <MX_GPIO_Init+0xf4>)
 80003b0:	f000 ffea 	bl	8001388 <HAL_GPIO_Init>

}
 80003b4:	bf00      	nop
 80003b6:	3728      	adds	r7, #40	@ 0x28
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40021000 	.word	0x40021000
 80003c0:	48000800 	.word	0x48000800
 80003c4:	48000400 	.word	0x48000400

080003c8 <Hall_Init>:
    {0,  0,  0,  0,  0,  0,  0,  0}  // De 7 (inválido)
};

/* ========== PUBLIC FUNCTIONS ========== */

void Hall_Init(HallSensor_t* hall) {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
    hall->hall_state = 0;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2200      	movs	r2, #0
 80003d4:	701a      	strb	r2, [r3, #0]
    hall->last_hall_state = 0;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2200      	movs	r2, #0
 80003da:	751a      	strb	r2, [r3, #20]
    hall->electrical_rotations = 0;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2200      	movs	r2, #0
 80003e0:	619a      	str	r2, [r3, #24]
    hall->angle_electrical = 0.0f;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	f04f 0200 	mov.w	r2, #0
 80003e8:	61da      	str	r2, [r3, #28]
    hall->velocity_erpm = 0.0f;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	f04f 0200 	mov.w	r2, #0
 80003f0:	621a      	str	r2, [r3, #32]
    hall->direction = 0;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2200      	movs	r2, #0
 80003f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    hall->hall_capture = 0;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2200      	movs	r2, #0
 80003fe:	605a      	str	r2, [r3, #4]
    hall->last_capture = 0;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
    hall->new_capture_flag = 0;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	2200      	movs	r2, #0
 800040a:	731a      	strb	r2, [r3, #12]
    hall->isr_counter = 0;  // DEBUG: inicializar contador
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	2200      	movs	r2, #0
 8000410:	611a      	str	r2, [r3, #16]
    
    // Leitura inicial do estado Hall
    hall->hall_state = Hall_ReadState();
 8000412:	f000 f827 	bl	8000464 <Hall_ReadState>
 8000416:	4603      	mov	r3, r0
 8000418:	461a      	mov	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	701a      	strb	r2, [r3, #0]
    hall->last_hall_state = hall->hall_state;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	b2da      	uxtb	r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	751a      	strb	r2, [r3, #20]
    
    // Setar ângulo inicial baseado no estado Hall atual
    if (hall->hall_state >= 1 && hall->hall_state <= 6) {
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	b2db      	uxtb	r3, r3
 800042e:	2b00      	cmp	r3, #0
 8000430:	d00d      	beq.n	800044e <Hall_Init+0x86>
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	b2db      	uxtb	r3, r3
 8000438:	2b06      	cmp	r3, #6
 800043a:	d808      	bhi.n	800044e <Hall_Init+0x86>
        hall->angle_electrical = HALL_ANGLE_TABLE[hall->hall_state];
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	b2db      	uxtb	r3, r3
 8000442:	4a06      	ldr	r2, [pc, #24]	@ (800045c <Hall_Init+0x94>)
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	4413      	add	r3, r2
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	61da      	str	r2, [r3, #28]
    }
    
    // Iniciar TIM8 em modo Hall Sensor com interrupção
    HAL_TIMEx_HallSensor_Start_IT(&htim8);
 800044e:	4804      	ldr	r0, [pc, #16]	@ (8000460 <Hall_Init+0x98>)
 8000450:	f005 f930 	bl	80056b4 <HAL_TIMEx_HallSensor_Start_IT>
}
 8000454:	bf00      	nop
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	0800aec4 	.word	0x0800aec4
 8000460:	200002dc 	.word	0x200002dc

08000464 <Hall_ReadState>:

uint8_t Hall_ReadState(void) {
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
    uint8_t state = 0;
 800046a:	2300      	movs	r3, #0
 800046c:	71fb      	strb	r3, [r7, #7]
    
    // Ler os 3 pinos Hall (PB6, PB8, PB9)
    // IMPORTANTE: Como estão em modo AF (TIM8), ler direto do registrador IDR
    if (GPIOB->IDR & HALL_A_Pin) state |= 0x01; // Bit 0
 800046e:	4b12      	ldr	r3, [pc, #72]	@ (80004b8 <Hall_ReadState+0x54>)
 8000470:	691b      	ldr	r3, [r3, #16]
 8000472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000476:	2b00      	cmp	r3, #0
 8000478:	d003      	beq.n	8000482 <Hall_ReadState+0x1e>
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	71fb      	strb	r3, [r7, #7]
    if (GPIOB->IDR & HALL_B_Pin) state |= 0x02; // Bit 1
 8000482:	4b0d      	ldr	r3, [pc, #52]	@ (80004b8 <Hall_ReadState+0x54>)
 8000484:	691b      	ldr	r3, [r3, #16]
 8000486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800048a:	2b00      	cmp	r3, #0
 800048c:	d003      	beq.n	8000496 <Hall_ReadState+0x32>
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	f043 0302 	orr.w	r3, r3, #2
 8000494:	71fb      	strb	r3, [r7, #7]
    if (GPIOB->IDR & HALL_C_Pin) state |= 0x04; // Bit 2
 8000496:	4b08      	ldr	r3, [pc, #32]	@ (80004b8 <Hall_ReadState+0x54>)
 8000498:	691b      	ldr	r3, [r3, #16]
 800049a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d003      	beq.n	80004aa <Hall_ReadState+0x46>
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	f043 0304 	orr.w	r3, r3, #4
 80004a8:	71fb      	strb	r3, [r7, #7]
    
    return state;
 80004aa:	79fb      	ldrb	r3, [r7, #7]
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr
 80004b8:	48000400 	.word	0x48000400

080004bc <Hall_ProcessData>:

void Hall_ProcessData(HallSensor_t* hall) {
 80004bc:	b480      	push	{r7}
 80004be:	b087      	sub	sp, #28
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
    // Processar apenas se houver nova captura
    if (!hall->new_capture_flag) {
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	7b1b      	ldrb	r3, [r3, #12]
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f000 808b 	beq.w	80005e6 <Hall_ProcessData+0x12a>
        return;
    }
    
    hall->new_capture_flag = 0; // Limpar flag
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2200      	movs	r2, #0
 80004d4:	731a      	strb	r2, [r3, #12]
    
    // Calcular velocidade baseado no delta de captures
    uint32_t delta_capture = hall->hall_capture - hall->last_capture;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	685a      	ldr	r2, [r3, #4]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	1ad3      	subs	r3, r2, r3
 80004e0:	617b      	str	r3, [r7, #20]
    
    if (delta_capture > 0 && delta_capture < 1000000) { // Timeout de 1 segundo (1MHz timer)
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d020      	beq.n	800052a <Hall_ProcessData+0x6e>
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	4a42      	ldr	r2, [pc, #264]	@ (80005f4 <Hall_ProcessData+0x138>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d81c      	bhi.n	800052a <Hall_ProcessData+0x6e>
        // Timer roda a 1MHz (1μs por tick)
        // Cada transição Hall = 60° elétrico = 1/6 rotação elétrica
        float time_seconds = delta_capture / 1000000.0f;
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	ee07 3a90 	vmov	s15, r3
 80004f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80004fa:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 80005f8 <Hall_ProcessData+0x13c>
 80004fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000502:	edc7 7a04 	vstr	s15, [r7, #16]
        float electrical_rps = (1.0f / 6.0f) / time_seconds;
 8000506:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80005fc <Hall_ProcessData+0x140>
 800050a:	ed97 7a04 	vldr	s14, [r7, #16]
 800050e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000512:	edc7 7a03 	vstr	s15, [r7, #12]
        hall->velocity_erpm = electrical_rps * 60.0f; // Converter para eRPM
 8000516:	edd7 7a03 	vldr	s15, [r7, #12]
 800051a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8000600 <Hall_ProcessData+0x144>
 800051e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	edc3 7a08 	vstr	s15, [r3, #32]
    if (delta_capture > 0 && delta_capture < 1000000) { // Timeout de 1 segundo (1MHz timer)
 8000528:	e003      	b.n	8000532 <Hall_ProcessData+0x76>
    } else {
        hall->velocity_erpm = 0.0f; // Timeout ou primeira leitura
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	f04f 0200 	mov.w	r2, #0
 8000530:	621a      	str	r2, [r3, #32]
    }
    
    // Verificar direção baseado na transição
    uint8_t new_state = hall->hall_state;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	72fb      	strb	r3, [r7, #11]
    
    if (new_state != hall->last_hall_state && new_state >= 1 && new_state <= 6) {
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	7d1b      	ldrb	r3, [r3, #20]
 800053c:	7afa      	ldrb	r2, [r7, #11]
 800053e:	429a      	cmp	r2, r3
 8000540:	d039      	beq.n	80005b6 <Hall_ProcessData+0xfa>
 8000542:	7afb      	ldrb	r3, [r7, #11]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d036      	beq.n	80005b6 <Hall_ProcessData+0xfa>
 8000548:	7afb      	ldrb	r3, [r7, #11]
 800054a:	2b06      	cmp	r3, #6
 800054c:	d833      	bhi.n	80005b6 <Hall_ProcessData+0xfa>
        int8_t transition = HALL_TRANSITION_TABLE[hall->last_hall_state][new_state];
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	7d1b      	ldrb	r3, [r3, #20]
 8000552:	461a      	mov	r2, r3
 8000554:	7afb      	ldrb	r3, [r7, #11]
 8000556:	492b      	ldr	r1, [pc, #172]	@ (8000604 <Hall_ProcessData+0x148>)
 8000558:	00d2      	lsls	r2, r2, #3
 800055a:	440a      	add	r2, r1
 800055c:	4413      	add	r3, r2
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	72bb      	strb	r3, [r7, #10]
        
        if (transition != 0) {
 8000562:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d022      	beq.n	80005b0 <Hall_ProcessData+0xf4>
            // Transição válida
            hall->direction = (transition > 0) ? 1 : 2;
 800056a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800056e:	2b00      	cmp	r3, #0
 8000570:	dd01      	ble.n	8000576 <Hall_ProcessData+0xba>
 8000572:	2201      	movs	r2, #1
 8000574:	e000      	b.n	8000578 <Hall_ProcessData+0xbc>
 8000576:	2202      	movs	r2, #2
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            // Atualizar contador de rotações
            if (hall->last_hall_state == 6 && new_state == 1) {
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	7d1b      	ldrb	r3, [r3, #20]
 8000582:	2b06      	cmp	r3, #6
 8000584:	d108      	bne.n	8000598 <Hall_ProcessData+0xdc>
 8000586:	7afb      	ldrb	r3, [r7, #11]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d105      	bne.n	8000598 <Hall_ProcessData+0xdc>
                hall->electrical_rotations++; // Completou rotação horária
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	1c5a      	adds	r2, r3, #1
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	619a      	str	r2, [r3, #24]
 8000596:	e00b      	b.n	80005b0 <Hall_ProcessData+0xf4>
            } else if (hall->last_hall_state == 1 && new_state == 6) {
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	7d1b      	ldrb	r3, [r3, #20]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d107      	bne.n	80005b0 <Hall_ProcessData+0xf4>
 80005a0:	7afb      	ldrb	r3, [r7, #11]
 80005a2:	2b06      	cmp	r3, #6
 80005a4:	d104      	bne.n	80005b0 <Hall_ProcessData+0xf4>
                hall->electrical_rotations--; // Completou rotação anti-horária
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	1e5a      	subs	r2, r3, #1
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	619a      	str	r2, [r3, #24]
            }
        }
        
        hall->last_hall_state = new_state;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	7afa      	ldrb	r2, [r7, #11]
 80005b4:	751a      	strb	r2, [r3, #20]
    }
    
    // Atualizar ângulo baseado na tabela
    if (hall->hall_state >= 1 && hall->hall_state <= 6) {
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d00d      	beq.n	80005dc <Hall_ProcessData+0x120>
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	2b06      	cmp	r3, #6
 80005c8:	d808      	bhi.n	80005dc <Hall_ProcessData+0x120>
        hall->angle_electrical = HALL_ANGLE_TABLE[hall->hall_state];
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000608 <Hall_ProcessData+0x14c>)
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	4413      	add	r3, r2
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	61da      	str	r2, [r3, #28]
    }
    
    hall->last_capture = hall->hall_capture;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	685a      	ldr	r2, [r3, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	e000      	b.n	80005e8 <Hall_ProcessData+0x12c>
        return;
 80005e6:	bf00      	nop
}
 80005e8:	371c      	adds	r7, #28
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	000f423f 	.word	0x000f423f
 80005f8:	49742400 	.word	0x49742400
 80005fc:	3e2aaaab 	.word	0x3e2aaaab
 8000600:	42700000 	.word	0x42700000
 8000604:	0800aee4 	.word	0x0800aee4
 8000608:	0800aec4 	.word	0x0800aec4

0800060c <Hall_TIM_CaptureCallback>:

void Hall_TIM_CaptureCallback(HallSensor_t* hall) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    // ===== ISR ULTRA RÁPIDA (executada a cada transição Hall) =====
    // Objetivo: capturar dados e sair imediatamente (~1-2μs)
    
    // DEBUG: incrementar contador de ISR e piscar LED
    hall->isr_counter++;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	1c5a      	adds	r2, r3, #1
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);  // DEBUG: LED pisca a cada transição
 800061e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000622:	480a      	ldr	r0, [pc, #40]	@ (800064c <Hall_TIM_CaptureCallback+0x40>)
 8000624:	f001 f84a 	bl	80016bc <HAL_GPIO_TogglePin>
    
    // 1. Ler estado Hall atual
    hall->hall_state = Hall_ReadState();
 8000628:	f7ff ff1c 	bl	8000464 <Hall_ReadState>
 800062c:	4603      	mov	r3, r0
 800062e:	461a      	mov	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	701a      	strb	r2, [r3, #0]
    
    // 2. Capturar valor do contador do TIM8
    hall->hall_capture = __HAL_TIM_GET_COUNTER(&htim8);
 8000634:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <Hall_TIM_CaptureCallback+0x44>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	605a      	str	r2, [r3, #4]
    
    // 3. Setar flag para processar no main loop
    hall->new_capture_flag = 1;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2201      	movs	r2, #1
 8000642:	731a      	strb	r2, [r3, #12]
    
    // FIM da ISR! Processamento pesado vai no main loop
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	48000800 	.word	0x48000800
 8000650:	200002dc 	.word	0x200002dc

08000654 <Hall_GetAngle>:

float Hall_GetAngle(HallSensor_t* hall) {
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
    return hall->angle_electrical;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	69db      	ldr	r3, [r3, #28]
 8000660:	ee07 3a90 	vmov	s15, r3
}
 8000664:	eeb0 0a67 	vmov.f32	s0, s15
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <Hall_GetVelocity>:

float Hall_GetVelocity(HallSensor_t* hall) {
 8000672:	b480      	push	{r7}
 8000674:	b083      	sub	sp, #12
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
    return hall->velocity_erpm;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6a1b      	ldr	r3, [r3, #32]
 800067e:	ee07 3a90 	vmov	s15, r3
}
 8000682:	eeb0 0a67 	vmov.f32	s0, s15
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000696:	f000 fd3e 	bl	8001116 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069a:	f000 f861 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069e:	f7ff fe17 	bl	80002d0 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006a2:	f000 fa87 	bl	8000bb4 <MX_TIM1_Init>
  MX_TIM8_Init();
 80006a6:	f000 fb51 	bl	8000d4c <MX_TIM8_Init>
  MX_USB_Device_Init();
 80006aa:	f008 fcff 	bl	80090ac <MX_USB_Device_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80006ae:	f000 f8a2 	bl	80007f6 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  
  // Delay para estabilização USB
  HAL_Delay(500);
 80006b2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006b6:	f000 fd65 	bl	8001184 <HAL_Delay>
  
  // Inicializar módulos
  USB_Comm_Init();
 80006ba:	f000 fc95 	bl	8000fe8 <USB_Comm_Init>
  Hall_Init(&hall_sensor);  // Já inicia o TIM8 Hall Interface
 80006be:	4821      	ldr	r0, [pc, #132]	@ (8000744 <main+0xb4>)
 80006c0:	f7ff fe82 	bl	80003c8 <Hall_Init>
  
  USB_Comm_Print("\r\n=== KINEMATECH TORQ ESC ===\r\n");
 80006c4:	4820      	ldr	r0, [pc, #128]	@ (8000748 <main+0xb8>)
 80006c6:	f000 fceb 	bl	80010a0 <USB_Comm_Print>
  USB_Comm_Print("Firmware v0.1 - Oct 2025\r\n");
 80006ca:	4820      	ldr	r0, [pc, #128]	@ (800074c <main+0xbc>)
 80006cc:	f000 fce8 	bl	80010a0 <USB_Comm_Print>
  USB_Comm_Print("Hall Interface (TIM8) - Hardware Accelerated\r\n");
 80006d0:	481f      	ldr	r0, [pc, #124]	@ (8000750 <main+0xc0>)
 80006d2:	f000 fce5 	bl	80010a0 <USB_Comm_Print>
  USB_Comm_Print("System ready! Rotate motor manually.\r\n\r\n");
 80006d6:	481f      	ldr	r0, [pc, #124]	@ (8000754 <main+0xc4>)
 80006d8:	f000 fce2 	bl	80010a0 <USB_Comm_Print>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    
    // ===== PROCESSAR DADOS DO HALL (main loop) =====
    Hall_ProcessData(&hall_sensor);
 80006dc:	4819      	ldr	r0, [pc, #100]	@ (8000744 <main+0xb4>)
 80006de:	f7ff feed 	bl	80004bc <Hall_ProcessData>
    
    // ===== TELEMETRIA VIA USB (100Hz) =====
    uint32_t current_time = HAL_GetTick();
 80006e2:	f000 fd43 	bl	800116c <HAL_GetTick>
 80006e6:	6078      	str	r0, [r7, #4]
    if (current_time - last_telemetry_ms >= (1000 / TELEMETRY_RATE_HZ)) {
 80006e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <main+0xc8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	2b09      	cmp	r3, #9
 80006f2:	d924      	bls.n	800073e <main+0xae>
      last_telemetry_ms = current_time;
 80006f4:	4a18      	ldr	r2, [pc, #96]	@ (8000758 <main+0xc8>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6013      	str	r3, [r2, #0]
      
      telemetry.hall_state = hall_sensor.hall_state;
 80006fa:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <main+0xb4>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b16      	ldr	r3, [pc, #88]	@ (800075c <main+0xcc>)
 8000702:	701a      	strb	r2, [r3, #0]
      telemetry.hall_angle = Hall_GetAngle(&hall_sensor);
 8000704:	480f      	ldr	r0, [pc, #60]	@ (8000744 <main+0xb4>)
 8000706:	f7ff ffa5 	bl	8000654 <Hall_GetAngle>
 800070a:	eef0 7a40 	vmov.f32	s15, s0
 800070e:	4b13      	ldr	r3, [pc, #76]	@ (800075c <main+0xcc>)
 8000710:	edc3 7a01 	vstr	s15, [r3, #4]
      telemetry.hall_velocity = Hall_GetVelocity(&hall_sensor);
 8000714:	480b      	ldr	r0, [pc, #44]	@ (8000744 <main+0xb4>)
 8000716:	f7ff ffac 	bl	8000672 <Hall_GetVelocity>
 800071a:	eef0 7a40 	vmov.f32	s15, s0
 800071e:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <main+0xcc>)
 8000720:	edc3 7a02 	vstr	s15, [r3, #8]
      telemetry.isr_counter = hall_sensor.isr_counter;  // DEBUG
 8000724:	4b07      	ldr	r3, [pc, #28]	@ (8000744 <main+0xb4>)
 8000726:	691b      	ldr	r3, [r3, #16]
 8000728:	4a0c      	ldr	r2, [pc, #48]	@ (800075c <main+0xcc>)
 800072a:	60d3      	str	r3, [r2, #12]
      telemetry.uptime_ms = current_time;
 800072c:	4a0b      	ldr	r2, [pc, #44]	@ (800075c <main+0xcc>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6113      	str	r3, [r2, #16]
      telemetry.errors = 0;
 8000732:	4b0a      	ldr	r3, [pc, #40]	@ (800075c <main+0xcc>)
 8000734:	2200      	movs	r2, #0
 8000736:	751a      	strb	r2, [r3, #20]
      
      USB_Comm_SendTelemetry(&telemetry);
 8000738:	4808      	ldr	r0, [pc, #32]	@ (800075c <main+0xcc>)
 800073a:	f000 fc6d 	bl	8001018 <USB_Comm_SendTelemetry>
    }

    //USB_Comm_ProcessCommands();
	__WFI();
 800073e:	bf30      	wfi
  {
 8000740:	e7cc      	b.n	80006dc <main+0x4c>
 8000742:	bf00      	nop
 8000744:	200001fc 	.word	0x200001fc
 8000748:	0800ad84 	.word	0x0800ad84
 800074c:	0800ada4 	.word	0x0800ada4
 8000750:	0800adc0 	.word	0x0800adc0
 8000754:	0800adf0 	.word	0x0800adf0
 8000758:	2000023c 	.word	0x2000023c
 800075c:	20000224 	.word	0x20000224

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	@ 0x50
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0318 	add.w	r3, r7, #24
 800076a:	2238      	movs	r2, #56	@ 0x38
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f009 fafb 	bl	8009d6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000782:	2000      	movs	r0, #0
 8000784:	f002 fcb6 	bl	80030f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000788:	2321      	movs	r3, #33	@ 0x21
 800078a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800078c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000790:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000792:	2301      	movs	r3, #1
 8000794:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079a:	2303      	movs	r3, #3
 800079c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800079e:	2306      	movs	r3, #6
 80007a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007a2:	2355      	movs	r3, #85	@ 0x55
 80007a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b2:	f107 0318 	add.w	r3, r7, #24
 80007b6:	4618      	mov	r0, r3
 80007b8:	f002 fd50 	bl	800325c <HAL_RCC_OscConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007c2:	f000 f848 	bl	8000856 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c6:	230f      	movs	r3, #15
 80007c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ca:	2303      	movs	r3, #3
 80007cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2104      	movs	r1, #4
 80007de:	4618      	mov	r0, r3
 80007e0:	f003 f84e 	bl	8003880 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007ea:	f000 f834 	bl	8000856 <Error_Handler>
  }
}
 80007ee:	bf00      	nop
 80007f0:	3750      	adds	r7, #80	@ 0x50
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	af00      	add	r7, sp, #0
  /* USB_LP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2100      	movs	r1, #0
 80007fe:	2014      	movs	r0, #20
 8000800:	f000 fd9a 	bl	8001338 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8000804:	2014      	movs	r0, #20
 8000806:	f000 fdb1 	bl	800136c <HAL_NVIC_EnableIRQ>
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <HAL_TIMEx_CommutCallback>:
/**
 * @brief Callback de captura do TIM8 (Hall Interface)
 * @note Chamado automaticamente pelo HAL a cada transição Hall
 */
void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM8) {
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a04      	ldr	r2, [pc, #16]	@ (8000830 <HAL_TIMEx_CommutCallback+0x20>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d102      	bne.n	8000828 <HAL_TIMEx_CommutCallback+0x18>
        // ISR ultra rápida: apenas capturar dados
        Hall_TIM_CaptureCallback(&hall_sensor);
 8000822:	4804      	ldr	r0, [pc, #16]	@ (8000834 <HAL_TIMEx_CommutCallback+0x24>)
 8000824:	f7ff fef2 	bl	800060c <Hall_TIM_CaptureCallback>
    }
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40013400 	.word	0x40013400
 8000834:	200001fc 	.word	0x200001fc

08000838 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000848:	d101      	bne.n	800084e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800084a:	f000 fc7d 	bl	8001148 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085a:	b672      	cpsid	i
}
 800085c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085e:	bf00      	nop
 8000860:	e7fd      	b.n	800085e <Error_Handler+0x8>
	...

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <HAL_MspInit+0x44>)
 800086c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800086e:	4a0e      	ldr	r2, [pc, #56]	@ (80008a8 <HAL_MspInit+0x44>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6613      	str	r3, [r2, #96]	@ 0x60
 8000876:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <HAL_MspInit+0x44>)
 8000878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <HAL_MspInit+0x44>)
 8000884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000886:	4a08      	ldr	r2, [pc, #32]	@ (80008a8 <HAL_MspInit+0x44>)
 8000888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800088c:	6593      	str	r3, [r2, #88]	@ 0x58
 800088e:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <HAL_MspInit+0x44>)
 8000890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800089a:	f002 fccf 	bl	800323c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000

080008ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08c      	sub	sp, #48	@ 0x30
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80008bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000974 <HAL_InitTick+0xc8>)
 80008be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008c0:	4a2c      	ldr	r2, [pc, #176]	@ (8000974 <HAL_InitTick+0xc8>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80008c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000974 <HAL_InitTick+0xc8>)
 80008ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008d4:	f107 020c 	add.w	r2, r7, #12
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	4611      	mov	r1, r2
 80008de:	4618      	mov	r0, r3
 80008e0:	f003 f98e 	bl	8003c00 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008e4:	f003 f976 	bl	8003bd4 <HAL_RCC_GetPCLK1Freq>
 80008e8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008ec:	4a22      	ldr	r2, [pc, #136]	@ (8000978 <HAL_InitTick+0xcc>)
 80008ee:	fba2 2303 	umull	r2, r3, r2, r3
 80008f2:	0c9b      	lsrs	r3, r3, #18
 80008f4:	3b01      	subs	r3, #1
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80008f8:	4b20      	ldr	r3, [pc, #128]	@ (800097c <HAL_InitTick+0xd0>)
 80008fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008fe:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000900:	4b1e      	ldr	r3, [pc, #120]	@ (800097c <HAL_InitTick+0xd0>)
 8000902:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000906:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000908:	4a1c      	ldr	r2, [pc, #112]	@ (800097c <HAL_InitTick+0xd0>)
 800090a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800090c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800090e:	4b1b      	ldr	r3, [pc, #108]	@ (800097c <HAL_InitTick+0xd0>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000914:	4b19      	ldr	r3, [pc, #100]	@ (800097c <HAL_InitTick+0xd0>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 800091a:	4818      	ldr	r0, [pc, #96]	@ (800097c <HAL_InitTick+0xd0>)
 800091c:	f003 fc36 	bl	800418c <HAL_TIM_Base_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000926:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800092a:	2b00      	cmp	r3, #0
 800092c:	d11b      	bne.n	8000966 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800092e:	4813      	ldr	r0, [pc, #76]	@ (800097c <HAL_InitTick+0xd0>)
 8000930:	f003 fc84 	bl	800423c <HAL_TIM_Base_Start_IT>
 8000934:	4603      	mov	r3, r0
 8000936:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800093a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800093e:	2b00      	cmp	r3, #0
 8000940:	d111      	bne.n	8000966 <HAL_InitTick+0xba>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000942:	201c      	movs	r0, #28
 8000944:	f000 fd12 	bl	800136c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2b0f      	cmp	r3, #15
 800094c:	d808      	bhi.n	8000960 <HAL_InitTick+0xb4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800094e:	2200      	movs	r2, #0
 8000950:	6879      	ldr	r1, [r7, #4]
 8000952:	201c      	movs	r0, #28
 8000954:	f000 fcf0 	bl	8001338 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000958:	4a09      	ldr	r2, [pc, #36]	@ (8000980 <HAL_InitTick+0xd4>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6013      	str	r3, [r2, #0]
 800095e:	e002      	b.n	8000966 <HAL_InitTick+0xba>
      }
      else
      {
        status = HAL_ERROR;
 8000960:	2301      	movs	r3, #1
 8000962:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000966:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800096a:	4618      	mov	r0, r3
 800096c:	3730      	adds	r7, #48	@ 0x30
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000
 8000978:	431bde83 	.word	0x431bde83
 800097c:	20000240 	.word	0x20000240
 8000980:	20000004 	.word	0x20000004

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <NMI_Handler+0x4>

0800098c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <MemManage_Handler+0x4>

0800099c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <BusFault_Handler+0x4>

080009a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <UsageFault_Handler+0x4>

080009ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80009e8:	4802      	ldr	r0, [pc, #8]	@ (80009f4 <USB_HP_IRQHandler+0x10>)
 80009ea:	f000 ff71 	bl	80018d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20001984 	.word	0x20001984

080009f8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80009fc:	4802      	ldr	r0, [pc, #8]	@ (8000a08 <USB_LP_IRQHandler+0x10>)
 80009fe:	f000 ff67 	bl	80018d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20001984 	.word	0x20001984

08000a0c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a10:	4802      	ldr	r0, [pc, #8]	@ (8000a1c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a12:	f003 fcec 	bl	80043ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000290 	.word	0x20000290

08000a20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a24:	4802      	ldr	r0, [pc, #8]	@ (8000a30 <TIM2_IRQHandler+0x10>)
 8000a26:	f003 fce2 	bl	80043ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000240 	.word	0x20000240

08000a34 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000a38:	4802      	ldr	r0, [pc, #8]	@ (8000a44 <TIM8_CC_IRQHandler+0x10>)
 8000a3a:	f003 fcd8 	bl	80043ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200002dc 	.word	0x200002dc

08000a48 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	e00a      	b.n	8000a70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a5a:	f3af 8000 	nop.w
 8000a5e:	4601      	mov	r1, r0
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	1c5a      	adds	r2, r3, #1
 8000a64:	60ba      	str	r2, [r7, #8]
 8000a66:	b2ca      	uxtb	r2, r1
 8000a68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	dbf0      	blt.n	8000a5a <_read+0x12>
  }

  return len;
 8000a78:	687b      	ldr	r3, [r7, #4]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	e009      	b.n	8000aa8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	60ba      	str	r2, [r7, #8]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	dbf1      	blt.n	8000a94 <_write+0x12>
  }
  return len;
 8000ab0:	687b      	ldr	r3, [r7, #4]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_close>:

int _close(int file)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
 8000ada:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ae2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <_isatty>:

int _isatty(int file)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000afa:	2301      	movs	r3, #1
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b2c:	4a14      	ldr	r2, [pc, #80]	@ (8000b80 <_sbrk+0x5c>)
 8000b2e:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <_sbrk+0x60>)
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b38:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <_sbrk+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d102      	bne.n	8000b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b40:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <_sbrk+0x64>)
 8000b42:	4a12      	ldr	r2, [pc, #72]	@ (8000b8c <_sbrk+0x68>)
 8000b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b46:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <_sbrk+0x64>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d207      	bcs.n	8000b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b54:	f009 f958 	bl	8009e08 <__errno>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b62:	e009      	b.n	8000b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <_sbrk+0x64>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b6a:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <_sbrk+0x64>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	4a05      	ldr	r2, [pc, #20]	@ (8000b88 <_sbrk+0x64>)
 8000b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b76:	68fb      	ldr	r3, [r7, #12]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20020000 	.word	0x20020000
 8000b84:	00000400 	.word	0x00000400
 8000b88:	2000028c 	.word	0x2000028c
 8000b8c:	20001fd0 	.word	0x20001fd0

08000b90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <SystemInit+0x20>)
 8000b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b9a:	4a05      	ldr	r2, [pc, #20]	@ (8000bb0 <SystemInit+0x20>)
 8000b9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ba0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b09c      	sub	sp, #112	@ 0x70
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bba:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bd4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
 8000be4:	615a      	str	r2, [r3, #20]
 8000be6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2234      	movs	r2, #52	@ 0x34
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f009 f8bb 	bl	8009d6a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bf4:	4b53      	ldr	r3, [pc, #332]	@ (8000d44 <MX_TIM1_Init+0x190>)
 8000bf6:	4a54      	ldr	r2, [pc, #336]	@ (8000d48 <MX_TIM1_Init+0x194>)
 8000bf8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bfa:	4b52      	ldr	r3, [pc, #328]	@ (8000d44 <MX_TIM1_Init+0x190>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000c00:	4b50      	ldr	r3, [pc, #320]	@ (8000d44 <MX_TIM1_Init+0x190>)
 8000c02:	2220      	movs	r2, #32
 8000c04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4249;
 8000c06:	4b4f      	ldr	r3, [pc, #316]	@ (8000d44 <MX_TIM1_Init+0x190>)
 8000c08:	f241 0299 	movw	r2, #4249	@ 0x1099
 8000c0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0e:	4b4d      	ldr	r3, [pc, #308]	@ (8000d44 <MX_TIM1_Init+0x190>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c14:	4b4b      	ldr	r3, [pc, #300]	@ (8000d44 <MX_TIM1_Init+0x190>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c1a:	4b4a      	ldr	r3, [pc, #296]	@ (8000d44 <MX_TIM1_Init+0x190>)
 8000c1c:	2280      	movs	r2, #128	@ 0x80
 8000c1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c20:	4848      	ldr	r0, [pc, #288]	@ (8000d44 <MX_TIM1_Init+0x190>)
 8000c22:	f003 fab3 	bl	800418c <HAL_TIM_Base_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000c2c:	f7ff fe13 	bl	8000856 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c34:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c36:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4841      	ldr	r0, [pc, #260]	@ (8000d44 <MX_TIM1_Init+0x190>)
 8000c3e:	f003 fe39 	bl	80048b4 <HAL_TIM_ConfigClockSource>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000c48:	f7ff fe05 	bl	8000856 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c4c:	483d      	ldr	r0, [pc, #244]	@ (8000d44 <MX_TIM1_Init+0x190>)
 8000c4e:	f003 fb6d 	bl	800432c <HAL_TIM_PWM_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000c58:	f7ff fdfd 	bl	8000856 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c60:	2300      	movs	r3, #0
 8000c62:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c68:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4835      	ldr	r0, [pc, #212]	@ (8000d44 <MX_TIM1_Init+0x190>)
 8000c70:	f004 fdbe 	bl	80057f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000c7a:	f7ff fdec 	bl	8000856 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c7e:	2360      	movs	r3, #96	@ 0x60
 8000c80:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c86:	2300      	movs	r3, #0
 8000c88:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c92:	2300      	movs	r3, #0
 8000c94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c96:	2300      	movs	r3, #0
 8000c98:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c9a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4828      	ldr	r0, [pc, #160]	@ (8000d44 <MX_TIM1_Init+0x190>)
 8000ca4:	f003 fcf2 	bl	800468c <HAL_TIM_PWM_ConfigChannel>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000cae:	f7ff fdd2 	bl	8000856 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cb2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cb6:	2204      	movs	r2, #4
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4822      	ldr	r0, [pc, #136]	@ (8000d44 <MX_TIM1_Init+0x190>)
 8000cbc:	f003 fce6 	bl	800468c <HAL_TIM_PWM_ConfigChannel>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000cc6:	f7ff fdc6 	bl	8000856 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cce:	2208      	movs	r2, #8
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	481c      	ldr	r0, [pc, #112]	@ (8000d44 <MX_TIM1_Init+0x190>)
 8000cd4:	f003 fcda 	bl	800468c <HAL_TIM_PWM_ConfigChannel>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000cde:	f7ff fdba 	bl	8000856 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000ce2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ce6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000ce8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 5;
 8000cf2:	2305      	movs	r3, #5
 8000cf4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cfa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cfe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d04:	2300      	movs	r3, #0
 8000d06:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d10:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d16:	2300      	movs	r3, #0
 8000d18:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000d1a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d1e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	4619      	mov	r1, r3
 8000d24:	4807      	ldr	r0, [pc, #28]	@ (8000d44 <MX_TIM1_Init+0x190>)
 8000d26:	f004 fdf9 	bl	800591c <HAL_TIMEx_ConfigBreakDeadTime>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM1_Init+0x180>
  {
    Error_Handler();
 8000d30:	f7ff fd91 	bl	8000856 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d34:	4803      	ldr	r0, [pc, #12]	@ (8000d44 <MX_TIM1_Init+0x190>)
 8000d36:	f000 f8ef 	bl	8000f18 <HAL_TIM_MspPostInit>

}
 8000d3a:	bf00      	nop
 8000d3c:	3770      	adds	r7, #112	@ 0x70
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000290 	.word	0x20000290
 8000d48:	40012c00 	.word	0x40012c00

08000d4c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08c      	sub	sp, #48	@ 0x30
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d52:	f107 0320 	add.w	r3, r7, #32
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000d78:	4b29      	ldr	r3, [pc, #164]	@ (8000e20 <MX_TIM8_Init+0xd4>)
 8000d7a:	4a2a      	ldr	r2, [pc, #168]	@ (8000e24 <MX_TIM8_Init+0xd8>)
 8000d7c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 8000d7e:	4b28      	ldr	r3, [pc, #160]	@ (8000e20 <MX_TIM8_Init+0xd4>)
 8000d80:	22a9      	movs	r2, #169	@ 0xa9
 8000d82:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d84:	4b26      	ldr	r3, [pc, #152]	@ (8000e20 <MX_TIM8_Init+0xd4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000d8a:	4b25      	ldr	r3, [pc, #148]	@ (8000e20 <MX_TIM8_Init+0xd4>)
 8000d8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d90:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d92:	4b23      	ldr	r3, [pc, #140]	@ (8000e20 <MX_TIM8_Init+0xd4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000d98:	4b21      	ldr	r3, [pc, #132]	@ (8000e20 <MX_TIM8_Init+0xd4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9e:	4b20      	ldr	r3, [pc, #128]	@ (8000e20 <MX_TIM8_Init+0xd4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000da4:	481e      	ldr	r0, [pc, #120]	@ (8000e20 <MX_TIM8_Init+0xd4>)
 8000da6:	f003 f9f1 	bl	800418c <HAL_TIM_Base_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8000db0:	f7ff fd51 	bl	8000856 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000db8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000dba:	f107 0320 	add.w	r3, r7, #32
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4817      	ldr	r0, [pc, #92]	@ (8000e20 <MX_TIM8_Init+0xd4>)
 8000dc2:	f003 fd77 	bl	80048b4 <HAL_TIM_ConfigClockSource>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000dcc:	f7ff fd43 	bl	8000856 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim8, &sConfig) != HAL_OK)
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	4619      	mov	r1, r3
 8000de6:	480e      	ldr	r0, [pc, #56]	@ (8000e20 <MX_TIM8_Init+0xd4>)
 8000de8:	f004 fbab 	bl	8005542 <HAL_TIMEx_HallSensor_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8000df2:	f7ff fd30 	bl	8000856 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000df6:	2350      	movs	r3, #80	@ 0x50
 8000df8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	4619      	mov	r1, r3
 8000e06:	4806      	ldr	r0, [pc, #24]	@ (8000e20 <MX_TIM8_Init+0xd4>)
 8000e08:	f004 fcf2 	bl	80057f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000e12:	f7ff fd20 	bl	8000856 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000e16:	bf00      	nop
 8000e18:	3730      	adds	r7, #48	@ 0x30
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200002dc 	.word	0x200002dc
 8000e24:	40013400 	.word	0x40013400

08000e28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	@ 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a30      	ldr	r2, [pc, #192]	@ (8000f08 <HAL_TIM_Base_MspInit+0xe0>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d114      	bne.n	8000e74 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e4a:	4b30      	ldr	r3, [pc, #192]	@ (8000f0c <HAL_TIM_Base_MspInit+0xe4>)
 8000e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e4e:	4a2f      	ldr	r2, [pc, #188]	@ (8000f0c <HAL_TIM_Base_MspInit+0xe4>)
 8000e50:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e54:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e56:	4b2d      	ldr	r3, [pc, #180]	@ (8000f0c <HAL_TIM_Base_MspInit+0xe4>)
 8000e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	2019      	movs	r0, #25
 8000e68:	f000 fa66 	bl	8001338 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000e6c:	2019      	movs	r0, #25
 8000e6e:	f000 fa7d 	bl	800136c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000e72:	e045      	b.n	8000f00 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM8)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a25      	ldr	r2, [pc, #148]	@ (8000f10 <HAL_TIM_Base_MspInit+0xe8>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d140      	bne.n	8000f00 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000e7e:	4b23      	ldr	r3, [pc, #140]	@ (8000f0c <HAL_TIM_Base_MspInit+0xe4>)
 8000e80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e82:	4a22      	ldr	r2, [pc, #136]	@ (8000f0c <HAL_TIM_Base_MspInit+0xe4>)
 8000e84:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e88:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e8a:	4b20      	ldr	r3, [pc, #128]	@ (8000f0c <HAL_TIM_Base_MspInit+0xe4>)
 8000e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e96:	4b1d      	ldr	r3, [pc, #116]	@ (8000f0c <HAL_TIM_Base_MspInit+0xe4>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f0c <HAL_TIM_Base_MspInit+0xe4>)
 8000e9c:	f043 0302 	orr.w	r3, r3, #2
 8000ea0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f0c <HAL_TIM_Base_MspInit+0xe4>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HALL_A_Pin;
 8000eae:	2340      	movs	r3, #64	@ 0x40
 8000eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8000ebe:	2305      	movs	r3, #5
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(HALL_A_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4812      	ldr	r0, [pc, #72]	@ (8000f14 <HAL_TIM_Base_MspInit+0xec>)
 8000eca:	f000 fa5d 	bl	8001388 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HALL_B_Pin|HALL_C_Pin;
 8000ece:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8000ee0:	230a      	movs	r3, #10
 8000ee2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	480a      	ldr	r0, [pc, #40]	@ (8000f14 <HAL_TIM_Base_MspInit+0xec>)
 8000eec:	f000 fa4c 	bl	8001388 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 2, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2102      	movs	r1, #2
 8000ef4:	202e      	movs	r0, #46	@ 0x2e
 8000ef6:	f000 fa1f 	bl	8001338 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8000efa:	202e      	movs	r0, #46	@ 0x2e
 8000efc:	f000 fa36 	bl	800136c <HAL_NVIC_EnableIRQ>
}
 8000f00:	bf00      	nop
 8000f02:	3728      	adds	r7, #40	@ 0x28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40012c00 	.word	0x40012c00
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40013400 	.word	0x40013400
 8000f14:	48000400 	.word	0x48000400

08000f18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	@ 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a29      	ldr	r2, [pc, #164]	@ (8000fdc <HAL_TIM_MspPostInit+0xc4>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d14b      	bne.n	8000fd2 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	4b29      	ldr	r3, [pc, #164]	@ (8000fe0 <HAL_TIM_MspPostInit+0xc8>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3e:	4a28      	ldr	r2, [pc, #160]	@ (8000fe0 <HAL_TIM_MspPostInit+0xc8>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f46:	4b26      	ldr	r3, [pc, #152]	@ (8000fe0 <HAL_TIM_MspPostInit+0xc8>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	4b23      	ldr	r3, [pc, #140]	@ (8000fe0 <HAL_TIM_MspPostInit+0xc8>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f56:	4a22      	ldr	r2, [pc, #136]	@ (8000fe0 <HAL_TIM_MspPostInit+0xc8>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f5e:	4b20      	ldr	r3, [pc, #128]	@ (8000fe0 <HAL_TIM_MspPostInit+0xc8>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PA_LIN_Pin|PB_LIN_Pin;
 8000f6a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f74:	2302      	movs	r3, #2
 8000f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000f7c:	2306      	movs	r3, #6
 8000f7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	4817      	ldr	r0, [pc, #92]	@ (8000fe4 <HAL_TIM_MspPostInit+0xcc>)
 8000f88:	f000 f9fe 	bl	8001388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PC_LIN_Pin;
 8000f8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f96:	2302      	movs	r3, #2
 8000f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PC_LIN_GPIO_Port, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	480e      	ldr	r0, [pc, #56]	@ (8000fe4 <HAL_TIM_MspPostInit+0xcc>)
 8000faa:	f000 f9ed 	bl	8001388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PA_HIN_Pin|PB_HIN_Pin|PC_HIN_Pin;
 8000fae:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000fc0:	2306      	movs	r3, #6
 8000fc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fce:	f000 f9db 	bl	8001388 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000fd2:	bf00      	nop
 8000fd4:	3728      	adds	r7, #40	@ 0x28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40012c00 	.word	0x40012c00
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	48000400 	.word	0x48000400

08000fe8 <USB_Comm_Init>:
static uint8_t usb_rx_buffer[128];
static uint8_t rx_index = 0;

/* ========== PUBLIC FUNCTIONS ========== */

void USB_Comm_Init(void) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
    rx_index = 0;
 8000fec:	4b07      	ldr	r3, [pc, #28]	@ (800100c <USB_Comm_Init+0x24>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
    memset(usb_tx_buffer, 0, sizeof(usb_tx_buffer));
 8000ff2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4805      	ldr	r0, [pc, #20]	@ (8001010 <USB_Comm_Init+0x28>)
 8000ffa:	f008 feb6 	bl	8009d6a <memset>
    memset(usb_rx_buffer, 0, sizeof(usb_rx_buffer));
 8000ffe:	2280      	movs	r2, #128	@ 0x80
 8001000:	2100      	movs	r1, #0
 8001002:	4804      	ldr	r0, [pc, #16]	@ (8001014 <USB_Comm_Init+0x2c>)
 8001004:	f008 feb1 	bl	8009d6a <memset>
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200004a8 	.word	0x200004a8
 8001010:	20000328 	.word	0x20000328
 8001014:	20000428 	.word	0x20000428

08001018 <USB_Comm_SendTelemetry>:

void USB_Comm_SendTelemetry(Telemetry_t* telem) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af04      	add	r7, sp, #16
 800101e:	6078      	str	r0, [r7, #4]
    // Formato CSV simplificado - usando inteiros para evitar problema com float/printf
    // Ang e Vel multiplicados por 100 para manter 2 casas decimais
    int32_t ang_int = (int32_t)(telem->hall_angle * 100.0f);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	edd3 7a01 	vldr	s15, [r3, #4]
 8001026:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001094 <USB_Comm_SendTelemetry+0x7c>
 800102a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800102e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001032:	ee17 3a90 	vmov	r3, s15
 8001036:	60fb      	str	r3, [r7, #12]
    int32_t vel_int = (int32_t)(telem->hall_velocity * 10.0f);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	edd3 7a02 	vldr	s15, [r3, #8]
 800103e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001046:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800104a:	ee17 3a90 	vmov	r3, s15
 800104e:	60bb      	str	r3, [r7, #8]
    
    snprintf(usb_tx_buffer, sizeof(usb_tx_buffer),
             "H:%d,Ang:%ld,Vel:%ld,ISR:%lu,Time:%lu\r\n",
             telem->hall_state,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	781b      	ldrb	r3, [r3, #0]
    snprintf(usb_tx_buffer, sizeof(usb_tx_buffer),
 8001054:	4619      	mov	r1, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	6912      	ldr	r2, [r2, #16]
 800105e:	9203      	str	r2, [sp, #12]
 8001060:	9302      	str	r3, [sp, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	9301      	str	r3, [sp, #4]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	460b      	mov	r3, r1
 800106c:	4a0a      	ldr	r2, [pc, #40]	@ (8001098 <USB_Comm_SendTelemetry+0x80>)
 800106e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001072:	480a      	ldr	r0, [pc, #40]	@ (800109c <USB_Comm_SendTelemetry+0x84>)
 8001074:	f008 fe00 	bl	8009c78 <sniprintf>
             ang_int,      // Ângulo x100 (ex: 1.05 rad -> 105)
             vel_int,      // Velocidade x10 (ex: 123.4 eRPM -> 1234)
             telem->isr_counter,  // DEBUG: contador de ISR
             telem->uptime_ms);
    
    CDC_Transmit_FS((uint8_t*)usb_tx_buffer, strlen(usb_tx_buffer));
 8001078:	4808      	ldr	r0, [pc, #32]	@ (800109c <USB_Comm_SendTelemetry+0x84>)
 800107a:	f7ff f8d1 	bl	8000220 <strlen>
 800107e:	4603      	mov	r3, r0
 8001080:	b29b      	uxth	r3, r3
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	@ (800109c <USB_Comm_SendTelemetry+0x84>)
 8001086:	f008 f8cf 	bl	8009228 <CDC_Transmit_FS>
}
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	42c80000 	.word	0x42c80000
 8001098:	0800ae1c 	.word	0x0800ae1c
 800109c:	20000328 	.word	0x20000328

080010a0 <USB_Comm_Print>:

void USB_Comm_Print(const char* str) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
    CDC_Transmit_FS((uint8_t*)str, strlen(str));
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff f8b9 	bl	8000220 <strlen>
 80010ae:	4603      	mov	r3, r0
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	4619      	mov	r1, r3
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f008 f8b7 	bl	8009228 <CDC_Transmit_FS>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010c4:	480d      	ldr	r0, [pc, #52]	@ (80010fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010c6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80010c8:	f7ff fd62 	bl	8000b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010cc:	480c      	ldr	r0, [pc, #48]	@ (8001100 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ce:	490d      	ldr	r1, [pc, #52]	@ (8001104 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001108 <LoopForever+0xe>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80010d4:	e002      	b.n	80010dc <LoopCopyDataInit>

080010d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010da:	3304      	adds	r3, #4

080010dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e0:	d3f9      	bcc.n	80010d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e2:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <LoopForever+0x12>)
  ldr r4, =_ebss
 80010e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001110 <LoopForever+0x16>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e8:	e001      	b.n	80010ee <LoopFillZerobss>

080010ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ec:	3204      	adds	r2, #4

080010ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f0:	d3fb      	bcc.n	80010ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010f2:	f008 fe8f 	bl	8009e14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010f6:	f7ff facb 	bl	8000690 <main>

080010fa <LoopForever>:

LoopForever:
    b LoopForever
 80010fa:	e7fe      	b.n	80010fa <LoopForever>
  ldr   r0, =_estack
 80010fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001104:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001108:	0800af80 	.word	0x0800af80
  ldr r2, =_sbss
 800110c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001110:	20001fcc 	.word	0x20001fcc

08001114 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC1_2_IRQHandler>

08001116 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001120:	2003      	movs	r0, #3
 8001122:	f000 f8fe 	bl	8001322 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001126:	200f      	movs	r0, #15
 8001128:	f7ff fbc0 	bl	80008ac <HAL_InitTick>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d002      	beq.n	8001138 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	71fb      	strb	r3, [r7, #7]
 8001136:	e001      	b.n	800113c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001138:	f7ff fb94 	bl	8000864 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800113c:	79fb      	ldrb	r3, [r7, #7]

}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800114c:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <HAL_IncTick+0x1c>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <HAL_IncTick+0x20>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4413      	add	r3, r2
 8001156:	4a03      	ldr	r2, [pc, #12]	@ (8001164 <HAL_IncTick+0x1c>)
 8001158:	6013      	str	r3, [r2, #0]
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	200004ac 	.word	0x200004ac
 8001168:	20000008 	.word	0x20000008

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b03      	ldr	r3, [pc, #12]	@ (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	200004ac 	.word	0x200004ac

08001184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff ffee 	bl	800116c <HAL_GetTick>
 8001190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800119c:	d004      	beq.n	80011a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800119e:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <HAL_Delay+0x40>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	4413      	add	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011a8:	bf00      	nop
 80011aa:	f7ff ffdf 	bl	800116c <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d8f7      	bhi.n	80011aa <HAL_Delay+0x26>
  {
  }
}
 80011ba:	bf00      	nop
 80011bc:	bf00      	nop
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000008 	.word	0x20000008

080011c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d8:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011e4:	4013      	ands	r3, r2
 80011e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fa:	4a04      	ldr	r2, [pc, #16]	@ (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	60d3      	str	r3, [r2, #12]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001214:	4b04      	ldr	r3, [pc, #16]	@ (8001228 <__NVIC_GetPriorityGrouping+0x18>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	0a1b      	lsrs	r3, r3, #8
 800121a:	f003 0307 	and.w	r3, r3, #7
}
 800121e:	4618      	mov	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	db0b      	blt.n	8001256 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	f003 021f 	and.w	r2, r3, #31
 8001244:	4907      	ldr	r1, [pc, #28]	@ (8001264 <__NVIC_EnableIRQ+0x38>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	095b      	lsrs	r3, r3, #5
 800124c:	2001      	movs	r0, #1
 800124e:	fa00 f202 	lsl.w	r2, r0, r2
 8001252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000e100 	.word	0xe000e100

08001268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	db0a      	blt.n	8001292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	490c      	ldr	r1, [pc, #48]	@ (80012b4 <__NVIC_SetPriority+0x4c>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	0112      	lsls	r2, r2, #4
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	440b      	add	r3, r1
 800128c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001290:	e00a      	b.n	80012a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4908      	ldr	r1, [pc, #32]	@ (80012b8 <__NVIC_SetPriority+0x50>)
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	3b04      	subs	r3, #4
 80012a0:	0112      	lsls	r2, r2, #4
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	440b      	add	r3, r1
 80012a6:	761a      	strb	r2, [r3, #24]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000e100 	.word	0xe000e100
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	@ 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f1c3 0307 	rsb	r3, r3, #7
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	bf28      	it	cs
 80012da:	2304      	movcs	r3, #4
 80012dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3304      	adds	r3, #4
 80012e2:	2b06      	cmp	r3, #6
 80012e4:	d902      	bls.n	80012ec <NVIC_EncodePriority+0x30>
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3b03      	subs	r3, #3
 80012ea:	e000      	b.n	80012ee <NVIC_EncodePriority+0x32>
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43da      	mvns	r2, r3
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	401a      	ands	r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001304:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	43d9      	mvns	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	4313      	orrs	r3, r2
         );
}
 8001316:	4618      	mov	r0, r3
 8001318:	3724      	adds	r7, #36	@ 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ff4c 	bl	80011c8 <__NVIC_SetPriorityGrouping>
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
 8001344:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001346:	f7ff ff63 	bl	8001210 <__NVIC_GetPriorityGrouping>
 800134a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	68b9      	ldr	r1, [r7, #8]
 8001350:	6978      	ldr	r0, [r7, #20]
 8001352:	f7ff ffb3 	bl	80012bc <NVIC_EncodePriority>
 8001356:	4602      	mov	r2, r0
 8001358:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135c:	4611      	mov	r1, r2
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ff82 	bl	8001268 <__NVIC_SetPriority>
}
 8001364:	bf00      	nop
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff ff56 	bl	800122c <__NVIC_EnableIRQ>
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001388:	b480      	push	{r7}
 800138a:	b087      	sub	sp, #28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001396:	e15a      	b.n	800164e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	2101      	movs	r1, #1
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	fa01 f303 	lsl.w	r3, r1, r3
 80013a4:	4013      	ands	r3, r2
 80013a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f000 814c 	beq.w	8001648 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d005      	beq.n	80013c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d130      	bne.n	800142a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	2203      	movs	r2, #3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	68da      	ldr	r2, [r3, #12]
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013fe:	2201      	movs	r2, #1
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	f003 0201 	and.w	r2, r3, #1
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	2b03      	cmp	r3, #3
 8001434:	d017      	beq.n	8001466 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	2203      	movs	r2, #3
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d123      	bne.n	80014ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	08da      	lsrs	r2, r3, #3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3208      	adds	r2, #8
 800147a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800147e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	220f      	movs	r2, #15
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	691a      	ldr	r2, [r3, #16]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	08da      	lsrs	r2, r3, #3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3208      	adds	r2, #8
 80014b4:	6939      	ldr	r1, [r7, #16]
 80014b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	2203      	movs	r2, #3
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0203 	and.w	r2, r3, #3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 80a6 	beq.w	8001648 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fc:	4b5b      	ldr	r3, [pc, #364]	@ (800166c <HAL_GPIO_Init+0x2e4>)
 80014fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001500:	4a5a      	ldr	r2, [pc, #360]	@ (800166c <HAL_GPIO_Init+0x2e4>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6613      	str	r3, [r2, #96]	@ 0x60
 8001508:	4b58      	ldr	r3, [pc, #352]	@ (800166c <HAL_GPIO_Init+0x2e4>)
 800150a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001514:	4a56      	ldr	r2, [pc, #344]	@ (8001670 <HAL_GPIO_Init+0x2e8>)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	3302      	adds	r3, #2
 800151c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800153e:	d01f      	beq.n	8001580 <HAL_GPIO_Init+0x1f8>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a4c      	ldr	r2, [pc, #304]	@ (8001674 <HAL_GPIO_Init+0x2ec>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d019      	beq.n	800157c <HAL_GPIO_Init+0x1f4>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a4b      	ldr	r2, [pc, #300]	@ (8001678 <HAL_GPIO_Init+0x2f0>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d013      	beq.n	8001578 <HAL_GPIO_Init+0x1f0>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a4a      	ldr	r2, [pc, #296]	@ (800167c <HAL_GPIO_Init+0x2f4>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d00d      	beq.n	8001574 <HAL_GPIO_Init+0x1ec>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a49      	ldr	r2, [pc, #292]	@ (8001680 <HAL_GPIO_Init+0x2f8>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d007      	beq.n	8001570 <HAL_GPIO_Init+0x1e8>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a48      	ldr	r2, [pc, #288]	@ (8001684 <HAL_GPIO_Init+0x2fc>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d101      	bne.n	800156c <HAL_GPIO_Init+0x1e4>
 8001568:	2305      	movs	r3, #5
 800156a:	e00a      	b.n	8001582 <HAL_GPIO_Init+0x1fa>
 800156c:	2306      	movs	r3, #6
 800156e:	e008      	b.n	8001582 <HAL_GPIO_Init+0x1fa>
 8001570:	2304      	movs	r3, #4
 8001572:	e006      	b.n	8001582 <HAL_GPIO_Init+0x1fa>
 8001574:	2303      	movs	r3, #3
 8001576:	e004      	b.n	8001582 <HAL_GPIO_Init+0x1fa>
 8001578:	2302      	movs	r3, #2
 800157a:	e002      	b.n	8001582 <HAL_GPIO_Init+0x1fa>
 800157c:	2301      	movs	r3, #1
 800157e:	e000      	b.n	8001582 <HAL_GPIO_Init+0x1fa>
 8001580:	2300      	movs	r3, #0
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	f002 0203 	and.w	r2, r2, #3
 8001588:	0092      	lsls	r2, r2, #2
 800158a:	4093      	lsls	r3, r2
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001592:	4937      	ldr	r1, [pc, #220]	@ (8001670 <HAL_GPIO_Init+0x2e8>)
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	089b      	lsrs	r3, r3, #2
 8001598:	3302      	adds	r3, #2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015a0:	4b39      	ldr	r3, [pc, #228]	@ (8001688 <HAL_GPIO_Init+0x300>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015c4:	4a30      	ldr	r2, [pc, #192]	@ (8001688 <HAL_GPIO_Init+0x300>)
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001688 <HAL_GPIO_Init+0x300>)
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015ee:	4a26      	ldr	r2, [pc, #152]	@ (8001688 <HAL_GPIO_Init+0x300>)
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80015f4:	4b24      	ldr	r3, [pc, #144]	@ (8001688 <HAL_GPIO_Init+0x300>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001618:	4a1b      	ldr	r2, [pc, #108]	@ (8001688 <HAL_GPIO_Init+0x300>)
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800161e:	4b1a      	ldr	r3, [pc, #104]	@ (8001688 <HAL_GPIO_Init+0x300>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	43db      	mvns	r3, r3
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	4013      	ands	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001642:	4a11      	ldr	r2, [pc, #68]	@ (8001688 <HAL_GPIO_Init+0x300>)
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	3301      	adds	r3, #1
 800164c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	fa22 f303 	lsr.w	r3, r2, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	f47f ae9d 	bne.w	8001398 <HAL_GPIO_Init+0x10>
  }
}
 800165e:	bf00      	nop
 8001660:	bf00      	nop
 8001662:	371c      	adds	r7, #28
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	40021000 	.word	0x40021000
 8001670:	40010000 	.word	0x40010000
 8001674:	48000400 	.word	0x48000400
 8001678:	48000800 	.word	0x48000800
 800167c:	48000c00 	.word	0x48000c00
 8001680:	48001000 	.word	0x48001000
 8001684:	48001400 	.word	0x48001400
 8001688:	40010400 	.word	0x40010400

0800168c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	807b      	strh	r3, [r7, #2]
 8001698:	4613      	mov	r3, r2
 800169a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800169c:	787b      	ldrb	r3, [r7, #1]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016a2:	887a      	ldrh	r2, [r7, #2]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016a8:	e002      	b.n	80016b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016aa:	887a      	ldrh	r2, [r7, #2]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4013      	ands	r3, r2
 80016d4:	041a      	lsls	r2, r3, #16
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	43d9      	mvns	r1, r3
 80016da:	887b      	ldrh	r3, [r7, #2]
 80016dc:	400b      	ands	r3, r1
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	619a      	str	r2, [r3, #24]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e0c0      	b.n	8001884 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d106      	bne.n	800171c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f007 fece 	bl	80094b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2203      	movs	r2, #3
 8001720:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f004 f9de 	bl	8005aea <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800172e:	2300      	movs	r3, #0
 8001730:	73fb      	strb	r3, [r7, #15]
 8001732:	e03e      	b.n	80017b2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001734:	7bfa      	ldrb	r2, [r7, #15]
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	440b      	add	r3, r1
 8001742:	3311      	adds	r3, #17
 8001744:	2201      	movs	r2, #1
 8001746:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001748:	7bfa      	ldrb	r2, [r7, #15]
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	440b      	add	r3, r1
 8001756:	3310      	adds	r3, #16
 8001758:	7bfa      	ldrb	r2, [r7, #15]
 800175a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800175c:	7bfa      	ldrb	r2, [r7, #15]
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	440b      	add	r3, r1
 800176a:	3313      	adds	r3, #19
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001770:	7bfa      	ldrb	r2, [r7, #15]
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	440b      	add	r3, r1
 800177e:	3320      	adds	r3, #32
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001784:	7bfa      	ldrb	r2, [r7, #15]
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	3324      	adds	r3, #36	@ 0x24
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	440b      	add	r3, r1
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	3301      	adds	r3, #1
 80017b0:	73fb      	strb	r3, [r7, #15]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	791b      	ldrb	r3, [r3, #4]
 80017b6:	7bfa      	ldrb	r2, [r7, #15]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d3bb      	bcc.n	8001734 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017bc:	2300      	movs	r3, #0
 80017be:	73fb      	strb	r3, [r7, #15]
 80017c0:	e044      	b.n	800184c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017c2:	7bfa      	ldrb	r2, [r7, #15]
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	440b      	add	r3, r1
 80017d0:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017d8:	7bfa      	ldrb	r2, [r7, #15]
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	440b      	add	r3, r1
 80017e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80017ea:	7bfa      	ldrb	r2, [r7, #15]
 80017ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017ee:	7bfa      	ldrb	r2, [r7, #15]
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	440b      	add	r3, r1
 80017fc:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001804:	7bfa      	ldrb	r2, [r7, #15]
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	440b      	add	r3, r1
 8001812:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800181a:	7bfa      	ldrb	r2, [r7, #15]
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	440b      	add	r3, r1
 8001828:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001830:	7bfa      	ldrb	r2, [r7, #15]
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	440b      	add	r3, r1
 800183e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	3301      	adds	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	791b      	ldrb	r3, [r3, #4]
 8001850:	7bfa      	ldrb	r2, [r7, #15]
 8001852:	429a      	cmp	r2, r3
 8001854:	d3b5      	bcc.n	80017c2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6818      	ldr	r0, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3304      	adds	r3, #4
 800185e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001862:	f004 f95d 	bl	8005b20 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	7a9b      	ldrb	r3, [r3, #10]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d102      	bne.n	8001882 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f001 fc0e 	bl	800309e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800189a:	2b01      	cmp	r3, #1
 800189c:	d101      	bne.n	80018a2 <HAL_PCD_Start+0x16>
 800189e:	2302      	movs	r3, #2
 80018a0:	e012      	b.n	80018c8 <HAL_PCD_Start+0x3c>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f004 f904 	bl	8005abc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f005 fee1 	bl	8007680 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f005 fee6 	bl	80076ae <USB_ReadInterrupts>
 80018e2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 fb06 	bl	8001f00 <PCD_EP_ISR_Handler>

    return;
 80018f4:	e110      	b.n	8001b18 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d013      	beq.n	8001928 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001908:	b29a      	uxth	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001912:	b292      	uxth	r2, r2
 8001914:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f007 fe5e 	bl	80095da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800191e:	2100      	movs	r1, #0
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f8fc 	bl	8001b1e <HAL_PCD_SetAddress>

    return;
 8001926:	e0f7      	b.n	8001b18 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00c      	beq.n	800194c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800193a:	b29a      	uxth	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001944:	b292      	uxth	r2, r2
 8001946:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800194a:	e0e5      	b.n	8001b18 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00c      	beq.n	8001970 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800195e:	b29a      	uxth	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001968:	b292      	uxth	r2, r2
 800196a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800196e:	e0d3      	b.n	8001b18 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d034      	beq.n	80019e4 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001982:	b29a      	uxth	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0204 	bic.w	r2, r2, #4
 800198c:	b292      	uxth	r2, r2
 800198e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800199a:	b29a      	uxth	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 0208 	bic.w	r2, r2, #8
 80019a4:	b292      	uxth	r2, r2
 80019a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d107      	bne.n	80019c4 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019bc:	2100      	movs	r1, #0
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f007 fffe 	bl	80099c0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f007 fe41 	bl	800964c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80019dc:	b292      	uxth	r2, r2
 80019de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80019e2:	e099      	b.n	8001b18 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d027      	beq.n	8001a3e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f042 0208 	orr.w	r2, r2, #8
 8001a00:	b292      	uxth	r2, r2
 8001a02:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a18:	b292      	uxth	r2, r2
 8001a1a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f042 0204 	orr.w	r2, r2, #4
 8001a30:	b292      	uxth	r2, r2
 8001a32:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f007 fdee 	bl	8009618 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001a3c:	e06c      	b.n	8001b18 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d040      	beq.n	8001aca <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a5a:	b292      	uxth	r2, r2
 8001a5c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d12b      	bne.n	8001ac2 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0204 	orr.w	r2, r2, #4
 8001a7c:	b292      	uxth	r2, r2
 8001a7e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f042 0208 	orr.w	r2, r2, #8
 8001a94:	b292      	uxth	r2, r2
 8001a96:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001ab8:	2101      	movs	r1, #1
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f007 ff80 	bl	80099c0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001ac0:	e02a      	b.n	8001b18 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f007 fda8 	bl	8009618 <HAL_PCD_SuspendCallback>
    return;
 8001ac8:	e026      	b.n	8001b18 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00f      	beq.n	8001af4 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ae6:	b292      	uxth	r2, r2
 8001ae8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f007 fd66 	bl	80095be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001af2:	e011      	b.n	8001b18 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00c      	beq.n	8001b18 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b10:	b292      	uxth	r2, r2
 8001b12:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001b16:	bf00      	nop
  }
}
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	460b      	mov	r3, r1
 8001b28:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d101      	bne.n	8001b38 <HAL_PCD_SetAddress+0x1a>
 8001b34:	2302      	movs	r3, #2
 8001b36:	e012      	b.n	8001b5e <HAL_PCD_SetAddress+0x40>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	78fa      	ldrb	r2, [r7, #3]
 8001b44:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	78fa      	ldrb	r2, [r7, #3]
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f005 fd82 	bl	8007658 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b084      	sub	sp, #16
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	4608      	mov	r0, r1
 8001b70:	4611      	mov	r1, r2
 8001b72:	461a      	mov	r2, r3
 8001b74:	4603      	mov	r3, r0
 8001b76:	70fb      	strb	r3, [r7, #3]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	803b      	strh	r3, [r7, #0]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	da0e      	bge.n	8001baa <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b8c:	78fb      	ldrb	r3, [r7, #3]
 8001b8e:	f003 0207 	and.w	r2, r3, #7
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	3310      	adds	r3, #16
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	705a      	strb	r2, [r3, #1]
 8001ba8:	e00e      	b.n	8001bc8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001baa:	78fb      	ldrb	r3, [r7, #3]
 8001bac:	f003 0207 	and.w	r2, r3, #7
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001bc8:	78fb      	ldrb	r3, [r7, #3]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001bd4:	883b      	ldrh	r3, [r7, #0]
 8001bd6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	78ba      	ldrb	r2, [r7, #2]
 8001be2:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001be4:	78bb      	ldrb	r3, [r7, #2]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d102      	bne.n	8001bf0 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d101      	bne.n	8001bfe <HAL_PCD_EP_Open+0x98>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e00e      	b.n	8001c1c <HAL_PCD_EP_Open+0xb6>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68f9      	ldr	r1, [r7, #12]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f003 ffa5 	bl	8005b5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001c1a:	7afb      	ldrb	r3, [r7, #11]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	da0e      	bge.n	8001c56 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	f003 0207 	and.w	r2, r3, #7
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	3310      	adds	r3, #16
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2201      	movs	r2, #1
 8001c52:	705a      	strb	r2, [r3, #1]
 8001c54:	e00e      	b.n	8001c74 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c56:	78fb      	ldrb	r3, [r7, #3]
 8001c58:	f003 0207 	and.w	r2, r3, #7
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d101      	bne.n	8001c8e <HAL_PCD_EP_Close+0x6a>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e00e      	b.n	8001cac <HAL_PCD_EP_Close+0x88>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68f9      	ldr	r1, [r7, #12]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f004 fc45 	bl	800652c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cc4:	7afb      	ldrb	r3, [r7, #11]
 8001cc6:	f003 0207 	and.w	r2, r3, #7
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	4413      	add	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cf4:	7afb      	ldrb	r3, [r7, #11]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6979      	ldr	r1, [r7, #20]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f004 fdfd 	bl	8006906 <USB_EPStartXfer>

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	460b      	mov	r3, r1
 8001d20:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	f003 0207 	and.w	r2, r3, #7
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	440b      	add	r3, r1
 8001d34:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001d38:	681b      	ldr	r3, [r3, #0]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	60f8      	str	r0, [r7, #12]
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	603b      	str	r3, [r7, #0]
 8001d52:	460b      	mov	r3, r1
 8001d54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d56:	7afb      	ldrb	r3, [r7, #11]
 8001d58:	f003 0207 	and.w	r2, r3, #7
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	3310      	adds	r3, #16
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	4413      	add	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d92:	7afb      	ldrb	r3, [r7, #11]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6979      	ldr	r1, [r7, #20]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f004 fdae 	bl	8006906 <USB_EPStartXfer>

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	7912      	ldrb	r2, [r2, #4]
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e03e      	b.n	8001e50 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	da0e      	bge.n	8001df8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	f003 0207 	and.w	r2, r3, #7
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	3310      	adds	r3, #16
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2201      	movs	r2, #1
 8001df4:	705a      	strb	r2, [r3, #1]
 8001df6:	e00c      	b.n	8001e12 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001df8:	78fa      	ldrb	r2, [r7, #3]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2201      	movs	r2, #1
 8001e16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_PCD_EP_SetStall+0x7e>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e00e      	b.n	8001e50 <HAL_PCD_EP_SetStall+0x9c>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68f9      	ldr	r1, [r7, #12]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f005 fb0f 	bl	8007464 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	7912      	ldrb	r2, [r2, #4]
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e040      	b.n	8001ef8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	da0e      	bge.n	8001e9c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e7e:	78fb      	ldrb	r3, [r7, #3]
 8001e80:	f003 0207 	and.w	r2, r3, #7
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	3310      	adds	r3, #16
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2201      	movs	r2, #1
 8001e98:	705a      	strb	r2, [r3, #1]
 8001e9a:	e00e      	b.n	8001eba <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	f003 0207 	and.w	r2, r3, #7
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_PCD_EP_ClrStall+0x82>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e00e      	b.n	8001ef8 <HAL_PCD_EP_ClrStall+0xa0>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68f9      	ldr	r1, [r7, #12]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f005 fb0c 	bl	8007506 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b092      	sub	sp, #72	@ 0x48
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f08:	e333      	b.n	8002572 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f12:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001f14:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8001f20:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f040 8108 	bne.w	800213a <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001f2a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001f2c:	f003 0310 	and.w	r3, r3, #16
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d14c      	bne.n	8001fce <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001f40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f44:	813b      	strh	r3, [r7, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	893b      	ldrh	r3, [r7, #8]
 8001f4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3310      	adds	r3, #16
 8001f5c:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	461a      	mov	r2, r3
 8001f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4413      	add	r3, r2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f84:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f88:	695a      	ldr	r2, [r3, #20]
 8001f8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	441a      	add	r2, r3
 8001f90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f92:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001f94:	2100      	movs	r1, #0
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f007 faf7 	bl	800958a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7b1b      	ldrb	r3, [r3, #12]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 82e5 	beq.w	8002572 <PCD_EP_ISR_Handler+0x672>
 8001fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f040 82e0 	bne.w	8002572 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	7b1b      	ldrb	r3, [r3, #12]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	731a      	strb	r2, [r3, #12]
 8001fcc:	e2d1      	b.n	8002572 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001fd4:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001fde:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001fe0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d032      	beq.n	800204e <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	4413      	add	r3, r2
 8002002:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800200c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800200e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800201a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800201c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800201e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002020:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002022:	b29b      	uxth	r3, r3
 8002024:	f005 fb96 	bl	8007754 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	b29a      	uxth	r2, r3
 8002030:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002034:	4013      	ands	r3, r2
 8002036:	817b      	strh	r3, [r7, #10]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	897a      	ldrh	r2, [r7, #10]
 800203e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002042:	b292      	uxth	r2, r2
 8002044:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f007 fa72 	bl	8009530 <HAL_PCD_SetupStageCallback>
 800204c:	e291      	b.n	8002572 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800204e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002052:	2b00      	cmp	r3, #0
 8002054:	f280 828d 	bge.w	8002572 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	b29a      	uxth	r2, r3
 8002060:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002064:	4013      	ands	r3, r2
 8002066:	81fb      	strh	r3, [r7, #14]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	89fa      	ldrh	r2, [r7, #14]
 800206e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002072:	b292      	uxth	r2, r2
 8002074:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800207e:	b29b      	uxth	r3, r3
 8002080:	461a      	mov	r2, r3
 8002082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	4413      	add	r3, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	4413      	add	r3, r2
 8002090:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800209a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800209c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800209e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d019      	beq.n	80020da <PCD_EP_ISR_Handler+0x1da>
 80020a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d015      	beq.n	80020da <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020b4:	6959      	ldr	r1, [r3, #20]
 80020b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020b8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80020ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020bc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80020be:	b29b      	uxth	r3, r3
 80020c0:	f005 fb48 	bl	8007754 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80020c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020c6:	695a      	ldr	r2, [r3, #20]
 80020c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	441a      	add	r2, r3
 80020ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020d0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80020d2:	2100      	movs	r1, #0
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f007 fa3d 	bl	8009554 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80020e2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80020e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f040 8242 	bne.w	8002572 <PCD_EP_ISR_Handler+0x672>
 80020ee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80020f0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80020f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80020f8:	f000 823b 	beq.w	8002572 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002108:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800210c:	81bb      	strh	r3, [r7, #12]
 800210e:	89bb      	ldrh	r3, [r7, #12]
 8002110:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002114:	81bb      	strh	r3, [r7, #12]
 8002116:	89bb      	ldrh	r3, [r7, #12]
 8002118:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800211c:	81bb      	strh	r3, [r7, #12]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	89bb      	ldrh	r3, [r7, #12]
 8002124:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002128:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800212c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002130:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002134:	b29b      	uxth	r3, r3
 8002136:	8013      	strh	r3, [r2, #0]
 8002138:	e21b      	b.n	8002572 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800214c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002150:	2b00      	cmp	r3, #0
 8002152:	f280 80f1 	bge.w	8002338 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	b29a      	uxth	r2, r3
 8002168:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800216c:	4013      	ands	r3, r2
 800216e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002180:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002184:	b292      	uxth	r2, r2
 8002186:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002188:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	4413      	add	r3, r2
 800219c:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800219e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021a0:	7b1b      	ldrb	r3, [r3, #12]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d123      	bne.n	80021ee <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	461a      	mov	r2, r3
 80021b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	4413      	add	r3, r2
 80021c0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80021ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 808b 	beq.w	80022ee <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021de:	6959      	ldr	r1, [r3, #20]
 80021e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021e2:	88da      	ldrh	r2, [r3, #6]
 80021e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80021e8:	f005 fab4 	bl	8007754 <USB_ReadPMA>
 80021ec:	e07f      	b.n	80022ee <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80021ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021f0:	78db      	ldrb	r3, [r3, #3]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d109      	bne.n	800220a <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80021f6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80021f8:	461a      	mov	r2, r3
 80021fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f9c6 	bl	800258e <HAL_PCD_EP_DB_Receive>
 8002202:	4603      	mov	r3, r0
 8002204:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002208:	e071      	b.n	80022ee <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	b29b      	uxth	r3, r3
 800221c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002220:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002224:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	441a      	add	r2, r3
 8002234:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002236:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800223a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800223e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002242:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002246:	b29b      	uxth	r3, r3
 8002248:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	b29b      	uxth	r3, r3
 800225c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d022      	beq.n	80022aa <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800226c:	b29b      	uxth	r3, r3
 800226e:	461a      	mov	r2, r3
 8002270:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4413      	add	r3, r2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	4413      	add	r3, r2
 800227e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002288:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800228c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002290:	2b00      	cmp	r3, #0
 8002292:	d02c      	beq.n	80022ee <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800229a:	6959      	ldr	r1, [r3, #20]
 800229c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800229e:	891a      	ldrh	r2, [r3, #8]
 80022a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80022a4:	f005 fa56 	bl	8007754 <USB_ReadPMA>
 80022a8:	e021      	b.n	80022ee <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	4413      	add	r3, r2
 80022c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ce:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80022d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d009      	beq.n	80022ee <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022e0:	6959      	ldr	r1, [r3, #20]
 80022e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022e4:	895a      	ldrh	r2, [r3, #10]
 80022e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80022ea:	f005 fa33 	bl	8007754 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80022ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022f0:	69da      	ldr	r2, [r3, #28]
 80022f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80022f6:	441a      	add	r2, r3
 80022f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022fa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80022fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002304:	441a      	add	r2, r3
 8002306:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002308:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800230a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d005      	beq.n	800231e <PCD_EP_ISR_Handler+0x41e>
 8002312:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002316:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	429a      	cmp	r2, r3
 800231c:	d206      	bcs.n	800232c <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800231e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	4619      	mov	r1, r3
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f007 f915 	bl	8009554 <HAL_PCD_DataOutStageCallback>
 800232a:	e005      	b.n	8002338 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002332:	4618      	mov	r0, r3
 8002334:	f004 fae7 	bl	8006906 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002338:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800233a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 8117 	beq.w	8002572 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8002344:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	3310      	adds	r3, #16
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	461a      	mov	r2, r3
 800235e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	b29b      	uxth	r3, r3
 800236a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800236e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002372:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	441a      	add	r2, r3
 8002382:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800238c:	b29b      	uxth	r3, r3
 800238e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002390:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002392:	78db      	ldrb	r3, [r3, #3]
 8002394:	2b01      	cmp	r3, #1
 8002396:	f040 80a1 	bne.w	80024dc <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800239a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800239c:	2200      	movs	r2, #0
 800239e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80023a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023a2:	7b1b      	ldrb	r3, [r3, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 8092 	beq.w	80024ce <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023aa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80023ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d046      	beq.n	8002442 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023b6:	785b      	ldrb	r3, [r3, #1]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d126      	bne.n	800240a <PCD_EP_ISR_Handler+0x50a>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	461a      	mov	r2, r3
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	4413      	add	r3, r2
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	00da      	lsls	r2, r3, #3
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	4413      	add	r3, r2
 80023de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	801a      	strh	r2, [r3, #0]
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002402:	b29a      	uxth	r2, r3
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	801a      	strh	r2, [r3, #0]
 8002408:	e061      	b.n	80024ce <PCD_EP_ISR_Handler+0x5ce>
 800240a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800240c:	785b      	ldrb	r3, [r3, #1]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d15d      	bne.n	80024ce <PCD_EP_ISR_Handler+0x5ce>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	61fb      	str	r3, [r7, #28]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002420:	b29b      	uxth	r3, r3
 8002422:	461a      	mov	r2, r3
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	4413      	add	r3, r2
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	00da      	lsls	r2, r3, #3
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	4413      	add	r3, r2
 8002434:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002438:	61bb      	str	r3, [r7, #24]
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	2200      	movs	r2, #0
 800243e:	801a      	strh	r2, [r3, #0]
 8002440:	e045      	b.n	80024ce <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002448:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800244a:	785b      	ldrb	r3, [r3, #1]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d126      	bne.n	800249e <PCD_EP_ISR_Handler+0x59e>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	627b      	str	r3, [r7, #36]	@ 0x24
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800245e:	b29b      	uxth	r3, r3
 8002460:	461a      	mov	r2, r3
 8002462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002464:	4413      	add	r3, r2
 8002466:	627b      	str	r3, [r7, #36]	@ 0x24
 8002468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	00da      	lsls	r2, r3, #3
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002470:	4413      	add	r3, r2
 8002472:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002476:	623b      	str	r3, [r7, #32]
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	b29b      	uxth	r3, r3
 800247e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002482:	b29a      	uxth	r2, r3
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	801a      	strh	r2, [r3, #0]
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	b29b      	uxth	r3, r3
 800248e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002492:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002496:	b29a      	uxth	r2, r3
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	801a      	strh	r2, [r3, #0]
 800249c:	e017      	b.n	80024ce <PCD_EP_ISR_Handler+0x5ce>
 800249e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024a0:	785b      	ldrb	r3, [r3, #1]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d113      	bne.n	80024ce <PCD_EP_ISR_Handler+0x5ce>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024b4:	4413      	add	r3, r2
 80024b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	00da      	lsls	r2, r3, #3
 80024be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024c0:	4413      	add	r3, r2
 80024c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80024c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ca:	2200      	movs	r2, #0
 80024cc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	4619      	mov	r1, r3
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f007 f858 	bl	800958a <HAL_PCD_DataInStageCallback>
 80024da:	e04a      	b.n	8002572 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80024dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80024de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d13f      	bne.n	8002566 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	461a      	mov	r2, r3
 80024f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4413      	add	r3, r2
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6812      	ldr	r2, [r2, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800250a:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800250c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800250e:	699a      	ldr	r2, [r3, #24]
 8002510:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002512:	429a      	cmp	r2, r3
 8002514:	d906      	bls.n	8002524 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8002516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002518:	699a      	ldr	r2, [r3, #24]
 800251a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800251c:	1ad2      	subs	r2, r2, r3
 800251e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002520:	619a      	str	r2, [r3, #24]
 8002522:	e002      	b.n	800252a <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002524:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002526:	2200      	movs	r2, #0
 8002528:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800252a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d106      	bne.n	8002540 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002532:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	4619      	mov	r1, r3
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f007 f826 	bl	800958a <HAL_PCD_DataInStageCallback>
 800253e:	e018      	b.n	8002572 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002542:	695a      	ldr	r2, [r3, #20]
 8002544:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002546:	441a      	add	r2, r3
 8002548:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800254a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800254c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800254e:	69da      	ldr	r2, [r3, #28]
 8002550:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002552:	441a      	add	r2, r3
 8002554:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002556:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800255e:	4618      	mov	r0, r3
 8002560:	f004 f9d1 	bl	8006906 <USB_EPStartXfer>
 8002564:	e005      	b.n	8002572 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002566:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002568:	461a      	mov	r2, r3
 800256a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f917 	bl	80027a0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800257a:	b29b      	uxth	r3, r3
 800257c:	b21b      	sxth	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	f6ff acc3 	blt.w	8001f0a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3748      	adds	r7, #72	@ 0x48
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b088      	sub	sp, #32
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	4613      	mov	r3, r2
 800259a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800259c:	88fb      	ldrh	r3, [r7, #6]
 800259e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d07c      	beq.n	80026a0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	461a      	mov	r2, r3
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4413      	add	r3, r2
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	699a      	ldr	r2, [r3, #24]
 80025d0:	8b7b      	ldrh	r3, [r7, #26]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d306      	bcc.n	80025e4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	699a      	ldr	r2, [r3, #24]
 80025da:	8b7b      	ldrh	r3, [r7, #26]
 80025dc:	1ad2      	subs	r2, r2, r3
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	619a      	str	r2, [r3, #24]
 80025e2:	e002      	b.n	80025ea <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2200      	movs	r2, #0
 80025e8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d123      	bne.n	800263a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	b29b      	uxth	r3, r3
 8002604:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002608:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800260c:	833b      	strh	r3, [r7, #24]
 800260e:	8b3b      	ldrh	r3, [r7, #24]
 8002610:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002614:	833b      	strh	r3, [r7, #24]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	441a      	add	r2, r3
 8002624:	8b3b      	ldrh	r3, [r7, #24]
 8002626:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800262a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800262e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002636:	b29b      	uxth	r3, r3
 8002638:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800263a:	88fb      	ldrh	r3, [r7, #6]
 800263c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002640:	2b00      	cmp	r3, #0
 8002642:	d01f      	beq.n	8002684 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	461a      	mov	r2, r3
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	b29b      	uxth	r3, r3
 8002656:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800265a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800265e:	82fb      	strh	r3, [r7, #22]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	441a      	add	r2, r3
 800266e:	8afb      	ldrh	r3, [r7, #22]
 8002670:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002674:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002678:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800267c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002680:	b29b      	uxth	r3, r3
 8002682:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002684:	8b7b      	ldrh	r3, [r7, #26]
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 8085 	beq.w	8002796 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	6959      	ldr	r1, [r3, #20]
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	891a      	ldrh	r2, [r3, #8]
 8002698:	8b7b      	ldrh	r3, [r7, #26]
 800269a:	f005 f85b 	bl	8007754 <USB_ReadPMA>
 800269e:	e07a      	b.n	8002796 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	461a      	mov	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	4413      	add	r3, r2
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	4413      	add	r3, r2
 80026ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026c4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	699a      	ldr	r2, [r3, #24]
 80026ca:	8b7b      	ldrh	r3, [r7, #26]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d306      	bcc.n	80026de <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	699a      	ldr	r2, [r3, #24]
 80026d4:	8b7b      	ldrh	r3, [r7, #26]
 80026d6:	1ad2      	subs	r2, r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	619a      	str	r2, [r3, #24]
 80026dc:	e002      	b.n	80026e4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2200      	movs	r2, #0
 80026e2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d123      	bne.n	8002734 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002706:	83fb      	strh	r3, [r7, #30]
 8002708:	8bfb      	ldrh	r3, [r7, #30]
 800270a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800270e:	83fb      	strh	r3, [r7, #30]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	441a      	add	r2, r3
 800271e:	8bfb      	ldrh	r3, [r7, #30]
 8002720:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002724:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002728:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800272c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002730:	b29b      	uxth	r3, r3
 8002732:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002734:	88fb      	ldrh	r3, [r7, #6]
 8002736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800273a:	2b00      	cmp	r3, #0
 800273c:	d11f      	bne.n	800277e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	b29b      	uxth	r3, r3
 8002750:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002754:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002758:	83bb      	strh	r3, [r7, #28]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	441a      	add	r2, r3
 8002768:	8bbb      	ldrh	r3, [r7, #28]
 800276a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800276e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002772:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002776:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800277a:	b29b      	uxth	r3, r3
 800277c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800277e:	8b7b      	ldrh	r3, [r7, #26]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	6959      	ldr	r1, [r3, #20]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	895a      	ldrh	r2, [r3, #10]
 8002790:	8b7b      	ldrh	r3, [r7, #26]
 8002792:	f004 ffdf 	bl	8007754 <USB_ReadPMA>
    }
  }

  return count;
 8002796:	8b7b      	ldrh	r3, [r7, #26]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3720      	adds	r7, #32
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b0a6      	sub	sp, #152	@ 0x98
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	4613      	mov	r3, r2
 80027ac:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027ae:	88fb      	ldrh	r3, [r7, #6]
 80027b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 81f7 	beq.w	8002ba8 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4413      	add	r3, r2
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	6812      	ldr	r2, [r2, #0]
 80027d2:	4413      	add	r3, r2
 80027d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027de:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	699a      	ldr	r2, [r3, #24]
 80027e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d907      	bls.n	80027fe <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	699a      	ldr	r2, [r3, #24]
 80027f2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80027f6:	1ad2      	subs	r2, r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	619a      	str	r2, [r3, #24]
 80027fc:	e002      	b.n	8002804 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2200      	movs	r2, #0
 8002802:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	2b00      	cmp	r3, #0
 800280a:	f040 80e1 	bne.w	80029d0 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	785b      	ldrb	r3, [r3, #1]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d126      	bne.n	8002864 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	633b      	str	r3, [r7, #48]	@ 0x30
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002824:	b29b      	uxth	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800282a:	4413      	add	r3, r2
 800282c:	633b      	str	r3, [r7, #48]	@ 0x30
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	00da      	lsls	r2, r3, #3
 8002834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002836:	4413      	add	r3, r2
 8002838:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800283c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800283e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002848:	b29a      	uxth	r2, r3
 800284a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800284c:	801a      	strh	r2, [r3, #0]
 800284e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	b29b      	uxth	r3, r3
 8002854:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002858:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800285c:	b29a      	uxth	r2, r3
 800285e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002860:	801a      	strh	r2, [r3, #0]
 8002862:	e01a      	b.n	800289a <HAL_PCD_EP_DB_Transmit+0xfa>
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	785b      	ldrb	r3, [r3, #1]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d116      	bne.n	800289a <HAL_PCD_EP_DB_Transmit+0xfa>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800287a:	b29b      	uxth	r3, r3
 800287c:	461a      	mov	r2, r3
 800287e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002880:	4413      	add	r3, r2
 8002882:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	00da      	lsls	r2, r3, #3
 800288a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800288c:	4413      	add	r3, r2
 800288e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002892:	637b      	str	r3, [r7, #52]	@ 0x34
 8002894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002896:	2200      	movs	r2, #0
 8002898:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	785b      	ldrb	r3, [r3, #1]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d126      	bne.n	80028f6 <HAL_PCD_EP_DB_Transmit+0x156>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	623b      	str	r3, [r7, #32]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	461a      	mov	r2, r3
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	4413      	add	r3, r2
 80028be:	623b      	str	r3, [r7, #32]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	00da      	lsls	r2, r3, #3
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	4413      	add	r3, r2
 80028ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80028ce:	61fb      	str	r3, [r7, #28]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028da:	b29a      	uxth	r2, r3
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	801a      	strh	r2, [r3, #0]
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	801a      	strh	r2, [r3, #0]
 80028f4:	e017      	b.n	8002926 <HAL_PCD_EP_DB_Transmit+0x186>
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	785b      	ldrb	r3, [r3, #1]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d113      	bne.n	8002926 <HAL_PCD_EP_DB_Transmit+0x186>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002906:	b29b      	uxth	r3, r3
 8002908:	461a      	mov	r2, r3
 800290a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290c:	4413      	add	r3, r2
 800290e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	00da      	lsls	r2, r3, #3
 8002916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002918:	4413      	add	r3, r2
 800291a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800291e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002922:	2200      	movs	r2, #0
 8002924:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	78db      	ldrb	r3, [r3, #3]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d123      	bne.n	8002976 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	b29b      	uxth	r3, r3
 8002940:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002944:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002948:	837b      	strh	r3, [r7, #26]
 800294a:	8b7b      	ldrh	r3, [r7, #26]
 800294c:	f083 0320 	eor.w	r3, r3, #32
 8002950:	837b      	strh	r3, [r7, #26]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	441a      	add	r2, r3
 8002960:	8b7b      	ldrh	r3, [r7, #26]
 8002962:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002966:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800296a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800296e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002972:	b29b      	uxth	r3, r3
 8002974:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	4619      	mov	r1, r3
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f006 fe04 	bl	800958a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d01f      	beq.n	80029cc <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	b29b      	uxth	r3, r3
 800299e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029a6:	833b      	strh	r3, [r7, #24]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	441a      	add	r2, r3
 80029b6:	8b3b      	ldrh	r3, [r7, #24]
 80029b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	e31f      	b.n	8003010 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d021      	beq.n	8002a1e <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029f4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	461a      	mov	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	441a      	add	r2, r3
 8002a06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	f040 82ca 	bne.w	8002fbe <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002a32:	441a      	add	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	69da      	ldr	r2, [r3, #28]
 8002a3c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002a40:	441a      	add	r2, r3
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	6a1a      	ldr	r2, [r3, #32]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d309      	bcc.n	8002a66 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	6a1a      	ldr	r2, [r3, #32]
 8002a5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a5e:	1ad2      	subs	r2, r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	621a      	str	r2, [r3, #32]
 8002a64:	e015      	b.n	8002a92 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d107      	bne.n	8002a7e <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8002a6e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002a72:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002a7c:	e009      	b.n	8002a92 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	785b      	ldrb	r3, [r3, #1]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d15f      	bne.n	8002b5a <HAL_PCD_EP_DB_Transmit+0x3ba>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002aae:	4413      	add	r3, r2
 8002ab0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	00da      	lsls	r2, r3, #3
 8002ab8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002aba:	4413      	add	r3, r2
 8002abc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ad0:	801a      	strh	r2, [r3, #0]
 8002ad2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <HAL_PCD_EP_DB_Transmit+0x34e>
 8002ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002aea:	801a      	strh	r2, [r3, #0]
 8002aec:	e051      	b.n	8002b92 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002aee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002af0:	2b3e      	cmp	r3, #62	@ 0x3e
 8002af2:	d816      	bhi.n	8002b22 <HAL_PCD_EP_DB_Transmit+0x382>
 8002af4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002af6:	085b      	lsrs	r3, r3, #1
 8002af8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002afa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <HAL_PCD_EP_DB_Transmit+0x36a>
 8002b04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b06:	3301      	adds	r3, #1
 8002b08:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	029b      	lsls	r3, r3, #10
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b1e:	801a      	strh	r2, [r3, #0]
 8002b20:	e037      	b.n	8002b92 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002b22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b24:	095b      	lsrs	r3, r3, #5
 8002b26:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b2a:	f003 031f 	and.w	r3, r3, #31
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d102      	bne.n	8002b38 <HAL_PCD_EP_DB_Transmit+0x398>
 8002b32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b34:	3b01      	subs	r3, #1
 8002b36:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	029b      	lsls	r3, r3, #10
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	4313      	orrs	r3, r2
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b56:	801a      	strh	r2, [r3, #0]
 8002b58:	e01b      	b.n	8002b92 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	785b      	ldrb	r3, [r3, #1]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d117      	bne.n	8002b92 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	461a      	mov	r2, r3
 8002b74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b76:	4413      	add	r3, r2
 8002b78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	00da      	lsls	r2, r3, #3
 8002b80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b82:	4413      	add	r3, r2
 8002b84:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002b88:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b90:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	6959      	ldr	r1, [r3, #20]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	891a      	ldrh	r2, [r3, #8]
 8002b9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	f004 fd94 	bl	80076ce <USB_WritePMA>
 8002ba6:	e20a      	b.n	8002fbe <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	4413      	add	r3, r2
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	6812      	ldr	r2, [r2, #0]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bcc:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	699a      	ldr	r2, [r3, #24]
 8002bd4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d307      	bcc.n	8002bec <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	699a      	ldr	r2, [r3, #24]
 8002be0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002be4:	1ad2      	subs	r2, r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	619a      	str	r2, [r3, #24]
 8002bea:	e002      	b.n	8002bf2 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f040 80f6 	bne.w	8002de8 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	785b      	ldrb	r3, [r3, #1]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d126      	bne.n	8002c52 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	677b      	str	r3, [r7, #116]	@ 0x74
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	461a      	mov	r2, r3
 8002c16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c18:	4413      	add	r3, r2
 8002c1a:	677b      	str	r3, [r7, #116]	@ 0x74
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	00da      	lsls	r2, r3, #3
 8002c22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c24:	4413      	add	r3, r2
 8002c26:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002c2a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c3a:	801a      	strh	r2, [r3, #0]
 8002c3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c4e:	801a      	strh	r2, [r3, #0]
 8002c50:	e01a      	b.n	8002c88 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	785b      	ldrb	r3, [r3, #1]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d116      	bne.n	8002c88 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c6e:	4413      	add	r3, r2
 8002c70:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	00da      	lsls	r2, r3, #3
 8002c78:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002c80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c84:	2200      	movs	r2, #0
 8002c86:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	785b      	ldrb	r3, [r3, #1]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d12f      	bne.n	8002cf8 <HAL_PCD_EP_DB_Transmit+0x558>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	461a      	mov	r2, r3
 8002cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	00da      	lsls	r2, r3, #3
 8002cbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002cc6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002cca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002cdc:	801a      	strh	r2, [r3, #0]
 8002cde:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002cf4:	801a      	strh	r2, [r3, #0]
 8002cf6:	e01c      	b.n	8002d32 <HAL_PCD_EP_DB_Transmit+0x592>
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	785b      	ldrb	r3, [r3, #1]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d118      	bne.n	8002d32 <HAL_PCD_EP_DB_Transmit+0x592>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d10:	4413      	add	r3, r2
 8002d12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	00da      	lsls	r2, r3, #3
 8002d1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d20:	4413      	add	r3, r2
 8002d22:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002d26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d2e:	2200      	movs	r2, #0
 8002d30:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	78db      	ldrb	r3, [r3, #3]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d127      	bne.n	8002d8a <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d54:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002d58:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002d5c:	f083 0320 	eor.w	r3, r3, #32
 8002d60:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	441a      	add	r2, r3
 8002d72:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002d76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	4619      	mov	r1, r3
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f006 fbfa 	bl	800958a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d121      	bne.n	8002de4 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dba:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	441a      	add	r2, r3
 8002dcc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8002dd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002dd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002dd8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	e113      	b.n	8003010 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d121      	bne.n	8002e36 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	461a      	mov	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e0c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	441a      	add	r2, r3
 8002e1e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002e22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	f040 80be 	bne.w	8002fbe <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002e4a:	441a      	add	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	69da      	ldr	r2, [r3, #28]
 8002e54:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002e58:	441a      	add	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	6a1a      	ldr	r2, [r3, #32]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d309      	bcc.n	8002e7e <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	6a1a      	ldr	r2, [r3, #32]
 8002e74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e76:	1ad2      	subs	r2, r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	621a      	str	r2, [r3, #32]
 8002e7c:	e015      	b.n	8002eaa <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d107      	bne.n	8002e96 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8002e86:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002e8a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002e94:	e009      	b.n	8002eaa <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	785b      	ldrb	r3, [r3, #1]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d15f      	bne.n	8002f78 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	461a      	mov	r2, r3
 8002eca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ecc:	4413      	add	r3, r2
 8002ece:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	00da      	lsls	r2, r3, #3
 8002ed6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ed8:	4413      	add	r3, r2
 8002eda:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002ede:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ee0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002eee:	801a      	strh	r2, [r3, #0]
 8002ef0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10a      	bne.n	8002f0c <HAL_PCD_EP_DB_Transmit+0x76c>
 8002ef6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f08:	801a      	strh	r2, [r3, #0]
 8002f0a:	e04e      	b.n	8002faa <HAL_PCD_EP_DB_Transmit+0x80a>
 8002f0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f0e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002f10:	d816      	bhi.n	8002f40 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8002f12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f14:	085b      	lsrs	r3, r3, #1
 8002f16:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <HAL_PCD_EP_DB_Transmit+0x788>
 8002f22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f24:	3301      	adds	r3, #1
 8002f26:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	029b      	lsls	r3, r3, #10
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	4313      	orrs	r3, r2
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f3c:	801a      	strh	r2, [r3, #0]
 8002f3e:	e034      	b.n	8002faa <HAL_PCD_EP_DB_Transmit+0x80a>
 8002f40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f48:	f003 031f 	and.w	r3, r3, #31
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d102      	bne.n	8002f56 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8002f50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f52:	3b01      	subs	r3, #1
 8002f54:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	029b      	lsls	r3, r3, #10
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	4313      	orrs	r3, r2
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f74:	801a      	strh	r2, [r3, #0]
 8002f76:	e018      	b.n	8002faa <HAL_PCD_EP_DB_Transmit+0x80a>
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	785b      	ldrb	r3, [r3, #1]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d114      	bne.n	8002faa <HAL_PCD_EP_DB_Transmit+0x80a>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f8e:	4413      	add	r3, r2
 8002f90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	00da      	lsls	r2, r3, #3
 8002f98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002fa0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002fa2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fa8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	6959      	ldr	r1, [r3, #20]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	895a      	ldrh	r2, [r3, #10]
 8002fb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	f004 fb88 	bl	80076ce <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fd8:	82fb      	strh	r3, [r7, #22]
 8002fda:	8afb      	ldrh	r3, [r7, #22]
 8002fdc:	f083 0310 	eor.w	r3, r3, #16
 8002fe0:	82fb      	strh	r3, [r7, #22]
 8002fe2:	8afb      	ldrh	r3, [r7, #22]
 8002fe4:	f083 0320 	eor.w	r3, r3, #32
 8002fe8:	82fb      	strh	r3, [r7, #22]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	441a      	add	r2, r3
 8002ff8:	8afb      	ldrh	r3, [r7, #22]
 8002ffa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ffe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003002:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800300a:	b29b      	uxth	r3, r3
 800300c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3798      	adds	r7, #152	@ 0x98
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003018:	b480      	push	{r7}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	607b      	str	r3, [r7, #4]
 8003022:	460b      	mov	r3, r1
 8003024:	817b      	strh	r3, [r7, #10]
 8003026:	4613      	mov	r3, r2
 8003028:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800302a:	897b      	ldrh	r3, [r7, #10]
 800302c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003036:	897b      	ldrh	r3, [r7, #10]
 8003038:	f003 0207 	and.w	r2, r3, #7
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	3310      	adds	r3, #16
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	4413      	add	r3, r2
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	e009      	b.n	8003062 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800304e:	897a      	ldrh	r2, [r7, #10]
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4413      	add	r3, r2
 8003060:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003062:	893b      	ldrh	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d107      	bne.n	8003078 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2200      	movs	r2, #0
 800306c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	b29a      	uxth	r2, r3
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	80da      	strh	r2, [r3, #6]
 8003076:	e00b      	b.n	8003090 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2201      	movs	r2, #1
 800307c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	b29a      	uxth	r2, r3
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	0c1b      	lsrs	r3, r3, #16
 800308a:	b29a      	uxth	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	371c      	adds	r7, #28
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800309e:	b480      	push	{r7}
 80030a0:	b085      	sub	sp, #20
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	f043 0301 	orr.w	r3, r3, #1
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	f043 0302 	orr.w	r3, r3, #2
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d141      	bne.n	8003186 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003102:	4b4b      	ldr	r3, [pc, #300]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800310a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800310e:	d131      	bne.n	8003174 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003110:	4b47      	ldr	r3, [pc, #284]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003116:	4a46      	ldr	r2, [pc, #280]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003118:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800311c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003120:	4b43      	ldr	r3, [pc, #268]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003128:	4a41      	ldr	r2, [pc, #260]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800312a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800312e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003130:	4b40      	ldr	r3, [pc, #256]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2232      	movs	r2, #50	@ 0x32
 8003136:	fb02 f303 	mul.w	r3, r2, r3
 800313a:	4a3f      	ldr	r2, [pc, #252]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800313c:	fba2 2303 	umull	r2, r3, r2, r3
 8003140:	0c9b      	lsrs	r3, r3, #18
 8003142:	3301      	adds	r3, #1
 8003144:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003146:	e002      	b.n	800314e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3b01      	subs	r3, #1
 800314c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800314e:	4b38      	ldr	r3, [pc, #224]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800315a:	d102      	bne.n	8003162 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f2      	bne.n	8003148 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003162:	4b33      	ldr	r3, [pc, #204]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800316a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800316e:	d158      	bne.n	8003222 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e057      	b.n	8003224 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003174:	4b2e      	ldr	r3, [pc, #184]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800317a:	4a2d      	ldr	r2, [pc, #180]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800317c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003180:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003184:	e04d      	b.n	8003222 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800318c:	d141      	bne.n	8003212 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800318e:	4b28      	ldr	r3, [pc, #160]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800319a:	d131      	bne.n	8003200 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800319c:	4b24      	ldr	r3, [pc, #144]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800319e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031a2:	4a23      	ldr	r2, [pc, #140]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031ac:	4b20      	ldr	r3, [pc, #128]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2232      	movs	r2, #50	@ 0x32
 80031c2:	fb02 f303 	mul.w	r3, r2, r3
 80031c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031c8:	fba2 2303 	umull	r2, r3, r2, r3
 80031cc:	0c9b      	lsrs	r3, r3, #18
 80031ce:	3301      	adds	r3, #1
 80031d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031d2:	e002      	b.n	80031da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031da:	4b15      	ldr	r3, [pc, #84]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031e6:	d102      	bne.n	80031ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f2      	bne.n	80031d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031ee:	4b10      	ldr	r3, [pc, #64]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031fa:	d112      	bne.n	8003222 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e011      	b.n	8003224 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003200:	4b0b      	ldr	r3, [pc, #44]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003206:	4a0a      	ldr	r2, [pc, #40]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800320c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003210:	e007      	b.n	8003222 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003212:	4b07      	ldr	r3, [pc, #28]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800321a:	4a05      	ldr	r2, [pc, #20]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800321c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003220:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	40007000 	.word	0x40007000
 8003234:	20000000 	.word	0x20000000
 8003238:	431bde83 	.word	0x431bde83

0800323c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003240:	4b05      	ldr	r3, [pc, #20]	@ (8003258 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	4a04      	ldr	r2, [pc, #16]	@ (8003258 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003246:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800324a:	6093      	str	r3, [r2, #8]
}
 800324c:	bf00      	nop
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40007000 	.word	0x40007000

0800325c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e2fe      	b.n	800386c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d075      	beq.n	8003366 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800327a:	4b97      	ldr	r3, [pc, #604]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003284:	4b94      	ldr	r3, [pc, #592]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	2b0c      	cmp	r3, #12
 8003292:	d102      	bne.n	800329a <HAL_RCC_OscConfig+0x3e>
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2b03      	cmp	r3, #3
 8003298:	d002      	beq.n	80032a0 <HAL_RCC_OscConfig+0x44>
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	2b08      	cmp	r3, #8
 800329e:	d10b      	bne.n	80032b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a0:	4b8d      	ldr	r3, [pc, #564]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d05b      	beq.n	8003364 <HAL_RCC_OscConfig+0x108>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d157      	bne.n	8003364 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e2d9      	b.n	800386c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032c0:	d106      	bne.n	80032d0 <HAL_RCC_OscConfig+0x74>
 80032c2:	4b85      	ldr	r3, [pc, #532]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a84      	ldr	r2, [pc, #528]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80032c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	e01d      	b.n	800330c <HAL_RCC_OscConfig+0xb0>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x98>
 80032da:	4b7f      	ldr	r3, [pc, #508]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a7e      	ldr	r2, [pc, #504]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80032e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	4b7c      	ldr	r3, [pc, #496]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a7b      	ldr	r2, [pc, #492]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80032ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e00b      	b.n	800330c <HAL_RCC_OscConfig+0xb0>
 80032f4:	4b78      	ldr	r3, [pc, #480]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a77      	ldr	r2, [pc, #476]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80032fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	4b75      	ldr	r3, [pc, #468]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a74      	ldr	r2, [pc, #464]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 8003306:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800330a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d013      	beq.n	800333c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003314:	f7fd ff2a 	bl	800116c <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800331c:	f7fd ff26 	bl	800116c <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	@ 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e29e      	b.n	800386c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800332e:	4b6a      	ldr	r3, [pc, #424]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0xc0>
 800333a:	e014      	b.n	8003366 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333c:	f7fd ff16 	bl	800116c <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003344:	f7fd ff12 	bl	800116c <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b64      	cmp	r3, #100	@ 0x64
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e28a      	b.n	800386c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003356:	4b60      	ldr	r3, [pc, #384]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0xe8>
 8003362:	e000      	b.n	8003366 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d075      	beq.n	800345e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003372:	4b59      	ldr	r3, [pc, #356]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800337c:	4b56      	ldr	r3, [pc, #344]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	2b0c      	cmp	r3, #12
 800338a:	d102      	bne.n	8003392 <HAL_RCC_OscConfig+0x136>
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d002      	beq.n	8003398 <HAL_RCC_OscConfig+0x13c>
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	2b04      	cmp	r3, #4
 8003396:	d11f      	bne.n	80033d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003398:	4b4f      	ldr	r3, [pc, #316]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <HAL_RCC_OscConfig+0x154>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e25d      	b.n	800386c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b0:	4b49      	ldr	r3, [pc, #292]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	061b      	lsls	r3, r3, #24
 80033be:	4946      	ldr	r1, [pc, #280]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033c4:	4b45      	ldr	r3, [pc, #276]	@ (80034dc <HAL_RCC_OscConfig+0x280>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fd fa6f 	bl	80008ac <HAL_InitTick>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d043      	beq.n	800345c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e249      	b.n	800386c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d023      	beq.n	8003428 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033e0:	4b3d      	ldr	r3, [pc, #244]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a3c      	ldr	r2, [pc, #240]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80033e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7fd febe 	bl	800116c <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f4:	f7fd feba 	bl	800116c <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e232      	b.n	800386c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003406:	4b34      	ldr	r3, [pc, #208]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0f0      	beq.n	80033f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003412:	4b31      	ldr	r3, [pc, #196]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	061b      	lsls	r3, r3, #24
 8003420:	492d      	ldr	r1, [pc, #180]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 8003422:	4313      	orrs	r3, r2
 8003424:	604b      	str	r3, [r1, #4]
 8003426:	e01a      	b.n	800345e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003428:	4b2b      	ldr	r3, [pc, #172]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a2a      	ldr	r2, [pc, #168]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 800342e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003434:	f7fd fe9a 	bl	800116c <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800343c:	f7fd fe96 	bl	800116c <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e20e      	b.n	800386c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800344e:	4b22      	ldr	r3, [pc, #136]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0x1e0>
 800345a:	e000      	b.n	800345e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800345c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d041      	beq.n	80034ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d01c      	beq.n	80034ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003472:	4b19      	ldr	r3, [pc, #100]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 8003474:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003478:	4a17      	ldr	r2, [pc, #92]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003482:	f7fd fe73 	bl	800116c <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800348a:	f7fd fe6f 	bl	800116c <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e1e7      	b.n	800386c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800349c:	4b0e      	ldr	r3, [pc, #56]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 800349e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0ef      	beq.n	800348a <HAL_RCC_OscConfig+0x22e>
 80034aa:	e020      	b.n	80034ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ac:	4b0a      	ldr	r3, [pc, #40]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80034ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034b2:	4a09      	ldr	r2, [pc, #36]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80034b4:	f023 0301 	bic.w	r3, r3, #1
 80034b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034bc:	f7fd fe56 	bl	800116c <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034c2:	e00d      	b.n	80034e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c4:	f7fd fe52 	bl	800116c <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d906      	bls.n	80034e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e1ca      	b.n	800386c <HAL_RCC_OscConfig+0x610>
 80034d6:	bf00      	nop
 80034d8:	40021000 	.word	0x40021000
 80034dc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034e0:	4b8c      	ldr	r3, [pc, #560]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 80034e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1ea      	bne.n	80034c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 80a6 	beq.w	8003648 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034fc:	2300      	movs	r3, #0
 80034fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003500:	4b84      	ldr	r3, [pc, #528]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 8003502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_RCC_OscConfig+0x2b4>
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <HAL_RCC_OscConfig+0x2b6>
 8003510:	2300      	movs	r3, #0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00d      	beq.n	8003532 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003516:	4b7f      	ldr	r3, [pc, #508]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 8003518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351a:	4a7e      	ldr	r2, [pc, #504]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 800351c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003520:	6593      	str	r3, [r2, #88]	@ 0x58
 8003522:	4b7c      	ldr	r3, [pc, #496]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 8003524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800352e:	2301      	movs	r3, #1
 8003530:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003532:	4b79      	ldr	r3, [pc, #484]	@ (8003718 <HAL_RCC_OscConfig+0x4bc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800353a:	2b00      	cmp	r3, #0
 800353c:	d118      	bne.n	8003570 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800353e:	4b76      	ldr	r3, [pc, #472]	@ (8003718 <HAL_RCC_OscConfig+0x4bc>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a75      	ldr	r2, [pc, #468]	@ (8003718 <HAL_RCC_OscConfig+0x4bc>)
 8003544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800354a:	f7fd fe0f 	bl	800116c <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003552:	f7fd fe0b 	bl	800116c <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e183      	b.n	800386c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003564:	4b6c      	ldr	r3, [pc, #432]	@ (8003718 <HAL_RCC_OscConfig+0x4bc>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d108      	bne.n	800358a <HAL_RCC_OscConfig+0x32e>
 8003578:	4b66      	ldr	r3, [pc, #408]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 800357a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800357e:	4a65      	ldr	r2, [pc, #404]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003588:	e024      	b.n	80035d4 <HAL_RCC_OscConfig+0x378>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2b05      	cmp	r3, #5
 8003590:	d110      	bne.n	80035b4 <HAL_RCC_OscConfig+0x358>
 8003592:	4b60      	ldr	r3, [pc, #384]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 8003594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003598:	4a5e      	ldr	r2, [pc, #376]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 800359a:	f043 0304 	orr.w	r3, r3, #4
 800359e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035a2:	4b5c      	ldr	r3, [pc, #368]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 80035a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a8:	4a5a      	ldr	r2, [pc, #360]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 80035aa:	f043 0301 	orr.w	r3, r3, #1
 80035ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035b2:	e00f      	b.n	80035d4 <HAL_RCC_OscConfig+0x378>
 80035b4:	4b57      	ldr	r3, [pc, #348]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ba:	4a56      	ldr	r2, [pc, #344]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 80035bc:	f023 0301 	bic.w	r3, r3, #1
 80035c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035c4:	4b53      	ldr	r3, [pc, #332]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 80035c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ca:	4a52      	ldr	r2, [pc, #328]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 80035cc:	f023 0304 	bic.w	r3, r3, #4
 80035d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d016      	beq.n	800360a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035dc:	f7fd fdc6 	bl	800116c <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035e2:	e00a      	b.n	80035fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e4:	f7fd fdc2 	bl	800116c <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e138      	b.n	800386c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035fa:	4b46      	ldr	r3, [pc, #280]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 80035fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0ed      	beq.n	80035e4 <HAL_RCC_OscConfig+0x388>
 8003608:	e015      	b.n	8003636 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360a:	f7fd fdaf 	bl	800116c <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003610:	e00a      	b.n	8003628 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003612:	f7fd fdab 	bl	800116c <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003620:	4293      	cmp	r3, r2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e121      	b.n	800386c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003628:	4b3a      	ldr	r3, [pc, #232]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 800362a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1ed      	bne.n	8003612 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003636:	7ffb      	ldrb	r3, [r7, #31]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d105      	bne.n	8003648 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800363c:	4b35      	ldr	r3, [pc, #212]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 800363e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003640:	4a34      	ldr	r2, [pc, #208]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 8003642:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003646:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b00      	cmp	r3, #0
 8003652:	d03c      	beq.n	80036ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01c      	beq.n	8003696 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800365c:	4b2d      	ldr	r3, [pc, #180]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 800365e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003662:	4a2c      	ldr	r2, [pc, #176]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366c:	f7fd fd7e 	bl	800116c <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003674:	f7fd fd7a 	bl	800116c <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e0f2      	b.n	800386c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003686:	4b23      	ldr	r3, [pc, #140]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 8003688:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0ef      	beq.n	8003674 <HAL_RCC_OscConfig+0x418>
 8003694:	e01b      	b.n	80036ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003696:	4b1f      	ldr	r3, [pc, #124]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 8003698:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800369c:	4a1d      	ldr	r2, [pc, #116]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 800369e:	f023 0301 	bic.w	r3, r3, #1
 80036a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a6:	f7fd fd61 	bl	800116c <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036ae:	f7fd fd5d 	bl	800116c <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e0d5      	b.n	800386c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036c0:	4b14      	ldr	r3, [pc, #80]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 80036c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1ef      	bne.n	80036ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 80c9 	beq.w	800386a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 030c 	and.w	r3, r3, #12
 80036e0:	2b0c      	cmp	r3, #12
 80036e2:	f000 8083 	beq.w	80037ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d15e      	bne.n	80037ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ee:	4b09      	ldr	r3, [pc, #36]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a08      	ldr	r2, [pc, #32]	@ (8003714 <HAL_RCC_OscConfig+0x4b8>)
 80036f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fa:	f7fd fd37 	bl	800116c <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003700:	e00c      	b.n	800371c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003702:	f7fd fd33 	bl	800116c <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d905      	bls.n	800371c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e0ab      	b.n	800386c <HAL_RCC_OscConfig+0x610>
 8003714:	40021000 	.word	0x40021000
 8003718:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800371c:	4b55      	ldr	r3, [pc, #340]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1ec      	bne.n	8003702 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003728:	4b52      	ldr	r3, [pc, #328]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	4b52      	ldr	r3, [pc, #328]	@ (8003878 <HAL_RCC_OscConfig+0x61c>)
 800372e:	4013      	ands	r3, r2
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6a11      	ldr	r1, [r2, #32]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003738:	3a01      	subs	r2, #1
 800373a:	0112      	lsls	r2, r2, #4
 800373c:	4311      	orrs	r1, r2
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003742:	0212      	lsls	r2, r2, #8
 8003744:	4311      	orrs	r1, r2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800374a:	0852      	lsrs	r2, r2, #1
 800374c:	3a01      	subs	r2, #1
 800374e:	0552      	lsls	r2, r2, #21
 8003750:	4311      	orrs	r1, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003756:	0852      	lsrs	r2, r2, #1
 8003758:	3a01      	subs	r2, #1
 800375a:	0652      	lsls	r2, r2, #25
 800375c:	4311      	orrs	r1, r2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003762:	06d2      	lsls	r2, r2, #27
 8003764:	430a      	orrs	r2, r1
 8003766:	4943      	ldr	r1, [pc, #268]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 8003768:	4313      	orrs	r3, r2
 800376a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800376c:	4b41      	ldr	r3, [pc, #260]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a40      	ldr	r2, [pc, #256]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 8003772:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003776:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003778:	4b3e      	ldr	r3, [pc, #248]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	4a3d      	ldr	r2, [pc, #244]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 800377e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003782:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003784:	f7fd fcf2 	bl	800116c <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800378c:	f7fd fcee 	bl	800116c <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e066      	b.n	800386c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800379e:	4b35      	ldr	r3, [pc, #212]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0x530>
 80037aa:	e05e      	b.n	800386a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ac:	4b31      	ldr	r3, [pc, #196]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a30      	ldr	r2, [pc, #192]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 80037b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b8:	f7fd fcd8 	bl	800116c <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c0:	f7fd fcd4 	bl	800116c <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e04c      	b.n	800386c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037d2:	4b28      	ldr	r3, [pc, #160]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80037de:	4b25      	ldr	r3, [pc, #148]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	4924      	ldr	r1, [pc, #144]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 80037e4:	4b25      	ldr	r3, [pc, #148]	@ (800387c <HAL_RCC_OscConfig+0x620>)
 80037e6:	4013      	ands	r3, r2
 80037e8:	60cb      	str	r3, [r1, #12]
 80037ea:	e03e      	b.n	800386a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e039      	b.n	800386c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80037f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003874 <HAL_RCC_OscConfig+0x618>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f003 0203 	and.w	r2, r3, #3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	429a      	cmp	r2, r3
 800380a:	d12c      	bne.n	8003866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003816:	3b01      	subs	r3, #1
 8003818:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d123      	bne.n	8003866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003828:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800382a:	429a      	cmp	r2, r3
 800382c:	d11b      	bne.n	8003866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003838:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800383a:	429a      	cmp	r2, r3
 800383c:	d113      	bne.n	8003866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003848:	085b      	lsrs	r3, r3, #1
 800384a:	3b01      	subs	r3, #1
 800384c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800384e:	429a      	cmp	r2, r3
 8003850:	d109      	bne.n	8003866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800385c:	085b      	lsrs	r3, r3, #1
 800385e:	3b01      	subs	r3, #1
 8003860:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003862:	429a      	cmp	r2, r3
 8003864:	d001      	beq.n	800386a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3720      	adds	r7, #32
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40021000 	.word	0x40021000
 8003878:	019f800c 	.word	0x019f800c
 800387c:	feeefffc 	.word	0xfeeefffc

08003880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800388a:	2300      	movs	r3, #0
 800388c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e11e      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003898:	4b91      	ldr	r3, [pc, #580]	@ (8003ae0 <HAL_RCC_ClockConfig+0x260>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 030f 	and.w	r3, r3, #15
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d910      	bls.n	80038c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a6:	4b8e      	ldr	r3, [pc, #568]	@ (8003ae0 <HAL_RCC_ClockConfig+0x260>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f023 020f 	bic.w	r2, r3, #15
 80038ae:	498c      	ldr	r1, [pc, #560]	@ (8003ae0 <HAL_RCC_ClockConfig+0x260>)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b6:	4b8a      	ldr	r3, [pc, #552]	@ (8003ae0 <HAL_RCC_ClockConfig+0x260>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d001      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e106      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d073      	beq.n	80039bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d129      	bne.n	8003930 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038dc:	4b81      	ldr	r3, [pc, #516]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e0f4      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80038ec:	f000 f9ba 	bl	8003c64 <RCC_GetSysClockFreqFromPLLSource>
 80038f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4a7c      	ldr	r2, [pc, #496]	@ (8003ae8 <HAL_RCC_ClockConfig+0x268>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d93f      	bls.n	800397a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80038fa:	4b7a      	ldr	r3, [pc, #488]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d009      	beq.n	800391a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800390e:	2b00      	cmp	r3, #0
 8003910:	d033      	beq.n	800397a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003916:	2b00      	cmp	r3, #0
 8003918:	d12f      	bne.n	800397a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800391a:	4b72      	ldr	r3, [pc, #456]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003922:	4a70      	ldr	r2, [pc, #448]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 8003924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003928:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800392a:	2380      	movs	r3, #128	@ 0x80
 800392c:	617b      	str	r3, [r7, #20]
 800392e:	e024      	b.n	800397a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b02      	cmp	r3, #2
 8003936:	d107      	bne.n	8003948 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003938:	4b6a      	ldr	r3, [pc, #424]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d109      	bne.n	8003958 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0c6      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003948:	4b66      	ldr	r3, [pc, #408]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0be      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003958:	f000 f8ce 	bl	8003af8 <HAL_RCC_GetSysClockFreq>
 800395c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4a61      	ldr	r2, [pc, #388]	@ (8003ae8 <HAL_RCC_ClockConfig+0x268>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d909      	bls.n	800397a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003966:	4b5f      	ldr	r3, [pc, #380]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800396e:	4a5d      	ldr	r2, [pc, #372]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 8003970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003974:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003976:	2380      	movs	r3, #128	@ 0x80
 8003978:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800397a:	4b5a      	ldr	r3, [pc, #360]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f023 0203 	bic.w	r2, r3, #3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	4957      	ldr	r1, [pc, #348]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 8003988:	4313      	orrs	r3, r2
 800398a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800398c:	f7fd fbee 	bl	800116c <HAL_GetTick>
 8003990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003992:	e00a      	b.n	80039aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003994:	f7fd fbea 	bl	800116c <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e095      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039aa:	4b4e      	ldr	r3, [pc, #312]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 020c 	and.w	r2, r3, #12
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d1eb      	bne.n	8003994 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d023      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039d4:	4b43      	ldr	r3, [pc, #268]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	4a42      	ldr	r2, [pc, #264]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 80039da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80039de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d007      	beq.n	80039fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80039ec:	4b3d      	ldr	r3, [pc, #244]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80039f4:	4a3b      	ldr	r2, [pc, #236]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 80039f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80039fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039fc:	4b39      	ldr	r3, [pc, #228]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	4936      	ldr	r1, [pc, #216]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	608b      	str	r3, [r1, #8]
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	2b80      	cmp	r3, #128	@ 0x80
 8003a14:	d105      	bne.n	8003a22 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a16:	4b33      	ldr	r3, [pc, #204]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	4a32      	ldr	r2, [pc, #200]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 8003a1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a20:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a22:	4b2f      	ldr	r3, [pc, #188]	@ (8003ae0 <HAL_RCC_ClockConfig+0x260>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d21d      	bcs.n	8003a6c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a30:	4b2b      	ldr	r3, [pc, #172]	@ (8003ae0 <HAL_RCC_ClockConfig+0x260>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f023 020f 	bic.w	r2, r3, #15
 8003a38:	4929      	ldr	r1, [pc, #164]	@ (8003ae0 <HAL_RCC_ClockConfig+0x260>)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a40:	f7fd fb94 	bl	800116c <HAL_GetTick>
 8003a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a46:	e00a      	b.n	8003a5e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a48:	f7fd fb90 	bl	800116c <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e03b      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5e:	4b20      	ldr	r3, [pc, #128]	@ (8003ae0 <HAL_RCC_ClockConfig+0x260>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d1ed      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d008      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a78:	4b1a      	ldr	r3, [pc, #104]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	4917      	ldr	r1, [pc, #92]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a96:	4b13      	ldr	r3, [pc, #76]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	490f      	ldr	r1, [pc, #60]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003aaa:	f000 f825 	bl	8003af8 <HAL_RCC_GetSysClockFreq>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae4 <HAL_RCC_ClockConfig+0x264>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	490c      	ldr	r1, [pc, #48]	@ (8003aec <HAL_RCC_ClockConfig+0x26c>)
 8003abc:	5ccb      	ldrb	r3, [r1, r3]
 8003abe:	f003 031f 	and.w	r3, r3, #31
 8003ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8003af0 <HAL_RCC_ClockConfig+0x270>)
 8003ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003aca:	4b0a      	ldr	r3, [pc, #40]	@ (8003af4 <HAL_RCC_ClockConfig+0x274>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fc feec 	bl	80008ac <HAL_InitTick>
 8003ad4:	4603      	mov	r3, r0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3718      	adds	r7, #24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40022000 	.word	0x40022000
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	04c4b400 	.word	0x04c4b400
 8003aec:	0800af24 	.word	0x0800af24
 8003af0:	20000000 	.word	0x20000000
 8003af4:	20000004 	.word	0x20000004

08003af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003afe:	4b2c      	ldr	r3, [pc, #176]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d102      	bne.n	8003b10 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b0c:	613b      	str	r3, [r7, #16]
 8003b0e:	e047      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b10:	4b27      	ldr	r3, [pc, #156]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 030c 	and.w	r3, r3, #12
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d102      	bne.n	8003b22 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b1c:	4b26      	ldr	r3, [pc, #152]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	e03e      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b22:	4b23      	ldr	r3, [pc, #140]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 030c 	and.w	r3, r3, #12
 8003b2a:	2b0c      	cmp	r3, #12
 8003b2c:	d136      	bne.n	8003b9c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b2e:	4b20      	ldr	r3, [pc, #128]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b38:	4b1d      	ldr	r3, [pc, #116]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	091b      	lsrs	r3, r3, #4
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	3301      	adds	r3, #1
 8003b44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d10c      	bne.n	8003b66 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b4c:	4a1a      	ldr	r2, [pc, #104]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b54:	4a16      	ldr	r2, [pc, #88]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b56:	68d2      	ldr	r2, [r2, #12]
 8003b58:	0a12      	lsrs	r2, r2, #8
 8003b5a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	617b      	str	r3, [r7, #20]
      break;
 8003b64:	e00c      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b66:	4a13      	ldr	r2, [pc, #76]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6e:	4a10      	ldr	r2, [pc, #64]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b70:	68d2      	ldr	r2, [r2, #12]
 8003b72:	0a12      	lsrs	r2, r2, #8
 8003b74:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b78:	fb02 f303 	mul.w	r3, r2, r3
 8003b7c:	617b      	str	r3, [r7, #20]
      break;
 8003b7e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b80:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	0e5b      	lsrs	r3, r3, #25
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	613b      	str	r3, [r7, #16]
 8003b9a:	e001      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ba0:	693b      	ldr	r3, [r7, #16]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	00f42400 	.word	0x00f42400
 8003bb8:	016e3600 	.word	0x016e3600

08003bbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc0:	4b03      	ldr	r3, [pc, #12]	@ (8003bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	20000000 	.word	0x20000000

08003bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003bd8:	f7ff fff0 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	4b06      	ldr	r3, [pc, #24]	@ (8003bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	0a1b      	lsrs	r3, r3, #8
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	4904      	ldr	r1, [pc, #16]	@ (8003bfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bea:	5ccb      	ldrb	r3, [r1, r3]
 8003bec:	f003 031f 	and.w	r3, r3, #31
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	0800af34 	.word	0x0800af34

08003c00 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	220f      	movs	r2, #15
 8003c0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003c10:	4b12      	ldr	r3, [pc, #72]	@ (8003c5c <HAL_RCC_GetClockConfig+0x5c>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 0203 	and.w	r2, r3, #3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c5c <HAL_RCC_GetClockConfig+0x5c>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003c28:	4b0c      	ldr	r3, [pc, #48]	@ (8003c5c <HAL_RCC_GetClockConfig+0x5c>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003c34:	4b09      	ldr	r3, [pc, #36]	@ (8003c5c <HAL_RCC_GetClockConfig+0x5c>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	08db      	lsrs	r3, r3, #3
 8003c3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003c42:	4b07      	ldr	r3, [pc, #28]	@ (8003c60 <HAL_RCC_GetClockConfig+0x60>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 020f 	and.w	r2, r3, #15
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	601a      	str	r2, [r3, #0]
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40022000 	.word	0x40022000

08003c64 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ce4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c74:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	091b      	lsrs	r3, r3, #4
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	3301      	adds	r3, #1
 8003c80:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d10c      	bne.n	8003ca2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c88:	4a17      	ldr	r2, [pc, #92]	@ (8003ce8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c90:	4a14      	ldr	r2, [pc, #80]	@ (8003ce4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c92:	68d2      	ldr	r2, [r2, #12]
 8003c94:	0a12      	lsrs	r2, r2, #8
 8003c96:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c9a:	fb02 f303 	mul.w	r3, r2, r3
 8003c9e:	617b      	str	r3, [r7, #20]
    break;
 8003ca0:	e00c      	b.n	8003cbc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ca2:	4a12      	ldr	r2, [pc, #72]	@ (8003cec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003caa:	4a0e      	ldr	r2, [pc, #56]	@ (8003ce4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cac:	68d2      	ldr	r2, [r2, #12]
 8003cae:	0a12      	lsrs	r2, r2, #8
 8003cb0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003cb4:	fb02 f303 	mul.w	r3, r2, r3
 8003cb8:	617b      	str	r3, [r7, #20]
    break;
 8003cba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cbc:	4b09      	ldr	r3, [pc, #36]	@ (8003ce4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	0e5b      	lsrs	r3, r3, #25
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003cd6:	687b      	ldr	r3, [r7, #4]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	371c      	adds	r7, #28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	016e3600 	.word	0x016e3600
 8003cec:	00f42400 	.word	0x00f42400

08003cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 8098 	beq.w	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d12:	4b43      	ldr	r3, [pc, #268]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10d      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d1e:	4b40      	ldr	r3, [pc, #256]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d22:	4a3f      	ldr	r2, [pc, #252]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d28:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d2a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d32:	60bb      	str	r3, [r7, #8]
 8003d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d36:	2301      	movs	r3, #1
 8003d38:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d3a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a39      	ldr	r2, [pc, #228]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d46:	f7fd fa11 	bl	800116c <HAL_GetTick>
 8003d4a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d4c:	e009      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d4e:	f7fd fa0d 	bl	800116c <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d902      	bls.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	74fb      	strb	r3, [r7, #19]
        break;
 8003d60:	e005      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d62:	4b30      	ldr	r3, [pc, #192]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0ef      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003d6e:	7cfb      	ldrb	r3, [r7, #19]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d159      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d74:	4b2a      	ldr	r3, [pc, #168]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d7e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d01e      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d019      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d90:	4b23      	ldr	r3, [pc, #140]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d9c:	4b20      	ldr	r3, [pc, #128]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da2:	4a1f      	ldr	r2, [pc, #124]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003da8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dac:	4b1c      	ldr	r3, [pc, #112]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db2:	4a1b      	ldr	r2, [pc, #108]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003db4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003db8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dbc:	4a18      	ldr	r2, [pc, #96]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d016      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dce:	f7fd f9cd 	bl	800116c <HAL_GetTick>
 8003dd2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dd4:	e00b      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd6:	f7fd f9c9 	bl	800116c <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d902      	bls.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	74fb      	strb	r3, [r7, #19]
            break;
 8003dec:	e006      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dee:	4b0c      	ldr	r3, [pc, #48]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0ec      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003dfc:	7cfb      	ldrb	r3, [r7, #19]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10b      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e02:	4b07      	ldr	r3, [pc, #28]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e10:	4903      	ldr	r1, [pc, #12]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e18:	e008      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e1a:	7cfb      	ldrb	r3, [r7, #19]
 8003e1c:	74bb      	strb	r3, [r7, #18]
 8003e1e:	e005      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e20:	40021000 	.word	0x40021000
 8003e24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e28:	7cfb      	ldrb	r3, [r7, #19]
 8003e2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e2c:	7c7b      	ldrb	r3, [r7, #17]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d105      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e32:	4ba7      	ldr	r3, [pc, #668]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e36:	4aa6      	ldr	r2, [pc, #664]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e3c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e4a:	4ba1      	ldr	r3, [pc, #644]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e50:	f023 0203 	bic.w	r2, r3, #3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	499d      	ldr	r1, [pc, #628]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e6c:	4b98      	ldr	r3, [pc, #608]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e72:	f023 020c 	bic.w	r2, r3, #12
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	4995      	ldr	r1, [pc, #596]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e8e:	4b90      	ldr	r3, [pc, #576]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e94:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	498c      	ldr	r1, [pc, #560]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003eb0:	4b87      	ldr	r3, [pc, #540]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	4984      	ldr	r1, [pc, #528]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0310 	and.w	r3, r3, #16
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ed2:	4b7f      	ldr	r3, [pc, #508]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	497b      	ldr	r1, [pc, #492]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0320 	and.w	r3, r3, #32
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ef4:	4b76      	ldr	r3, [pc, #472]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003efa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	4973      	ldr	r1, [pc, #460]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f16:	4b6e      	ldr	r3, [pc, #440]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f1c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	496a      	ldr	r1, [pc, #424]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f38:	4b65      	ldr	r3, [pc, #404]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f3e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	4962      	ldr	r1, [pc, #392]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f5a:	4b5d      	ldr	r3, [pc, #372]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	4959      	ldr	r1, [pc, #356]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00a      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f7c:	4b54      	ldr	r3, [pc, #336]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f82:	f023 0203 	bic.w	r2, r3, #3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8a:	4951      	ldr	r1, [pc, #324]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f9e:	4b4c      	ldr	r3, [pc, #304]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fac:	4948      	ldr	r1, [pc, #288]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d015      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fc0:	4b43      	ldr	r3, [pc, #268]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fce:	4940      	ldr	r1, [pc, #256]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fde:	d105      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fe0:	4b3b      	ldr	r3, [pc, #236]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	4a3a      	ldr	r2, [pc, #232]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fe6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fea:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d015      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ff8:	4b35      	ldr	r3, [pc, #212]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004006:	4932      	ldr	r1, [pc, #200]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004012:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004016:	d105      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004018:	4b2d      	ldr	r3, [pc, #180]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	4a2c      	ldr	r2, [pc, #176]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800401e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004022:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d015      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004030:	4b27      	ldr	r3, [pc, #156]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004036:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800403e:	4924      	ldr	r1, [pc, #144]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800404a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800404e:	d105      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004050:	4b1f      	ldr	r3, [pc, #124]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4a1e      	ldr	r2, [pc, #120]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004056:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800405a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d015      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004068:	4b19      	ldr	r3, [pc, #100]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800406a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800406e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004076:	4916      	ldr	r1, [pc, #88]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004082:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004086:	d105      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004088:	4b11      	ldr	r3, [pc, #68]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	4a10      	ldr	r2, [pc, #64]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800408e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004092:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d019      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040a0:	4b0b      	ldr	r3, [pc, #44]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ae:	4908      	ldr	r1, [pc, #32]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040be:	d109      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c0:	4b03      	ldr	r3, [pc, #12]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	4a02      	ldr	r2, [pc, #8]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040ca:	60d3      	str	r3, [r2, #12]
 80040cc:	e002      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80040ce:	bf00      	nop
 80040d0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d015      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040e0:	4b29      	ldr	r3, [pc, #164]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ee:	4926      	ldr	r1, [pc, #152]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040fe:	d105      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004100:	4b21      	ldr	r3, [pc, #132]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	4a20      	ldr	r2, [pc, #128]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004106:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800410a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d015      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004118:	4b1b      	ldr	r3, [pc, #108]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800411e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004126:	4918      	ldr	r1, [pc, #96]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004136:	d105      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004138:	4b13      	ldr	r3, [pc, #76]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	4a12      	ldr	r2, [pc, #72]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800413e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004142:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d015      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004150:	4b0d      	ldr	r3, [pc, #52]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004152:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004156:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800415e:	490a      	ldr	r1, [pc, #40]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800416a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800416e:	d105      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004170:	4b05      	ldr	r3, [pc, #20]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	4a04      	ldr	r2, [pc, #16]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004176:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800417a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800417c:	7cbb      	ldrb	r3, [r7, #18]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	40021000 	.word	0x40021000

0800418c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e049      	b.n	8004232 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d106      	bne.n	80041b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fc fe38 	bl	8000e28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3304      	adds	r3, #4
 80041c8:	4619      	mov	r1, r3
 80041ca:	4610      	mov	r0, r2
 80041cc:	f000 fca6 	bl	8004b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b01      	cmp	r3, #1
 800424e:	d001      	beq.n	8004254 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e054      	b.n	80042fe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0201 	orr.w	r2, r2, #1
 800426a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a26      	ldr	r2, [pc, #152]	@ (800430c <HAL_TIM_Base_Start_IT+0xd0>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d022      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x80>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800427e:	d01d      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x80>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a22      	ldr	r2, [pc, #136]	@ (8004310 <HAL_TIM_Base_Start_IT+0xd4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d018      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x80>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a21      	ldr	r2, [pc, #132]	@ (8004314 <HAL_TIM_Base_Start_IT+0xd8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d013      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x80>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1f      	ldr	r2, [pc, #124]	@ (8004318 <HAL_TIM_Base_Start_IT+0xdc>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d00e      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x80>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a1e      	ldr	r2, [pc, #120]	@ (800431c <HAL_TIM_Base_Start_IT+0xe0>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d009      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x80>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a1c      	ldr	r2, [pc, #112]	@ (8004320 <HAL_TIM_Base_Start_IT+0xe4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d004      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x80>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004324 <HAL_TIM_Base_Start_IT+0xe8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d115      	bne.n	80042e8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	4b19      	ldr	r3, [pc, #100]	@ (8004328 <HAL_TIM_Base_Start_IT+0xec>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b06      	cmp	r3, #6
 80042cc:	d015      	beq.n	80042fa <HAL_TIM_Base_Start_IT+0xbe>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042d4:	d011      	beq.n	80042fa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f042 0201 	orr.w	r2, r2, #1
 80042e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e6:	e008      	b.n	80042fa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	e000      	b.n	80042fc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40012c00 	.word	0x40012c00
 8004310:	40000400 	.word	0x40000400
 8004314:	40000800 	.word	0x40000800
 8004318:	40000c00 	.word	0x40000c00
 800431c:	40013400 	.word	0x40013400
 8004320:	40014000 	.word	0x40014000
 8004324:	40015000 	.word	0x40015000
 8004328:	00010007 	.word	0x00010007

0800432c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e049      	b.n	80043d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d106      	bne.n	8004358 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f841 	bl	80043da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3304      	adds	r3, #4
 8004368:	4619      	mov	r1, r3
 800436a:	4610      	mov	r0, r2
 800436c:	f000 fbd6 	bl	8004b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d020      	beq.n	8004452 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d01b      	beq.n	8004452 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f06f 0202 	mvn.w	r2, #2
 8004422:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 fb51 	bl	8004ae0 <HAL_TIM_IC_CaptureCallback>
 800443e:	e005      	b.n	800444c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 fb43 	bl	8004acc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fb54 	bl	8004af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b00      	cmp	r3, #0
 800445a:	d020      	beq.n	800449e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f003 0304 	and.w	r3, r3, #4
 8004462:	2b00      	cmp	r3, #0
 8004464:	d01b      	beq.n	800449e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f06f 0204 	mvn.w	r2, #4
 800446e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 fb2b 	bl	8004ae0 <HAL_TIM_IC_CaptureCallback>
 800448a:	e005      	b.n	8004498 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 fb1d 	bl	8004acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fb2e 	bl	8004af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d020      	beq.n	80044ea <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d01b      	beq.n	80044ea <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f06f 0208 	mvn.w	r2, #8
 80044ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2204      	movs	r2, #4
 80044c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	f003 0303 	and.w	r3, r3, #3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 fb05 	bl	8004ae0 <HAL_TIM_IC_CaptureCallback>
 80044d6:	e005      	b.n	80044e4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 faf7 	bl	8004acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fb08 	bl	8004af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	f003 0310 	and.w	r3, r3, #16
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d020      	beq.n	8004536 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f003 0310 	and.w	r3, r3, #16
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d01b      	beq.n	8004536 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f06f 0210 	mvn.w	r2, #16
 8004506:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2208      	movs	r2, #8
 800450c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 fadf 	bl	8004ae0 <HAL_TIM_IC_CaptureCallback>
 8004522:	e005      	b.n	8004530 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 fad1 	bl	8004acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fae2 	bl	8004af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00c      	beq.n	800455a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d007      	beq.n	800455a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f06f 0201 	mvn.w	r2, #1
 8004552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7fc f96f 	bl	8000838 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004560:	2b00      	cmp	r3, #0
 8004562:	d104      	bne.n	800456e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00c      	beq.n	8004588 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004574:	2b00      	cmp	r3, #0
 8004576:	d007      	beq.n	8004588 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f001 fa5e 	bl	8005a44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00c      	beq.n	80045ac <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004598:	2b00      	cmp	r3, #0
 800459a:	d007      	beq.n	80045ac <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80045a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f001 fa56 	bl	8005a58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00c      	beq.n	80045d0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d007      	beq.n	80045d0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fa9c 	bl	8004b08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f003 0320 	and.w	r3, r3, #32
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00c      	beq.n	80045f4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f003 0320 	and.w	r3, r3, #32
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d007      	beq.n	80045f4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f06f 0220 	mvn.w	r2, #32
 80045ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7fc f90e 	bl	8000810 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00c      	beq.n	8004618 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d007      	beq.n	8004618 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f001 fa2a 	bl	8005a6c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00c      	beq.n	800463c <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d007      	beq.n	800463c <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f001 fa22 	bl	8005a80 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00c      	beq.n	8004660 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d007      	beq.n	8004660 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f001 fa1a 	bl	8005a94 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00c      	beq.n	8004684 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d007      	beq.n	8004684 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800467c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f001 fa12 	bl	8005aa8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004684:	bf00      	nop
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d101      	bne.n	80046aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046a6:	2302      	movs	r3, #2
 80046a8:	e0ff      	b.n	80048aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b14      	cmp	r3, #20
 80046b6:	f200 80f0 	bhi.w	800489a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80046ba:	a201      	add	r2, pc, #4	@ (adr r2, 80046c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c0:	08004715 	.word	0x08004715
 80046c4:	0800489b 	.word	0x0800489b
 80046c8:	0800489b 	.word	0x0800489b
 80046cc:	0800489b 	.word	0x0800489b
 80046d0:	08004755 	.word	0x08004755
 80046d4:	0800489b 	.word	0x0800489b
 80046d8:	0800489b 	.word	0x0800489b
 80046dc:	0800489b 	.word	0x0800489b
 80046e0:	08004797 	.word	0x08004797
 80046e4:	0800489b 	.word	0x0800489b
 80046e8:	0800489b 	.word	0x0800489b
 80046ec:	0800489b 	.word	0x0800489b
 80046f0:	080047d7 	.word	0x080047d7
 80046f4:	0800489b 	.word	0x0800489b
 80046f8:	0800489b 	.word	0x0800489b
 80046fc:	0800489b 	.word	0x0800489b
 8004700:	08004819 	.word	0x08004819
 8004704:	0800489b 	.word	0x0800489b
 8004708:	0800489b 	.word	0x0800489b
 800470c:	0800489b 	.word	0x0800489b
 8004710:	08004859 	.word	0x08004859
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68b9      	ldr	r1, [r7, #8]
 800471a:	4618      	mov	r0, r3
 800471c:	f000 fab2 	bl	8004c84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699a      	ldr	r2, [r3, #24]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0208 	orr.w	r2, r2, #8
 800472e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699a      	ldr	r2, [r3, #24]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0204 	bic.w	r2, r2, #4
 800473e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6999      	ldr	r1, [r3, #24]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	691a      	ldr	r2, [r3, #16]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	619a      	str	r2, [r3, #24]
      break;
 8004752:	e0a5      	b.n	80048a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	4618      	mov	r0, r3
 800475c:	f000 fb2c 	bl	8004db8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800476e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699a      	ldr	r2, [r3, #24]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800477e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6999      	ldr	r1, [r3, #24]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	021a      	lsls	r2, r3, #8
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	619a      	str	r2, [r3, #24]
      break;
 8004794:	e084      	b.n	80048a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	4618      	mov	r0, r3
 800479e:	f000 fb9f 	bl	8004ee0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69da      	ldr	r2, [r3, #28]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f042 0208 	orr.w	r2, r2, #8
 80047b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69da      	ldr	r2, [r3, #28]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0204 	bic.w	r2, r2, #4
 80047c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69d9      	ldr	r1, [r3, #28]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	61da      	str	r2, [r3, #28]
      break;
 80047d4:	e064      	b.n	80048a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68b9      	ldr	r1, [r7, #8]
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 fc11 	bl	8005004 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69da      	ldr	r2, [r3, #28]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	69da      	ldr	r2, [r3, #28]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69d9      	ldr	r1, [r3, #28]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	021a      	lsls	r2, r3, #8
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	61da      	str	r2, [r3, #28]
      break;
 8004816:	e043      	b.n	80048a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68b9      	ldr	r1, [r7, #8]
 800481e:	4618      	mov	r0, r3
 8004820:	f000 fc84 	bl	800512c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0208 	orr.w	r2, r2, #8
 8004832:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0204 	bic.w	r2, r2, #4
 8004842:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	691a      	ldr	r2, [r3, #16]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004856:	e023      	b.n	80048a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68b9      	ldr	r1, [r7, #8]
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fcce 	bl	8005200 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004872:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004882:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	021a      	lsls	r2, r3, #8
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004898:	e002      	b.n	80048a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	75fb      	strb	r3, [r7, #23]
      break;
 800489e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop

080048b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_TIM_ConfigClockSource+0x1c>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e0ee      	b.n	8004aae <HAL_TIM_ConfigClockSource+0x1fa>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80048ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80048f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a6b      	ldr	r2, [pc, #428]	@ (8004ab8 <HAL_TIM_ConfigClockSource+0x204>)
 800490a:	4293      	cmp	r3, r2
 800490c:	f000 80b9 	beq.w	8004a82 <HAL_TIM_ConfigClockSource+0x1ce>
 8004910:	4a69      	ldr	r2, [pc, #420]	@ (8004ab8 <HAL_TIM_ConfigClockSource+0x204>)
 8004912:	4293      	cmp	r3, r2
 8004914:	f200 80be 	bhi.w	8004a94 <HAL_TIM_ConfigClockSource+0x1e0>
 8004918:	4a68      	ldr	r2, [pc, #416]	@ (8004abc <HAL_TIM_ConfigClockSource+0x208>)
 800491a:	4293      	cmp	r3, r2
 800491c:	f000 80b1 	beq.w	8004a82 <HAL_TIM_ConfigClockSource+0x1ce>
 8004920:	4a66      	ldr	r2, [pc, #408]	@ (8004abc <HAL_TIM_ConfigClockSource+0x208>)
 8004922:	4293      	cmp	r3, r2
 8004924:	f200 80b6 	bhi.w	8004a94 <HAL_TIM_ConfigClockSource+0x1e0>
 8004928:	4a65      	ldr	r2, [pc, #404]	@ (8004ac0 <HAL_TIM_ConfigClockSource+0x20c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	f000 80a9 	beq.w	8004a82 <HAL_TIM_ConfigClockSource+0x1ce>
 8004930:	4a63      	ldr	r2, [pc, #396]	@ (8004ac0 <HAL_TIM_ConfigClockSource+0x20c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	f200 80ae 	bhi.w	8004a94 <HAL_TIM_ConfigClockSource+0x1e0>
 8004938:	4a62      	ldr	r2, [pc, #392]	@ (8004ac4 <HAL_TIM_ConfigClockSource+0x210>)
 800493a:	4293      	cmp	r3, r2
 800493c:	f000 80a1 	beq.w	8004a82 <HAL_TIM_ConfigClockSource+0x1ce>
 8004940:	4a60      	ldr	r2, [pc, #384]	@ (8004ac4 <HAL_TIM_ConfigClockSource+0x210>)
 8004942:	4293      	cmp	r3, r2
 8004944:	f200 80a6 	bhi.w	8004a94 <HAL_TIM_ConfigClockSource+0x1e0>
 8004948:	4a5f      	ldr	r2, [pc, #380]	@ (8004ac8 <HAL_TIM_ConfigClockSource+0x214>)
 800494a:	4293      	cmp	r3, r2
 800494c:	f000 8099 	beq.w	8004a82 <HAL_TIM_ConfigClockSource+0x1ce>
 8004950:	4a5d      	ldr	r2, [pc, #372]	@ (8004ac8 <HAL_TIM_ConfigClockSource+0x214>)
 8004952:	4293      	cmp	r3, r2
 8004954:	f200 809e 	bhi.w	8004a94 <HAL_TIM_ConfigClockSource+0x1e0>
 8004958:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800495c:	f000 8091 	beq.w	8004a82 <HAL_TIM_ConfigClockSource+0x1ce>
 8004960:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004964:	f200 8096 	bhi.w	8004a94 <HAL_TIM_ConfigClockSource+0x1e0>
 8004968:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800496c:	f000 8089 	beq.w	8004a82 <HAL_TIM_ConfigClockSource+0x1ce>
 8004970:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004974:	f200 808e 	bhi.w	8004a94 <HAL_TIM_ConfigClockSource+0x1e0>
 8004978:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800497c:	d03e      	beq.n	80049fc <HAL_TIM_ConfigClockSource+0x148>
 800497e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004982:	f200 8087 	bhi.w	8004a94 <HAL_TIM_ConfigClockSource+0x1e0>
 8004986:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800498a:	f000 8086 	beq.w	8004a9a <HAL_TIM_ConfigClockSource+0x1e6>
 800498e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004992:	d87f      	bhi.n	8004a94 <HAL_TIM_ConfigClockSource+0x1e0>
 8004994:	2b70      	cmp	r3, #112	@ 0x70
 8004996:	d01a      	beq.n	80049ce <HAL_TIM_ConfigClockSource+0x11a>
 8004998:	2b70      	cmp	r3, #112	@ 0x70
 800499a:	d87b      	bhi.n	8004a94 <HAL_TIM_ConfigClockSource+0x1e0>
 800499c:	2b60      	cmp	r3, #96	@ 0x60
 800499e:	d050      	beq.n	8004a42 <HAL_TIM_ConfigClockSource+0x18e>
 80049a0:	2b60      	cmp	r3, #96	@ 0x60
 80049a2:	d877      	bhi.n	8004a94 <HAL_TIM_ConfigClockSource+0x1e0>
 80049a4:	2b50      	cmp	r3, #80	@ 0x50
 80049a6:	d03c      	beq.n	8004a22 <HAL_TIM_ConfigClockSource+0x16e>
 80049a8:	2b50      	cmp	r3, #80	@ 0x50
 80049aa:	d873      	bhi.n	8004a94 <HAL_TIM_ConfigClockSource+0x1e0>
 80049ac:	2b40      	cmp	r3, #64	@ 0x40
 80049ae:	d058      	beq.n	8004a62 <HAL_TIM_ConfigClockSource+0x1ae>
 80049b0:	2b40      	cmp	r3, #64	@ 0x40
 80049b2:	d86f      	bhi.n	8004a94 <HAL_TIM_ConfigClockSource+0x1e0>
 80049b4:	2b30      	cmp	r3, #48	@ 0x30
 80049b6:	d064      	beq.n	8004a82 <HAL_TIM_ConfigClockSource+0x1ce>
 80049b8:	2b30      	cmp	r3, #48	@ 0x30
 80049ba:	d86b      	bhi.n	8004a94 <HAL_TIM_ConfigClockSource+0x1e0>
 80049bc:	2b20      	cmp	r3, #32
 80049be:	d060      	beq.n	8004a82 <HAL_TIM_ConfigClockSource+0x1ce>
 80049c0:	2b20      	cmp	r3, #32
 80049c2:	d867      	bhi.n	8004a94 <HAL_TIM_ConfigClockSource+0x1e0>
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d05c      	beq.n	8004a82 <HAL_TIM_ConfigClockSource+0x1ce>
 80049c8:	2b10      	cmp	r3, #16
 80049ca:	d05a      	beq.n	8004a82 <HAL_TIM_ConfigClockSource+0x1ce>
 80049cc:	e062      	b.n	8004a94 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049de:	f000 fd6b 	bl	80054b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80049f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	609a      	str	r2, [r3, #8]
      break;
 80049fa:	e04f      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a0c:	f000 fd54 	bl	80054b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689a      	ldr	r2, [r3, #8]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a1e:	609a      	str	r2, [r3, #8]
      break;
 8004a20:	e03c      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a2e:	461a      	mov	r2, r3
 8004a30:	f000 fcc6 	bl	80053c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2150      	movs	r1, #80	@ 0x50
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 fd1f 	bl	800547e <TIM_ITRx_SetConfig>
      break;
 8004a40:	e02c      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a4e:	461a      	mov	r2, r3
 8004a50:	f000 fce5 	bl	800541e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2160      	movs	r1, #96	@ 0x60
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 fd0f 	bl	800547e <TIM_ITRx_SetConfig>
      break;
 8004a60:	e01c      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a6e:	461a      	mov	r2, r3
 8004a70:	f000 fca6 	bl	80053c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2140      	movs	r1, #64	@ 0x40
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 fcff 	bl	800547e <TIM_ITRx_SetConfig>
      break;
 8004a80:	e00c      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	f000 fcf6 	bl	800547e <TIM_ITRx_SetConfig>
      break;
 8004a92:	e003      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	73fb      	strb	r3, [r7, #15]
      break;
 8004a98:	e000      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8004a9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	00100070 	.word	0x00100070
 8004abc:	00100050 	.word	0x00100050
 8004ac0:	00100040 	.word	0x00100040
 8004ac4:	00100030 	.word	0x00100030
 8004ac8:	00100020 	.word	0x00100020

08004acc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a4c      	ldr	r2, [pc, #304]	@ (8004c60 <TIM_Base_SetConfig+0x144>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d017      	beq.n	8004b64 <TIM_Base_SetConfig+0x48>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b3a:	d013      	beq.n	8004b64 <TIM_Base_SetConfig+0x48>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a49      	ldr	r2, [pc, #292]	@ (8004c64 <TIM_Base_SetConfig+0x148>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00f      	beq.n	8004b64 <TIM_Base_SetConfig+0x48>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a48      	ldr	r2, [pc, #288]	@ (8004c68 <TIM_Base_SetConfig+0x14c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d00b      	beq.n	8004b64 <TIM_Base_SetConfig+0x48>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a47      	ldr	r2, [pc, #284]	@ (8004c6c <TIM_Base_SetConfig+0x150>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d007      	beq.n	8004b64 <TIM_Base_SetConfig+0x48>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a46      	ldr	r2, [pc, #280]	@ (8004c70 <TIM_Base_SetConfig+0x154>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d003      	beq.n	8004b64 <TIM_Base_SetConfig+0x48>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a45      	ldr	r2, [pc, #276]	@ (8004c74 <TIM_Base_SetConfig+0x158>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d108      	bne.n	8004b76 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a39      	ldr	r2, [pc, #228]	@ (8004c60 <TIM_Base_SetConfig+0x144>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d023      	beq.n	8004bc6 <TIM_Base_SetConfig+0xaa>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b84:	d01f      	beq.n	8004bc6 <TIM_Base_SetConfig+0xaa>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a36      	ldr	r2, [pc, #216]	@ (8004c64 <TIM_Base_SetConfig+0x148>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d01b      	beq.n	8004bc6 <TIM_Base_SetConfig+0xaa>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a35      	ldr	r2, [pc, #212]	@ (8004c68 <TIM_Base_SetConfig+0x14c>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d017      	beq.n	8004bc6 <TIM_Base_SetConfig+0xaa>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a34      	ldr	r2, [pc, #208]	@ (8004c6c <TIM_Base_SetConfig+0x150>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d013      	beq.n	8004bc6 <TIM_Base_SetConfig+0xaa>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a33      	ldr	r2, [pc, #204]	@ (8004c70 <TIM_Base_SetConfig+0x154>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d00f      	beq.n	8004bc6 <TIM_Base_SetConfig+0xaa>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a33      	ldr	r2, [pc, #204]	@ (8004c78 <TIM_Base_SetConfig+0x15c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00b      	beq.n	8004bc6 <TIM_Base_SetConfig+0xaa>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a32      	ldr	r2, [pc, #200]	@ (8004c7c <TIM_Base_SetConfig+0x160>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d007      	beq.n	8004bc6 <TIM_Base_SetConfig+0xaa>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a31      	ldr	r2, [pc, #196]	@ (8004c80 <TIM_Base_SetConfig+0x164>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d003      	beq.n	8004bc6 <TIM_Base_SetConfig+0xaa>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a2c      	ldr	r2, [pc, #176]	@ (8004c74 <TIM_Base_SetConfig+0x158>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d108      	bne.n	8004bd8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a18      	ldr	r2, [pc, #96]	@ (8004c60 <TIM_Base_SetConfig+0x144>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d013      	beq.n	8004c2c <TIM_Base_SetConfig+0x110>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a1a      	ldr	r2, [pc, #104]	@ (8004c70 <TIM_Base_SetConfig+0x154>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d00f      	beq.n	8004c2c <TIM_Base_SetConfig+0x110>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8004c78 <TIM_Base_SetConfig+0x15c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d00b      	beq.n	8004c2c <TIM_Base_SetConfig+0x110>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a19      	ldr	r2, [pc, #100]	@ (8004c7c <TIM_Base_SetConfig+0x160>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d007      	beq.n	8004c2c <TIM_Base_SetConfig+0x110>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a18      	ldr	r2, [pc, #96]	@ (8004c80 <TIM_Base_SetConfig+0x164>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d003      	beq.n	8004c2c <TIM_Base_SetConfig+0x110>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a13      	ldr	r2, [pc, #76]	@ (8004c74 <TIM_Base_SetConfig+0x158>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d103      	bne.n	8004c34 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	691a      	ldr	r2, [r3, #16]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d105      	bne.n	8004c52 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	f023 0201 	bic.w	r2, r3, #1
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	611a      	str	r2, [r3, #16]
  }
}
 8004c52:	bf00      	nop
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40012c00 	.word	0x40012c00
 8004c64:	40000400 	.word	0x40000400
 8004c68:	40000800 	.word	0x40000800
 8004c6c:	40000c00 	.word	0x40000c00
 8004c70:	40013400 	.word	0x40013400
 8004c74:	40015000 	.word	0x40015000
 8004c78:	40014000 	.word	0x40014000
 8004c7c:	40014400 	.word	0x40014400
 8004c80:	40014800 	.word	0x40014800

08004c84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	f023 0201 	bic.w	r2, r3, #1
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0303 	bic.w	r3, r3, #3
 8004cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f023 0302 	bic.w	r3, r3, #2
 8004cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a30      	ldr	r2, [pc, #192]	@ (8004da0 <TIM_OC1_SetConfig+0x11c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d013      	beq.n	8004d0c <TIM_OC1_SetConfig+0x88>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a2f      	ldr	r2, [pc, #188]	@ (8004da4 <TIM_OC1_SetConfig+0x120>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d00f      	beq.n	8004d0c <TIM_OC1_SetConfig+0x88>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a2e      	ldr	r2, [pc, #184]	@ (8004da8 <TIM_OC1_SetConfig+0x124>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d00b      	beq.n	8004d0c <TIM_OC1_SetConfig+0x88>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a2d      	ldr	r2, [pc, #180]	@ (8004dac <TIM_OC1_SetConfig+0x128>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d007      	beq.n	8004d0c <TIM_OC1_SetConfig+0x88>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a2c      	ldr	r2, [pc, #176]	@ (8004db0 <TIM_OC1_SetConfig+0x12c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d003      	beq.n	8004d0c <TIM_OC1_SetConfig+0x88>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a2b      	ldr	r2, [pc, #172]	@ (8004db4 <TIM_OC1_SetConfig+0x130>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d10c      	bne.n	8004d26 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f023 0308 	bic.w	r3, r3, #8
 8004d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f023 0304 	bic.w	r3, r3, #4
 8004d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a1d      	ldr	r2, [pc, #116]	@ (8004da0 <TIM_OC1_SetConfig+0x11c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d013      	beq.n	8004d56 <TIM_OC1_SetConfig+0xd2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a1c      	ldr	r2, [pc, #112]	@ (8004da4 <TIM_OC1_SetConfig+0x120>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00f      	beq.n	8004d56 <TIM_OC1_SetConfig+0xd2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a1b      	ldr	r2, [pc, #108]	@ (8004da8 <TIM_OC1_SetConfig+0x124>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00b      	beq.n	8004d56 <TIM_OC1_SetConfig+0xd2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a1a      	ldr	r2, [pc, #104]	@ (8004dac <TIM_OC1_SetConfig+0x128>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d007      	beq.n	8004d56 <TIM_OC1_SetConfig+0xd2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a19      	ldr	r2, [pc, #100]	@ (8004db0 <TIM_OC1_SetConfig+0x12c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d003      	beq.n	8004d56 <TIM_OC1_SetConfig+0xd2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a18      	ldr	r2, [pc, #96]	@ (8004db4 <TIM_OC1_SetConfig+0x130>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d111      	bne.n	8004d7a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	621a      	str	r2, [r3, #32]
}
 8004d94:	bf00      	nop
 8004d96:	371c      	adds	r7, #28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	40012c00 	.word	0x40012c00
 8004da4:	40013400 	.word	0x40013400
 8004da8:	40014000 	.word	0x40014000
 8004dac:	40014400 	.word	0x40014400
 8004db0:	40014800 	.word	0x40014800
 8004db4:	40015000 	.word	0x40015000

08004db8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	f023 0210 	bic.w	r2, r3, #16
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004de6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	021b      	lsls	r3, r3, #8
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f023 0320 	bic.w	r3, r3, #32
 8004e06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	011b      	lsls	r3, r3, #4
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a2c      	ldr	r2, [pc, #176]	@ (8004ec8 <TIM_OC2_SetConfig+0x110>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d007      	beq.n	8004e2c <TIM_OC2_SetConfig+0x74>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a2b      	ldr	r2, [pc, #172]	@ (8004ecc <TIM_OC2_SetConfig+0x114>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d003      	beq.n	8004e2c <TIM_OC2_SetConfig+0x74>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a2a      	ldr	r2, [pc, #168]	@ (8004ed0 <TIM_OC2_SetConfig+0x118>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d10d      	bne.n	8004e48 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ec8 <TIM_OC2_SetConfig+0x110>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d013      	beq.n	8004e78 <TIM_OC2_SetConfig+0xc0>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a1e      	ldr	r2, [pc, #120]	@ (8004ecc <TIM_OC2_SetConfig+0x114>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d00f      	beq.n	8004e78 <TIM_OC2_SetConfig+0xc0>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ed4 <TIM_OC2_SetConfig+0x11c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d00b      	beq.n	8004e78 <TIM_OC2_SetConfig+0xc0>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a1d      	ldr	r2, [pc, #116]	@ (8004ed8 <TIM_OC2_SetConfig+0x120>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d007      	beq.n	8004e78 <TIM_OC2_SetConfig+0xc0>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8004edc <TIM_OC2_SetConfig+0x124>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d003      	beq.n	8004e78 <TIM_OC2_SetConfig+0xc0>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a17      	ldr	r2, [pc, #92]	@ (8004ed0 <TIM_OC2_SetConfig+0x118>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d113      	bne.n	8004ea0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	621a      	str	r2, [r3, #32]
}
 8004eba:	bf00      	nop
 8004ebc:	371c      	adds	r7, #28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	40012c00 	.word	0x40012c00
 8004ecc:	40013400 	.word	0x40013400
 8004ed0:	40015000 	.word	0x40015000
 8004ed4:	40014000 	.word	0x40014000
 8004ed8:	40014400 	.word	0x40014400
 8004edc:	40014800 	.word	0x40014800

08004ee0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0303 	bic.w	r3, r3, #3
 8004f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8004fec <TIM_OC3_SetConfig+0x10c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d007      	beq.n	8004f52 <TIM_OC3_SetConfig+0x72>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a2a      	ldr	r2, [pc, #168]	@ (8004ff0 <TIM_OC3_SetConfig+0x110>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d003      	beq.n	8004f52 <TIM_OC3_SetConfig+0x72>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a29      	ldr	r2, [pc, #164]	@ (8004ff4 <TIM_OC3_SetConfig+0x114>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d10d      	bne.n	8004f6e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	021b      	lsls	r3, r3, #8
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a1e      	ldr	r2, [pc, #120]	@ (8004fec <TIM_OC3_SetConfig+0x10c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d013      	beq.n	8004f9e <TIM_OC3_SetConfig+0xbe>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a1d      	ldr	r2, [pc, #116]	@ (8004ff0 <TIM_OC3_SetConfig+0x110>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d00f      	beq.n	8004f9e <TIM_OC3_SetConfig+0xbe>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a1d      	ldr	r2, [pc, #116]	@ (8004ff8 <TIM_OC3_SetConfig+0x118>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d00b      	beq.n	8004f9e <TIM_OC3_SetConfig+0xbe>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a1c      	ldr	r2, [pc, #112]	@ (8004ffc <TIM_OC3_SetConfig+0x11c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d007      	beq.n	8004f9e <TIM_OC3_SetConfig+0xbe>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a1b      	ldr	r2, [pc, #108]	@ (8005000 <TIM_OC3_SetConfig+0x120>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d003      	beq.n	8004f9e <TIM_OC3_SetConfig+0xbe>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a16      	ldr	r2, [pc, #88]	@ (8004ff4 <TIM_OC3_SetConfig+0x114>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d113      	bne.n	8004fc6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	011b      	lsls	r3, r3, #4
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	621a      	str	r2, [r3, #32]
}
 8004fe0:	bf00      	nop
 8004fe2:	371c      	adds	r7, #28
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	40012c00 	.word	0x40012c00
 8004ff0:	40013400 	.word	0x40013400
 8004ff4:	40015000 	.word	0x40015000
 8004ff8:	40014000 	.word	0x40014000
 8004ffc:	40014400 	.word	0x40014400
 8005000:	40014800 	.word	0x40014800

08005004 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800503e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	021b      	lsls	r3, r3, #8
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4313      	orrs	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005052:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	031b      	lsls	r3, r3, #12
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	4313      	orrs	r3, r2
 800505e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a2c      	ldr	r2, [pc, #176]	@ (8005114 <TIM_OC4_SetConfig+0x110>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d007      	beq.n	8005078 <TIM_OC4_SetConfig+0x74>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a2b      	ldr	r2, [pc, #172]	@ (8005118 <TIM_OC4_SetConfig+0x114>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d003      	beq.n	8005078 <TIM_OC4_SetConfig+0x74>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a2a      	ldr	r2, [pc, #168]	@ (800511c <TIM_OC4_SetConfig+0x118>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d10d      	bne.n	8005094 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800507e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	031b      	lsls	r3, r3, #12
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4313      	orrs	r3, r2
 800508a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005092:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a1f      	ldr	r2, [pc, #124]	@ (8005114 <TIM_OC4_SetConfig+0x110>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d013      	beq.n	80050c4 <TIM_OC4_SetConfig+0xc0>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a1e      	ldr	r2, [pc, #120]	@ (8005118 <TIM_OC4_SetConfig+0x114>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00f      	beq.n	80050c4 <TIM_OC4_SetConfig+0xc0>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005120 <TIM_OC4_SetConfig+0x11c>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d00b      	beq.n	80050c4 <TIM_OC4_SetConfig+0xc0>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a1d      	ldr	r2, [pc, #116]	@ (8005124 <TIM_OC4_SetConfig+0x120>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d007      	beq.n	80050c4 <TIM_OC4_SetConfig+0xc0>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005128 <TIM_OC4_SetConfig+0x124>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d003      	beq.n	80050c4 <TIM_OC4_SetConfig+0xc0>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a17      	ldr	r2, [pc, #92]	@ (800511c <TIM_OC4_SetConfig+0x118>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d113      	bne.n	80050ec <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050ca:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80050d2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	019b      	lsls	r3, r3, #6
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4313      	orrs	r3, r2
 80050de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	019b      	lsls	r3, r3, #6
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	621a      	str	r2, [r3, #32]
}
 8005106:	bf00      	nop
 8005108:	371c      	adds	r7, #28
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	40012c00 	.word	0x40012c00
 8005118:	40013400 	.word	0x40013400
 800511c:	40015000 	.word	0x40015000
 8005120:	40014000 	.word	0x40014000
 8005124:	40014400 	.word	0x40014400
 8005128:	40014800 	.word	0x40014800

0800512c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a1b      	ldr	r3, [r3, #32]
 8005140:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800515a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800515e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005170:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	041b      	lsls	r3, r3, #16
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	4313      	orrs	r3, r2
 800517c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a19      	ldr	r2, [pc, #100]	@ (80051e8 <TIM_OC5_SetConfig+0xbc>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d013      	beq.n	80051ae <TIM_OC5_SetConfig+0x82>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a18      	ldr	r2, [pc, #96]	@ (80051ec <TIM_OC5_SetConfig+0xc0>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00f      	beq.n	80051ae <TIM_OC5_SetConfig+0x82>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a17      	ldr	r2, [pc, #92]	@ (80051f0 <TIM_OC5_SetConfig+0xc4>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00b      	beq.n	80051ae <TIM_OC5_SetConfig+0x82>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a16      	ldr	r2, [pc, #88]	@ (80051f4 <TIM_OC5_SetConfig+0xc8>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d007      	beq.n	80051ae <TIM_OC5_SetConfig+0x82>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a15      	ldr	r2, [pc, #84]	@ (80051f8 <TIM_OC5_SetConfig+0xcc>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d003      	beq.n	80051ae <TIM_OC5_SetConfig+0x82>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a14      	ldr	r2, [pc, #80]	@ (80051fc <TIM_OC5_SetConfig+0xd0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d109      	bne.n	80051c2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	021b      	lsls	r3, r3, #8
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	621a      	str	r2, [r3, #32]
}
 80051dc:	bf00      	nop
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	40012c00 	.word	0x40012c00
 80051ec:	40013400 	.word	0x40013400
 80051f0:	40014000 	.word	0x40014000
 80051f4:	40014400 	.word	0x40014400
 80051f8:	40014800 	.word	0x40014800
 80051fc:	40015000 	.word	0x40015000

08005200 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800522e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	021b      	lsls	r3, r3, #8
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4313      	orrs	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005246:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	051b      	lsls	r3, r3, #20
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a1a      	ldr	r2, [pc, #104]	@ (80052c0 <TIM_OC6_SetConfig+0xc0>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d013      	beq.n	8005284 <TIM_OC6_SetConfig+0x84>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a19      	ldr	r2, [pc, #100]	@ (80052c4 <TIM_OC6_SetConfig+0xc4>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d00f      	beq.n	8005284 <TIM_OC6_SetConfig+0x84>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a18      	ldr	r2, [pc, #96]	@ (80052c8 <TIM_OC6_SetConfig+0xc8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d00b      	beq.n	8005284 <TIM_OC6_SetConfig+0x84>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a17      	ldr	r2, [pc, #92]	@ (80052cc <TIM_OC6_SetConfig+0xcc>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d007      	beq.n	8005284 <TIM_OC6_SetConfig+0x84>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a16      	ldr	r2, [pc, #88]	@ (80052d0 <TIM_OC6_SetConfig+0xd0>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d003      	beq.n	8005284 <TIM_OC6_SetConfig+0x84>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a15      	ldr	r2, [pc, #84]	@ (80052d4 <TIM_OC6_SetConfig+0xd4>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d109      	bne.n	8005298 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800528a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	029b      	lsls	r3, r3, #10
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	4313      	orrs	r3, r2
 8005296:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	621a      	str	r2, [r3, #32]
}
 80052b2:	bf00      	nop
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40012c00 	.word	0x40012c00
 80052c4:	40013400 	.word	0x40013400
 80052c8:	40014000 	.word	0x40014000
 80052cc:	40014400 	.word	0x40014400
 80052d0:	40014800 	.word	0x40014800
 80052d4:	40015000 	.word	0x40015000

080052d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
 80052e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	f023 0201 	bic.w	r2, r3, #1
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4a28      	ldr	r2, [pc, #160]	@ (80053a4 <TIM_TI1_SetConfig+0xcc>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d01b      	beq.n	800533e <TIM_TI1_SetConfig+0x66>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800530c:	d017      	beq.n	800533e <TIM_TI1_SetConfig+0x66>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4a25      	ldr	r2, [pc, #148]	@ (80053a8 <TIM_TI1_SetConfig+0xd0>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d013      	beq.n	800533e <TIM_TI1_SetConfig+0x66>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4a24      	ldr	r2, [pc, #144]	@ (80053ac <TIM_TI1_SetConfig+0xd4>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00f      	beq.n	800533e <TIM_TI1_SetConfig+0x66>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	4a23      	ldr	r2, [pc, #140]	@ (80053b0 <TIM_TI1_SetConfig+0xd8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00b      	beq.n	800533e <TIM_TI1_SetConfig+0x66>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	4a22      	ldr	r2, [pc, #136]	@ (80053b4 <TIM_TI1_SetConfig+0xdc>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d007      	beq.n	800533e <TIM_TI1_SetConfig+0x66>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4a21      	ldr	r2, [pc, #132]	@ (80053b8 <TIM_TI1_SetConfig+0xe0>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d003      	beq.n	800533e <TIM_TI1_SetConfig+0x66>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	4a20      	ldr	r2, [pc, #128]	@ (80053bc <TIM_TI1_SetConfig+0xe4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d101      	bne.n	8005342 <TIM_TI1_SetConfig+0x6a>
 800533e:	2301      	movs	r3, #1
 8005340:	e000      	b.n	8005344 <TIM_TI1_SetConfig+0x6c>
 8005342:	2300      	movs	r3, #0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d008      	beq.n	800535a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f023 0303 	bic.w	r3, r3, #3
 800534e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4313      	orrs	r3, r2
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	e003      	b.n	8005362 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f043 0301 	orr.w	r3, r3, #1
 8005360:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005368:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	b2db      	uxtb	r3, r3
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	4313      	orrs	r3, r2
 8005374:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f023 030a 	bic.w	r3, r3, #10
 800537c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f003 030a 	and.w	r3, r3, #10
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	4313      	orrs	r3, r2
 8005388:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	621a      	str	r2, [r3, #32]
}
 8005396:	bf00      	nop
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40012c00 	.word	0x40012c00
 80053a8:	40000400 	.word	0x40000400
 80053ac:	40000800 	.word	0x40000800
 80053b0:	40000c00 	.word	0x40000c00
 80053b4:	40013400 	.word	0x40013400
 80053b8:	40014000 	.word	0x40014000
 80053bc:	40015000 	.word	0x40015000

080053c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	f023 0201 	bic.w	r2, r3, #1
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f023 030a 	bic.w	r3, r3, #10
 80053fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	4313      	orrs	r3, r2
 8005404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	621a      	str	r2, [r3, #32]
}
 8005412:	bf00      	nop
 8005414:	371c      	adds	r7, #28
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800541e:	b480      	push	{r7}
 8005420:	b087      	sub	sp, #28
 8005422:	af00      	add	r7, sp, #0
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	60b9      	str	r1, [r7, #8]
 8005428:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	f023 0210 	bic.w	r2, r3, #16
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005448:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	031b      	lsls	r3, r3, #12
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	4313      	orrs	r3, r2
 8005452:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800545a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	011b      	lsls	r3, r3, #4
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	621a      	str	r2, [r3, #32]
}
 8005472:	bf00      	nop
 8005474:	371c      	adds	r7, #28
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800547e:	b480      	push	{r7}
 8005480:	b085      	sub	sp, #20
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
 8005486:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005494:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005498:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	f043 0307 	orr.w	r3, r3, #7
 80054a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	609a      	str	r2, [r3, #8]
}
 80054ac:	bf00      	nop
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	021a      	lsls	r2, r3, #8
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	431a      	orrs	r2, r3
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4313      	orrs	r3, r2
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	609a      	str	r2, [r3, #8]
}
 80054ec:	bf00      	nop
 80054ee:	371c      	adds	r7, #28
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b087      	sub	sp, #28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f003 031f 	and.w	r3, r3, #31
 800550a:	2201      	movs	r2, #1
 800550c:	fa02 f303 	lsl.w	r3, r2, r3
 8005510:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6a1a      	ldr	r2, [r3, #32]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	43db      	mvns	r3, r3
 800551a:	401a      	ands	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6a1a      	ldr	r2, [r3, #32]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f003 031f 	and.w	r3, r3, #31
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	fa01 f303 	lsl.w	r3, r1, r3
 8005530:	431a      	orrs	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	621a      	str	r2, [r3, #32]
}
 8005536:	bf00      	nop
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b08a      	sub	sp, #40	@ 0x28
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e0a0      	b.n	8005698 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d106      	bne.n	8005570 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f898 	bl	80056a0 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3304      	adds	r3, #4
 8005580:	4619      	mov	r1, r3
 8005582:	4610      	mov	r0, r2
 8005584:	f7ff faca 	bl	8004b1c <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6818      	ldr	r0, [r3, #0]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	6819      	ldr	r1, [r3, #0]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	2203      	movs	r2, #3
 8005596:	f7ff fe9f 	bl	80052d8 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 020c 	bic.w	r2, r2, #12
 80055a8:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6999      	ldr	r1, [r3, #24]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80055ca:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6812      	ldr	r2, [r2, #0]
 80055d6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80055da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055de:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689a      	ldr	r2, [r3, #8]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055ee:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6812      	ldr	r2, [r2, #0]
 80055fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055fe:	f023 0307 	bic.w	r3, r3, #7
 8005602:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689a      	ldr	r2, [r3, #8]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0204 	orr.w	r2, r2, #4
 8005612:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005614:	2300      	movs	r3, #0
 8005616:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005618:	2300      	movs	r3, #0
 800561a:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800561c:	2370      	movs	r3, #112	@ 0x70
 800561e:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005620:	2300      	movs	r3, #0
 8005622:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005624:	2300      	movs	r3, #0
 8005626:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005628:	2300      	movs	r3, #0
 800562a:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f107 020c 	add.w	r2, r7, #12
 800563a:	4611      	mov	r1, r2
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff fbbb 	bl	8004db8 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6812      	ldr	r2, [r2, #0]
 800564c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005650:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005654:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8005664:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3728      	adds	r7, #40	@ 0x28
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056c2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056ca:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056d2:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056da:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d108      	bne.n	80056f4 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056e2:	7bbb      	ldrb	r3, [r7, #14]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d105      	bne.n	80056f4 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056e8:	7b7b      	ldrb	r3, [r7, #13]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d102      	bne.n	80056f4 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056ee:	7b3b      	ldrb	r3, [r7, #12]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d001      	beq.n	80056f8 <HAL_TIMEx_HallSensor_Start_IT+0x44>
  {
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e067      	b.n	80057c8 <HAL_TIMEx_HallSensor_Start_IT+0x114>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2202      	movs	r2, #2
 8005714:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0202 	orr.w	r2, r2, #2
 8005726:	60da      	str	r2, [r3, #12]

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2201      	movs	r2, #1
 800572e:	2100      	movs	r1, #0
 8005730:	4618      	mov	r0, r3
 8005732:	f7ff fee1 	bl	80054f8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a25      	ldr	r2, [pc, #148]	@ (80057d0 <HAL_TIMEx_HallSensor_Start_IT+0x11c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d022      	beq.n	8005786 <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005748:	d01d      	beq.n	8005786 <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a21      	ldr	r2, [pc, #132]	@ (80057d4 <HAL_TIMEx_HallSensor_Start_IT+0x120>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d018      	beq.n	8005786 <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a1f      	ldr	r2, [pc, #124]	@ (80057d8 <HAL_TIMEx_HallSensor_Start_IT+0x124>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d013      	beq.n	8005786 <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a1e      	ldr	r2, [pc, #120]	@ (80057dc <HAL_TIMEx_HallSensor_Start_IT+0x128>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00e      	beq.n	8005786 <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a1c      	ldr	r2, [pc, #112]	@ (80057e0 <HAL_TIMEx_HallSensor_Start_IT+0x12c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d009      	beq.n	8005786 <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a1b      	ldr	r2, [pc, #108]	@ (80057e4 <HAL_TIMEx_HallSensor_Start_IT+0x130>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d004      	beq.n	8005786 <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a19      	ldr	r2, [pc, #100]	@ (80057e8 <HAL_TIMEx_HallSensor_Start_IT+0x134>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d115      	bne.n	80057b2 <HAL_TIMEx_HallSensor_Start_IT+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	4b17      	ldr	r3, [pc, #92]	@ (80057ec <HAL_TIMEx_HallSensor_Start_IT+0x138>)
 800578e:	4013      	ands	r3, r2
 8005790:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2b06      	cmp	r3, #6
 8005796:	d015      	beq.n	80057c4 <HAL_TIMEx_HallSensor_Start_IT+0x110>
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800579e:	d011      	beq.n	80057c4 <HAL_TIMEx_HallSensor_Start_IT+0x110>
    {
      __HAL_TIM_ENABLE(htim);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0201 	orr.w	r2, r2, #1
 80057ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b0:	e008      	b.n	80057c4 <HAL_TIMEx_HallSensor_Start_IT+0x110>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f042 0201 	orr.w	r2, r2, #1
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	e000      	b.n	80057c6 <HAL_TIMEx_HallSensor_Start_IT+0x112>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	40012c00 	.word	0x40012c00
 80057d4:	40000400 	.word	0x40000400
 80057d8:	40000800 	.word	0x40000800
 80057dc:	40000c00 	.word	0x40000c00
 80057e0:	40013400 	.word	0x40013400
 80057e4:	40014000 	.word	0x40014000
 80057e8:	40015000 	.word	0x40015000
 80057ec:	00010007 	.word	0x00010007

080057f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005804:	2302      	movs	r3, #2
 8005806:	e074      	b.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a34      	ldr	r2, [pc, #208]	@ (8005900 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d009      	beq.n	8005846 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a33      	ldr	r2, [pc, #204]	@ (8005904 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d004      	beq.n	8005846 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a31      	ldr	r2, [pc, #196]	@ (8005908 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d108      	bne.n	8005858 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800584c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4313      	orrs	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800585e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005862:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	4313      	orrs	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a21      	ldr	r2, [pc, #132]	@ (8005900 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d022      	beq.n	80058c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005888:	d01d      	beq.n	80058c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a1f      	ldr	r2, [pc, #124]	@ (800590c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d018      	beq.n	80058c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a1d      	ldr	r2, [pc, #116]	@ (8005910 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d013      	beq.n	80058c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a1c      	ldr	r2, [pc, #112]	@ (8005914 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d00e      	beq.n	80058c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a15      	ldr	r2, [pc, #84]	@ (8005904 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d009      	beq.n	80058c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a18      	ldr	r2, [pc, #96]	@ (8005918 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d004      	beq.n	80058c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a11      	ldr	r2, [pc, #68]	@ (8005908 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d10c      	bne.n	80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	40012c00 	.word	0x40012c00
 8005904:	40013400 	.word	0x40013400
 8005908:	40015000 	.word	0x40015000
 800590c:	40000400 	.word	0x40000400
 8005910:	40000800 	.word	0x40000800
 8005914:	40000c00 	.word	0x40000c00
 8005918:	40014000 	.word	0x40014000

0800591c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005934:	2302      	movs	r3, #2
 8005936:	e078      	b.n	8005a2a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	4313      	orrs	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4313      	orrs	r3, r2
 8005976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	4313      	orrs	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	4313      	orrs	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	041b      	lsls	r3, r3, #16
 80059ae:	4313      	orrs	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	4313      	orrs	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a38 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d009      	beq.n	80059de <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a1b      	ldr	r2, [pc, #108]	@ (8005a3c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d004      	beq.n	80059de <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a19      	ldr	r2, [pc, #100]	@ (8005a40 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d11c      	bne.n	8005a18 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e8:	051b      	lsls	r3, r3, #20
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40012c00 	.word	0x40012c00
 8005a3c:	40013400 	.word	0x40013400
 8005a40:	40015000 	.word	0x40015000

08005a44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005acc:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005ad0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b085      	sub	sp, #20
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005af2:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005af6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	43db      	mvns	r3, r3
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	4013      	ands	r3, r2
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	1d3b      	adds	r3, r7, #4
 8005b2a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b0a7      	sub	sp, #156	@ 0x9c
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b82:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	78db      	ldrb	r3, [r3, #3]
 8005b8a:	2b03      	cmp	r3, #3
 8005b8c:	d81f      	bhi.n	8005bce <USB_ActivateEndpoint+0x72>
 8005b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b94 <USB_ActivateEndpoint+0x38>)
 8005b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b94:	08005ba5 	.word	0x08005ba5
 8005b98:	08005bc1 	.word	0x08005bc1
 8005b9c:	08005bd7 	.word	0x08005bd7
 8005ba0:	08005bb3 	.word	0x08005bb3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005ba4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005ba8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005bac:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005bb0:	e012      	b.n	8005bd8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005bb2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005bb6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005bba:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005bbe:	e00b      	b.n	8005bd8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005bc0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005bc4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005bc8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005bcc:	e004      	b.n	8005bd8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8005bd4:	e000      	b.n	8005bd8 <USB_ActivateEndpoint+0x7c>
      break;
 8005bd6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	441a      	add	r2, r3
 8005be2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005be6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4413      	add	r3, r2
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	b21b      	sxth	r3, r3
 8005c0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c12:	b21a      	sxth	r2, r3
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	b21b      	sxth	r3, r3
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	b21b      	sxth	r3, r3
 8005c1e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	441a      	add	r2, r3
 8005c2c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005c30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	7b1b      	ldrb	r3, [r3, #12]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f040 8180 	bne.w	8005f4e <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	785b      	ldrb	r3, [r3, #1]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 8084 	beq.w	8005d60 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	61bb      	str	r3, [r7, #24]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	461a      	mov	r2, r3
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	4413      	add	r3, r2
 8005c6a:	61bb      	str	r3, [r7, #24]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	00da      	lsls	r2, r3, #3
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	88db      	ldrh	r3, [r3, #6]
 8005c80:	085b      	lsrs	r3, r3, #1
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	827b      	strh	r3, [r7, #18]
 8005c9a:	8a7b      	ldrh	r3, [r7, #18]
 8005c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d01b      	beq.n	8005cdc <USB_ActivateEndpoint+0x180>
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cba:	823b      	strh	r3, [r7, #16]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	441a      	add	r2, r3
 8005cc6:	8a3b      	ldrh	r3, [r7, #16]
 8005cc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ccc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cd4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	78db      	ldrb	r3, [r3, #3]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d020      	beq.n	8005d26 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cfa:	81bb      	strh	r3, [r7, #12]
 8005cfc:	89bb      	ldrh	r3, [r7, #12]
 8005cfe:	f083 0320 	eor.w	r3, r3, #32
 8005d02:	81bb      	strh	r3, [r7, #12]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	441a      	add	r2, r3
 8005d0e:	89bb      	ldrh	r3, [r7, #12]
 8005d10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	8013      	strh	r3, [r2, #0]
 8005d24:	e3f9      	b.n	800651a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d3c:	81fb      	strh	r3, [r7, #14]
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	441a      	add	r2, r3
 8005d48:	89fb      	ldrh	r3, [r7, #14]
 8005d4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	8013      	strh	r3, [r2, #0]
 8005d5e:	e3dc      	b.n	800651a <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d70:	4413      	add	r3, r2
 8005d72:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	00da      	lsls	r2, r3, #3
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	88db      	ldrh	r3, [r3, #6]
 8005d88:	085b      	lsrs	r3, r3, #1
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d92:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da4:	4413      	add	r3, r2
 8005da6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	00da      	lsls	r2, r3, #3
 8005dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db0:	4413      	add	r3, r2
 8005db2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005db6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc6:	801a      	strh	r2, [r3, #0]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10a      	bne.n	8005de6 <USB_ActivateEndpoint+0x28a>
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de2:	801a      	strh	r2, [r3, #0]
 8005de4:	e041      	b.n	8005e6a <USB_ActivateEndpoint+0x30e>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	2b3e      	cmp	r3, #62	@ 0x3e
 8005dec:	d81c      	bhi.n	8005e28 <USB_ActivateEndpoint+0x2cc>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	085b      	lsrs	r3, r3, #1
 8005df4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d004      	beq.n	8005e0e <USB_ActivateEndpoint+0x2b2>
 8005e04:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e08:	3301      	adds	r3, #1
 8005e0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	029b      	lsls	r3, r3, #10
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e24:	801a      	strh	r2, [r3, #0]
 8005e26:	e020      	b.n	8005e6a <USB_ActivateEndpoint+0x30e>
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	095b      	lsrs	r3, r3, #5
 8005e2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	f003 031f 	and.w	r3, r3, #31
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d104      	bne.n	8005e48 <USB_ActivateEndpoint+0x2ec>
 8005e3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e42:	3b01      	subs	r3, #1
 8005e44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	029b      	lsls	r3, r3, #10
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e68:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	881b      	ldrh	r3, [r3, #0]
 8005e76:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005e78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d01b      	beq.n	8005eba <USB_ActivateEndpoint+0x35e>
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e98:	843b      	strh	r3, [r7, #32]
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	441a      	add	r2, r3
 8005ea4:	8c3b      	ldrh	r3, [r7, #32]
 8005ea6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005eae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d124      	bne.n	8005f0c <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ed4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ed8:	83bb      	strh	r3, [r7, #28]
 8005eda:	8bbb      	ldrh	r3, [r7, #28]
 8005edc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005ee0:	83bb      	strh	r3, [r7, #28]
 8005ee2:	8bbb      	ldrh	r3, [r7, #28]
 8005ee4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005ee8:	83bb      	strh	r3, [r7, #28]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	441a      	add	r2, r3
 8005ef4:	8bbb      	ldrh	r3, [r7, #28]
 8005ef6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005efa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005efe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	8013      	strh	r3, [r2, #0]
 8005f0a:	e306      	b.n	800651a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f22:	83fb      	strh	r3, [r7, #30]
 8005f24:	8bfb      	ldrh	r3, [r7, #30]
 8005f26:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005f2a:	83fb      	strh	r3, [r7, #30]
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	441a      	add	r2, r3
 8005f36:	8bfb      	ldrh	r3, [r7, #30]
 8005f38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	8013      	strh	r3, [r2, #0]
 8005f4c:	e2e5      	b.n	800651a <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	78db      	ldrb	r3, [r3, #3]
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d11e      	bne.n	8005f94 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f6c:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	441a      	add	r2, r3
 8005f7a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8005f7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f86:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005f8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	8013      	strh	r3, [r2, #0]
 8005f92:	e01d      	b.n	8005fd0 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005faa:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	441a      	add	r2, r3
 8005fb8:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8005fbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	461a      	mov	r2, r3
 8005fde:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005fe0:	4413      	add	r3, r2
 8005fe2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	00da      	lsls	r2, r3, #3
 8005fea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ff2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	891b      	ldrh	r3, [r3, #8]
 8005ff8:	085b      	lsrs	r3, r3, #1
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006002:	801a      	strh	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	677b      	str	r3, [r7, #116]	@ 0x74
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800600e:	b29b      	uxth	r3, r3
 8006010:	461a      	mov	r2, r3
 8006012:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006014:	4413      	add	r3, r2
 8006016:	677b      	str	r3, [r7, #116]	@ 0x74
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	00da      	lsls	r2, r3, #3
 800601e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006020:	4413      	add	r3, r2
 8006022:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006026:	673b      	str	r3, [r7, #112]	@ 0x70
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	895b      	ldrh	r3, [r3, #10]
 800602c:	085b      	lsrs	r3, r3, #1
 800602e:	b29b      	uxth	r3, r3
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	b29a      	uxth	r2, r3
 8006034:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006036:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	785b      	ldrb	r3, [r3, #1]
 800603c:	2b00      	cmp	r3, #0
 800603e:	f040 81af 	bne.w	80063a0 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8006052:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8006056:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d01d      	beq.n	800609a <USB_ActivateEndpoint+0x53e>
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	b29b      	uxth	r3, r3
 800606c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006070:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006074:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	441a      	add	r2, r3
 8006082:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8006086:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800608a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800608e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006096:	b29b      	uxth	r3, r3
 8006098:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80060aa:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80060ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d01d      	beq.n	80060f2 <USB_ActivateEndpoint+0x596>
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060cc:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	441a      	add	r2, r3
 80060da:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80060de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	785b      	ldrb	r3, [r3, #1]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d16b      	bne.n	80061d2 <USB_ActivateEndpoint+0x676>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006104:	b29b      	uxth	r3, r3
 8006106:	461a      	mov	r2, r3
 8006108:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800610a:	4413      	add	r3, r2
 800610c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	00da      	lsls	r2, r3, #3
 8006114:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006116:	4413      	add	r3, r2
 8006118:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800611c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800611e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	b29b      	uxth	r3, r3
 8006124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006128:	b29a      	uxth	r2, r3
 800612a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800612c:	801a      	strh	r2, [r3, #0]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10a      	bne.n	800614c <USB_ActivateEndpoint+0x5f0>
 8006136:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	b29b      	uxth	r3, r3
 800613c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006144:	b29a      	uxth	r2, r3
 8006146:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006148:	801a      	strh	r2, [r3, #0]
 800614a:	e05d      	b.n	8006208 <USB_ActivateEndpoint+0x6ac>
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	2b3e      	cmp	r3, #62	@ 0x3e
 8006152:	d81c      	bhi.n	800618e <USB_ActivateEndpoint+0x632>
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	085b      	lsrs	r3, r3, #1
 800615a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b00      	cmp	r3, #0
 8006168:	d004      	beq.n	8006174 <USB_ActivateEndpoint+0x618>
 800616a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800616e:	3301      	adds	r3, #1
 8006170:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006174:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006176:	881b      	ldrh	r3, [r3, #0]
 8006178:	b29a      	uxth	r2, r3
 800617a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800617e:	b29b      	uxth	r3, r3
 8006180:	029b      	lsls	r3, r3, #10
 8006182:	b29b      	uxth	r3, r3
 8006184:	4313      	orrs	r3, r2
 8006186:	b29a      	uxth	r2, r3
 8006188:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800618a:	801a      	strh	r2, [r3, #0]
 800618c:	e03c      	b.n	8006208 <USB_ActivateEndpoint+0x6ac>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	f003 031f 	and.w	r3, r3, #31
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d104      	bne.n	80061ae <USB_ActivateEndpoint+0x652>
 80061a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061a8:	3b01      	subs	r3, #1
 80061aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80061ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	029b      	lsls	r3, r3, #10
 80061bc:	b29b      	uxth	r3, r3
 80061be:	4313      	orrs	r3, r2
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061ce:	801a      	strh	r2, [r3, #0]
 80061d0:	e01a      	b.n	8006208 <USB_ActivateEndpoint+0x6ac>
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	785b      	ldrb	r3, [r3, #1]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d116      	bne.n	8006208 <USB_ActivateEndpoint+0x6ac>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	461a      	mov	r2, r3
 80061e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061ea:	4413      	add	r3, r2
 80061ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	00da      	lsls	r2, r3, #3
 80061f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061f6:	4413      	add	r3, r2
 80061f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80061fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	b29a      	uxth	r2, r3
 8006204:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006206:	801a      	strh	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	647b      	str	r3, [r7, #68]	@ 0x44
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	785b      	ldrb	r3, [r3, #1]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d16b      	bne.n	80062ec <USB_ActivateEndpoint+0x790>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800621e:	b29b      	uxth	r3, r3
 8006220:	461a      	mov	r2, r3
 8006222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006224:	4413      	add	r3, r2
 8006226:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	00da      	lsls	r2, r3, #3
 800622e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006230:	4413      	add	r3, r2
 8006232:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006236:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	b29b      	uxth	r3, r3
 800623e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006242:	b29a      	uxth	r2, r3
 8006244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006246:	801a      	strh	r2, [r3, #0]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10a      	bne.n	8006266 <USB_ActivateEndpoint+0x70a>
 8006250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	b29b      	uxth	r3, r3
 8006256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800625a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800625e:	b29a      	uxth	r2, r3
 8006260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006262:	801a      	strh	r2, [r3, #0]
 8006264:	e05b      	b.n	800631e <USB_ActivateEndpoint+0x7c2>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	2b3e      	cmp	r3, #62	@ 0x3e
 800626c:	d81c      	bhi.n	80062a8 <USB_ActivateEndpoint+0x74c>
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	085b      	lsrs	r3, r3, #1
 8006274:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	d004      	beq.n	800628e <USB_ActivateEndpoint+0x732>
 8006284:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006288:	3301      	adds	r3, #1
 800628a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800628e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	b29a      	uxth	r2, r3
 8006294:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006298:	b29b      	uxth	r3, r3
 800629a:	029b      	lsls	r3, r3, #10
 800629c:	b29b      	uxth	r3, r3
 800629e:	4313      	orrs	r3, r2
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a4:	801a      	strh	r2, [r3, #0]
 80062a6:	e03a      	b.n	800631e <USB_ActivateEndpoint+0x7c2>
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	095b      	lsrs	r3, r3, #5
 80062ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	f003 031f 	and.w	r3, r3, #31
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d104      	bne.n	80062c8 <USB_ActivateEndpoint+0x76c>
 80062be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062c2:	3b01      	subs	r3, #1
 80062c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	029b      	lsls	r3, r3, #10
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	4313      	orrs	r3, r2
 80062da:	b29b      	uxth	r3, r3
 80062dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e8:	801a      	strh	r2, [r3, #0]
 80062ea:	e018      	b.n	800631e <USB_ActivateEndpoint+0x7c2>
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	785b      	ldrb	r3, [r3, #1]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d114      	bne.n	800631e <USB_ActivateEndpoint+0x7c2>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	461a      	mov	r2, r3
 80062fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006300:	4413      	add	r3, r2
 8006302:	647b      	str	r3, [r7, #68]	@ 0x44
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	00da      	lsls	r2, r3, #3
 800630a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800630c:	4413      	add	r3, r2
 800630e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006312:	643b      	str	r3, [r7, #64]	@ 0x40
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	b29a      	uxth	r2, r3
 800631a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800631c:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	b29b      	uxth	r3, r3
 800632c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006334:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006336:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006338:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800633c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800633e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006340:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006344:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	441a      	add	r2, r3
 8006350:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006352:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006356:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800635a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800635e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006362:	b29b      	uxth	r3, r3
 8006364:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	b29b      	uxth	r3, r3
 8006374:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006378:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800637c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	441a      	add	r2, r3
 8006388:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800638a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800638e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006392:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800639a:	b29b      	uxth	r3, r3
 800639c:	8013      	strh	r3, [r2, #0]
 800639e:	e0bc      	b.n	800651a <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80063b0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80063b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d01d      	beq.n	80063f8 <USB_ActivateEndpoint+0x89c>
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	441a      	add	r2, r3
 80063e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80063e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80063f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8006408:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800640c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006410:	2b00      	cmp	r3, #0
 8006412:	d01d      	beq.n	8006450 <USB_ActivateEndpoint+0x8f4>
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	b29b      	uxth	r3, r3
 8006422:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800642a:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	441a      	add	r2, r3
 8006438:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800643c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006440:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006444:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006448:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800644c:	b29b      	uxth	r3, r3
 800644e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	78db      	ldrb	r3, [r3, #3]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d024      	beq.n	80064a2 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	881b      	ldrh	r3, [r3, #0]
 8006464:	b29b      	uxth	r3, r3
 8006466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800646a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800646e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006472:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006476:	f083 0320 	eor.w	r3, r3, #32
 800647a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	441a      	add	r2, r3
 8006488:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800648c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006490:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006494:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006498:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800649c:	b29b      	uxth	r3, r3
 800649e:	8013      	strh	r3, [r2, #0]
 80064a0:	e01d      	b.n	80064de <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064b8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	441a      	add	r2, r3
 80064c6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80064ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064da:	b29b      	uxth	r3, r3
 80064dc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4413      	add	r3, r2
 80064e8:	881b      	ldrh	r3, [r3, #0]
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064f4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	441a      	add	r2, r3
 8006502:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006506:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800650a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800650e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006516:	b29b      	uxth	r3, r3
 8006518:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800651a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800651e:	4618      	mov	r0, r3
 8006520:	379c      	adds	r7, #156	@ 0x9c
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop

0800652c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800652c:	b480      	push	{r7}
 800652e:	b08d      	sub	sp, #52	@ 0x34
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	7b1b      	ldrb	r3, [r3, #12]
 800653a:	2b00      	cmp	r3, #0
 800653c:	f040 808e 	bne.w	800665c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	785b      	ldrb	r3, [r3, #1]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d044      	beq.n	80065d2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	81bb      	strh	r3, [r7, #12]
 8006556:	89bb      	ldrh	r3, [r7, #12]
 8006558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800655c:	2b00      	cmp	r3, #0
 800655e:	d01b      	beq.n	8006598 <USB_DeactivateEndpoint+0x6c>
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4413      	add	r3, r2
 800656a:	881b      	ldrh	r3, [r3, #0]
 800656c:	b29b      	uxth	r3, r3
 800656e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006572:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006576:	817b      	strh	r3, [r7, #10]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	441a      	add	r2, r3
 8006582:	897b      	ldrh	r3, [r7, #10]
 8006584:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006588:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800658c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006590:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006594:	b29b      	uxth	r3, r3
 8006596:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065ae:	813b      	strh	r3, [r7, #8]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	441a      	add	r2, r3
 80065ba:	893b      	ldrh	r3, [r7, #8]
 80065bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	8013      	strh	r3, [r2, #0]
 80065d0:	e192      	b.n	80068f8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	827b      	strh	r3, [r7, #18]
 80065e0:	8a7b      	ldrh	r3, [r7, #18]
 80065e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d01b      	beq.n	8006622 <USB_DeactivateEndpoint+0xf6>
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006600:	823b      	strh	r3, [r7, #16]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	441a      	add	r2, r3
 800660c:	8a3b      	ldrh	r3, [r7, #16]
 800660e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006612:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006616:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800661a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800661e:	b29b      	uxth	r3, r3
 8006620:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	b29b      	uxth	r3, r3
 8006630:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006634:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006638:	81fb      	strh	r3, [r7, #14]
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	441a      	add	r2, r3
 8006644:	89fb      	ldrh	r3, [r7, #14]
 8006646:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800664a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800664e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006656:	b29b      	uxth	r3, r3
 8006658:	8013      	strh	r3, [r2, #0]
 800665a:	e14d      	b.n	80068f8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	785b      	ldrb	r3, [r3, #1]
 8006660:	2b00      	cmp	r3, #0
 8006662:	f040 80a5 	bne.w	80067b0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	843b      	strh	r3, [r7, #32]
 8006674:	8c3b      	ldrh	r3, [r7, #32]
 8006676:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d01b      	beq.n	80066b6 <USB_DeactivateEndpoint+0x18a>
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	b29b      	uxth	r3, r3
 800668c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006690:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006694:	83fb      	strh	r3, [r7, #30]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	441a      	add	r2, r3
 80066a0:	8bfb      	ldrh	r3, [r7, #30]
 80066a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	83bb      	strh	r3, [r7, #28]
 80066c4:	8bbb      	ldrh	r3, [r7, #28]
 80066c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d01b      	beq.n	8006706 <USB_DeactivateEndpoint+0x1da>
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	b29b      	uxth	r3, r3
 80066dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066e4:	837b      	strh	r3, [r7, #26]
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	441a      	add	r2, r3
 80066f0:	8b7b      	ldrh	r3, [r7, #26]
 80066f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006702:	b29b      	uxth	r3, r3
 8006704:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	881b      	ldrh	r3, [r3, #0]
 8006712:	b29b      	uxth	r3, r3
 8006714:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006718:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800671c:	833b      	strh	r3, [r7, #24]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	441a      	add	r2, r3
 8006728:	8b3b      	ldrh	r3, [r7, #24]
 800672a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800672e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006736:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800673a:	b29b      	uxth	r3, r3
 800673c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4413      	add	r3, r2
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	b29b      	uxth	r3, r3
 800674c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006750:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006754:	82fb      	strh	r3, [r7, #22]
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	441a      	add	r2, r3
 8006760:	8afb      	ldrh	r3, [r7, #22]
 8006762:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006766:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800676a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800676e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006772:	b29b      	uxth	r3, r3
 8006774:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	881b      	ldrh	r3, [r3, #0]
 8006782:	b29b      	uxth	r3, r3
 8006784:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006788:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800678c:	82bb      	strh	r3, [r7, #20]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	441a      	add	r2, r3
 8006798:	8abb      	ldrh	r3, [r7, #20]
 800679a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800679e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	8013      	strh	r3, [r2, #0]
 80067ae:	e0a3      	b.n	80068f8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80067be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80067c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d01b      	beq.n	8006800 <USB_DeactivateEndpoint+0x2d4>
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	881b      	ldrh	r3, [r3, #0]
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067de:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	441a      	add	r2, r3
 80067ea:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80067ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80067f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800680e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006814:	2b00      	cmp	r3, #0
 8006816:	d01b      	beq.n	8006850 <USB_DeactivateEndpoint+0x324>
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	b29b      	uxth	r3, r3
 8006826:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800682a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800682e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	441a      	add	r2, r3
 800683a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800683c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006840:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006844:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006848:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800684c:	b29b      	uxth	r3, r3
 800684e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	881b      	ldrh	r3, [r3, #0]
 800685c:	b29b      	uxth	r3, r3
 800685e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006866:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	441a      	add	r2, r3
 8006872:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006874:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006878:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800687c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006884:	b29b      	uxth	r3, r3
 8006886:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	881b      	ldrh	r3, [r3, #0]
 8006894:	b29b      	uxth	r3, r3
 8006896:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800689a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800689e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	441a      	add	r2, r3
 80068aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068bc:	b29b      	uxth	r3, r3
 80068be:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	881b      	ldrh	r3, [r3, #0]
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068d6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	441a      	add	r2, r3
 80068e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80068e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3734      	adds	r7, #52	@ 0x34
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b0ac      	sub	sp, #176	@ 0xb0
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	785b      	ldrb	r3, [r3, #1]
 8006914:	2b01      	cmp	r3, #1
 8006916:	f040 84ca 	bne.w	80072ae <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	699a      	ldr	r2, [r3, #24]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	429a      	cmp	r2, r3
 8006924:	d904      	bls.n	8006930 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800692e:	e003      	b.n	8006938 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	7b1b      	ldrb	r3, [r3, #12]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d122      	bne.n	8006986 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	6959      	ldr	r1, [r3, #20]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	88da      	ldrh	r2, [r3, #6]
 8006948:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800694c:	b29b      	uxth	r3, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 febd 	bl	80076ce <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	613b      	str	r3, [r7, #16]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800695e:	b29b      	uxth	r3, r3
 8006960:	461a      	mov	r2, r3
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	4413      	add	r3, r2
 8006966:	613b      	str	r3, [r7, #16]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	00da      	lsls	r2, r3, #3
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	4413      	add	r3, r2
 8006972:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006976:	60fb      	str	r3, [r7, #12]
 8006978:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800697c:	b29a      	uxth	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	801a      	strh	r2, [r3, #0]
 8006982:	f000 bc6f 	b.w	8007264 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	78db      	ldrb	r3, [r3, #3]
 800698a:	2b02      	cmp	r3, #2
 800698c:	f040 831e 	bne.w	8006fcc <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	6a1a      	ldr	r2, [r3, #32]
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	429a      	cmp	r2, r3
 800699a:	f240 82cf 	bls.w	8006f3c <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069b4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	441a      	add	r2, r3
 80069c2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80069c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069ce:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80069d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	6a1a      	ldr	r2, [r3, #32]
 80069de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069e2:	1ad2      	subs	r2, r2, r3
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	881b      	ldrh	r3, [r3, #0]
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f000 814f 	beq.w	8006c9e <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	785b      	ldrb	r3, [r3, #1]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d16b      	bne.n	8006ae4 <USB_EPStartXfer+0x1de>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	461a      	mov	r2, r3
 8006a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a1c:	4413      	add	r3, r2
 8006a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	00da      	lsls	r2, r3, #3
 8006a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a28:	4413      	add	r3, r2
 8006a2a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a32:	881b      	ldrh	r3, [r3, #0]
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3e:	801a      	strh	r2, [r3, #0]
 8006a40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10a      	bne.n	8006a5e <USB_EPStartXfer+0x158>
 8006a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5a:	801a      	strh	r2, [r3, #0]
 8006a5c:	e05b      	b.n	8006b16 <USB_EPStartXfer+0x210>
 8006a5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a62:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a64:	d81c      	bhi.n	8006aa0 <USB_EPStartXfer+0x19a>
 8006a66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a6a:	085b      	lsrs	r3, r3, #1
 8006a6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006a70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d004      	beq.n	8006a86 <USB_EPStartXfer+0x180>
 8006a7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006a80:	3301      	adds	r3, #1
 8006a82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a88:	881b      	ldrh	r3, [r3, #0]
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	029b      	lsls	r3, r3, #10
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	4313      	orrs	r3, r2
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9c:	801a      	strh	r2, [r3, #0]
 8006a9e:	e03a      	b.n	8006b16 <USB_EPStartXfer+0x210>
 8006aa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006aa4:	095b      	lsrs	r3, r3, #5
 8006aa6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006aaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006aae:	f003 031f 	and.w	r3, r3, #31
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d104      	bne.n	8006ac0 <USB_EPStartXfer+0x1ba>
 8006ab6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006aba:	3b01      	subs	r3, #1
 8006abc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	029b      	lsls	r3, r3, #10
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae0:	801a      	strh	r2, [r3, #0]
 8006ae2:	e018      	b.n	8006b16 <USB_EPStartXfer+0x210>
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	785b      	ldrb	r3, [r3, #1]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d114      	bne.n	8006b16 <USB_EPStartXfer+0x210>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	461a      	mov	r2, r3
 8006af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af8:	4413      	add	r3, r2
 8006afa:	633b      	str	r3, [r7, #48]	@ 0x30
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	00da      	lsls	r2, r3, #3
 8006b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b04:	4413      	add	r3, r2
 8006b06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b14:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	895b      	ldrh	r3, [r3, #10]
 8006b1a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	6959      	ldr	r1, [r3, #20]
 8006b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fdce 	bl	80076ce <USB_WritePMA>
            ep->xfer_buff += len;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	695a      	ldr	r2, [r3, #20]
 8006b36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b3a:	441a      	add	r2, r3
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	6a1a      	ldr	r2, [r3, #32]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d907      	bls.n	8006b5c <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	6a1a      	ldr	r2, [r3, #32]
 8006b50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b54:	1ad2      	subs	r2, r2, r3
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	621a      	str	r2, [r3, #32]
 8006b5a:	e006      	b.n	8006b6a <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	2200      	movs	r2, #0
 8006b68:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	785b      	ldrb	r3, [r3, #1]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d16b      	bne.n	8006c4a <USB_EPStartXfer+0x344>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	61bb      	str	r3, [r7, #24]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	461a      	mov	r2, r3
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	4413      	add	r3, r2
 8006b84:	61bb      	str	r3, [r7, #24]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	00da      	lsls	r2, r3, #3
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006b94:	617b      	str	r3, [r7, #20]
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	801a      	strh	r2, [r3, #0]
 8006ba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10a      	bne.n	8006bc4 <USB_EPStartXfer+0x2be>
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	801a      	strh	r2, [r3, #0]
 8006bc2:	e05d      	b.n	8006c80 <USB_EPStartXfer+0x37a>
 8006bc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006bc8:	2b3e      	cmp	r3, #62	@ 0x3e
 8006bca:	d81c      	bhi.n	8006c06 <USB_EPStartXfer+0x300>
 8006bcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006bd0:	085b      	lsrs	r3, r3, #1
 8006bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006bd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d004      	beq.n	8006bec <USB_EPStartXfer+0x2e6>
 8006be2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006be6:	3301      	adds	r3, #1
 8006be8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	029b      	lsls	r3, r3, #10
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	801a      	strh	r2, [r3, #0]
 8006c04:	e03c      	b.n	8006c80 <USB_EPStartXfer+0x37a>
 8006c06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c0a:	095b      	lsrs	r3, r3, #5
 8006c0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c14:	f003 031f 	and.w	r3, r3, #31
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d104      	bne.n	8006c26 <USB_EPStartXfer+0x320>
 8006c1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006c20:	3b01      	subs	r3, #1
 8006c22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	029b      	lsls	r3, r3, #10
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	4313      	orrs	r3, r2
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	801a      	strh	r2, [r3, #0]
 8006c48:	e01a      	b.n	8006c80 <USB_EPStartXfer+0x37a>
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	785b      	ldrb	r3, [r3, #1]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d116      	bne.n	8006c80 <USB_EPStartXfer+0x37a>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	623b      	str	r3, [r7, #32]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	461a      	mov	r2, r3
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	4413      	add	r3, r2
 8006c64:	623b      	str	r3, [r7, #32]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	00da      	lsls	r2, r3, #3
 8006c6c:	6a3b      	ldr	r3, [r7, #32]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006c74:	61fb      	str	r3, [r7, #28]
 8006c76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	891b      	ldrh	r3, [r3, #8]
 8006c84:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	6959      	ldr	r1, [r3, #20]
 8006c8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fd19 	bl	80076ce <USB_WritePMA>
 8006c9c:	e2e2      	b.n	8007264 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	785b      	ldrb	r3, [r3, #1]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d16b      	bne.n	8006d7e <USB_EPStartXfer+0x478>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cb6:	4413      	add	r3, r2
 8006cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	00da      	lsls	r2, r3, #3
 8006cc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006cc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ccc:	881b      	ldrh	r3, [r3, #0]
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cd8:	801a      	strh	r2, [r3, #0]
 8006cda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10a      	bne.n	8006cf8 <USB_EPStartXfer+0x3f2>
 8006ce2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cf4:	801a      	strh	r2, [r3, #0]
 8006cf6:	e05d      	b.n	8006db4 <USB_EPStartXfer+0x4ae>
 8006cf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cfc:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cfe:	d81c      	bhi.n	8006d3a <USB_EPStartXfer+0x434>
 8006d00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d04:	085b      	lsrs	r3, r3, #1
 8006d06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d004      	beq.n	8006d20 <USB_EPStartXfer+0x41a>
 8006d16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	029b      	lsls	r3, r3, #10
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	4313      	orrs	r3, r2
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d36:	801a      	strh	r2, [r3, #0]
 8006d38:	e03c      	b.n	8006db4 <USB_EPStartXfer+0x4ae>
 8006d3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d3e:	095b      	lsrs	r3, r3, #5
 8006d40:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d48:	f003 031f 	and.w	r3, r3, #31
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d104      	bne.n	8006d5a <USB_EPStartXfer+0x454>
 8006d50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d54:	3b01      	subs	r3, #1
 8006d56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	029b      	lsls	r3, r3, #10
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d7a:	801a      	strh	r2, [r3, #0]
 8006d7c:	e01a      	b.n	8006db4 <USB_EPStartXfer+0x4ae>
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	785b      	ldrb	r3, [r3, #1]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d116      	bne.n	8006db4 <USB_EPStartXfer+0x4ae>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	461a      	mov	r2, r3
 8006d94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d96:	4413      	add	r3, r2
 8006d98:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	00da      	lsls	r2, r3, #3
 8006da0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006da2:	4413      	add	r3, r2
 8006da4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006da8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006daa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006db2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	891b      	ldrh	r3, [r3, #8]
 8006db8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	6959      	ldr	r1, [r3, #20]
 8006dc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fc7f 	bl	80076ce <USB_WritePMA>
            ep->xfer_buff += len;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	695a      	ldr	r2, [r3, #20]
 8006dd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dd8:	441a      	add	r2, r3
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	6a1a      	ldr	r2, [r3, #32]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d907      	bls.n	8006dfa <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	6a1a      	ldr	r2, [r3, #32]
 8006dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006df2:	1ad2      	subs	r2, r2, r3
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	621a      	str	r2, [r3, #32]
 8006df8:	e006      	b.n	8006e08 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2200      	movs	r2, #0
 8006e06:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	785b      	ldrb	r3, [r3, #1]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d16b      	bne.n	8006eec <USB_EPStartXfer+0x5e6>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	461a      	mov	r2, r3
 8006e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e24:	4413      	add	r3, r2
 8006e26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	00da      	lsls	r2, r3, #3
 8006e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e30:	4413      	add	r3, r2
 8006e32:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e36:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e3a:	881b      	ldrh	r3, [r3, #0]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e46:	801a      	strh	r2, [r3, #0]
 8006e48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10a      	bne.n	8006e66 <USB_EPStartXfer+0x560>
 8006e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e62:	801a      	strh	r2, [r3, #0]
 8006e64:	e05b      	b.n	8006f1e <USB_EPStartXfer+0x618>
 8006e66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e6a:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e6c:	d81c      	bhi.n	8006ea8 <USB_EPStartXfer+0x5a2>
 8006e6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e72:	085b      	lsrs	r3, r3, #1
 8006e74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d004      	beq.n	8006e8e <USB_EPStartXfer+0x588>
 8006e84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e88:	3301      	adds	r3, #1
 8006e8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	029b      	lsls	r3, r3, #10
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ea4:	801a      	strh	r2, [r3, #0]
 8006ea6:	e03a      	b.n	8006f1e <USB_EPStartXfer+0x618>
 8006ea8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006eac:	095b      	lsrs	r3, r3, #5
 8006eae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006eb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006eb6:	f003 031f 	and.w	r3, r3, #31
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d104      	bne.n	8006ec8 <USB_EPStartXfer+0x5c2>
 8006ebe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eca:	881b      	ldrh	r3, [r3, #0]
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	029b      	lsls	r3, r3, #10
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee8:	801a      	strh	r2, [r3, #0]
 8006eea:	e018      	b.n	8006f1e <USB_EPStartXfer+0x618>
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	785b      	ldrb	r3, [r3, #1]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d114      	bne.n	8006f1e <USB_EPStartXfer+0x618>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	461a      	mov	r2, r3
 8006efe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f00:	4413      	add	r3, r2
 8006f02:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	00da      	lsls	r2, r3, #3
 8006f0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f1c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	895b      	ldrh	r3, [r3, #10]
 8006f22:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	6959      	ldr	r1, [r3, #20]
 8006f2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fbca 	bl	80076ce <USB_WritePMA>
 8006f3a:	e193      	b.n	8007264 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4413      	add	r3, r2
 8006f4e:	881b      	ldrh	r3, [r3, #0]
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f5a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	441a      	add	r2, r3
 8006f68:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006f6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f90:	4413      	add	r3, r2
 8006f92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	00da      	lsls	r2, r3, #3
 8006f9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006fa2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006fa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006fac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	891b      	ldrh	r3, [r3, #8]
 8006fb2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	6959      	ldr	r1, [r3, #20]
 8006fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fb82 	bl	80076ce <USB_WritePMA>
 8006fca:	e14b      	b.n	8007264 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	6a1a      	ldr	r2, [r3, #32]
 8006fd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fd4:	1ad2      	subs	r2, r2, r3
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f000 809a 	beq.w	8007126 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	785b      	ldrb	r3, [r3, #1]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d16b      	bne.n	80070d6 <USB_EPStartXfer+0x7d0>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007008:	b29b      	uxth	r3, r3
 800700a:	461a      	mov	r2, r3
 800700c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800700e:	4413      	add	r3, r2
 8007010:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	00da      	lsls	r2, r3, #3
 8007018:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800701a:	4413      	add	r3, r2
 800701c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007020:	667b      	str	r3, [r7, #100]	@ 0x64
 8007022:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	b29b      	uxth	r3, r3
 8007028:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800702c:	b29a      	uxth	r2, r3
 800702e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007030:	801a      	strh	r2, [r3, #0]
 8007032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10a      	bne.n	8007050 <USB_EPStartXfer+0x74a>
 800703a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	b29b      	uxth	r3, r3
 8007040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007048:	b29a      	uxth	r2, r3
 800704a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800704c:	801a      	strh	r2, [r3, #0]
 800704e:	e05b      	b.n	8007108 <USB_EPStartXfer+0x802>
 8007050:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007054:	2b3e      	cmp	r3, #62	@ 0x3e
 8007056:	d81c      	bhi.n	8007092 <USB_EPStartXfer+0x78c>
 8007058:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800705c:	085b      	lsrs	r3, r3, #1
 800705e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	2b00      	cmp	r3, #0
 800706c:	d004      	beq.n	8007078 <USB_EPStartXfer+0x772>
 800706e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007072:	3301      	adds	r3, #1
 8007074:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007078:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	b29a      	uxth	r2, r3
 800707e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007082:	b29b      	uxth	r3, r3
 8007084:	029b      	lsls	r3, r3, #10
 8007086:	b29b      	uxth	r3, r3
 8007088:	4313      	orrs	r3, r2
 800708a:	b29a      	uxth	r2, r3
 800708c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800708e:	801a      	strh	r2, [r3, #0]
 8007090:	e03a      	b.n	8007108 <USB_EPStartXfer+0x802>
 8007092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007096:	095b      	lsrs	r3, r3, #5
 8007098:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800709c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070a0:	f003 031f 	and.w	r3, r3, #31
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d104      	bne.n	80070b2 <USB_EPStartXfer+0x7ac>
 80070a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070ac:	3b01      	subs	r3, #1
 80070ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80070b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070bc:	b29b      	uxth	r3, r3
 80070be:	029b      	lsls	r3, r3, #10
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	4313      	orrs	r3, r2
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070d2:	801a      	strh	r2, [r3, #0]
 80070d4:	e018      	b.n	8007108 <USB_EPStartXfer+0x802>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	785b      	ldrb	r3, [r3, #1]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d114      	bne.n	8007108 <USB_EPStartXfer+0x802>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	461a      	mov	r2, r3
 80070e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80070ea:	4413      	add	r3, r2
 80070ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	00da      	lsls	r2, r3, #3
 80070f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80070f6:	4413      	add	r3, r2
 80070f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80070fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007102:	b29a      	uxth	r2, r3
 8007104:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007106:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	895b      	ldrh	r3, [r3, #10]
 800710c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	6959      	ldr	r1, [r3, #20]
 8007114:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007118:	b29b      	uxth	r3, r3
 800711a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fad5 	bl	80076ce <USB_WritePMA>
 8007124:	e09e      	b.n	8007264 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	785b      	ldrb	r3, [r3, #1]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d16b      	bne.n	8007206 <USB_EPStartXfer+0x900>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007138:	b29b      	uxth	r3, r3
 800713a:	461a      	mov	r2, r3
 800713c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800713e:	4413      	add	r3, r2
 8007140:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	00da      	lsls	r2, r3, #3
 8007148:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800714a:	4413      	add	r3, r2
 800714c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007150:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007152:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	b29b      	uxth	r3, r3
 8007158:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800715c:	b29a      	uxth	r2, r3
 800715e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007160:	801a      	strh	r2, [r3, #0]
 8007162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10a      	bne.n	8007180 <USB_EPStartXfer+0x87a>
 800716a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	b29b      	uxth	r3, r3
 8007170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007178:	b29a      	uxth	r2, r3
 800717a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800717c:	801a      	strh	r2, [r3, #0]
 800717e:	e063      	b.n	8007248 <USB_EPStartXfer+0x942>
 8007180:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007184:	2b3e      	cmp	r3, #62	@ 0x3e
 8007186:	d81c      	bhi.n	80071c2 <USB_EPStartXfer+0x8bc>
 8007188:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800718c:	085b      	lsrs	r3, r3, #1
 800718e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007196:	f003 0301 	and.w	r3, r3, #1
 800719a:	2b00      	cmp	r3, #0
 800719c:	d004      	beq.n	80071a8 <USB_EPStartXfer+0x8a2>
 800719e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80071a2:	3301      	adds	r3, #1
 80071a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80071a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	029b      	lsls	r3, r3, #10
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	4313      	orrs	r3, r2
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071be:	801a      	strh	r2, [r3, #0]
 80071c0:	e042      	b.n	8007248 <USB_EPStartXfer+0x942>
 80071c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071c6:	095b      	lsrs	r3, r3, #5
 80071c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80071cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071d0:	f003 031f 	and.w	r3, r3, #31
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d104      	bne.n	80071e2 <USB_EPStartXfer+0x8dc>
 80071d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80071dc:	3b01      	subs	r3, #1
 80071de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80071e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	029b      	lsls	r3, r3, #10
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	4313      	orrs	r3, r2
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071fe:	b29a      	uxth	r2, r3
 8007200:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007202:	801a      	strh	r2, [r3, #0]
 8007204:	e020      	b.n	8007248 <USB_EPStartXfer+0x942>
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	785b      	ldrb	r3, [r3, #1]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d11c      	bne.n	8007248 <USB_EPStartXfer+0x942>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800721a:	b29b      	uxth	r3, r3
 800721c:	461a      	mov	r2, r3
 800721e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007222:	4413      	add	r3, r2
 8007224:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	00da      	lsls	r2, r3, #3
 800722e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007232:	4413      	add	r3, r2
 8007234:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007238:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800723c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007240:	b29a      	uxth	r2, r3
 8007242:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007246:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	891b      	ldrh	r3, [r3, #8]
 800724c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	6959      	ldr	r1, [r3, #20]
 8007254:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007258:	b29b      	uxth	r3, r3
 800725a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fa35 	bl	80076ce <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	b29b      	uxth	r3, r3
 8007272:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007276:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800727a:	817b      	strh	r3, [r7, #10]
 800727c:	897b      	ldrh	r3, [r7, #10]
 800727e:	f083 0310 	eor.w	r3, r3, #16
 8007282:	817b      	strh	r3, [r7, #10]
 8007284:	897b      	ldrh	r3, [r7, #10]
 8007286:	f083 0320 	eor.w	r3, r3, #32
 800728a:	817b      	strh	r3, [r7, #10]
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	441a      	add	r2, r3
 8007296:	897b      	ldrh	r3, [r7, #10]
 8007298:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800729c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	8013      	strh	r3, [r2, #0]
 80072ac:	e0d5      	b.n	800745a <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	7b1b      	ldrb	r3, [r3, #12]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d156      	bne.n	8007364 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d122      	bne.n	8007304 <USB_EPStartXfer+0x9fe>
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	78db      	ldrb	r3, [r3, #3]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d11e      	bne.n	8007304 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4413      	add	r3, r2
 80072d0:	881b      	ldrh	r3, [r3, #0]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072dc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	441a      	add	r2, r3
 80072ea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80072ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072f6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80072fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072fe:	b29b      	uxth	r3, r3
 8007300:	8013      	strh	r3, [r2, #0]
 8007302:	e01d      	b.n	8007340 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	4413      	add	r3, r2
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	b29b      	uxth	r3, r3
 8007312:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800731a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	441a      	add	r2, r3
 8007328:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800732c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007330:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007334:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007338:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800733c:	b29b      	uxth	r3, r3
 800733e:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	699a      	ldr	r2, [r3, #24]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	429a      	cmp	r2, r3
 800734a:	d907      	bls.n	800735c <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	699a      	ldr	r2, [r3, #24]
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	1ad2      	subs	r2, r2, r3
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	619a      	str	r2, [r3, #24]
 800735a:	e054      	b.n	8007406 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	2200      	movs	r2, #0
 8007360:	619a      	str	r2, [r3, #24]
 8007362:	e050      	b.n	8007406 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	78db      	ldrb	r3, [r3, #3]
 8007368:	2b02      	cmp	r3, #2
 800736a:	d142      	bne.n	80073f2 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d048      	beq.n	8007406 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007384:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007388:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d005      	beq.n	800739c <USB_EPStartXfer+0xa96>
 8007390:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007398:	2b00      	cmp	r3, #0
 800739a:	d10b      	bne.n	80073b4 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800739c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80073a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d12e      	bne.n	8007406 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80073a8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80073ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d128      	bne.n	8007406 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	4413      	add	r3, r2
 80073be:	881b      	ldrh	r3, [r3, #0]
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073ca:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	441a      	add	r2, r3
 80073d8:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 80073dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	8013      	strh	r3, [r2, #0]
 80073f0:	e009      	b.n	8007406 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	78db      	ldrb	r3, [r3, #3]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d103      	bne.n	8007402 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2200      	movs	r2, #0
 80073fe:	619a      	str	r2, [r3, #24]
 8007400:	e001      	b.n	8007406 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e02a      	b.n	800745c <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	b29b      	uxth	r3, r3
 8007414:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800741c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007420:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007424:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007428:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800742c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007430:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007434:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	441a      	add	r2, r3
 8007442:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007446:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800744a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800744e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007456:	b29b      	uxth	r3, r3
 8007458:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	37b0      	adds	r7, #176	@ 0xb0
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	785b      	ldrb	r3, [r3, #1]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d020      	beq.n	80074b8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4413      	add	r3, r2
 8007480:	881b      	ldrh	r3, [r3, #0]
 8007482:	b29b      	uxth	r3, r3
 8007484:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007488:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800748c:	81bb      	strh	r3, [r7, #12]
 800748e:	89bb      	ldrh	r3, [r7, #12]
 8007490:	f083 0310 	eor.w	r3, r3, #16
 8007494:	81bb      	strh	r3, [r7, #12]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	441a      	add	r2, r3
 80074a0:	89bb      	ldrh	r3, [r7, #12]
 80074a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	8013      	strh	r3, [r2, #0]
 80074b6:	e01f      	b.n	80074f8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	881b      	ldrh	r3, [r3, #0]
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ce:	81fb      	strh	r3, [r7, #14]
 80074d0:	89fb      	ldrh	r3, [r7, #14]
 80074d2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80074d6:	81fb      	strh	r3, [r7, #14]
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	441a      	add	r2, r3
 80074e2:	89fb      	ldrh	r3, [r7, #14]
 80074e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007506:	b480      	push	{r7}
 8007508:	b087      	sub	sp, #28
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	785b      	ldrb	r3, [r3, #1]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d04c      	beq.n	80075b2 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	881b      	ldrh	r3, [r3, #0]
 8007524:	823b      	strh	r3, [r7, #16]
 8007526:	8a3b      	ldrh	r3, [r7, #16]
 8007528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800752c:	2b00      	cmp	r3, #0
 800752e:	d01b      	beq.n	8007568 <USB_EPClearStall+0x62>
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	4413      	add	r3, r2
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	b29b      	uxth	r3, r3
 800753e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007546:	81fb      	strh	r3, [r7, #14]
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	441a      	add	r2, r3
 8007552:	89fb      	ldrh	r3, [r7, #14]
 8007554:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007558:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800755c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007560:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007564:	b29b      	uxth	r3, r3
 8007566:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	78db      	ldrb	r3, [r3, #3]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d06c      	beq.n	800764a <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	881b      	ldrh	r3, [r3, #0]
 800757c:	b29b      	uxth	r3, r3
 800757e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007582:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007586:	81bb      	strh	r3, [r7, #12]
 8007588:	89bb      	ldrh	r3, [r7, #12]
 800758a:	f083 0320 	eor.w	r3, r3, #32
 800758e:	81bb      	strh	r3, [r7, #12]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	441a      	add	r2, r3
 800759a:	89bb      	ldrh	r3, [r7, #12]
 800759c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	8013      	strh	r3, [r2, #0]
 80075b0:	e04b      	b.n	800764a <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	881b      	ldrh	r3, [r3, #0]
 80075be:	82fb      	strh	r3, [r7, #22]
 80075c0:	8afb      	ldrh	r3, [r7, #22]
 80075c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d01b      	beq.n	8007602 <USB_EPClearStall+0xfc>
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	4413      	add	r3, r2
 80075d4:	881b      	ldrh	r3, [r3, #0]
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075e0:	82bb      	strh	r3, [r7, #20]
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	441a      	add	r2, r3
 80075ec:	8abb      	ldrh	r3, [r7, #20]
 80075ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80075fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075fe:	b29b      	uxth	r3, r3
 8007600:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	b29b      	uxth	r3, r3
 8007610:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007614:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007618:	827b      	strh	r3, [r7, #18]
 800761a:	8a7b      	ldrh	r3, [r7, #18]
 800761c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007620:	827b      	strh	r3, [r7, #18]
 8007622:	8a7b      	ldrh	r3, [r7, #18]
 8007624:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007628:	827b      	strh	r3, [r7, #18]
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	441a      	add	r2, r3
 8007634:	8a7b      	ldrh	r3, [r7, #18]
 8007636:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800763a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800763e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007646:	b29b      	uxth	r3, r3
 8007648:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	371c      	adds	r7, #28
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	460b      	mov	r3, r1
 8007662:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007664:	78fb      	ldrb	r3, [r7, #3]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d103      	bne.n	8007672 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2280      	movs	r2, #128	@ 0x80
 800766e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800768e:	b29b      	uxth	r3, r3
 8007690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007698:	b29a      	uxth	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b085      	sub	sp, #20
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80076bc:	b29b      	uxth	r3, r3
 80076be:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80076c0:	68fb      	ldr	r3, [r7, #12]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80076ce:	b480      	push	{r7}
 80076d0:	b08b      	sub	sp, #44	@ 0x2c
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	60f8      	str	r0, [r7, #12]
 80076d6:	60b9      	str	r1, [r7, #8]
 80076d8:	4611      	mov	r1, r2
 80076da:	461a      	mov	r2, r3
 80076dc:	460b      	mov	r3, r1
 80076de:	80fb      	strh	r3, [r7, #6]
 80076e0:	4613      	mov	r3, r2
 80076e2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80076e4:	88bb      	ldrh	r3, [r7, #4]
 80076e6:	3301      	adds	r3, #1
 80076e8:	085b      	lsrs	r3, r3, #1
 80076ea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80076f4:	88fa      	ldrh	r2, [r7, #6]
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	4413      	add	r3, r2
 80076fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80076fe:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	627b      	str	r3, [r7, #36]	@ 0x24
 8007704:	e01c      	b.n	8007740 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	3301      	adds	r3, #1
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	b21b      	sxth	r3, r3
 8007714:	021b      	lsls	r3, r3, #8
 8007716:	b21a      	sxth	r2, r3
 8007718:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800771c:	4313      	orrs	r3, r2
 800771e:	b21b      	sxth	r3, r3
 8007720:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007722:	6a3b      	ldr	r3, [r7, #32]
 8007724:	8a7a      	ldrh	r2, [r7, #18]
 8007726:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007728:	6a3b      	ldr	r3, [r7, #32]
 800772a:	3302      	adds	r3, #2
 800772c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	3301      	adds	r3, #1
 8007732:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	3301      	adds	r3, #1
 8007738:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800773a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773c:	3b01      	subs	r3, #1
 800773e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1df      	bne.n	8007706 <USB_WritePMA+0x38>
  }
}
 8007746:	bf00      	nop
 8007748:	bf00      	nop
 800774a:	372c      	adds	r7, #44	@ 0x2c
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007754:	b480      	push	{r7}
 8007756:	b08b      	sub	sp, #44	@ 0x2c
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	4611      	mov	r1, r2
 8007760:	461a      	mov	r2, r3
 8007762:	460b      	mov	r3, r1
 8007764:	80fb      	strh	r3, [r7, #6]
 8007766:	4613      	mov	r3, r2
 8007768:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800776a:	88bb      	ldrh	r3, [r7, #4]
 800776c:	085b      	lsrs	r3, r3, #1
 800776e:	b29b      	uxth	r3, r3
 8007770:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800777a:	88fa      	ldrh	r2, [r7, #6]
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	4413      	add	r3, r2
 8007780:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007784:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	627b      	str	r3, [r7, #36]	@ 0x24
 800778a:	e018      	b.n	80077be <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800778c:	6a3b      	ldr	r3, [r7, #32]
 800778e:	881b      	ldrh	r3, [r3, #0]
 8007790:	b29b      	uxth	r3, r3
 8007792:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007794:	6a3b      	ldr	r3, [r7, #32]
 8007796:	3302      	adds	r3, #2
 8007798:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	b2da      	uxtb	r2, r3
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	3301      	adds	r3, #1
 80077a6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	0a1b      	lsrs	r3, r3, #8
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	3301      	adds	r3, #1
 80077b6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80077b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ba:	3b01      	subs	r3, #1
 80077bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80077be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1e3      	bne.n	800778c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80077c4:	88bb      	ldrh	r3, [r7, #4]
 80077c6:	f003 0301 	and.w	r3, r3, #1
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d007      	beq.n	80077e0 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80077d0:	6a3b      	ldr	r3, [r7, #32]
 80077d2:	881b      	ldrh	r3, [r3, #0]
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	701a      	strb	r2, [r3, #0]
  }
}
 80077e0:	bf00      	nop
 80077e2:	372c      	adds	r7, #44	@ 0x2c
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	460b      	mov	r3, r1
 80077f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80077f8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80077fc:	f002 f916 	bl	8009a2c <USBD_static_malloc>
 8007800:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d105      	bne.n	8007814 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8007810:	2302      	movs	r3, #2
 8007812:	e066      	b.n	80078e2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	7c1b      	ldrb	r3, [r3, #16]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d119      	bne.n	8007858 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007824:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007828:	2202      	movs	r2, #2
 800782a:	2181      	movs	r1, #129	@ 0x81
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f001 ffa4 	bl	800977a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007838:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800783c:	2202      	movs	r2, #2
 800783e:	2101      	movs	r1, #1
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f001 ff9a 	bl	800977a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2201      	movs	r2, #1
 800784a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2210      	movs	r2, #16
 8007852:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8007856:	e016      	b.n	8007886 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007858:	2340      	movs	r3, #64	@ 0x40
 800785a:	2202      	movs	r2, #2
 800785c:	2181      	movs	r1, #129	@ 0x81
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f001 ff8b 	bl	800977a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800786a:	2340      	movs	r3, #64	@ 0x40
 800786c:	2202      	movs	r2, #2
 800786e:	2101      	movs	r1, #1
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f001 ff82 	bl	800977a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2201      	movs	r2, #1
 800787a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2210      	movs	r2, #16
 8007882:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007886:	2308      	movs	r3, #8
 8007888:	2203      	movs	r2, #3
 800788a:	2182      	movs	r1, #130	@ 0x82
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f001 ff74 	bl	800977a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	7c1b      	ldrb	r3, [r3, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d109      	bne.n	80078d0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80078c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80078c6:	2101      	movs	r1, #1
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f002 f845 	bl	8009958 <USBD_LL_PrepareReceive>
 80078ce:	e007      	b.n	80078e0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80078d6:	2340      	movs	r3, #64	@ 0x40
 80078d8:	2101      	movs	r1, #1
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f002 f83c 	bl	8009958 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b082      	sub	sp, #8
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
 80078f2:	460b      	mov	r3, r1
 80078f4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80078f6:	2181      	movs	r1, #129	@ 0x81
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f001 ff64 	bl	80097c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007904:	2101      	movs	r1, #1
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f001 ff5d 	bl	80097c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007914:	2182      	movs	r1, #130	@ 0x82
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f001 ff55 	bl	80097c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00e      	beq.n	8007954 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007946:	4618      	mov	r0, r3
 8007948:	f002 f87e 	bl	8009a48 <USBD_static_free>
    pdev->pClassData = NULL;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
	...

08007960 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007970:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d101      	bne.n	8007988 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007984:	2303      	movs	r3, #3
 8007986:	e0af      	b.n	8007ae8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007990:	2b00      	cmp	r3, #0
 8007992:	d03f      	beq.n	8007a14 <USBD_CDC_Setup+0xb4>
 8007994:	2b20      	cmp	r3, #32
 8007996:	f040 809f 	bne.w	8007ad8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	88db      	ldrh	r3, [r3, #6]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d02e      	beq.n	8007a00 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	b25b      	sxtb	r3, r3
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	da16      	bge.n	80079da <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80079b8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	88d2      	ldrh	r2, [r2, #6]
 80079be:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	88db      	ldrh	r3, [r3, #6]
 80079c4:	2b07      	cmp	r3, #7
 80079c6:	bf28      	it	cs
 80079c8:	2307      	movcs	r3, #7
 80079ca:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	89fa      	ldrh	r2, [r7, #14]
 80079d0:	4619      	mov	r1, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 fae9 	bl	8008faa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80079d8:	e085      	b.n	8007ae6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	785a      	ldrb	r2, [r3, #1]
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	88db      	ldrh	r3, [r3, #6]
 80079e8:	b2da      	uxtb	r2, r3
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80079f0:	6939      	ldr	r1, [r7, #16]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	88db      	ldrh	r3, [r3, #6]
 80079f6:	461a      	mov	r2, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f001 fb02 	bl	8009002 <USBD_CtlPrepareRx>
      break;
 80079fe:	e072      	b.n	8007ae6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	683a      	ldr	r2, [r7, #0]
 8007a0a:	7850      	ldrb	r0, [r2, #1]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	6839      	ldr	r1, [r7, #0]
 8007a10:	4798      	blx	r3
      break;
 8007a12:	e068      	b.n	8007ae6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	785b      	ldrb	r3, [r3, #1]
 8007a18:	2b0b      	cmp	r3, #11
 8007a1a:	d852      	bhi.n	8007ac2 <USBD_CDC_Setup+0x162>
 8007a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a24 <USBD_CDC_Setup+0xc4>)
 8007a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a22:	bf00      	nop
 8007a24:	08007a55 	.word	0x08007a55
 8007a28:	08007ad1 	.word	0x08007ad1
 8007a2c:	08007ac3 	.word	0x08007ac3
 8007a30:	08007ac3 	.word	0x08007ac3
 8007a34:	08007ac3 	.word	0x08007ac3
 8007a38:	08007ac3 	.word	0x08007ac3
 8007a3c:	08007ac3 	.word	0x08007ac3
 8007a40:	08007ac3 	.word	0x08007ac3
 8007a44:	08007ac3 	.word	0x08007ac3
 8007a48:	08007ac3 	.word	0x08007ac3
 8007a4c:	08007a7f 	.word	0x08007a7f
 8007a50:	08007aa9 	.word	0x08007aa9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b03      	cmp	r3, #3
 8007a5e:	d107      	bne.n	8007a70 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007a60:	f107 030a 	add.w	r3, r7, #10
 8007a64:	2202      	movs	r2, #2
 8007a66:	4619      	mov	r1, r3
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f001 fa9e 	bl	8008faa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a6e:	e032      	b.n	8007ad6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f001 fa28 	bl	8008ec8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	75fb      	strb	r3, [r7, #23]
          break;
 8007a7c:	e02b      	b.n	8007ad6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b03      	cmp	r3, #3
 8007a88:	d107      	bne.n	8007a9a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a8a:	f107 030d 	add.w	r3, r7, #13
 8007a8e:	2201      	movs	r2, #1
 8007a90:	4619      	mov	r1, r3
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f001 fa89 	bl	8008faa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a98:	e01d      	b.n	8007ad6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f001 fa13 	bl	8008ec8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	75fb      	strb	r3, [r7, #23]
          break;
 8007aa6:	e016      	b.n	8007ad6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	2b03      	cmp	r3, #3
 8007ab2:	d00f      	beq.n	8007ad4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f001 fa06 	bl	8008ec8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007abc:	2303      	movs	r3, #3
 8007abe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007ac0:	e008      	b.n	8007ad4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007ac2:	6839      	ldr	r1, [r7, #0]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f001 f9ff 	bl	8008ec8 <USBD_CtlError>
          ret = USBD_FAIL;
 8007aca:	2303      	movs	r3, #3
 8007acc:	75fb      	strb	r3, [r7, #23]
          break;
 8007ace:	e002      	b.n	8007ad6 <USBD_CDC_Setup+0x176>
          break;
 8007ad0:	bf00      	nop
 8007ad2:	e008      	b.n	8007ae6 <USBD_CDC_Setup+0x186>
          break;
 8007ad4:	bf00      	nop
      }
      break;
 8007ad6:	e006      	b.n	8007ae6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007ad8:	6839      	ldr	r1, [r7, #0]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f001 f9f4 	bl	8008ec8 <USBD_CtlError>
      ret = USBD_FAIL;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ae4:	bf00      	nop
  }

  return (uint8_t)ret;
 8007ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3718      	adds	r7, #24
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	460b      	mov	r3, r1
 8007afa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007b02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d101      	bne.n	8007b12 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e04f      	b.n	8007bb2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007b18:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007b1a:	78fa      	ldrb	r2, [r7, #3]
 8007b1c:	6879      	ldr	r1, [r7, #4]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	440b      	add	r3, r1
 8007b28:	3318      	adds	r3, #24
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d029      	beq.n	8007b84 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007b30:	78fa      	ldrb	r2, [r7, #3]
 8007b32:	6879      	ldr	r1, [r7, #4]
 8007b34:	4613      	mov	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	440b      	add	r3, r1
 8007b3e:	3318      	adds	r3, #24
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	78f9      	ldrb	r1, [r7, #3]
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	460b      	mov	r3, r1
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	440b      	add	r3, r1
 8007b4c:	00db      	lsls	r3, r3, #3
 8007b4e:	4403      	add	r3, r0
 8007b50:	3320      	adds	r3, #32
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b58:	fb01 f303 	mul.w	r3, r1, r3
 8007b5c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d110      	bne.n	8007b84 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007b62:	78fa      	ldrb	r2, [r7, #3]
 8007b64:	6879      	ldr	r1, [r7, #4]
 8007b66:	4613      	mov	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	440b      	add	r3, r1
 8007b70:	3318      	adds	r3, #24
 8007b72:	2200      	movs	r2, #0
 8007b74:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b76:	78f9      	ldrb	r1, [r7, #3]
 8007b78:	2300      	movs	r3, #0
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f001 feca 	bl	8009916 <USBD_LL_Transmit>
 8007b82:	e015      	b.n	8007bb0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00b      	beq.n	8007bb0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007bac:	78fa      	ldrb	r2, [r7, #3]
 8007bae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b084      	sub	sp, #16
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007bcc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e015      	b.n	8007c08 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007bdc:	78fb      	ldrb	r3, [r7, #3]
 8007bde:	4619      	mov	r1, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f001 feda 	bl	800999a <USBD_LL_GetRxDataSize>
 8007be6:	4602      	mov	r2, r0
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007c02:	4611      	mov	r1, r2
 8007c04:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c1e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d101      	bne.n	8007c2a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e01a      	b.n	8007c60 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d014      	beq.n	8007c5e <USBD_CDC_EP0_RxReady+0x4e>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007c3a:	2bff      	cmp	r3, #255	@ 0xff
 8007c3c:	d00f      	beq.n	8007c5e <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8007c4c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c54:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	22ff      	movs	r2, #255	@ 0xff
 8007c5a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2243      	movs	r2, #67	@ 0x43
 8007c74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007c76:	4b03      	ldr	r3, [pc, #12]	@ (8007c84 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr
 8007c84:	20000094 	.word	0x20000094

08007c88 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2243      	movs	r2, #67	@ 0x43
 8007c94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007c96:	4b03      	ldr	r3, [pc, #12]	@ (8007ca4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr
 8007ca4:	20000050 	.word	0x20000050

08007ca8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2243      	movs	r2, #67	@ 0x43
 8007cb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007cb6:	4b03      	ldr	r3, [pc, #12]	@ (8007cc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	200000d8 	.word	0x200000d8

08007cc8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	220a      	movs	r2, #10
 8007cd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007cd6:	4b03      	ldr	r3, [pc, #12]	@ (8007ce4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	2000000c 	.word	0x2000000c

08007ce8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d101      	bne.n	8007cfc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e004      	b.n	8007d06 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	683a      	ldr	r2, [r7, #0]
 8007d00:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b087      	sub	sp, #28
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	60f8      	str	r0, [r7, #12]
 8007d1a:	60b9      	str	r1, [r7, #8]
 8007d1c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007d24:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d101      	bne.n	8007d30 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e008      	b.n	8007d42 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	371c      	adds	r7, #28
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b085      	sub	sp, #20
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007d5e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d101      	bne.n	8007d6a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e004      	b.n	8007d74 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	683a      	ldr	r2, [r7, #0]
 8007d6e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3714      	adds	r7, #20
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007d8e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007d90:	2301      	movs	r3, #1
 8007d92:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d101      	bne.n	8007da2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e01a      	b.n	8007dd8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d114      	bne.n	8007dd6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007dca:	2181      	movs	r1, #129	@ 0x81
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f001 fda2 	bl	8009916 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007dee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e016      	b.n	8007e2c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	7c1b      	ldrb	r3, [r3, #16]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d109      	bne.n	8007e1a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e10:	2101      	movs	r1, #1
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f001 fda0 	bl	8009958 <USBD_LL_PrepareReceive>
 8007e18:	e007      	b.n	8007e2a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e20:	2340      	movs	r3, #64	@ 0x40
 8007e22:	2101      	movs	r1, #1
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f001 fd97 	bl	8009958 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	4613      	mov	r3, r2
 8007e40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10a      	bne.n	8007e5e <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8007e48:	4817      	ldr	r0, [pc, #92]	@ (8007ea8 <USBD_Init+0x74>)
 8007e4a:	f001 fefb 	bl	8009c44 <iprintf>
 8007e4e:	4817      	ldr	r0, [pc, #92]	@ (8007eac <USBD_Init+0x78>)
 8007e50:	f001 fef8 	bl	8009c44 <iprintf>
 8007e54:	200a      	movs	r0, #10
 8007e56:	f001 ff07 	bl	8009c68 <putchar>
#endif
    return USBD_FAIL;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e01f      	b.n	8007e9e <USBD_Init+0x6a>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d003      	beq.n	8007e84 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	79fa      	ldrb	r2, [r7, #7]
 8007e90:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f001 fbf6 	bl	8009684 <USBD_LL_Init>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3718      	adds	r7, #24
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	0800ae44 	.word	0x0800ae44
 8007eac:	0800ae4c 	.word	0x0800ae4c

08007eb0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10a      	bne.n	8007eda <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8007ec4:	4812      	ldr	r0, [pc, #72]	@ (8007f10 <USBD_RegisterClass+0x60>)
 8007ec6:	f001 febd 	bl	8009c44 <iprintf>
 8007eca:	4812      	ldr	r0, [pc, #72]	@ (8007f14 <USBD_RegisterClass+0x64>)
 8007ecc:	f001 feba 	bl	8009c44 <iprintf>
 8007ed0:	200a      	movs	r0, #10
 8007ed2:	f001 fec9 	bl	8009c68 <putchar>
#endif
    return USBD_FAIL;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e016      	b.n	8007f08 <USBD_RegisterClass+0x58>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	683a      	ldr	r2, [r7, #0]
 8007ede:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00b      	beq.n	8007f06 <USBD_RegisterClass+0x56>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef6:	f107 020e 	add.w	r2, r7, #14
 8007efa:	4610      	mov	r0, r2
 8007efc:	4798      	blx	r3
 8007efe:	4602      	mov	r2, r0
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	0800ae44 	.word	0x0800ae44
 8007f14:	0800ae64 	.word	0x0800ae64

08007f18 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f001 fc0f 	bl	8009744 <USBD_LL_Start>
 8007f26:	4603      	mov	r3, r0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b084      	sub	sp, #16
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	460b      	mov	r3, r1
 8007f50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007f52:	2303      	movs	r3, #3
 8007f54:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d009      	beq.n	8007f74 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	78fa      	ldrb	r2, [r7, #3]
 8007f6a:	4611      	mov	r1, r2
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	4798      	blx	r3
 8007f70:	4603      	mov	r3, r0
 8007f72:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b082      	sub	sp, #8
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	460b      	mov	r3, r1
 8007f88:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d007      	beq.n	8007fa4 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	78fa      	ldrb	r2, [r7, #3]
 8007f9e:	4611      	mov	r1, r2
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	4798      	blx	r3
  }

  return USBD_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b084      	sub	sp, #16
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 ff47 	bl	8008e54 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007fe2:	f003 031f 	and.w	r3, r3, #31
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d01a      	beq.n	8008020 <USBD_LL_SetupStage+0x72>
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d822      	bhi.n	8008034 <USBD_LL_SetupStage+0x86>
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d002      	beq.n	8007ff8 <USBD_LL_SetupStage+0x4a>
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d00a      	beq.n	800800c <USBD_LL_SetupStage+0x5e>
 8007ff6:	e01d      	b.n	8008034 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007ffe:	4619      	mov	r1, r3
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f9ef 	bl	80083e4 <USBD_StdDevReq>
 8008006:	4603      	mov	r3, r0
 8008008:	73fb      	strb	r3, [r7, #15]
      break;
 800800a:	e020      	b.n	800804e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008012:	4619      	mov	r1, r3
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fa53 	bl	80084c0 <USBD_StdItfReq>
 800801a:	4603      	mov	r3, r0
 800801c:	73fb      	strb	r3, [r7, #15]
      break;
 800801e:	e016      	b.n	800804e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008026:	4619      	mov	r1, r3
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 fa92 	bl	8008552 <USBD_StdEPReq>
 800802e:	4603      	mov	r3, r0
 8008030:	73fb      	strb	r3, [r7, #15]
      break;
 8008032:	e00c      	b.n	800804e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800803a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800803e:	b2db      	uxtb	r3, r3
 8008040:	4619      	mov	r1, r3
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f001 fbde 	bl	8009804 <USBD_LL_StallEP>
 8008048:	4603      	mov	r3, r0
 800804a:	73fb      	strb	r3, [r7, #15]
      break;
 800804c:	bf00      	nop
  }

  return ret;
 800804e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008050:	4618      	mov	r0, r3
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	460b      	mov	r3, r1
 8008062:	607a      	str	r2, [r7, #4]
 8008064:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008066:	7afb      	ldrb	r3, [r7, #11]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d138      	bne.n	80080de <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008072:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800807a:	2b03      	cmp	r3, #3
 800807c:	d14a      	bne.n	8008114 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	689a      	ldr	r2, [r3, #8]
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	429a      	cmp	r2, r3
 8008088:	d913      	bls.n	80080b2 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	689a      	ldr	r2, [r3, #8]
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	1ad2      	subs	r2, r2, r3
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	68da      	ldr	r2, [r3, #12]
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	4293      	cmp	r3, r2
 80080a2:	bf28      	it	cs
 80080a4:	4613      	movcs	r3, r2
 80080a6:	461a      	mov	r2, r3
 80080a8:	6879      	ldr	r1, [r7, #4]
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f000 ffc6 	bl	800903c <USBD_CtlContinueRx>
 80080b0:	e030      	b.n	8008114 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	2b03      	cmp	r3, #3
 80080bc:	d10b      	bne.n	80080d6 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d005      	beq.n	80080d6 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f000 ffc1 	bl	800905e <USBD_CtlSendStatus>
 80080dc:	e01a      	b.n	8008114 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b03      	cmp	r3, #3
 80080e8:	d114      	bne.n	8008114 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080f0:	699b      	ldr	r3, [r3, #24]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00e      	beq.n	8008114 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	7afa      	ldrb	r2, [r7, #11]
 8008100:	4611      	mov	r1, r2
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	4798      	blx	r3
 8008106:	4603      	mov	r3, r0
 8008108:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800810a:	7dfb      	ldrb	r3, [r7, #23]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d001      	beq.n	8008114 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008110:	7dfb      	ldrb	r3, [r7, #23]
 8008112:	e000      	b.n	8008116 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3718      	adds	r7, #24
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b086      	sub	sp, #24
 8008122:	af00      	add	r7, sp, #0
 8008124:	60f8      	str	r0, [r7, #12]
 8008126:	460b      	mov	r3, r1
 8008128:	607a      	str	r2, [r7, #4]
 800812a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800812c:	7afb      	ldrb	r3, [r7, #11]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d16b      	bne.n	800820a <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	3314      	adds	r3, #20
 8008136:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800813e:	2b02      	cmp	r3, #2
 8008140:	d156      	bne.n	80081f0 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	689a      	ldr	r2, [r3, #8]
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	429a      	cmp	r2, r3
 800814c:	d914      	bls.n	8008178 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	689a      	ldr	r2, [r3, #8]
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	1ad2      	subs	r2, r2, r3
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	461a      	mov	r2, r3
 8008162:	6879      	ldr	r1, [r7, #4]
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f000 ff3b 	bl	8008fe0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800816a:	2300      	movs	r3, #0
 800816c:	2200      	movs	r2, #0
 800816e:	2100      	movs	r1, #0
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	f001 fbf1 	bl	8009958 <USBD_LL_PrepareReceive>
 8008176:	e03b      	b.n	80081f0 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	68da      	ldr	r2, [r3, #12]
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	429a      	cmp	r2, r3
 8008182:	d11c      	bne.n	80081be <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	685a      	ldr	r2, [r3, #4]
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800818c:	429a      	cmp	r2, r3
 800818e:	d316      	bcc.n	80081be <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800819a:	429a      	cmp	r2, r3
 800819c:	d20f      	bcs.n	80081be <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800819e:	2200      	movs	r2, #0
 80081a0:	2100      	movs	r1, #0
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f000 ff1c 	bl	8008fe0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081b0:	2300      	movs	r3, #0
 80081b2:	2200      	movs	r2, #0
 80081b4:	2100      	movs	r1, #0
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f001 fbce 	bl	8009958 <USBD_LL_PrepareReceive>
 80081bc:	e018      	b.n	80081f0 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b03      	cmp	r3, #3
 80081c8:	d10b      	bne.n	80081e2 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d005      	beq.n	80081e2 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80081e2:	2180      	movs	r1, #128	@ 0x80
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f001 fb0d 	bl	8009804 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f000 ff4a 	bl	8009084 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d122      	bne.n	8008240 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f7ff fe98 	bl	8007f30 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008208:	e01a      	b.n	8008240 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b03      	cmp	r3, #3
 8008214:	d114      	bne.n	8008240 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800821c:	695b      	ldr	r3, [r3, #20]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00e      	beq.n	8008240 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	7afa      	ldrb	r2, [r7, #11]
 800822c:	4611      	mov	r1, r2
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	4798      	blx	r3
 8008232:	4603      	mov	r3, r0
 8008234:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008236:	7dfb      	ldrb	r3, [r7, #23]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800823c:	7dfb      	ldrb	r3, [r7, #23]
 800823e:	e000      	b.n	8008242 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3718      	adds	r7, #24
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b082      	sub	sp, #8
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008276:	2b00      	cmp	r3, #0
 8008278:	d101      	bne.n	800827e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800827a:	2303      	movs	r3, #3
 800827c:	e02f      	b.n	80082de <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00f      	beq.n	80082a8 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d009      	beq.n	80082a8 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	6852      	ldr	r2, [r2, #4]
 80082a0:	b2d2      	uxtb	r2, r2
 80082a2:	4611      	mov	r1, r2
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082a8:	2340      	movs	r3, #64	@ 0x40
 80082aa:	2200      	movs	r2, #0
 80082ac:	2100      	movs	r1, #0
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f001 fa63 	bl	800977a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2240      	movs	r2, #64	@ 0x40
 80082c0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082c4:	2340      	movs	r3, #64	@ 0x40
 80082c6:	2200      	movs	r2, #0
 80082c8:	2180      	movs	r1, #128	@ 0x80
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f001 fa55 	bl	800977a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2240      	movs	r2, #64	@ 0x40
 80082da:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80082e6:	b480      	push	{r7}
 80082e8:	b083      	sub	sp, #12
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	460b      	mov	r3, r1
 80082f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	78fa      	ldrb	r2, [r7, #3]
 80082f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	370c      	adds	r7, #12
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr

08008306 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008306:	b480      	push	{r7}
 8008308:	b083      	sub	sp, #12
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008314:	b2da      	uxtb	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2204      	movs	r2, #4
 8008320:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008332:	b480      	push	{r7}
 8008334:	b083      	sub	sp, #12
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b04      	cmp	r3, #4
 8008344:	d106      	bne.n	8008354 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800834c:	b2da      	uxtb	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	370c      	adds	r7, #12
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr

08008362 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b082      	sub	sp, #8
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008374:	2303      	movs	r3, #3
 8008376:	e012      	b.n	800839e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b03      	cmp	r3, #3
 8008382:	d10b      	bne.n	800839c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800838a:	69db      	ldr	r3, [r3, #28]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d005      	beq.n	800839c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008396:	69db      	ldr	r3, [r3, #28]
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80083a6:	b480      	push	{r7}
 80083a8:	b087      	sub	sp, #28
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	3301      	adds	r3, #1
 80083bc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80083c4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80083c8:	021b      	lsls	r3, r3, #8
 80083ca:	b21a      	sxth	r2, r3
 80083cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	b21b      	sxth	r3, r3
 80083d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80083d6:	89fb      	ldrh	r3, [r7, #14]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	371c      	adds	r7, #28
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083ee:	2300      	movs	r3, #0
 80083f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80083fa:	2b40      	cmp	r3, #64	@ 0x40
 80083fc:	d005      	beq.n	800840a <USBD_StdDevReq+0x26>
 80083fe:	2b40      	cmp	r3, #64	@ 0x40
 8008400:	d853      	bhi.n	80084aa <USBD_StdDevReq+0xc6>
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00b      	beq.n	800841e <USBD_StdDevReq+0x3a>
 8008406:	2b20      	cmp	r3, #32
 8008408:	d14f      	bne.n	80084aa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	6839      	ldr	r1, [r7, #0]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	4798      	blx	r3
 8008418:	4603      	mov	r3, r0
 800841a:	73fb      	strb	r3, [r7, #15]
      break;
 800841c:	e04a      	b.n	80084b4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	785b      	ldrb	r3, [r3, #1]
 8008422:	2b09      	cmp	r3, #9
 8008424:	d83b      	bhi.n	800849e <USBD_StdDevReq+0xba>
 8008426:	a201      	add	r2, pc, #4	@ (adr r2, 800842c <USBD_StdDevReq+0x48>)
 8008428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842c:	08008481 	.word	0x08008481
 8008430:	08008495 	.word	0x08008495
 8008434:	0800849f 	.word	0x0800849f
 8008438:	0800848b 	.word	0x0800848b
 800843c:	0800849f 	.word	0x0800849f
 8008440:	0800845f 	.word	0x0800845f
 8008444:	08008455 	.word	0x08008455
 8008448:	0800849f 	.word	0x0800849f
 800844c:	08008477 	.word	0x08008477
 8008450:	08008469 	.word	0x08008469
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f9de 	bl	8008818 <USBD_GetDescriptor>
          break;
 800845c:	e024      	b.n	80084a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800845e:	6839      	ldr	r1, [r7, #0]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 fb6d 	bl	8008b40 <USBD_SetAddress>
          break;
 8008466:	e01f      	b.n	80084a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008468:	6839      	ldr	r1, [r7, #0]
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fbac 	bl	8008bc8 <USBD_SetConfig>
 8008470:	4603      	mov	r3, r0
 8008472:	73fb      	strb	r3, [r7, #15]
          break;
 8008474:	e018      	b.n	80084a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008476:	6839      	ldr	r1, [r7, #0]
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fc4b 	bl	8008d14 <USBD_GetConfig>
          break;
 800847e:	e013      	b.n	80084a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fc7c 	bl	8008d80 <USBD_GetStatus>
          break;
 8008488:	e00e      	b.n	80084a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800848a:	6839      	ldr	r1, [r7, #0]
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fcab 	bl	8008de8 <USBD_SetFeature>
          break;
 8008492:	e009      	b.n	80084a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fcba 	bl	8008e10 <USBD_ClrFeature>
          break;
 800849c:	e004      	b.n	80084a8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800849e:	6839      	ldr	r1, [r7, #0]
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 fd11 	bl	8008ec8 <USBD_CtlError>
          break;
 80084a6:	bf00      	nop
      }
      break;
 80084a8:	e004      	b.n	80084b4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80084aa:	6839      	ldr	r1, [r7, #0]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fd0b 	bl	8008ec8 <USBD_CtlError>
      break;
 80084b2:	bf00      	nop
  }

  return ret;
 80084b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop

080084c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80084d6:	2b40      	cmp	r3, #64	@ 0x40
 80084d8:	d005      	beq.n	80084e6 <USBD_StdItfReq+0x26>
 80084da:	2b40      	cmp	r3, #64	@ 0x40
 80084dc:	d82f      	bhi.n	800853e <USBD_StdItfReq+0x7e>
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <USBD_StdItfReq+0x26>
 80084e2:	2b20      	cmp	r3, #32
 80084e4:	d12b      	bne.n	800853e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	3b01      	subs	r3, #1
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d81d      	bhi.n	8008530 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	889b      	ldrh	r3, [r3, #4]
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d813      	bhi.n	8008526 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	4798      	blx	r3
 800850c:	4603      	mov	r3, r0
 800850e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	88db      	ldrh	r3, [r3, #6]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d110      	bne.n	800853a <USBD_StdItfReq+0x7a>
 8008518:	7bfb      	ldrb	r3, [r7, #15]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10d      	bne.n	800853a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fd9d 	bl	800905e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008524:	e009      	b.n	800853a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008526:	6839      	ldr	r1, [r7, #0]
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 fccd 	bl	8008ec8 <USBD_CtlError>
          break;
 800852e:	e004      	b.n	800853a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008530:	6839      	ldr	r1, [r7, #0]
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fcc8 	bl	8008ec8 <USBD_CtlError>
          break;
 8008538:	e000      	b.n	800853c <USBD_StdItfReq+0x7c>
          break;
 800853a:	bf00      	nop
      }
      break;
 800853c:	e004      	b.n	8008548 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fcc1 	bl	8008ec8 <USBD_CtlError>
      break;
 8008546:	bf00      	nop
  }

  return ret;
 8008548:	7bfb      	ldrb	r3, [r7, #15]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b084      	sub	sp, #16
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800855c:	2300      	movs	r3, #0
 800855e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	889b      	ldrh	r3, [r3, #4]
 8008564:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800856e:	2b40      	cmp	r3, #64	@ 0x40
 8008570:	d007      	beq.n	8008582 <USBD_StdEPReq+0x30>
 8008572:	2b40      	cmp	r3, #64	@ 0x40
 8008574:	f200 8145 	bhi.w	8008802 <USBD_StdEPReq+0x2b0>
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00c      	beq.n	8008596 <USBD_StdEPReq+0x44>
 800857c:	2b20      	cmp	r3, #32
 800857e:	f040 8140 	bne.w	8008802 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	6839      	ldr	r1, [r7, #0]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	4798      	blx	r3
 8008590:	4603      	mov	r3, r0
 8008592:	73fb      	strb	r3, [r7, #15]
      break;
 8008594:	e13a      	b.n	800880c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	785b      	ldrb	r3, [r3, #1]
 800859a:	2b03      	cmp	r3, #3
 800859c:	d007      	beq.n	80085ae <USBD_StdEPReq+0x5c>
 800859e:	2b03      	cmp	r3, #3
 80085a0:	f300 8129 	bgt.w	80087f6 <USBD_StdEPReq+0x2a4>
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d07f      	beq.n	80086a8 <USBD_StdEPReq+0x156>
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d03c      	beq.n	8008626 <USBD_StdEPReq+0xd4>
 80085ac:	e123      	b.n	80087f6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d002      	beq.n	80085c0 <USBD_StdEPReq+0x6e>
 80085ba:	2b03      	cmp	r3, #3
 80085bc:	d016      	beq.n	80085ec <USBD_StdEPReq+0x9a>
 80085be:	e02c      	b.n	800861a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085c0:	7bbb      	ldrb	r3, [r7, #14]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00d      	beq.n	80085e2 <USBD_StdEPReq+0x90>
 80085c6:	7bbb      	ldrb	r3, [r7, #14]
 80085c8:	2b80      	cmp	r3, #128	@ 0x80
 80085ca:	d00a      	beq.n	80085e2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085cc:	7bbb      	ldrb	r3, [r7, #14]
 80085ce:	4619      	mov	r1, r3
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f001 f917 	bl	8009804 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085d6:	2180      	movs	r1, #128	@ 0x80
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f001 f913 	bl	8009804 <USBD_LL_StallEP>
 80085de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085e0:	e020      	b.n	8008624 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 fc6f 	bl	8008ec8 <USBD_CtlError>
              break;
 80085ea:	e01b      	b.n	8008624 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	885b      	ldrh	r3, [r3, #2]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d10e      	bne.n	8008612 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80085f4:	7bbb      	ldrb	r3, [r7, #14]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00b      	beq.n	8008612 <USBD_StdEPReq+0xc0>
 80085fa:	7bbb      	ldrb	r3, [r7, #14]
 80085fc:	2b80      	cmp	r3, #128	@ 0x80
 80085fe:	d008      	beq.n	8008612 <USBD_StdEPReq+0xc0>
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	88db      	ldrh	r3, [r3, #6]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d104      	bne.n	8008612 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008608:	7bbb      	ldrb	r3, [r7, #14]
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f001 f8f9 	bl	8009804 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fd23 	bl	800905e <USBD_CtlSendStatus>

              break;
 8008618:	e004      	b.n	8008624 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800861a:	6839      	ldr	r1, [r7, #0]
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 fc53 	bl	8008ec8 <USBD_CtlError>
              break;
 8008622:	bf00      	nop
          }
          break;
 8008624:	e0ec      	b.n	8008800 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800862c:	b2db      	uxtb	r3, r3
 800862e:	2b02      	cmp	r3, #2
 8008630:	d002      	beq.n	8008638 <USBD_StdEPReq+0xe6>
 8008632:	2b03      	cmp	r3, #3
 8008634:	d016      	beq.n	8008664 <USBD_StdEPReq+0x112>
 8008636:	e030      	b.n	800869a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008638:	7bbb      	ldrb	r3, [r7, #14]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00d      	beq.n	800865a <USBD_StdEPReq+0x108>
 800863e:	7bbb      	ldrb	r3, [r7, #14]
 8008640:	2b80      	cmp	r3, #128	@ 0x80
 8008642:	d00a      	beq.n	800865a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008644:	7bbb      	ldrb	r3, [r7, #14]
 8008646:	4619      	mov	r1, r3
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f001 f8db 	bl	8009804 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800864e:	2180      	movs	r1, #128	@ 0x80
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f001 f8d7 	bl	8009804 <USBD_LL_StallEP>
 8008656:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008658:	e025      	b.n	80086a6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800865a:	6839      	ldr	r1, [r7, #0]
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 fc33 	bl	8008ec8 <USBD_CtlError>
              break;
 8008662:	e020      	b.n	80086a6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	885b      	ldrh	r3, [r3, #2]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d11b      	bne.n	80086a4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800866c:	7bbb      	ldrb	r3, [r7, #14]
 800866e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008672:	2b00      	cmp	r3, #0
 8008674:	d004      	beq.n	8008680 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008676:	7bbb      	ldrb	r3, [r7, #14]
 8008678:	4619      	mov	r1, r3
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f001 f8e1 	bl	8009842 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 fcec 	bl	800905e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	6839      	ldr	r1, [r7, #0]
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	4798      	blx	r3
 8008694:	4603      	mov	r3, r0
 8008696:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008698:	e004      	b.n	80086a4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800869a:	6839      	ldr	r1, [r7, #0]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fc13 	bl	8008ec8 <USBD_CtlError>
              break;
 80086a2:	e000      	b.n	80086a6 <USBD_StdEPReq+0x154>
              break;
 80086a4:	bf00      	nop
          }
          break;
 80086a6:	e0ab      	b.n	8008800 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d002      	beq.n	80086ba <USBD_StdEPReq+0x168>
 80086b4:	2b03      	cmp	r3, #3
 80086b6:	d032      	beq.n	800871e <USBD_StdEPReq+0x1cc>
 80086b8:	e097      	b.n	80087ea <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086ba:	7bbb      	ldrb	r3, [r7, #14]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d007      	beq.n	80086d0 <USBD_StdEPReq+0x17e>
 80086c0:	7bbb      	ldrb	r3, [r7, #14]
 80086c2:	2b80      	cmp	r3, #128	@ 0x80
 80086c4:	d004      	beq.n	80086d0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80086c6:	6839      	ldr	r1, [r7, #0]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fbfd 	bl	8008ec8 <USBD_CtlError>
                break;
 80086ce:	e091      	b.n	80087f4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	da0b      	bge.n	80086f0 <USBD_StdEPReq+0x19e>
 80086d8:	7bbb      	ldrb	r3, [r7, #14]
 80086da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086de:	4613      	mov	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	3310      	adds	r3, #16
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	4413      	add	r3, r2
 80086ec:	3304      	adds	r3, #4
 80086ee:	e00b      	b.n	8008708 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086f0:	7bbb      	ldrb	r3, [r7, #14]
 80086f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086f6:	4613      	mov	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4413      	add	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	4413      	add	r3, r2
 8008706:	3304      	adds	r3, #4
 8008708:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	2200      	movs	r2, #0
 800870e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	2202      	movs	r2, #2
 8008714:	4619      	mov	r1, r3
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 fc47 	bl	8008faa <USBD_CtlSendData>
              break;
 800871c:	e06a      	b.n	80087f4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800871e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008722:	2b00      	cmp	r3, #0
 8008724:	da11      	bge.n	800874a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008726:	7bbb      	ldrb	r3, [r7, #14]
 8008728:	f003 020f 	and.w	r2, r3, #15
 800872c:	6879      	ldr	r1, [r7, #4]
 800872e:	4613      	mov	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4413      	add	r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	440b      	add	r3, r1
 8008738:	3324      	adds	r3, #36	@ 0x24
 800873a:	881b      	ldrh	r3, [r3, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d117      	bne.n	8008770 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008740:	6839      	ldr	r1, [r7, #0]
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fbc0 	bl	8008ec8 <USBD_CtlError>
                  break;
 8008748:	e054      	b.n	80087f4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800874a:	7bbb      	ldrb	r3, [r7, #14]
 800874c:	f003 020f 	and.w	r2, r3, #15
 8008750:	6879      	ldr	r1, [r7, #4]
 8008752:	4613      	mov	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	440b      	add	r3, r1
 800875c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008760:	881b      	ldrh	r3, [r3, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d104      	bne.n	8008770 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008766:	6839      	ldr	r1, [r7, #0]
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fbad 	bl	8008ec8 <USBD_CtlError>
                  break;
 800876e:	e041      	b.n	80087f4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008770:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008774:	2b00      	cmp	r3, #0
 8008776:	da0b      	bge.n	8008790 <USBD_StdEPReq+0x23e>
 8008778:	7bbb      	ldrb	r3, [r7, #14]
 800877a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800877e:	4613      	mov	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4413      	add	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	3310      	adds	r3, #16
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	4413      	add	r3, r2
 800878c:	3304      	adds	r3, #4
 800878e:	e00b      	b.n	80087a8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008790:	7bbb      	ldrb	r3, [r7, #14]
 8008792:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008796:	4613      	mov	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	4413      	add	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	4413      	add	r3, r2
 80087a6:	3304      	adds	r3, #4
 80087a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087aa:	7bbb      	ldrb	r3, [r7, #14]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d002      	beq.n	80087b6 <USBD_StdEPReq+0x264>
 80087b0:	7bbb      	ldrb	r3, [r7, #14]
 80087b2:	2b80      	cmp	r3, #128	@ 0x80
 80087b4:	d103      	bne.n	80087be <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	2200      	movs	r2, #0
 80087ba:	601a      	str	r2, [r3, #0]
 80087bc:	e00e      	b.n	80087dc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80087be:	7bbb      	ldrb	r3, [r7, #14]
 80087c0:	4619      	mov	r1, r3
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f001 f85c 	bl	8009880 <USBD_LL_IsStallEP>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d003      	beq.n	80087d6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	2201      	movs	r2, #1
 80087d2:	601a      	str	r2, [r3, #0]
 80087d4:	e002      	b.n	80087dc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	2200      	movs	r2, #0
 80087da:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	2202      	movs	r2, #2
 80087e0:	4619      	mov	r1, r3
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fbe1 	bl	8008faa <USBD_CtlSendData>
              break;
 80087e8:	e004      	b.n	80087f4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fb6b 	bl	8008ec8 <USBD_CtlError>
              break;
 80087f2:	bf00      	nop
          }
          break;
 80087f4:	e004      	b.n	8008800 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 fb65 	bl	8008ec8 <USBD_CtlError>
          break;
 80087fe:	bf00      	nop
      }
      break;
 8008800:	e004      	b.n	800880c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 fb5f 	bl	8008ec8 <USBD_CtlError>
      break;
 800880a:	bf00      	nop
  }

  return ret;
 800880c:	7bfb      	ldrb	r3, [r7, #15]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
	...

08008818 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008822:	2300      	movs	r3, #0
 8008824:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008826:	2300      	movs	r3, #0
 8008828:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800882a:	2300      	movs	r3, #0
 800882c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	885b      	ldrh	r3, [r3, #2]
 8008832:	0a1b      	lsrs	r3, r3, #8
 8008834:	b29b      	uxth	r3, r3
 8008836:	3b01      	subs	r3, #1
 8008838:	2b0e      	cmp	r3, #14
 800883a:	f200 8152 	bhi.w	8008ae2 <USBD_GetDescriptor+0x2ca>
 800883e:	a201      	add	r2, pc, #4	@ (adr r2, 8008844 <USBD_GetDescriptor+0x2c>)
 8008840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008844:	080088b5 	.word	0x080088b5
 8008848:	080088cd 	.word	0x080088cd
 800884c:	0800890d 	.word	0x0800890d
 8008850:	08008ae3 	.word	0x08008ae3
 8008854:	08008ae3 	.word	0x08008ae3
 8008858:	08008a83 	.word	0x08008a83
 800885c:	08008aaf 	.word	0x08008aaf
 8008860:	08008ae3 	.word	0x08008ae3
 8008864:	08008ae3 	.word	0x08008ae3
 8008868:	08008ae3 	.word	0x08008ae3
 800886c:	08008ae3 	.word	0x08008ae3
 8008870:	08008ae3 	.word	0x08008ae3
 8008874:	08008ae3 	.word	0x08008ae3
 8008878:	08008ae3 	.word	0x08008ae3
 800887c:	08008881 	.word	0x08008881
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008886:	69db      	ldr	r3, [r3, #28]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00b      	beq.n	80088a4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008892:	69db      	ldr	r3, [r3, #28]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	7c12      	ldrb	r2, [r2, #16]
 8008898:	f107 0108 	add.w	r1, r7, #8
 800889c:	4610      	mov	r0, r2
 800889e:	4798      	blx	r3
 80088a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088a2:	e126      	b.n	8008af2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80088a4:	6839      	ldr	r1, [r7, #0]
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 fb0e 	bl	8008ec8 <USBD_CtlError>
        err++;
 80088ac:	7afb      	ldrb	r3, [r7, #11]
 80088ae:	3301      	adds	r3, #1
 80088b0:	72fb      	strb	r3, [r7, #11]
      break;
 80088b2:	e11e      	b.n	8008af2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	7c12      	ldrb	r2, [r2, #16]
 80088c0:	f107 0108 	add.w	r1, r7, #8
 80088c4:	4610      	mov	r0, r2
 80088c6:	4798      	blx	r3
 80088c8:	60f8      	str	r0, [r7, #12]
      break;
 80088ca:	e112      	b.n	8008af2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	7c1b      	ldrb	r3, [r3, #16]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10d      	bne.n	80088f0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088dc:	f107 0208 	add.w	r2, r7, #8
 80088e0:	4610      	mov	r0, r2
 80088e2:	4798      	blx	r3
 80088e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	3301      	adds	r3, #1
 80088ea:	2202      	movs	r2, #2
 80088ec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80088ee:	e100      	b.n	8008af2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f8:	f107 0208 	add.w	r2, r7, #8
 80088fc:	4610      	mov	r0, r2
 80088fe:	4798      	blx	r3
 8008900:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	3301      	adds	r3, #1
 8008906:	2202      	movs	r2, #2
 8008908:	701a      	strb	r2, [r3, #0]
      break;
 800890a:	e0f2      	b.n	8008af2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	885b      	ldrh	r3, [r3, #2]
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b05      	cmp	r3, #5
 8008914:	f200 80ac 	bhi.w	8008a70 <USBD_GetDescriptor+0x258>
 8008918:	a201      	add	r2, pc, #4	@ (adr r2, 8008920 <USBD_GetDescriptor+0x108>)
 800891a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891e:	bf00      	nop
 8008920:	08008939 	.word	0x08008939
 8008924:	0800896d 	.word	0x0800896d
 8008928:	080089a1 	.word	0x080089a1
 800892c:	080089d5 	.word	0x080089d5
 8008930:	08008a09 	.word	0x08008a09
 8008934:	08008a3d 	.word	0x08008a3d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00b      	beq.n	800895c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	7c12      	ldrb	r2, [r2, #16]
 8008950:	f107 0108 	add.w	r1, r7, #8
 8008954:	4610      	mov	r0, r2
 8008956:	4798      	blx	r3
 8008958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800895a:	e091      	b.n	8008a80 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800895c:	6839      	ldr	r1, [r7, #0]
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fab2 	bl	8008ec8 <USBD_CtlError>
            err++;
 8008964:	7afb      	ldrb	r3, [r7, #11]
 8008966:	3301      	adds	r3, #1
 8008968:	72fb      	strb	r3, [r7, #11]
          break;
 800896a:	e089      	b.n	8008a80 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00b      	beq.n	8008990 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	7c12      	ldrb	r2, [r2, #16]
 8008984:	f107 0108 	add.w	r1, r7, #8
 8008988:	4610      	mov	r0, r2
 800898a:	4798      	blx	r3
 800898c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800898e:	e077      	b.n	8008a80 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fa98 	bl	8008ec8 <USBD_CtlError>
            err++;
 8008998:	7afb      	ldrb	r3, [r7, #11]
 800899a:	3301      	adds	r3, #1
 800899c:	72fb      	strb	r3, [r7, #11]
          break;
 800899e:	e06f      	b.n	8008a80 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00b      	beq.n	80089c4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	7c12      	ldrb	r2, [r2, #16]
 80089b8:	f107 0108 	add.w	r1, r7, #8
 80089bc:	4610      	mov	r0, r2
 80089be:	4798      	blx	r3
 80089c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089c2:	e05d      	b.n	8008a80 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089c4:	6839      	ldr	r1, [r7, #0]
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 fa7e 	bl	8008ec8 <USBD_CtlError>
            err++;
 80089cc:	7afb      	ldrb	r3, [r7, #11]
 80089ce:	3301      	adds	r3, #1
 80089d0:	72fb      	strb	r3, [r7, #11]
          break;
 80089d2:	e055      	b.n	8008a80 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00b      	beq.n	80089f8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	7c12      	ldrb	r2, [r2, #16]
 80089ec:	f107 0108 	add.w	r1, r7, #8
 80089f0:	4610      	mov	r0, r2
 80089f2:	4798      	blx	r3
 80089f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089f6:	e043      	b.n	8008a80 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089f8:	6839      	ldr	r1, [r7, #0]
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fa64 	bl	8008ec8 <USBD_CtlError>
            err++;
 8008a00:	7afb      	ldrb	r3, [r7, #11]
 8008a02:	3301      	adds	r3, #1
 8008a04:	72fb      	strb	r3, [r7, #11]
          break;
 8008a06:	e03b      	b.n	8008a80 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a0e:	695b      	ldr	r3, [r3, #20]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00b      	beq.n	8008a2c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a1a:	695b      	ldr	r3, [r3, #20]
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	7c12      	ldrb	r2, [r2, #16]
 8008a20:	f107 0108 	add.w	r1, r7, #8
 8008a24:	4610      	mov	r0, r2
 8008a26:	4798      	blx	r3
 8008a28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a2a:	e029      	b.n	8008a80 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fa4a 	bl	8008ec8 <USBD_CtlError>
            err++;
 8008a34:	7afb      	ldrb	r3, [r7, #11]
 8008a36:	3301      	adds	r3, #1
 8008a38:	72fb      	strb	r3, [r7, #11]
          break;
 8008a3a:	e021      	b.n	8008a80 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00b      	beq.n	8008a60 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a4e:	699b      	ldr	r3, [r3, #24]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	7c12      	ldrb	r2, [r2, #16]
 8008a54:	f107 0108 	add.w	r1, r7, #8
 8008a58:	4610      	mov	r0, r2
 8008a5a:	4798      	blx	r3
 8008a5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a5e:	e00f      	b.n	8008a80 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a60:	6839      	ldr	r1, [r7, #0]
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fa30 	bl	8008ec8 <USBD_CtlError>
            err++;
 8008a68:	7afb      	ldrb	r3, [r7, #11]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a6e:	e007      	b.n	8008a80 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fa28 	bl	8008ec8 <USBD_CtlError>
          err++;
 8008a78:	7afb      	ldrb	r3, [r7, #11]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008a7e:	bf00      	nop
      }
      break;
 8008a80:	e037      	b.n	8008af2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	7c1b      	ldrb	r3, [r3, #16]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d109      	bne.n	8008a9e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a92:	f107 0208 	add.w	r2, r7, #8
 8008a96:	4610      	mov	r0, r2
 8008a98:	4798      	blx	r3
 8008a9a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a9c:	e029      	b.n	8008af2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008a9e:	6839      	ldr	r1, [r7, #0]
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fa11 	bl	8008ec8 <USBD_CtlError>
        err++;
 8008aa6:	7afb      	ldrb	r3, [r7, #11]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	72fb      	strb	r3, [r7, #11]
      break;
 8008aac:	e021      	b.n	8008af2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	7c1b      	ldrb	r3, [r3, #16]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d10d      	bne.n	8008ad2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008abe:	f107 0208 	add.w	r2, r7, #8
 8008ac2:	4610      	mov	r0, r2
 8008ac4:	4798      	blx	r3
 8008ac6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	3301      	adds	r3, #1
 8008acc:	2207      	movs	r2, #7
 8008ace:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ad0:	e00f      	b.n	8008af2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f9f7 	bl	8008ec8 <USBD_CtlError>
        err++;
 8008ada:	7afb      	ldrb	r3, [r7, #11]
 8008adc:	3301      	adds	r3, #1
 8008ade:	72fb      	strb	r3, [r7, #11]
      break;
 8008ae0:	e007      	b.n	8008af2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 f9ef 	bl	8008ec8 <USBD_CtlError>
      err++;
 8008aea:	7afb      	ldrb	r3, [r7, #11]
 8008aec:	3301      	adds	r3, #1
 8008aee:	72fb      	strb	r3, [r7, #11]
      break;
 8008af0:	bf00      	nop
  }

  if (err != 0U)
 8008af2:	7afb      	ldrb	r3, [r7, #11]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d11e      	bne.n	8008b36 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	88db      	ldrh	r3, [r3, #6]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d016      	beq.n	8008b2e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008b00:	893b      	ldrh	r3, [r7, #8]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00e      	beq.n	8008b24 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	88da      	ldrh	r2, [r3, #6]
 8008b0a:	893b      	ldrh	r3, [r7, #8]
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	bf28      	it	cs
 8008b10:	4613      	movcs	r3, r2
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b16:	893b      	ldrh	r3, [r7, #8]
 8008b18:	461a      	mov	r2, r3
 8008b1a:	68f9      	ldr	r1, [r7, #12]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fa44 	bl	8008faa <USBD_CtlSendData>
 8008b22:	e009      	b.n	8008b38 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b24:	6839      	ldr	r1, [r7, #0]
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 f9ce 	bl	8008ec8 <USBD_CtlError>
 8008b2c:	e004      	b.n	8008b38 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fa95 	bl	800905e <USBD_CtlSendStatus>
 8008b34:	e000      	b.n	8008b38 <USBD_GetDescriptor+0x320>
    return;
 8008b36:	bf00      	nop
  }
}
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop

08008b40 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	889b      	ldrh	r3, [r3, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d131      	bne.n	8008bb6 <USBD_SetAddress+0x76>
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	88db      	ldrh	r3, [r3, #6]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d12d      	bne.n	8008bb6 <USBD_SetAddress+0x76>
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	885b      	ldrh	r3, [r3, #2]
 8008b5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008b60:	d829      	bhi.n	8008bb6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	885b      	ldrh	r3, [r3, #2]
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b03      	cmp	r3, #3
 8008b78:	d104      	bne.n	8008b84 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008b7a:	6839      	ldr	r1, [r7, #0]
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f9a3 	bl	8008ec8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b82:	e01d      	b.n	8008bc0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	7bfa      	ldrb	r2, [r7, #15]
 8008b88:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b8c:	7bfb      	ldrb	r3, [r7, #15]
 8008b8e:	4619      	mov	r1, r3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fea1 	bl	80098d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fa61 	bl	800905e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b9c:	7bfb      	ldrb	r3, [r7, #15]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d004      	beq.n	8008bac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2202      	movs	r2, #2
 8008ba6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008baa:	e009      	b.n	8008bc0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bb4:	e004      	b.n	8008bc0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bb6:	6839      	ldr	r1, [r7, #0]
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 f985 	bl	8008ec8 <USBD_CtlError>
  }
}
 8008bbe:	bf00      	nop
 8008bc0:	bf00      	nop
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	885b      	ldrh	r3, [r3, #2]
 8008bda:	b2da      	uxtb	r2, r3
 8008bdc:	4b4c      	ldr	r3, [pc, #304]	@ (8008d10 <USBD_SetConfig+0x148>)
 8008bde:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008be0:	4b4b      	ldr	r3, [pc, #300]	@ (8008d10 <USBD_SetConfig+0x148>)
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d905      	bls.n	8008bf4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f96c 	bl	8008ec8 <USBD_CtlError>
    return USBD_FAIL;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	e088      	b.n	8008d06 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d002      	beq.n	8008c06 <USBD_SetConfig+0x3e>
 8008c00:	2b03      	cmp	r3, #3
 8008c02:	d025      	beq.n	8008c50 <USBD_SetConfig+0x88>
 8008c04:	e071      	b.n	8008cea <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008c06:	4b42      	ldr	r3, [pc, #264]	@ (8008d10 <USBD_SetConfig+0x148>)
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d01c      	beq.n	8008c48 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008c0e:	4b40      	ldr	r3, [pc, #256]	@ (8008d10 <USBD_SetConfig+0x148>)
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	461a      	mov	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c18:	4b3d      	ldr	r3, [pc, #244]	@ (8008d10 <USBD_SetConfig+0x148>)
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f7ff f991 	bl	8007f46 <USBD_SetClassConfig>
 8008c24:	4603      	mov	r3, r0
 8008c26:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d004      	beq.n	8008c38 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008c2e:	6839      	ldr	r1, [r7, #0]
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f949 	bl	8008ec8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c36:	e065      	b.n	8008d04 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 fa10 	bl	800905e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2203      	movs	r2, #3
 8008c42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008c46:	e05d      	b.n	8008d04 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 fa08 	bl	800905e <USBD_CtlSendStatus>
      break;
 8008c4e:	e059      	b.n	8008d04 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c50:	4b2f      	ldr	r3, [pc, #188]	@ (8008d10 <USBD_SetConfig+0x148>)
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d112      	bne.n	8008c7e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008c60:	4b2b      	ldr	r3, [pc, #172]	@ (8008d10 <USBD_SetConfig+0x148>)
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	461a      	mov	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c6a:	4b29      	ldr	r3, [pc, #164]	@ (8008d10 <USBD_SetConfig+0x148>)
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	4619      	mov	r1, r3
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f7ff f984 	bl	8007f7e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 f9f1 	bl	800905e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c7c:	e042      	b.n	8008d04 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008c7e:	4b24      	ldr	r3, [pc, #144]	@ (8008d10 <USBD_SetConfig+0x148>)
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	461a      	mov	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d02a      	beq.n	8008ce2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	4619      	mov	r1, r3
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f7ff f972 	bl	8007f7e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8008d10 <USBD_SetConfig+0x148>)
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8008d10 <USBD_SetConfig+0x148>)
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f7ff f94b 	bl	8007f46 <USBD_SetClassConfig>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008cb4:	7bfb      	ldrb	r3, [r7, #15]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00f      	beq.n	8008cda <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008cba:	6839      	ldr	r1, [r7, #0]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f903 	bl	8008ec8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7ff f957 	bl	8007f7e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2202      	movs	r2, #2
 8008cd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008cd8:	e014      	b.n	8008d04 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f9bf 	bl	800905e <USBD_CtlSendStatus>
      break;
 8008ce0:	e010      	b.n	8008d04 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 f9bb 	bl	800905e <USBD_CtlSendStatus>
      break;
 8008ce8:	e00c      	b.n	8008d04 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008cea:	6839      	ldr	r1, [r7, #0]
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f8eb 	bl	8008ec8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cf2:	4b07      	ldr	r3, [pc, #28]	@ (8008d10 <USBD_SetConfig+0x148>)
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f7ff f940 	bl	8007f7e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	73fb      	strb	r3, [r7, #15]
      break;
 8008d02:	bf00      	nop
  }

  return ret;
 8008d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	200004b0 	.word	0x200004b0

08008d14 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	88db      	ldrh	r3, [r3, #6]
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d004      	beq.n	8008d30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d26:	6839      	ldr	r1, [r7, #0]
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 f8cd 	bl	8008ec8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d2e:	e023      	b.n	8008d78 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	dc02      	bgt.n	8008d42 <USBD_GetConfig+0x2e>
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	dc03      	bgt.n	8008d48 <USBD_GetConfig+0x34>
 8008d40:	e015      	b.n	8008d6e <USBD_GetConfig+0x5a>
 8008d42:	2b03      	cmp	r3, #3
 8008d44:	d00b      	beq.n	8008d5e <USBD_GetConfig+0x4a>
 8008d46:	e012      	b.n	8008d6e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	3308      	adds	r3, #8
 8008d52:	2201      	movs	r2, #1
 8008d54:	4619      	mov	r1, r3
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 f927 	bl	8008faa <USBD_CtlSendData>
        break;
 8008d5c:	e00c      	b.n	8008d78 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	3304      	adds	r3, #4
 8008d62:	2201      	movs	r2, #1
 8008d64:	4619      	mov	r1, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f91f 	bl	8008faa <USBD_CtlSendData>
        break;
 8008d6c:	e004      	b.n	8008d78 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008d6e:	6839      	ldr	r1, [r7, #0]
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 f8a9 	bl	8008ec8 <USBD_CtlError>
        break;
 8008d76:	bf00      	nop
}
 8008d78:	bf00      	nop
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	3b01      	subs	r3, #1
 8008d94:	2b02      	cmp	r3, #2
 8008d96:	d81e      	bhi.n	8008dd6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	88db      	ldrh	r3, [r3, #6]
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d004      	beq.n	8008daa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008da0:	6839      	ldr	r1, [r7, #0]
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f890 	bl	8008ec8 <USBD_CtlError>
        break;
 8008da8:	e01a      	b.n	8008de0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2201      	movs	r2, #1
 8008dae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d005      	beq.n	8008dc6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	f043 0202 	orr.w	r2, r3, #2
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	330c      	adds	r3, #12
 8008dca:	2202      	movs	r2, #2
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f8eb 	bl	8008faa <USBD_CtlSendData>
      break;
 8008dd4:	e004      	b.n	8008de0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008dd6:	6839      	ldr	r1, [r7, #0]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f875 	bl	8008ec8 <USBD_CtlError>
      break;
 8008dde:	bf00      	nop
  }
}
 8008de0:	bf00      	nop
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	885b      	ldrh	r3, [r3, #2]
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d106      	bne.n	8008e08 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f92b 	bl	800905e <USBD_CtlSendStatus>
  }
}
 8008e08:	bf00      	nop
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	3b01      	subs	r3, #1
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d80b      	bhi.n	8008e40 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	885b      	ldrh	r3, [r3, #2]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d10c      	bne.n	8008e4a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f910 	bl	800905e <USBD_CtlSendStatus>
      }
      break;
 8008e3e:	e004      	b.n	8008e4a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e40:	6839      	ldr	r1, [r7, #0]
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 f840 	bl	8008ec8 <USBD_CtlError>
      break;
 8008e48:	e000      	b.n	8008e4c <USBD_ClrFeature+0x3c>
      break;
 8008e4a:	bf00      	nop
  }
}
 8008e4c:	bf00      	nop
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	781a      	ldrb	r2, [r3, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	781a      	ldrb	r2, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f7ff fa91 	bl	80083a6 <SWAPBYTE>
 8008e84:	4603      	mov	r3, r0
 8008e86:	461a      	mov	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	3301      	adds	r3, #1
 8008e96:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	f7ff fa84 	bl	80083a6 <SWAPBYTE>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f7ff fa77 	bl	80083a6 <SWAPBYTE>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	461a      	mov	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	80da      	strh	r2, [r3, #6]
}
 8008ec0:	bf00      	nop
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ed2:	2180      	movs	r1, #128	@ 0x80
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fc95 	bl	8009804 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008eda:	2100      	movs	r1, #0
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 fc91 	bl	8009804 <USBD_LL_StallEP>
}
 8008ee2:	bf00      	nop
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b086      	sub	sp, #24
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	60f8      	str	r0, [r7, #12]
 8008ef2:	60b9      	str	r1, [r7, #8]
 8008ef4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d036      	beq.n	8008f6e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f04:	6938      	ldr	r0, [r7, #16]
 8008f06:	f000 f836 	bl	8008f76 <USBD_GetLen>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	005b      	lsls	r3, r3, #1
 8008f12:	b29a      	uxth	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f18:	7dfb      	ldrb	r3, [r7, #23]
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	7812      	ldrb	r2, [r2, #0]
 8008f22:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f24:	7dfb      	ldrb	r3, [r7, #23]
 8008f26:	3301      	adds	r3, #1
 8008f28:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f2a:	7dfb      	ldrb	r3, [r7, #23]
 8008f2c:	68ba      	ldr	r2, [r7, #8]
 8008f2e:	4413      	add	r3, r2
 8008f30:	2203      	movs	r2, #3
 8008f32:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f34:	7dfb      	ldrb	r3, [r7, #23]
 8008f36:	3301      	adds	r3, #1
 8008f38:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f3a:	e013      	b.n	8008f64 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f3c:	7dfb      	ldrb	r3, [r7, #23]
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	4413      	add	r3, r2
 8008f42:	693a      	ldr	r2, [r7, #16]
 8008f44:	7812      	ldrb	r2, [r2, #0]
 8008f46:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	613b      	str	r3, [r7, #16]
    idx++;
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
 8008f50:	3301      	adds	r3, #1
 8008f52:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f54:	7dfb      	ldrb	r3, [r7, #23]
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	4413      	add	r3, r2
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f5e:	7dfb      	ldrb	r3, [r7, #23]
 8008f60:	3301      	adds	r3, #1
 8008f62:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1e7      	bne.n	8008f3c <USBD_GetString+0x52>
 8008f6c:	e000      	b.n	8008f70 <USBD_GetString+0x86>
    return;
 8008f6e:	bf00      	nop
  }
}
 8008f70:	3718      	adds	r7, #24
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f76:	b480      	push	{r7}
 8008f78:	b085      	sub	sp, #20
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f86:	e005      	b.n	8008f94 <USBD_GetLen+0x1e>
  {
    len++;
 8008f88:	7bfb      	ldrb	r3, [r7, #15]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	3301      	adds	r3, #1
 8008f92:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1f5      	bne.n	8008f88 <USBD_GetLen+0x12>
  }

  return len;
 8008f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3714      	adds	r7, #20
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr

08008faa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b084      	sub	sp, #16
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	60f8      	str	r0, [r7, #12]
 8008fb2:	60b9      	str	r1, [r7, #8]
 8008fb4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2202      	movs	r2, #2
 8008fba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	68ba      	ldr	r2, [r7, #8]
 8008fce:	2100      	movs	r1, #0
 8008fd0:	68f8      	ldr	r0, [r7, #12]
 8008fd2:	f000 fca0 	bl	8009916 <USBD_LL_Transmit>

  return USBD_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	68ba      	ldr	r2, [r7, #8]
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f000 fc8f 	bl	8009916 <USBD_LL_Transmit>

  return USBD_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b084      	sub	sp, #16
 8009006:	af00      	add	r7, sp, #0
 8009008:	60f8      	str	r0, [r7, #12]
 800900a:	60b9      	str	r1, [r7, #8]
 800900c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2203      	movs	r2, #3
 8009012:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	2100      	movs	r1, #0
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f000 fc93 	bl	8009958 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3710      	adds	r7, #16
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	2100      	movs	r1, #0
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f000 fc82 	bl	8009958 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b082      	sub	sp, #8
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2204      	movs	r2, #4
 800906a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800906e:	2300      	movs	r3, #0
 8009070:	2200      	movs	r2, #0
 8009072:	2100      	movs	r1, #0
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 fc4e 	bl	8009916 <USBD_LL_Transmit>

  return USBD_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3708      	adds	r7, #8
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2205      	movs	r2, #5
 8009090:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009094:	2300      	movs	r3, #0
 8009096:	2200      	movs	r2, #0
 8009098:	2100      	movs	r1, #0
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 fc5c 	bl	8009958 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
	...

080090ac <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80090b0:	2200      	movs	r2, #0
 80090b2:	4912      	ldr	r1, [pc, #72]	@ (80090fc <MX_USB_Device_Init+0x50>)
 80090b4:	4812      	ldr	r0, [pc, #72]	@ (8009100 <MX_USB_Device_Init+0x54>)
 80090b6:	f7fe febd 	bl	8007e34 <USBD_Init>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d001      	beq.n	80090c4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80090c0:	f7f7 fbc9 	bl	8000856 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80090c4:	490f      	ldr	r1, [pc, #60]	@ (8009104 <MX_USB_Device_Init+0x58>)
 80090c6:	480e      	ldr	r0, [pc, #56]	@ (8009100 <MX_USB_Device_Init+0x54>)
 80090c8:	f7fe fef2 	bl	8007eb0 <USBD_RegisterClass>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d001      	beq.n	80090d6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80090d2:	f7f7 fbc0 	bl	8000856 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80090d6:	490c      	ldr	r1, [pc, #48]	@ (8009108 <MX_USB_Device_Init+0x5c>)
 80090d8:	4809      	ldr	r0, [pc, #36]	@ (8009100 <MX_USB_Device_Init+0x54>)
 80090da:	f7fe fe05 	bl	8007ce8 <USBD_CDC_RegisterInterface>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d001      	beq.n	80090e8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80090e4:	f7f7 fbb7 	bl	8000856 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80090e8:	4805      	ldr	r0, [pc, #20]	@ (8009100 <MX_USB_Device_Init+0x54>)
 80090ea:	f7fe ff15 	bl	8007f18 <USBD_Start>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d001      	beq.n	80090f8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80090f4:	f7f7 fbaf 	bl	8000856 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80090f8:	bf00      	nop
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	20000130 	.word	0x20000130
 8009100:	200004b4 	.word	0x200004b4
 8009104:	20000018 	.word	0x20000018
 8009108:	2000011c 	.word	0x2000011c

0800910c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009110:	2200      	movs	r2, #0
 8009112:	4905      	ldr	r1, [pc, #20]	@ (8009128 <CDC_Init_FS+0x1c>)
 8009114:	4805      	ldr	r0, [pc, #20]	@ (800912c <CDC_Init_FS+0x20>)
 8009116:	f7fe fdfc 	bl	8007d12 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800911a:	4905      	ldr	r1, [pc, #20]	@ (8009130 <CDC_Init_FS+0x24>)
 800911c:	4803      	ldr	r0, [pc, #12]	@ (800912c <CDC_Init_FS+0x20>)
 800911e:	f7fe fe16 	bl	8007d4e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009122:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009124:	4618      	mov	r0, r3
 8009126:	bd80      	pop	{r7, pc}
 8009128:	20000f84 	.word	0x20000f84
 800912c:	200004b4 	.word	0x200004b4
 8009130:	20000784 	.word	0x20000784

08009134 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009134:	b480      	push	{r7}
 8009136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009138:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800913a:	4618      	mov	r0, r3
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	4603      	mov	r3, r0
 800914c:	6039      	str	r1, [r7, #0]
 800914e:	71fb      	strb	r3, [r7, #7]
 8009150:	4613      	mov	r3, r2
 8009152:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009154:	79fb      	ldrb	r3, [r7, #7]
 8009156:	2b23      	cmp	r3, #35	@ 0x23
 8009158:	d84a      	bhi.n	80091f0 <CDC_Control_FS+0xac>
 800915a:	a201      	add	r2, pc, #4	@ (adr r2, 8009160 <CDC_Control_FS+0x1c>)
 800915c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009160:	080091f1 	.word	0x080091f1
 8009164:	080091f1 	.word	0x080091f1
 8009168:	080091f1 	.word	0x080091f1
 800916c:	080091f1 	.word	0x080091f1
 8009170:	080091f1 	.word	0x080091f1
 8009174:	080091f1 	.word	0x080091f1
 8009178:	080091f1 	.word	0x080091f1
 800917c:	080091f1 	.word	0x080091f1
 8009180:	080091f1 	.word	0x080091f1
 8009184:	080091f1 	.word	0x080091f1
 8009188:	080091f1 	.word	0x080091f1
 800918c:	080091f1 	.word	0x080091f1
 8009190:	080091f1 	.word	0x080091f1
 8009194:	080091f1 	.word	0x080091f1
 8009198:	080091f1 	.word	0x080091f1
 800919c:	080091f1 	.word	0x080091f1
 80091a0:	080091f1 	.word	0x080091f1
 80091a4:	080091f1 	.word	0x080091f1
 80091a8:	080091f1 	.word	0x080091f1
 80091ac:	080091f1 	.word	0x080091f1
 80091b0:	080091f1 	.word	0x080091f1
 80091b4:	080091f1 	.word	0x080091f1
 80091b8:	080091f1 	.word	0x080091f1
 80091bc:	080091f1 	.word	0x080091f1
 80091c0:	080091f1 	.word	0x080091f1
 80091c4:	080091f1 	.word	0x080091f1
 80091c8:	080091f1 	.word	0x080091f1
 80091cc:	080091f1 	.word	0x080091f1
 80091d0:	080091f1 	.word	0x080091f1
 80091d4:	080091f1 	.word	0x080091f1
 80091d8:	080091f1 	.word	0x080091f1
 80091dc:	080091f1 	.word	0x080091f1
 80091e0:	080091f1 	.word	0x080091f1
 80091e4:	080091f1 	.word	0x080091f1
 80091e8:	080091f1 	.word	0x080091f1
 80091ec:	080091f1 	.word	0x080091f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80091f0:	bf00      	nop
  }

  return (USBD_OK);
 80091f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800920a:	6879      	ldr	r1, [r7, #4]
 800920c:	4805      	ldr	r0, [pc, #20]	@ (8009224 <CDC_Receive_FS+0x24>)
 800920e:	f7fe fd9e 	bl	8007d4e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009212:	4804      	ldr	r0, [pc, #16]	@ (8009224 <CDC_Receive_FS+0x24>)
 8009214:	f7fe fde4 	bl	8007de0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009218:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800921a:	4618      	mov	r0, r3
 800921c:	3708      	adds	r7, #8
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	200004b4 	.word	0x200004b4

08009228 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	460b      	mov	r3, r1
 8009232:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009234:	2300      	movs	r3, #0
 8009236:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009238:	4b0d      	ldr	r3, [pc, #52]	@ (8009270 <CDC_Transmit_FS+0x48>)
 800923a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800923e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009246:	2b00      	cmp	r3, #0
 8009248:	d001      	beq.n	800924e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800924a:	2301      	movs	r3, #1
 800924c:	e00b      	b.n	8009266 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800924e:	887b      	ldrh	r3, [r7, #2]
 8009250:	461a      	mov	r2, r3
 8009252:	6879      	ldr	r1, [r7, #4]
 8009254:	4806      	ldr	r0, [pc, #24]	@ (8009270 <CDC_Transmit_FS+0x48>)
 8009256:	f7fe fd5c 	bl	8007d12 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800925a:	4805      	ldr	r0, [pc, #20]	@ (8009270 <CDC_Transmit_FS+0x48>)
 800925c:	f7fe fd90 	bl	8007d80 <USBD_CDC_TransmitPacket>
 8009260:	4603      	mov	r3, r0
 8009262:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009264:	7bfb      	ldrb	r3, [r7, #15]
}
 8009266:	4618      	mov	r0, r3
 8009268:	3710      	adds	r7, #16
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	200004b4 	.word	0x200004b4

08009274 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009274:	b480      	push	{r7}
 8009276:	b087      	sub	sp, #28
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	4613      	mov	r3, r2
 8009280:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009282:	2300      	movs	r3, #0
 8009284:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009286:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800928a:	4618      	mov	r0, r3
 800928c:	371c      	adds	r7, #28
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr
	...

08009298 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	4603      	mov	r3, r0
 80092a0:	6039      	str	r1, [r7, #0]
 80092a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	2212      	movs	r2, #18
 80092a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80092aa:	4b03      	ldr	r3, [pc, #12]	@ (80092b8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr
 80092b8:	20000150 	.word	0x20000150

080092bc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	4603      	mov	r3, r0
 80092c4:	6039      	str	r1, [r7, #0]
 80092c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	2204      	movs	r2, #4
 80092cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80092ce:	4b03      	ldr	r3, [pc, #12]	@ (80092dc <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr
 80092dc:	20000164 	.word	0x20000164

080092e0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	4603      	mov	r3, r0
 80092e8:	6039      	str	r1, [r7, #0]
 80092ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092ec:	79fb      	ldrb	r3, [r7, #7]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d105      	bne.n	80092fe <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	4907      	ldr	r1, [pc, #28]	@ (8009314 <USBD_CDC_ProductStrDescriptor+0x34>)
 80092f6:	4808      	ldr	r0, [pc, #32]	@ (8009318 <USBD_CDC_ProductStrDescriptor+0x38>)
 80092f8:	f7ff fdf7 	bl	8008eea <USBD_GetString>
 80092fc:	e004      	b.n	8009308 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80092fe:	683a      	ldr	r2, [r7, #0]
 8009300:	4904      	ldr	r1, [pc, #16]	@ (8009314 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009302:	4805      	ldr	r0, [pc, #20]	@ (8009318 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009304:	f7ff fdf1 	bl	8008eea <USBD_GetString>
  }
  return USBD_StrDesc;
 8009308:	4b02      	ldr	r3, [pc, #8]	@ (8009314 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800930a:	4618      	mov	r0, r3
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	20001784 	.word	0x20001784
 8009318:	0800ae7c 	.word	0x0800ae7c

0800931c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	4603      	mov	r3, r0
 8009324:	6039      	str	r1, [r7, #0]
 8009326:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009328:	683a      	ldr	r2, [r7, #0]
 800932a:	4904      	ldr	r1, [pc, #16]	@ (800933c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800932c:	4804      	ldr	r0, [pc, #16]	@ (8009340 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800932e:	f7ff fddc 	bl	8008eea <USBD_GetString>
  return USBD_StrDesc;
 8009332:	4b02      	ldr	r3, [pc, #8]	@ (800933c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009334:	4618      	mov	r0, r3
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	20001784 	.word	0x20001784
 8009340:	0800ae94 	.word	0x0800ae94

08009344 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	4603      	mov	r3, r0
 800934c:	6039      	str	r1, [r7, #0]
 800934e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	221a      	movs	r2, #26
 8009354:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009356:	f000 f843 	bl	80093e0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800935a:	4b02      	ldr	r3, [pc, #8]	@ (8009364 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800935c:	4618      	mov	r0, r3
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	20000168 	.word	0x20000168

08009368 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	4603      	mov	r3, r0
 8009370:	6039      	str	r1, [r7, #0]
 8009372:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009374:	79fb      	ldrb	r3, [r7, #7]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d105      	bne.n	8009386 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800937a:	683a      	ldr	r2, [r7, #0]
 800937c:	4907      	ldr	r1, [pc, #28]	@ (800939c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800937e:	4808      	ldr	r0, [pc, #32]	@ (80093a0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009380:	f7ff fdb3 	bl	8008eea <USBD_GetString>
 8009384:	e004      	b.n	8009390 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009386:	683a      	ldr	r2, [r7, #0]
 8009388:	4904      	ldr	r1, [pc, #16]	@ (800939c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800938a:	4805      	ldr	r0, [pc, #20]	@ (80093a0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800938c:	f7ff fdad 	bl	8008eea <USBD_GetString>
  }
  return USBD_StrDesc;
 8009390:	4b02      	ldr	r3, [pc, #8]	@ (800939c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009392:	4618      	mov	r0, r3
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	20001784 	.word	0x20001784
 80093a0:	0800aea8 	.word	0x0800aea8

080093a4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	4603      	mov	r3, r0
 80093ac:	6039      	str	r1, [r7, #0]
 80093ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093b0:	79fb      	ldrb	r3, [r7, #7]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d105      	bne.n	80093c2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80093b6:	683a      	ldr	r2, [r7, #0]
 80093b8:	4907      	ldr	r1, [pc, #28]	@ (80093d8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80093ba:	4808      	ldr	r0, [pc, #32]	@ (80093dc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80093bc:	f7ff fd95 	bl	8008eea <USBD_GetString>
 80093c0:	e004      	b.n	80093cc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80093c2:	683a      	ldr	r2, [r7, #0]
 80093c4:	4904      	ldr	r1, [pc, #16]	@ (80093d8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80093c6:	4805      	ldr	r0, [pc, #20]	@ (80093dc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80093c8:	f7ff fd8f 	bl	8008eea <USBD_GetString>
  }
  return USBD_StrDesc;
 80093cc:	4b02      	ldr	r3, [pc, #8]	@ (80093d8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3708      	adds	r7, #8
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	20001784 	.word	0x20001784
 80093dc:	0800aeb4 	.word	0x0800aeb4

080093e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80093e6:	4b0f      	ldr	r3, [pc, #60]	@ (8009424 <Get_SerialNum+0x44>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80093ec:	4b0e      	ldr	r3, [pc, #56]	@ (8009428 <Get_SerialNum+0x48>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80093f2:	4b0e      	ldr	r3, [pc, #56]	@ (800942c <Get_SerialNum+0x4c>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4413      	add	r3, r2
 80093fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d009      	beq.n	800941a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009406:	2208      	movs	r2, #8
 8009408:	4909      	ldr	r1, [pc, #36]	@ (8009430 <Get_SerialNum+0x50>)
 800940a:	68f8      	ldr	r0, [r7, #12]
 800940c:	f000 f814 	bl	8009438 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009410:	2204      	movs	r2, #4
 8009412:	4908      	ldr	r1, [pc, #32]	@ (8009434 <Get_SerialNum+0x54>)
 8009414:	68b8      	ldr	r0, [r7, #8]
 8009416:	f000 f80f 	bl	8009438 <IntToUnicode>
  }
}
 800941a:	bf00      	nop
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	1fff7590 	.word	0x1fff7590
 8009428:	1fff7594 	.word	0x1fff7594
 800942c:	1fff7598 	.word	0x1fff7598
 8009430:	2000016a 	.word	0x2000016a
 8009434:	2000017a 	.word	0x2000017a

08009438 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009438:	b480      	push	{r7}
 800943a:	b087      	sub	sp, #28
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	4613      	mov	r3, r2
 8009444:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009446:	2300      	movs	r3, #0
 8009448:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800944a:	2300      	movs	r3, #0
 800944c:	75fb      	strb	r3, [r7, #23]
 800944e:	e027      	b.n	80094a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	0f1b      	lsrs	r3, r3, #28
 8009454:	2b09      	cmp	r3, #9
 8009456:	d80b      	bhi.n	8009470 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	0f1b      	lsrs	r3, r3, #28
 800945c:	b2da      	uxtb	r2, r3
 800945e:	7dfb      	ldrb	r3, [r7, #23]
 8009460:	005b      	lsls	r3, r3, #1
 8009462:	4619      	mov	r1, r3
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	440b      	add	r3, r1
 8009468:	3230      	adds	r2, #48	@ 0x30
 800946a:	b2d2      	uxtb	r2, r2
 800946c:	701a      	strb	r2, [r3, #0]
 800946e:	e00a      	b.n	8009486 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	0f1b      	lsrs	r3, r3, #28
 8009474:	b2da      	uxtb	r2, r3
 8009476:	7dfb      	ldrb	r3, [r7, #23]
 8009478:	005b      	lsls	r3, r3, #1
 800947a:	4619      	mov	r1, r3
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	440b      	add	r3, r1
 8009480:	3237      	adds	r2, #55	@ 0x37
 8009482:	b2d2      	uxtb	r2, r2
 8009484:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	011b      	lsls	r3, r3, #4
 800948a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800948c:	7dfb      	ldrb	r3, [r7, #23]
 800948e:	005b      	lsls	r3, r3, #1
 8009490:	3301      	adds	r3, #1
 8009492:	68ba      	ldr	r2, [r7, #8]
 8009494:	4413      	add	r3, r2
 8009496:	2200      	movs	r2, #0
 8009498:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800949a:	7dfb      	ldrb	r3, [r7, #23]
 800949c:	3301      	adds	r3, #1
 800949e:	75fb      	strb	r3, [r7, #23]
 80094a0:	7dfa      	ldrb	r2, [r7, #23]
 80094a2:	79fb      	ldrb	r3, [r7, #7]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d3d3      	bcc.n	8009450 <IntToUnicode+0x18>
  }
}
 80094a8:	bf00      	nop
 80094aa:	bf00      	nop
 80094ac:	371c      	adds	r7, #28
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
	...

080094b8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b098      	sub	sp, #96	@ 0x60
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80094c0:	f107 030c 	add.w	r3, r7, #12
 80094c4:	2254      	movs	r2, #84	@ 0x54
 80094c6:	2100      	movs	r1, #0
 80094c8:	4618      	mov	r0, r3
 80094ca:	f000 fc4e 	bl	8009d6a <memset>
  if(pcdHandle->Instance==USB)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a15      	ldr	r2, [pc, #84]	@ (8009528 <HAL_PCD_MspInit+0x70>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d122      	bne.n	800951e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80094d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80094dc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80094de:	2300      	movs	r3, #0
 80094e0:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80094e2:	f107 030c 	add.w	r3, r7, #12
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7fa fc02 	bl	8003cf0 <HAL_RCCEx_PeriphCLKConfig>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d001      	beq.n	80094f6 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80094f2:	f7f7 f9b0 	bl	8000856 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80094f6:	4b0d      	ldr	r3, [pc, #52]	@ (800952c <HAL_PCD_MspInit+0x74>)
 80094f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094fa:	4a0c      	ldr	r2, [pc, #48]	@ (800952c <HAL_PCD_MspInit+0x74>)
 80094fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009500:	6593      	str	r3, [r2, #88]	@ 0x58
 8009502:	4b0a      	ldr	r3, [pc, #40]	@ (800952c <HAL_PCD_MspInit+0x74>)
 8009504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009506:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800950a:	60bb      	str	r3, [r7, #8]
 800950c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 5, 0);
 800950e:	2200      	movs	r2, #0
 8009510:	2105      	movs	r1, #5
 8009512:	2013      	movs	r0, #19
 8009514:	f7f7 ff10 	bl	8001338 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 8009518:	2013      	movs	r0, #19
 800951a:	f7f7 ff27 	bl	800136c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800951e:	bf00      	nop
 8009520:	3760      	adds	r7, #96	@ 0x60
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	40005c00 	.word	0x40005c00
 800952c:	40021000 	.word	0x40021000

08009530 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009544:	4619      	mov	r1, r3
 8009546:	4610      	mov	r0, r2
 8009548:	f7fe fd31 	bl	8007fae <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800954c:	bf00      	nop
 800954e:	3708      	adds	r7, #8
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	460b      	mov	r3, r1
 800955e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8009566:	78fa      	ldrb	r2, [r7, #3]
 8009568:	6879      	ldr	r1, [r7, #4]
 800956a:	4613      	mov	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	4413      	add	r3, r2
 8009570:	00db      	lsls	r3, r3, #3
 8009572:	440b      	add	r3, r1
 8009574:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	78fb      	ldrb	r3, [r7, #3]
 800957c:	4619      	mov	r1, r3
 800957e:	f7fe fd6b 	bl	8008058 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009582:	bf00      	nop
 8009584:	3708      	adds	r7, #8
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b082      	sub	sp, #8
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	460b      	mov	r3, r1
 8009594:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800959c:	78fa      	ldrb	r2, [r7, #3]
 800959e:	6879      	ldr	r1, [r7, #4]
 80095a0:	4613      	mov	r3, r2
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	4413      	add	r3, r2
 80095a6:	00db      	lsls	r3, r3, #3
 80095a8:	440b      	add	r3, r1
 80095aa:	3324      	adds	r3, #36	@ 0x24
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	78fb      	ldrb	r3, [r7, #3]
 80095b0:	4619      	mov	r1, r3
 80095b2:	f7fe fdb4 	bl	800811e <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80095b6:	bf00      	nop
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b082      	sub	sp, #8
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7fe fec8 	bl	8008362 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80095d2:	bf00      	nop
 80095d4:	3708      	adds	r7, #8
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b084      	sub	sp, #16
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80095e2:	2301      	movs	r3, #1
 80095e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	795b      	ldrb	r3, [r3, #5]
 80095ea:	2b02      	cmp	r3, #2
 80095ec:	d001      	beq.n	80095f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80095ee:	f7f7 f932 	bl	8000856 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80095f8:	7bfa      	ldrb	r2, [r7, #15]
 80095fa:	4611      	mov	r1, r2
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7fe fe72 	bl	80082e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009608:	4618      	mov	r0, r3
 800960a:	f7fe fe1e 	bl	800824a <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800960e:	bf00      	nop
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
	...

08009618 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009626:	4618      	mov	r0, r3
 8009628:	f7fe fe6d 	bl	8008306 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	7a5b      	ldrb	r3, [r3, #9]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d005      	beq.n	8009640 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009634:	4b04      	ldr	r3, [pc, #16]	@ (8009648 <HAL_PCD_SuspendCallback+0x30>)
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	4a03      	ldr	r2, [pc, #12]	@ (8009648 <HAL_PCD_SuspendCallback+0x30>)
 800963a:	f043 0306 	orr.w	r3, r3, #6
 800963e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009640:	bf00      	nop
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	e000ed00 	.word	0xe000ed00

0800964c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	7a5b      	ldrb	r3, [r3, #9]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d007      	beq.n	800966c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800965c:	4b08      	ldr	r3, [pc, #32]	@ (8009680 <HAL_PCD_ResumeCallback+0x34>)
 800965e:	691b      	ldr	r3, [r3, #16]
 8009660:	4a07      	ldr	r2, [pc, #28]	@ (8009680 <HAL_PCD_ResumeCallback+0x34>)
 8009662:	f023 0306 	bic.w	r3, r3, #6
 8009666:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009668:	f000 f9f8 	bl	8009a5c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009672:	4618      	mov	r0, r3
 8009674:	f7fe fe5d 	bl	8008332 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009678:	bf00      	nop
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	e000ed00 	.word	0xe000ed00

08009684 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800968c:	4a2b      	ldr	r2, [pc, #172]	@ (800973c <USBD_LL_Init+0xb8>)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a29      	ldr	r2, [pc, #164]	@ (800973c <USBD_LL_Init+0xb8>)
 8009698:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800969c:	4b27      	ldr	r3, [pc, #156]	@ (800973c <USBD_LL_Init+0xb8>)
 800969e:	4a28      	ldr	r2, [pc, #160]	@ (8009740 <USBD_LL_Init+0xbc>)
 80096a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80096a2:	4b26      	ldr	r3, [pc, #152]	@ (800973c <USBD_LL_Init+0xb8>)
 80096a4:	2208      	movs	r2, #8
 80096a6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80096a8:	4b24      	ldr	r3, [pc, #144]	@ (800973c <USBD_LL_Init+0xb8>)
 80096aa:	2202      	movs	r2, #2
 80096ac:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80096ae:	4b23      	ldr	r3, [pc, #140]	@ (800973c <USBD_LL_Init+0xb8>)
 80096b0:	2202      	movs	r2, #2
 80096b2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80096b4:	4b21      	ldr	r3, [pc, #132]	@ (800973c <USBD_LL_Init+0xb8>)
 80096b6:	2200      	movs	r2, #0
 80096b8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80096ba:	4b20      	ldr	r3, [pc, #128]	@ (800973c <USBD_LL_Init+0xb8>)
 80096bc:	2200      	movs	r2, #0
 80096be:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80096c0:	4b1e      	ldr	r3, [pc, #120]	@ (800973c <USBD_LL_Init+0xb8>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80096c6:	4b1d      	ldr	r3, [pc, #116]	@ (800973c <USBD_LL_Init+0xb8>)
 80096c8:	2200      	movs	r2, #0
 80096ca:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80096cc:	481b      	ldr	r0, [pc, #108]	@ (800973c <USBD_LL_Init+0xb8>)
 80096ce:	f7f8 f80f 	bl	80016f0 <HAL_PCD_Init>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d001      	beq.n	80096dc <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80096d8:	f7f7 f8bd 	bl	8000856 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80096e2:	2318      	movs	r3, #24
 80096e4:	2200      	movs	r2, #0
 80096e6:	2100      	movs	r1, #0
 80096e8:	f7f9 fc96 	bl	8003018 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80096f2:	2358      	movs	r3, #88	@ 0x58
 80096f4:	2200      	movs	r2, #0
 80096f6:	2180      	movs	r1, #128	@ 0x80
 80096f8:	f7f9 fc8e 	bl	8003018 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009702:	23c0      	movs	r3, #192	@ 0xc0
 8009704:	2200      	movs	r2, #0
 8009706:	2181      	movs	r1, #129	@ 0x81
 8009708:	f7f9 fc86 	bl	8003018 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009712:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009716:	2200      	movs	r2, #0
 8009718:	2101      	movs	r1, #1
 800971a:	f7f9 fc7d 	bl	8003018 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009724:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009728:	2200      	movs	r2, #0
 800972a:	2182      	movs	r1, #130	@ 0x82
 800972c:	f7f9 fc74 	bl	8003018 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	20001984 	.word	0x20001984
 8009740:	40005c00 	.word	0x40005c00

08009744 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800974c:	2300      	movs	r3, #0
 800974e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009750:	2300      	movs	r3, #0
 8009752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800975a:	4618      	mov	r0, r3
 800975c:	f7f8 f896 	bl	800188c <HAL_PCD_Start>
 8009760:	4603      	mov	r3, r0
 8009762:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009764:	7bfb      	ldrb	r3, [r7, #15]
 8009766:	4618      	mov	r0, r3
 8009768:	f000 f97e 	bl	8009a68 <USBD_Get_USB_Status>
 800976c:	4603      	mov	r3, r0
 800976e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009770:	7bbb      	ldrb	r3, [r7, #14]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3710      	adds	r7, #16
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b084      	sub	sp, #16
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
 8009782:	4608      	mov	r0, r1
 8009784:	4611      	mov	r1, r2
 8009786:	461a      	mov	r2, r3
 8009788:	4603      	mov	r3, r0
 800978a:	70fb      	strb	r3, [r7, #3]
 800978c:	460b      	mov	r3, r1
 800978e:	70bb      	strb	r3, [r7, #2]
 8009790:	4613      	mov	r3, r2
 8009792:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009794:	2300      	movs	r3, #0
 8009796:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009798:	2300      	movs	r3, #0
 800979a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80097a2:	78bb      	ldrb	r3, [r7, #2]
 80097a4:	883a      	ldrh	r2, [r7, #0]
 80097a6:	78f9      	ldrb	r1, [r7, #3]
 80097a8:	f7f8 f9dd 	bl	8001b66 <HAL_PCD_EP_Open>
 80097ac:	4603      	mov	r3, r0
 80097ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f000 f958 	bl	8009a68 <USBD_Get_USB_Status>
 80097b8:	4603      	mov	r3, r0
 80097ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b084      	sub	sp, #16
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	460b      	mov	r3, r1
 80097d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097d2:	2300      	movs	r3, #0
 80097d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097d6:	2300      	movs	r3, #0
 80097d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80097e0:	78fa      	ldrb	r2, [r7, #3]
 80097e2:	4611      	mov	r1, r2
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7f8 fa1d 	bl	8001c24 <HAL_PCD_EP_Close>
 80097ea:	4603      	mov	r3, r0
 80097ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097ee:	7bfb      	ldrb	r3, [r7, #15]
 80097f0:	4618      	mov	r0, r3
 80097f2:	f000 f939 	bl	8009a68 <USBD_Get_USB_Status>
 80097f6:	4603      	mov	r3, r0
 80097f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	460b      	mov	r3, r1
 800980e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009810:	2300      	movs	r3, #0
 8009812:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009814:	2300      	movs	r3, #0
 8009816:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800981e:	78fa      	ldrb	r2, [r7, #3]
 8009820:	4611      	mov	r1, r2
 8009822:	4618      	mov	r0, r3
 8009824:	f7f8 fac6 	bl	8001db4 <HAL_PCD_EP_SetStall>
 8009828:	4603      	mov	r3, r0
 800982a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800982c:	7bfb      	ldrb	r3, [r7, #15]
 800982e:	4618      	mov	r0, r3
 8009830:	f000 f91a 	bl	8009a68 <USBD_Get_USB_Status>
 8009834:	4603      	mov	r3, r0
 8009836:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009838:	7bbb      	ldrb	r3, [r7, #14]
}
 800983a:	4618      	mov	r0, r3
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b084      	sub	sp, #16
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
 800984a:	460b      	mov	r3, r1
 800984c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800984e:	2300      	movs	r3, #0
 8009850:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009852:	2300      	movs	r3, #0
 8009854:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800985c:	78fa      	ldrb	r2, [r7, #3]
 800985e:	4611      	mov	r1, r2
 8009860:	4618      	mov	r0, r3
 8009862:	f7f8 faf9 	bl	8001e58 <HAL_PCD_EP_ClrStall>
 8009866:	4603      	mov	r3, r0
 8009868:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800986a:	7bfb      	ldrb	r3, [r7, #15]
 800986c:	4618      	mov	r0, r3
 800986e:	f000 f8fb 	bl	8009a68 <USBD_Get_USB_Status>
 8009872:	4603      	mov	r3, r0
 8009874:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009876:	7bbb      	ldrb	r3, [r7, #14]
}
 8009878:	4618      	mov	r0, r3
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009880:	b480      	push	{r7}
 8009882:	b085      	sub	sp, #20
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	460b      	mov	r3, r1
 800988a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009892:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009894:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009898:	2b00      	cmp	r3, #0
 800989a:	da0b      	bge.n	80098b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800989c:	78fb      	ldrb	r3, [r7, #3]
 800989e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80098a2:	68f9      	ldr	r1, [r7, #12]
 80098a4:	4613      	mov	r3, r2
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	4413      	add	r3, r2
 80098aa:	00db      	lsls	r3, r3, #3
 80098ac:	440b      	add	r3, r1
 80098ae:	3312      	adds	r3, #18
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	e00b      	b.n	80098cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80098b4:	78fb      	ldrb	r3, [r7, #3]
 80098b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80098ba:	68f9      	ldr	r1, [r7, #12]
 80098bc:	4613      	mov	r3, r2
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	4413      	add	r3, r2
 80098c2:	00db      	lsls	r3, r3, #3
 80098c4:	440b      	add	r3, r1
 80098c6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80098ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3714      	adds	r7, #20
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	460b      	mov	r3, r1
 80098e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098e4:	2300      	movs	r3, #0
 80098e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098e8:	2300      	movs	r3, #0
 80098ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80098f2:	78fa      	ldrb	r2, [r7, #3]
 80098f4:	4611      	mov	r1, r2
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7f8 f911 	bl	8001b1e <HAL_PCD_SetAddress>
 80098fc:	4603      	mov	r3, r0
 80098fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009900:	7bfb      	ldrb	r3, [r7, #15]
 8009902:	4618      	mov	r0, r3
 8009904:	f000 f8b0 	bl	8009a68 <USBD_Get_USB_Status>
 8009908:	4603      	mov	r3, r0
 800990a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800990c:	7bbb      	ldrb	r3, [r7, #14]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b086      	sub	sp, #24
 800991a:	af00      	add	r7, sp, #0
 800991c:	60f8      	str	r0, [r7, #12]
 800991e:	607a      	str	r2, [r7, #4]
 8009920:	603b      	str	r3, [r7, #0]
 8009922:	460b      	mov	r3, r1
 8009924:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009926:	2300      	movs	r3, #0
 8009928:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009934:	7af9      	ldrb	r1, [r7, #11]
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	f7f8 fa04 	bl	8001d46 <HAL_PCD_EP_Transmit>
 800993e:	4603      	mov	r3, r0
 8009940:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009942:	7dfb      	ldrb	r3, [r7, #23]
 8009944:	4618      	mov	r0, r3
 8009946:	f000 f88f 	bl	8009a68 <USBD_Get_USB_Status>
 800994a:	4603      	mov	r3, r0
 800994c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800994e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009950:	4618      	mov	r0, r3
 8009952:	3718      	adds	r7, #24
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b086      	sub	sp, #24
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	607a      	str	r2, [r7, #4]
 8009962:	603b      	str	r3, [r7, #0]
 8009964:	460b      	mov	r3, r1
 8009966:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009968:	2300      	movs	r3, #0
 800996a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800996c:	2300      	movs	r3, #0
 800996e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009976:	7af9      	ldrb	r1, [r7, #11]
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	f7f8 f99a 	bl	8001cb4 <HAL_PCD_EP_Receive>
 8009980:	4603      	mov	r3, r0
 8009982:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009984:	7dfb      	ldrb	r3, [r7, #23]
 8009986:	4618      	mov	r0, r3
 8009988:	f000 f86e 	bl	8009a68 <USBD_Get_USB_Status>
 800998c:	4603      	mov	r3, r0
 800998e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009990:	7dbb      	ldrb	r3, [r7, #22]
}
 8009992:	4618      	mov	r0, r3
 8009994:	3718      	adds	r7, #24
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b082      	sub	sp, #8
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
 80099a2:	460b      	mov	r3, r1
 80099a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80099ac:	78fa      	ldrb	r2, [r7, #3]
 80099ae:	4611      	mov	r1, r2
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7f8 f9b0 	bl	8001d16 <HAL_PCD_EP_GetRxCount>
 80099b6:	4603      	mov	r3, r0
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3708      	adds	r7, #8
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	460b      	mov	r3, r1
 80099ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80099cc:	78fb      	ldrb	r3, [r7, #3]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d002      	beq.n	80099d8 <HAL_PCDEx_LPM_Callback+0x18>
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d013      	beq.n	80099fe <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80099d6:	e023      	b.n	8009a20 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	7a5b      	ldrb	r3, [r3, #9]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d007      	beq.n	80099f0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80099e0:	f000 f83c 	bl	8009a5c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099e4:	4b10      	ldr	r3, [pc, #64]	@ (8009a28 <HAL_PCDEx_LPM_Callback+0x68>)
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	4a0f      	ldr	r2, [pc, #60]	@ (8009a28 <HAL_PCDEx_LPM_Callback+0x68>)
 80099ea:	f023 0306 	bic.w	r3, r3, #6
 80099ee:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7fe fc9b 	bl	8008332 <USBD_LL_Resume>
    break;
 80099fc:	e010      	b.n	8009a20 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7fe fc7e 	bl	8008306 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	7a5b      	ldrb	r3, [r3, #9]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d005      	beq.n	8009a1e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a12:	4b05      	ldr	r3, [pc, #20]	@ (8009a28 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a14:	691b      	ldr	r3, [r3, #16]
 8009a16:	4a04      	ldr	r2, [pc, #16]	@ (8009a28 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a18:	f043 0306 	orr.w	r3, r3, #6
 8009a1c:	6113      	str	r3, [r2, #16]
    break;
 8009a1e:	bf00      	nop
}
 8009a20:	bf00      	nop
 8009a22:	3708      	adds	r7, #8
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	e000ed00 	.word	0xe000ed00

08009a2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a34:	4b03      	ldr	r3, [pc, #12]	@ (8009a44 <USBD_static_malloc+0x18>)
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	370c      	adds	r7, #12
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr
 8009a42:	bf00      	nop
 8009a44:	20001c60 	.word	0x20001c60

08009a48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]

}
 8009a50:	bf00      	nop
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr

08009a5c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009a60:	f7f6 fe7e 	bl	8000760 <SystemClock_Config>
}
 8009a64:	bf00      	nop
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b085      	sub	sp, #20
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	4603      	mov	r3, r0
 8009a70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a72:	2300      	movs	r3, #0
 8009a74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a76:	79fb      	ldrb	r3, [r7, #7]
 8009a78:	2b03      	cmp	r3, #3
 8009a7a:	d817      	bhi.n	8009aac <USBD_Get_USB_Status+0x44>
 8009a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8009a84 <USBD_Get_USB_Status+0x1c>)
 8009a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a82:	bf00      	nop
 8009a84:	08009a95 	.word	0x08009a95
 8009a88:	08009a9b 	.word	0x08009a9b
 8009a8c:	08009aa1 	.word	0x08009aa1
 8009a90:	08009aa7 	.word	0x08009aa7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a94:	2300      	movs	r3, #0
 8009a96:	73fb      	strb	r3, [r7, #15]
    break;
 8009a98:	e00b      	b.n	8009ab2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a9e:	e008      	b.n	8009ab2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	73fb      	strb	r3, [r7, #15]
    break;
 8009aa4:	e005      	b.n	8009ab2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009aa6:	2303      	movs	r3, #3
 8009aa8:	73fb      	strb	r3, [r7, #15]
    break;
 8009aaa:	e002      	b.n	8009ab2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009aac:	2303      	movs	r3, #3
 8009aae:	73fb      	strb	r3, [r7, #15]
    break;
 8009ab0:	bf00      	nop
  }
  return usb_status;
 8009ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3714      	adds	r7, #20
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <std>:
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	b510      	push	{r4, lr}
 8009ac4:	4604      	mov	r4, r0
 8009ac6:	e9c0 3300 	strd	r3, r3, [r0]
 8009aca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ace:	6083      	str	r3, [r0, #8]
 8009ad0:	8181      	strh	r1, [r0, #12]
 8009ad2:	6643      	str	r3, [r0, #100]	@ 0x64
 8009ad4:	81c2      	strh	r2, [r0, #14]
 8009ad6:	6183      	str	r3, [r0, #24]
 8009ad8:	4619      	mov	r1, r3
 8009ada:	2208      	movs	r2, #8
 8009adc:	305c      	adds	r0, #92	@ 0x5c
 8009ade:	f000 f944 	bl	8009d6a <memset>
 8009ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8009b18 <std+0x58>)
 8009ae4:	6263      	str	r3, [r4, #36]	@ 0x24
 8009ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8009b1c <std+0x5c>)
 8009ae8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009aea:	4b0d      	ldr	r3, [pc, #52]	@ (8009b20 <std+0x60>)
 8009aec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009aee:	4b0d      	ldr	r3, [pc, #52]	@ (8009b24 <std+0x64>)
 8009af0:	6323      	str	r3, [r4, #48]	@ 0x30
 8009af2:	4b0d      	ldr	r3, [pc, #52]	@ (8009b28 <std+0x68>)
 8009af4:	6224      	str	r4, [r4, #32]
 8009af6:	429c      	cmp	r4, r3
 8009af8:	d006      	beq.n	8009b08 <std+0x48>
 8009afa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009afe:	4294      	cmp	r4, r2
 8009b00:	d002      	beq.n	8009b08 <std+0x48>
 8009b02:	33d0      	adds	r3, #208	@ 0xd0
 8009b04:	429c      	cmp	r4, r3
 8009b06:	d105      	bne.n	8009b14 <std+0x54>
 8009b08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b10:	f000 b9a4 	b.w	8009e5c <__retarget_lock_init_recursive>
 8009b14:	bd10      	pop	{r4, pc}
 8009b16:	bf00      	nop
 8009b18:	08009ce5 	.word	0x08009ce5
 8009b1c:	08009d07 	.word	0x08009d07
 8009b20:	08009d3f 	.word	0x08009d3f
 8009b24:	08009d63 	.word	0x08009d63
 8009b28:	20001e80 	.word	0x20001e80

08009b2c <stdio_exit_handler>:
 8009b2c:	4a02      	ldr	r2, [pc, #8]	@ (8009b38 <stdio_exit_handler+0xc>)
 8009b2e:	4903      	ldr	r1, [pc, #12]	@ (8009b3c <stdio_exit_handler+0x10>)
 8009b30:	4803      	ldr	r0, [pc, #12]	@ (8009b40 <stdio_exit_handler+0x14>)
 8009b32:	f000 b869 	b.w	8009c08 <_fwalk_sglue>
 8009b36:	bf00      	nop
 8009b38:	20000184 	.word	0x20000184
 8009b3c:	0800a9a9 	.word	0x0800a9a9
 8009b40:	20000194 	.word	0x20000194

08009b44 <cleanup_stdio>:
 8009b44:	6841      	ldr	r1, [r0, #4]
 8009b46:	4b0c      	ldr	r3, [pc, #48]	@ (8009b78 <cleanup_stdio+0x34>)
 8009b48:	4299      	cmp	r1, r3
 8009b4a:	b510      	push	{r4, lr}
 8009b4c:	4604      	mov	r4, r0
 8009b4e:	d001      	beq.n	8009b54 <cleanup_stdio+0x10>
 8009b50:	f000 ff2a 	bl	800a9a8 <_fflush_r>
 8009b54:	68a1      	ldr	r1, [r4, #8]
 8009b56:	4b09      	ldr	r3, [pc, #36]	@ (8009b7c <cleanup_stdio+0x38>)
 8009b58:	4299      	cmp	r1, r3
 8009b5a:	d002      	beq.n	8009b62 <cleanup_stdio+0x1e>
 8009b5c:	4620      	mov	r0, r4
 8009b5e:	f000 ff23 	bl	800a9a8 <_fflush_r>
 8009b62:	68e1      	ldr	r1, [r4, #12]
 8009b64:	4b06      	ldr	r3, [pc, #24]	@ (8009b80 <cleanup_stdio+0x3c>)
 8009b66:	4299      	cmp	r1, r3
 8009b68:	d004      	beq.n	8009b74 <cleanup_stdio+0x30>
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b70:	f000 bf1a 	b.w	800a9a8 <_fflush_r>
 8009b74:	bd10      	pop	{r4, pc}
 8009b76:	bf00      	nop
 8009b78:	20001e80 	.word	0x20001e80
 8009b7c:	20001ee8 	.word	0x20001ee8
 8009b80:	20001f50 	.word	0x20001f50

08009b84 <global_stdio_init.part.0>:
 8009b84:	b510      	push	{r4, lr}
 8009b86:	4b0b      	ldr	r3, [pc, #44]	@ (8009bb4 <global_stdio_init.part.0+0x30>)
 8009b88:	4c0b      	ldr	r4, [pc, #44]	@ (8009bb8 <global_stdio_init.part.0+0x34>)
 8009b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8009bbc <global_stdio_init.part.0+0x38>)
 8009b8c:	601a      	str	r2, [r3, #0]
 8009b8e:	4620      	mov	r0, r4
 8009b90:	2200      	movs	r2, #0
 8009b92:	2104      	movs	r1, #4
 8009b94:	f7ff ff94 	bl	8009ac0 <std>
 8009b98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	2109      	movs	r1, #9
 8009ba0:	f7ff ff8e 	bl	8009ac0 <std>
 8009ba4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009ba8:	2202      	movs	r2, #2
 8009baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bae:	2112      	movs	r1, #18
 8009bb0:	f7ff bf86 	b.w	8009ac0 <std>
 8009bb4:	20001fb8 	.word	0x20001fb8
 8009bb8:	20001e80 	.word	0x20001e80
 8009bbc:	08009b2d 	.word	0x08009b2d

08009bc0 <__sfp_lock_acquire>:
 8009bc0:	4801      	ldr	r0, [pc, #4]	@ (8009bc8 <__sfp_lock_acquire+0x8>)
 8009bc2:	f000 b94c 	b.w	8009e5e <__retarget_lock_acquire_recursive>
 8009bc6:	bf00      	nop
 8009bc8:	20001fc1 	.word	0x20001fc1

08009bcc <__sfp_lock_release>:
 8009bcc:	4801      	ldr	r0, [pc, #4]	@ (8009bd4 <__sfp_lock_release+0x8>)
 8009bce:	f000 b947 	b.w	8009e60 <__retarget_lock_release_recursive>
 8009bd2:	bf00      	nop
 8009bd4:	20001fc1 	.word	0x20001fc1

08009bd8 <__sinit>:
 8009bd8:	b510      	push	{r4, lr}
 8009bda:	4604      	mov	r4, r0
 8009bdc:	f7ff fff0 	bl	8009bc0 <__sfp_lock_acquire>
 8009be0:	6a23      	ldr	r3, [r4, #32]
 8009be2:	b11b      	cbz	r3, 8009bec <__sinit+0x14>
 8009be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009be8:	f7ff bff0 	b.w	8009bcc <__sfp_lock_release>
 8009bec:	4b04      	ldr	r3, [pc, #16]	@ (8009c00 <__sinit+0x28>)
 8009bee:	6223      	str	r3, [r4, #32]
 8009bf0:	4b04      	ldr	r3, [pc, #16]	@ (8009c04 <__sinit+0x2c>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d1f5      	bne.n	8009be4 <__sinit+0xc>
 8009bf8:	f7ff ffc4 	bl	8009b84 <global_stdio_init.part.0>
 8009bfc:	e7f2      	b.n	8009be4 <__sinit+0xc>
 8009bfe:	bf00      	nop
 8009c00:	08009b45 	.word	0x08009b45
 8009c04:	20001fb8 	.word	0x20001fb8

08009c08 <_fwalk_sglue>:
 8009c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c0c:	4607      	mov	r7, r0
 8009c0e:	4688      	mov	r8, r1
 8009c10:	4614      	mov	r4, r2
 8009c12:	2600      	movs	r6, #0
 8009c14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c18:	f1b9 0901 	subs.w	r9, r9, #1
 8009c1c:	d505      	bpl.n	8009c2a <_fwalk_sglue+0x22>
 8009c1e:	6824      	ldr	r4, [r4, #0]
 8009c20:	2c00      	cmp	r4, #0
 8009c22:	d1f7      	bne.n	8009c14 <_fwalk_sglue+0xc>
 8009c24:	4630      	mov	r0, r6
 8009c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c2a:	89ab      	ldrh	r3, [r5, #12]
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d907      	bls.n	8009c40 <_fwalk_sglue+0x38>
 8009c30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c34:	3301      	adds	r3, #1
 8009c36:	d003      	beq.n	8009c40 <_fwalk_sglue+0x38>
 8009c38:	4629      	mov	r1, r5
 8009c3a:	4638      	mov	r0, r7
 8009c3c:	47c0      	blx	r8
 8009c3e:	4306      	orrs	r6, r0
 8009c40:	3568      	adds	r5, #104	@ 0x68
 8009c42:	e7e9      	b.n	8009c18 <_fwalk_sglue+0x10>

08009c44 <iprintf>:
 8009c44:	b40f      	push	{r0, r1, r2, r3}
 8009c46:	b507      	push	{r0, r1, r2, lr}
 8009c48:	4906      	ldr	r1, [pc, #24]	@ (8009c64 <iprintf+0x20>)
 8009c4a:	ab04      	add	r3, sp, #16
 8009c4c:	6808      	ldr	r0, [r1, #0]
 8009c4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c52:	6881      	ldr	r1, [r0, #8]
 8009c54:	9301      	str	r3, [sp, #4]
 8009c56:	f000 fb7f 	bl	800a358 <_vfiprintf_r>
 8009c5a:	b003      	add	sp, #12
 8009c5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c60:	b004      	add	sp, #16
 8009c62:	4770      	bx	lr
 8009c64:	20000190 	.word	0x20000190

08009c68 <putchar>:
 8009c68:	4b02      	ldr	r3, [pc, #8]	@ (8009c74 <putchar+0xc>)
 8009c6a:	4601      	mov	r1, r0
 8009c6c:	6818      	ldr	r0, [r3, #0]
 8009c6e:	6882      	ldr	r2, [r0, #8]
 8009c70:	f000 bec2 	b.w	800a9f8 <_putc_r>
 8009c74:	20000190 	.word	0x20000190

08009c78 <sniprintf>:
 8009c78:	b40c      	push	{r2, r3}
 8009c7a:	b530      	push	{r4, r5, lr}
 8009c7c:	4b18      	ldr	r3, [pc, #96]	@ (8009ce0 <sniprintf+0x68>)
 8009c7e:	1e0c      	subs	r4, r1, #0
 8009c80:	681d      	ldr	r5, [r3, #0]
 8009c82:	b09d      	sub	sp, #116	@ 0x74
 8009c84:	da08      	bge.n	8009c98 <sniprintf+0x20>
 8009c86:	238b      	movs	r3, #139	@ 0x8b
 8009c88:	602b      	str	r3, [r5, #0]
 8009c8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c8e:	b01d      	add	sp, #116	@ 0x74
 8009c90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c94:	b002      	add	sp, #8
 8009c96:	4770      	bx	lr
 8009c98:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009c9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009ca0:	f04f 0300 	mov.w	r3, #0
 8009ca4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009ca6:	bf14      	ite	ne
 8009ca8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8009cac:	4623      	moveq	r3, r4
 8009cae:	9304      	str	r3, [sp, #16]
 8009cb0:	9307      	str	r3, [sp, #28]
 8009cb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009cb6:	9002      	str	r0, [sp, #8]
 8009cb8:	9006      	str	r0, [sp, #24]
 8009cba:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009cbe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009cc0:	ab21      	add	r3, sp, #132	@ 0x84
 8009cc2:	a902      	add	r1, sp, #8
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	9301      	str	r3, [sp, #4]
 8009cc8:	f000 fa20 	bl	800a10c <_svfiprintf_r>
 8009ccc:	1c43      	adds	r3, r0, #1
 8009cce:	bfbc      	itt	lt
 8009cd0:	238b      	movlt	r3, #139	@ 0x8b
 8009cd2:	602b      	strlt	r3, [r5, #0]
 8009cd4:	2c00      	cmp	r4, #0
 8009cd6:	d0da      	beq.n	8009c8e <sniprintf+0x16>
 8009cd8:	9b02      	ldr	r3, [sp, #8]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	701a      	strb	r2, [r3, #0]
 8009cde:	e7d6      	b.n	8009c8e <sniprintf+0x16>
 8009ce0:	20000190 	.word	0x20000190

08009ce4 <__sread>:
 8009ce4:	b510      	push	{r4, lr}
 8009ce6:	460c      	mov	r4, r1
 8009ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cec:	f000 f868 	bl	8009dc0 <_read_r>
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	bfab      	itete	ge
 8009cf4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009cf6:	89a3      	ldrhlt	r3, [r4, #12]
 8009cf8:	181b      	addge	r3, r3, r0
 8009cfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009cfe:	bfac      	ite	ge
 8009d00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009d02:	81a3      	strhlt	r3, [r4, #12]
 8009d04:	bd10      	pop	{r4, pc}

08009d06 <__swrite>:
 8009d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d0a:	461f      	mov	r7, r3
 8009d0c:	898b      	ldrh	r3, [r1, #12]
 8009d0e:	05db      	lsls	r3, r3, #23
 8009d10:	4605      	mov	r5, r0
 8009d12:	460c      	mov	r4, r1
 8009d14:	4616      	mov	r6, r2
 8009d16:	d505      	bpl.n	8009d24 <__swrite+0x1e>
 8009d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f000 f83c 	bl	8009d9c <_lseek_r>
 8009d24:	89a3      	ldrh	r3, [r4, #12]
 8009d26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d2e:	81a3      	strh	r3, [r4, #12]
 8009d30:	4632      	mov	r2, r6
 8009d32:	463b      	mov	r3, r7
 8009d34:	4628      	mov	r0, r5
 8009d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d3a:	f000 b853 	b.w	8009de4 <_write_r>

08009d3e <__sseek>:
 8009d3e:	b510      	push	{r4, lr}
 8009d40:	460c      	mov	r4, r1
 8009d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d46:	f000 f829 	bl	8009d9c <_lseek_r>
 8009d4a:	1c43      	adds	r3, r0, #1
 8009d4c:	89a3      	ldrh	r3, [r4, #12]
 8009d4e:	bf15      	itete	ne
 8009d50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009d52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009d56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009d5a:	81a3      	strheq	r3, [r4, #12]
 8009d5c:	bf18      	it	ne
 8009d5e:	81a3      	strhne	r3, [r4, #12]
 8009d60:	bd10      	pop	{r4, pc}

08009d62 <__sclose>:
 8009d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d66:	f000 b809 	b.w	8009d7c <_close_r>

08009d6a <memset>:
 8009d6a:	4402      	add	r2, r0
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d100      	bne.n	8009d74 <memset+0xa>
 8009d72:	4770      	bx	lr
 8009d74:	f803 1b01 	strb.w	r1, [r3], #1
 8009d78:	e7f9      	b.n	8009d6e <memset+0x4>
	...

08009d7c <_close_r>:
 8009d7c:	b538      	push	{r3, r4, r5, lr}
 8009d7e:	4d06      	ldr	r5, [pc, #24]	@ (8009d98 <_close_r+0x1c>)
 8009d80:	2300      	movs	r3, #0
 8009d82:	4604      	mov	r4, r0
 8009d84:	4608      	mov	r0, r1
 8009d86:	602b      	str	r3, [r5, #0]
 8009d88:	f7f6 fe97 	bl	8000aba <_close>
 8009d8c:	1c43      	adds	r3, r0, #1
 8009d8e:	d102      	bne.n	8009d96 <_close_r+0x1a>
 8009d90:	682b      	ldr	r3, [r5, #0]
 8009d92:	b103      	cbz	r3, 8009d96 <_close_r+0x1a>
 8009d94:	6023      	str	r3, [r4, #0]
 8009d96:	bd38      	pop	{r3, r4, r5, pc}
 8009d98:	20001fbc 	.word	0x20001fbc

08009d9c <_lseek_r>:
 8009d9c:	b538      	push	{r3, r4, r5, lr}
 8009d9e:	4d07      	ldr	r5, [pc, #28]	@ (8009dbc <_lseek_r+0x20>)
 8009da0:	4604      	mov	r4, r0
 8009da2:	4608      	mov	r0, r1
 8009da4:	4611      	mov	r1, r2
 8009da6:	2200      	movs	r2, #0
 8009da8:	602a      	str	r2, [r5, #0]
 8009daa:	461a      	mov	r2, r3
 8009dac:	f7f6 feac 	bl	8000b08 <_lseek>
 8009db0:	1c43      	adds	r3, r0, #1
 8009db2:	d102      	bne.n	8009dba <_lseek_r+0x1e>
 8009db4:	682b      	ldr	r3, [r5, #0]
 8009db6:	b103      	cbz	r3, 8009dba <_lseek_r+0x1e>
 8009db8:	6023      	str	r3, [r4, #0]
 8009dba:	bd38      	pop	{r3, r4, r5, pc}
 8009dbc:	20001fbc 	.word	0x20001fbc

08009dc0 <_read_r>:
 8009dc0:	b538      	push	{r3, r4, r5, lr}
 8009dc2:	4d07      	ldr	r5, [pc, #28]	@ (8009de0 <_read_r+0x20>)
 8009dc4:	4604      	mov	r4, r0
 8009dc6:	4608      	mov	r0, r1
 8009dc8:	4611      	mov	r1, r2
 8009dca:	2200      	movs	r2, #0
 8009dcc:	602a      	str	r2, [r5, #0]
 8009dce:	461a      	mov	r2, r3
 8009dd0:	f7f6 fe3a 	bl	8000a48 <_read>
 8009dd4:	1c43      	adds	r3, r0, #1
 8009dd6:	d102      	bne.n	8009dde <_read_r+0x1e>
 8009dd8:	682b      	ldr	r3, [r5, #0]
 8009dda:	b103      	cbz	r3, 8009dde <_read_r+0x1e>
 8009ddc:	6023      	str	r3, [r4, #0]
 8009dde:	bd38      	pop	{r3, r4, r5, pc}
 8009de0:	20001fbc 	.word	0x20001fbc

08009de4 <_write_r>:
 8009de4:	b538      	push	{r3, r4, r5, lr}
 8009de6:	4d07      	ldr	r5, [pc, #28]	@ (8009e04 <_write_r+0x20>)
 8009de8:	4604      	mov	r4, r0
 8009dea:	4608      	mov	r0, r1
 8009dec:	4611      	mov	r1, r2
 8009dee:	2200      	movs	r2, #0
 8009df0:	602a      	str	r2, [r5, #0]
 8009df2:	461a      	mov	r2, r3
 8009df4:	f7f6 fe45 	bl	8000a82 <_write>
 8009df8:	1c43      	adds	r3, r0, #1
 8009dfa:	d102      	bne.n	8009e02 <_write_r+0x1e>
 8009dfc:	682b      	ldr	r3, [r5, #0]
 8009dfe:	b103      	cbz	r3, 8009e02 <_write_r+0x1e>
 8009e00:	6023      	str	r3, [r4, #0]
 8009e02:	bd38      	pop	{r3, r4, r5, pc}
 8009e04:	20001fbc 	.word	0x20001fbc

08009e08 <__errno>:
 8009e08:	4b01      	ldr	r3, [pc, #4]	@ (8009e10 <__errno+0x8>)
 8009e0a:	6818      	ldr	r0, [r3, #0]
 8009e0c:	4770      	bx	lr
 8009e0e:	bf00      	nop
 8009e10:	20000190 	.word	0x20000190

08009e14 <__libc_init_array>:
 8009e14:	b570      	push	{r4, r5, r6, lr}
 8009e16:	4d0d      	ldr	r5, [pc, #52]	@ (8009e4c <__libc_init_array+0x38>)
 8009e18:	4c0d      	ldr	r4, [pc, #52]	@ (8009e50 <__libc_init_array+0x3c>)
 8009e1a:	1b64      	subs	r4, r4, r5
 8009e1c:	10a4      	asrs	r4, r4, #2
 8009e1e:	2600      	movs	r6, #0
 8009e20:	42a6      	cmp	r6, r4
 8009e22:	d109      	bne.n	8009e38 <__libc_init_array+0x24>
 8009e24:	4d0b      	ldr	r5, [pc, #44]	@ (8009e54 <__libc_init_array+0x40>)
 8009e26:	4c0c      	ldr	r4, [pc, #48]	@ (8009e58 <__libc_init_array+0x44>)
 8009e28:	f000 ffa0 	bl	800ad6c <_init>
 8009e2c:	1b64      	subs	r4, r4, r5
 8009e2e:	10a4      	asrs	r4, r4, #2
 8009e30:	2600      	movs	r6, #0
 8009e32:	42a6      	cmp	r6, r4
 8009e34:	d105      	bne.n	8009e42 <__libc_init_array+0x2e>
 8009e36:	bd70      	pop	{r4, r5, r6, pc}
 8009e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e3c:	4798      	blx	r3
 8009e3e:	3601      	adds	r6, #1
 8009e40:	e7ee      	b.n	8009e20 <__libc_init_array+0xc>
 8009e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e46:	4798      	blx	r3
 8009e48:	3601      	adds	r6, #1
 8009e4a:	e7f2      	b.n	8009e32 <__libc_init_array+0x1e>
 8009e4c:	0800af78 	.word	0x0800af78
 8009e50:	0800af78 	.word	0x0800af78
 8009e54:	0800af78 	.word	0x0800af78
 8009e58:	0800af7c 	.word	0x0800af7c

08009e5c <__retarget_lock_init_recursive>:
 8009e5c:	4770      	bx	lr

08009e5e <__retarget_lock_acquire_recursive>:
 8009e5e:	4770      	bx	lr

08009e60 <__retarget_lock_release_recursive>:
 8009e60:	4770      	bx	lr
	...

08009e64 <_free_r>:
 8009e64:	b538      	push	{r3, r4, r5, lr}
 8009e66:	4605      	mov	r5, r0
 8009e68:	2900      	cmp	r1, #0
 8009e6a:	d041      	beq.n	8009ef0 <_free_r+0x8c>
 8009e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e70:	1f0c      	subs	r4, r1, #4
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	bfb8      	it	lt
 8009e76:	18e4      	addlt	r4, r4, r3
 8009e78:	f000 f8e0 	bl	800a03c <__malloc_lock>
 8009e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8009ef4 <_free_r+0x90>)
 8009e7e:	6813      	ldr	r3, [r2, #0]
 8009e80:	b933      	cbnz	r3, 8009e90 <_free_r+0x2c>
 8009e82:	6063      	str	r3, [r4, #4]
 8009e84:	6014      	str	r4, [r2, #0]
 8009e86:	4628      	mov	r0, r5
 8009e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e8c:	f000 b8dc 	b.w	800a048 <__malloc_unlock>
 8009e90:	42a3      	cmp	r3, r4
 8009e92:	d908      	bls.n	8009ea6 <_free_r+0x42>
 8009e94:	6820      	ldr	r0, [r4, #0]
 8009e96:	1821      	adds	r1, r4, r0
 8009e98:	428b      	cmp	r3, r1
 8009e9a:	bf01      	itttt	eq
 8009e9c:	6819      	ldreq	r1, [r3, #0]
 8009e9e:	685b      	ldreq	r3, [r3, #4]
 8009ea0:	1809      	addeq	r1, r1, r0
 8009ea2:	6021      	streq	r1, [r4, #0]
 8009ea4:	e7ed      	b.n	8009e82 <_free_r+0x1e>
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	b10b      	cbz	r3, 8009eb0 <_free_r+0x4c>
 8009eac:	42a3      	cmp	r3, r4
 8009eae:	d9fa      	bls.n	8009ea6 <_free_r+0x42>
 8009eb0:	6811      	ldr	r1, [r2, #0]
 8009eb2:	1850      	adds	r0, r2, r1
 8009eb4:	42a0      	cmp	r0, r4
 8009eb6:	d10b      	bne.n	8009ed0 <_free_r+0x6c>
 8009eb8:	6820      	ldr	r0, [r4, #0]
 8009eba:	4401      	add	r1, r0
 8009ebc:	1850      	adds	r0, r2, r1
 8009ebe:	4283      	cmp	r3, r0
 8009ec0:	6011      	str	r1, [r2, #0]
 8009ec2:	d1e0      	bne.n	8009e86 <_free_r+0x22>
 8009ec4:	6818      	ldr	r0, [r3, #0]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	6053      	str	r3, [r2, #4]
 8009eca:	4408      	add	r0, r1
 8009ecc:	6010      	str	r0, [r2, #0]
 8009ece:	e7da      	b.n	8009e86 <_free_r+0x22>
 8009ed0:	d902      	bls.n	8009ed8 <_free_r+0x74>
 8009ed2:	230c      	movs	r3, #12
 8009ed4:	602b      	str	r3, [r5, #0]
 8009ed6:	e7d6      	b.n	8009e86 <_free_r+0x22>
 8009ed8:	6820      	ldr	r0, [r4, #0]
 8009eda:	1821      	adds	r1, r4, r0
 8009edc:	428b      	cmp	r3, r1
 8009ede:	bf04      	itt	eq
 8009ee0:	6819      	ldreq	r1, [r3, #0]
 8009ee2:	685b      	ldreq	r3, [r3, #4]
 8009ee4:	6063      	str	r3, [r4, #4]
 8009ee6:	bf04      	itt	eq
 8009ee8:	1809      	addeq	r1, r1, r0
 8009eea:	6021      	streq	r1, [r4, #0]
 8009eec:	6054      	str	r4, [r2, #4]
 8009eee:	e7ca      	b.n	8009e86 <_free_r+0x22>
 8009ef0:	bd38      	pop	{r3, r4, r5, pc}
 8009ef2:	bf00      	nop
 8009ef4:	20001fc8 	.word	0x20001fc8

08009ef8 <sbrk_aligned>:
 8009ef8:	b570      	push	{r4, r5, r6, lr}
 8009efa:	4e0f      	ldr	r6, [pc, #60]	@ (8009f38 <sbrk_aligned+0x40>)
 8009efc:	460c      	mov	r4, r1
 8009efe:	6831      	ldr	r1, [r6, #0]
 8009f00:	4605      	mov	r5, r0
 8009f02:	b911      	cbnz	r1, 8009f0a <sbrk_aligned+0x12>
 8009f04:	f000 fe5a 	bl	800abbc <_sbrk_r>
 8009f08:	6030      	str	r0, [r6, #0]
 8009f0a:	4621      	mov	r1, r4
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	f000 fe55 	bl	800abbc <_sbrk_r>
 8009f12:	1c43      	adds	r3, r0, #1
 8009f14:	d103      	bne.n	8009f1e <sbrk_aligned+0x26>
 8009f16:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	bd70      	pop	{r4, r5, r6, pc}
 8009f1e:	1cc4      	adds	r4, r0, #3
 8009f20:	f024 0403 	bic.w	r4, r4, #3
 8009f24:	42a0      	cmp	r0, r4
 8009f26:	d0f8      	beq.n	8009f1a <sbrk_aligned+0x22>
 8009f28:	1a21      	subs	r1, r4, r0
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	f000 fe46 	bl	800abbc <_sbrk_r>
 8009f30:	3001      	adds	r0, #1
 8009f32:	d1f2      	bne.n	8009f1a <sbrk_aligned+0x22>
 8009f34:	e7ef      	b.n	8009f16 <sbrk_aligned+0x1e>
 8009f36:	bf00      	nop
 8009f38:	20001fc4 	.word	0x20001fc4

08009f3c <_malloc_r>:
 8009f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f40:	1ccd      	adds	r5, r1, #3
 8009f42:	f025 0503 	bic.w	r5, r5, #3
 8009f46:	3508      	adds	r5, #8
 8009f48:	2d0c      	cmp	r5, #12
 8009f4a:	bf38      	it	cc
 8009f4c:	250c      	movcc	r5, #12
 8009f4e:	2d00      	cmp	r5, #0
 8009f50:	4606      	mov	r6, r0
 8009f52:	db01      	blt.n	8009f58 <_malloc_r+0x1c>
 8009f54:	42a9      	cmp	r1, r5
 8009f56:	d904      	bls.n	8009f62 <_malloc_r+0x26>
 8009f58:	230c      	movs	r3, #12
 8009f5a:	6033      	str	r3, [r6, #0]
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a038 <_malloc_r+0xfc>
 8009f66:	f000 f869 	bl	800a03c <__malloc_lock>
 8009f6a:	f8d8 3000 	ldr.w	r3, [r8]
 8009f6e:	461c      	mov	r4, r3
 8009f70:	bb44      	cbnz	r4, 8009fc4 <_malloc_r+0x88>
 8009f72:	4629      	mov	r1, r5
 8009f74:	4630      	mov	r0, r6
 8009f76:	f7ff ffbf 	bl	8009ef8 <sbrk_aligned>
 8009f7a:	1c43      	adds	r3, r0, #1
 8009f7c:	4604      	mov	r4, r0
 8009f7e:	d158      	bne.n	800a032 <_malloc_r+0xf6>
 8009f80:	f8d8 4000 	ldr.w	r4, [r8]
 8009f84:	4627      	mov	r7, r4
 8009f86:	2f00      	cmp	r7, #0
 8009f88:	d143      	bne.n	800a012 <_malloc_r+0xd6>
 8009f8a:	2c00      	cmp	r4, #0
 8009f8c:	d04b      	beq.n	800a026 <_malloc_r+0xea>
 8009f8e:	6823      	ldr	r3, [r4, #0]
 8009f90:	4639      	mov	r1, r7
 8009f92:	4630      	mov	r0, r6
 8009f94:	eb04 0903 	add.w	r9, r4, r3
 8009f98:	f000 fe10 	bl	800abbc <_sbrk_r>
 8009f9c:	4581      	cmp	r9, r0
 8009f9e:	d142      	bne.n	800a026 <_malloc_r+0xea>
 8009fa0:	6821      	ldr	r1, [r4, #0]
 8009fa2:	1a6d      	subs	r5, r5, r1
 8009fa4:	4629      	mov	r1, r5
 8009fa6:	4630      	mov	r0, r6
 8009fa8:	f7ff ffa6 	bl	8009ef8 <sbrk_aligned>
 8009fac:	3001      	adds	r0, #1
 8009fae:	d03a      	beq.n	800a026 <_malloc_r+0xea>
 8009fb0:	6823      	ldr	r3, [r4, #0]
 8009fb2:	442b      	add	r3, r5
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	f8d8 3000 	ldr.w	r3, [r8]
 8009fba:	685a      	ldr	r2, [r3, #4]
 8009fbc:	bb62      	cbnz	r2, 800a018 <_malloc_r+0xdc>
 8009fbe:	f8c8 7000 	str.w	r7, [r8]
 8009fc2:	e00f      	b.n	8009fe4 <_malloc_r+0xa8>
 8009fc4:	6822      	ldr	r2, [r4, #0]
 8009fc6:	1b52      	subs	r2, r2, r5
 8009fc8:	d420      	bmi.n	800a00c <_malloc_r+0xd0>
 8009fca:	2a0b      	cmp	r2, #11
 8009fcc:	d917      	bls.n	8009ffe <_malloc_r+0xc2>
 8009fce:	1961      	adds	r1, r4, r5
 8009fd0:	42a3      	cmp	r3, r4
 8009fd2:	6025      	str	r5, [r4, #0]
 8009fd4:	bf18      	it	ne
 8009fd6:	6059      	strne	r1, [r3, #4]
 8009fd8:	6863      	ldr	r3, [r4, #4]
 8009fda:	bf08      	it	eq
 8009fdc:	f8c8 1000 	streq.w	r1, [r8]
 8009fe0:	5162      	str	r2, [r4, r5]
 8009fe2:	604b      	str	r3, [r1, #4]
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	f000 f82f 	bl	800a048 <__malloc_unlock>
 8009fea:	f104 000b 	add.w	r0, r4, #11
 8009fee:	1d23      	adds	r3, r4, #4
 8009ff0:	f020 0007 	bic.w	r0, r0, #7
 8009ff4:	1ac2      	subs	r2, r0, r3
 8009ff6:	bf1c      	itt	ne
 8009ff8:	1a1b      	subne	r3, r3, r0
 8009ffa:	50a3      	strne	r3, [r4, r2]
 8009ffc:	e7af      	b.n	8009f5e <_malloc_r+0x22>
 8009ffe:	6862      	ldr	r2, [r4, #4]
 800a000:	42a3      	cmp	r3, r4
 800a002:	bf0c      	ite	eq
 800a004:	f8c8 2000 	streq.w	r2, [r8]
 800a008:	605a      	strne	r2, [r3, #4]
 800a00a:	e7eb      	b.n	8009fe4 <_malloc_r+0xa8>
 800a00c:	4623      	mov	r3, r4
 800a00e:	6864      	ldr	r4, [r4, #4]
 800a010:	e7ae      	b.n	8009f70 <_malloc_r+0x34>
 800a012:	463c      	mov	r4, r7
 800a014:	687f      	ldr	r7, [r7, #4]
 800a016:	e7b6      	b.n	8009f86 <_malloc_r+0x4a>
 800a018:	461a      	mov	r2, r3
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	42a3      	cmp	r3, r4
 800a01e:	d1fb      	bne.n	800a018 <_malloc_r+0xdc>
 800a020:	2300      	movs	r3, #0
 800a022:	6053      	str	r3, [r2, #4]
 800a024:	e7de      	b.n	8009fe4 <_malloc_r+0xa8>
 800a026:	230c      	movs	r3, #12
 800a028:	6033      	str	r3, [r6, #0]
 800a02a:	4630      	mov	r0, r6
 800a02c:	f000 f80c 	bl	800a048 <__malloc_unlock>
 800a030:	e794      	b.n	8009f5c <_malloc_r+0x20>
 800a032:	6005      	str	r5, [r0, #0]
 800a034:	e7d6      	b.n	8009fe4 <_malloc_r+0xa8>
 800a036:	bf00      	nop
 800a038:	20001fc8 	.word	0x20001fc8

0800a03c <__malloc_lock>:
 800a03c:	4801      	ldr	r0, [pc, #4]	@ (800a044 <__malloc_lock+0x8>)
 800a03e:	f7ff bf0e 	b.w	8009e5e <__retarget_lock_acquire_recursive>
 800a042:	bf00      	nop
 800a044:	20001fc0 	.word	0x20001fc0

0800a048 <__malloc_unlock>:
 800a048:	4801      	ldr	r0, [pc, #4]	@ (800a050 <__malloc_unlock+0x8>)
 800a04a:	f7ff bf09 	b.w	8009e60 <__retarget_lock_release_recursive>
 800a04e:	bf00      	nop
 800a050:	20001fc0 	.word	0x20001fc0

0800a054 <__ssputs_r>:
 800a054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a058:	688e      	ldr	r6, [r1, #8]
 800a05a:	461f      	mov	r7, r3
 800a05c:	42be      	cmp	r6, r7
 800a05e:	680b      	ldr	r3, [r1, #0]
 800a060:	4682      	mov	sl, r0
 800a062:	460c      	mov	r4, r1
 800a064:	4690      	mov	r8, r2
 800a066:	d82d      	bhi.n	800a0c4 <__ssputs_r+0x70>
 800a068:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a06c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a070:	d026      	beq.n	800a0c0 <__ssputs_r+0x6c>
 800a072:	6965      	ldr	r5, [r4, #20]
 800a074:	6909      	ldr	r1, [r1, #16]
 800a076:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a07a:	eba3 0901 	sub.w	r9, r3, r1
 800a07e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a082:	1c7b      	adds	r3, r7, #1
 800a084:	444b      	add	r3, r9
 800a086:	106d      	asrs	r5, r5, #1
 800a088:	429d      	cmp	r5, r3
 800a08a:	bf38      	it	cc
 800a08c:	461d      	movcc	r5, r3
 800a08e:	0553      	lsls	r3, r2, #21
 800a090:	d527      	bpl.n	800a0e2 <__ssputs_r+0x8e>
 800a092:	4629      	mov	r1, r5
 800a094:	f7ff ff52 	bl	8009f3c <_malloc_r>
 800a098:	4606      	mov	r6, r0
 800a09a:	b360      	cbz	r0, 800a0f6 <__ssputs_r+0xa2>
 800a09c:	6921      	ldr	r1, [r4, #16]
 800a09e:	464a      	mov	r2, r9
 800a0a0:	f000 fd9c 	bl	800abdc <memcpy>
 800a0a4:	89a3      	ldrh	r3, [r4, #12]
 800a0a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a0aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0ae:	81a3      	strh	r3, [r4, #12]
 800a0b0:	6126      	str	r6, [r4, #16]
 800a0b2:	6165      	str	r5, [r4, #20]
 800a0b4:	444e      	add	r6, r9
 800a0b6:	eba5 0509 	sub.w	r5, r5, r9
 800a0ba:	6026      	str	r6, [r4, #0]
 800a0bc:	60a5      	str	r5, [r4, #8]
 800a0be:	463e      	mov	r6, r7
 800a0c0:	42be      	cmp	r6, r7
 800a0c2:	d900      	bls.n	800a0c6 <__ssputs_r+0x72>
 800a0c4:	463e      	mov	r6, r7
 800a0c6:	6820      	ldr	r0, [r4, #0]
 800a0c8:	4632      	mov	r2, r6
 800a0ca:	4641      	mov	r1, r8
 800a0cc:	f000 fd5c 	bl	800ab88 <memmove>
 800a0d0:	68a3      	ldr	r3, [r4, #8]
 800a0d2:	1b9b      	subs	r3, r3, r6
 800a0d4:	60a3      	str	r3, [r4, #8]
 800a0d6:	6823      	ldr	r3, [r4, #0]
 800a0d8:	4433      	add	r3, r6
 800a0da:	6023      	str	r3, [r4, #0]
 800a0dc:	2000      	movs	r0, #0
 800a0de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0e2:	462a      	mov	r2, r5
 800a0e4:	f000 fd88 	bl	800abf8 <_realloc_r>
 800a0e8:	4606      	mov	r6, r0
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	d1e0      	bne.n	800a0b0 <__ssputs_r+0x5c>
 800a0ee:	6921      	ldr	r1, [r4, #16]
 800a0f0:	4650      	mov	r0, sl
 800a0f2:	f7ff feb7 	bl	8009e64 <_free_r>
 800a0f6:	230c      	movs	r3, #12
 800a0f8:	f8ca 3000 	str.w	r3, [sl]
 800a0fc:	89a3      	ldrh	r3, [r4, #12]
 800a0fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a102:	81a3      	strh	r3, [r4, #12]
 800a104:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a108:	e7e9      	b.n	800a0de <__ssputs_r+0x8a>
	...

0800a10c <_svfiprintf_r>:
 800a10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a110:	4698      	mov	r8, r3
 800a112:	898b      	ldrh	r3, [r1, #12]
 800a114:	061b      	lsls	r3, r3, #24
 800a116:	b09d      	sub	sp, #116	@ 0x74
 800a118:	4607      	mov	r7, r0
 800a11a:	460d      	mov	r5, r1
 800a11c:	4614      	mov	r4, r2
 800a11e:	d510      	bpl.n	800a142 <_svfiprintf_r+0x36>
 800a120:	690b      	ldr	r3, [r1, #16]
 800a122:	b973      	cbnz	r3, 800a142 <_svfiprintf_r+0x36>
 800a124:	2140      	movs	r1, #64	@ 0x40
 800a126:	f7ff ff09 	bl	8009f3c <_malloc_r>
 800a12a:	6028      	str	r0, [r5, #0]
 800a12c:	6128      	str	r0, [r5, #16]
 800a12e:	b930      	cbnz	r0, 800a13e <_svfiprintf_r+0x32>
 800a130:	230c      	movs	r3, #12
 800a132:	603b      	str	r3, [r7, #0]
 800a134:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a138:	b01d      	add	sp, #116	@ 0x74
 800a13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a13e:	2340      	movs	r3, #64	@ 0x40
 800a140:	616b      	str	r3, [r5, #20]
 800a142:	2300      	movs	r3, #0
 800a144:	9309      	str	r3, [sp, #36]	@ 0x24
 800a146:	2320      	movs	r3, #32
 800a148:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a14c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a150:	2330      	movs	r3, #48	@ 0x30
 800a152:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a2f0 <_svfiprintf_r+0x1e4>
 800a156:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a15a:	f04f 0901 	mov.w	r9, #1
 800a15e:	4623      	mov	r3, r4
 800a160:	469a      	mov	sl, r3
 800a162:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a166:	b10a      	cbz	r2, 800a16c <_svfiprintf_r+0x60>
 800a168:	2a25      	cmp	r2, #37	@ 0x25
 800a16a:	d1f9      	bne.n	800a160 <_svfiprintf_r+0x54>
 800a16c:	ebba 0b04 	subs.w	fp, sl, r4
 800a170:	d00b      	beq.n	800a18a <_svfiprintf_r+0x7e>
 800a172:	465b      	mov	r3, fp
 800a174:	4622      	mov	r2, r4
 800a176:	4629      	mov	r1, r5
 800a178:	4638      	mov	r0, r7
 800a17a:	f7ff ff6b 	bl	800a054 <__ssputs_r>
 800a17e:	3001      	adds	r0, #1
 800a180:	f000 80a7 	beq.w	800a2d2 <_svfiprintf_r+0x1c6>
 800a184:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a186:	445a      	add	r2, fp
 800a188:	9209      	str	r2, [sp, #36]	@ 0x24
 800a18a:	f89a 3000 	ldrb.w	r3, [sl]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	f000 809f 	beq.w	800a2d2 <_svfiprintf_r+0x1c6>
 800a194:	2300      	movs	r3, #0
 800a196:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a19a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a19e:	f10a 0a01 	add.w	sl, sl, #1
 800a1a2:	9304      	str	r3, [sp, #16]
 800a1a4:	9307      	str	r3, [sp, #28]
 800a1a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a1aa:	931a      	str	r3, [sp, #104]	@ 0x68
 800a1ac:	4654      	mov	r4, sl
 800a1ae:	2205      	movs	r2, #5
 800a1b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1b4:	484e      	ldr	r0, [pc, #312]	@ (800a2f0 <_svfiprintf_r+0x1e4>)
 800a1b6:	f7f6 f83b 	bl	8000230 <memchr>
 800a1ba:	9a04      	ldr	r2, [sp, #16]
 800a1bc:	b9d8      	cbnz	r0, 800a1f6 <_svfiprintf_r+0xea>
 800a1be:	06d0      	lsls	r0, r2, #27
 800a1c0:	bf44      	itt	mi
 800a1c2:	2320      	movmi	r3, #32
 800a1c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1c8:	0711      	lsls	r1, r2, #28
 800a1ca:	bf44      	itt	mi
 800a1cc:	232b      	movmi	r3, #43	@ 0x2b
 800a1ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1d2:	f89a 3000 	ldrb.w	r3, [sl]
 800a1d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1d8:	d015      	beq.n	800a206 <_svfiprintf_r+0xfa>
 800a1da:	9a07      	ldr	r2, [sp, #28]
 800a1dc:	4654      	mov	r4, sl
 800a1de:	2000      	movs	r0, #0
 800a1e0:	f04f 0c0a 	mov.w	ip, #10
 800a1e4:	4621      	mov	r1, r4
 800a1e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1ea:	3b30      	subs	r3, #48	@ 0x30
 800a1ec:	2b09      	cmp	r3, #9
 800a1ee:	d94b      	bls.n	800a288 <_svfiprintf_r+0x17c>
 800a1f0:	b1b0      	cbz	r0, 800a220 <_svfiprintf_r+0x114>
 800a1f2:	9207      	str	r2, [sp, #28]
 800a1f4:	e014      	b.n	800a220 <_svfiprintf_r+0x114>
 800a1f6:	eba0 0308 	sub.w	r3, r0, r8
 800a1fa:	fa09 f303 	lsl.w	r3, r9, r3
 800a1fe:	4313      	orrs	r3, r2
 800a200:	9304      	str	r3, [sp, #16]
 800a202:	46a2      	mov	sl, r4
 800a204:	e7d2      	b.n	800a1ac <_svfiprintf_r+0xa0>
 800a206:	9b03      	ldr	r3, [sp, #12]
 800a208:	1d19      	adds	r1, r3, #4
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	9103      	str	r1, [sp, #12]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	bfbb      	ittet	lt
 800a212:	425b      	neglt	r3, r3
 800a214:	f042 0202 	orrlt.w	r2, r2, #2
 800a218:	9307      	strge	r3, [sp, #28]
 800a21a:	9307      	strlt	r3, [sp, #28]
 800a21c:	bfb8      	it	lt
 800a21e:	9204      	strlt	r2, [sp, #16]
 800a220:	7823      	ldrb	r3, [r4, #0]
 800a222:	2b2e      	cmp	r3, #46	@ 0x2e
 800a224:	d10a      	bne.n	800a23c <_svfiprintf_r+0x130>
 800a226:	7863      	ldrb	r3, [r4, #1]
 800a228:	2b2a      	cmp	r3, #42	@ 0x2a
 800a22a:	d132      	bne.n	800a292 <_svfiprintf_r+0x186>
 800a22c:	9b03      	ldr	r3, [sp, #12]
 800a22e:	1d1a      	adds	r2, r3, #4
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	9203      	str	r2, [sp, #12]
 800a234:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a238:	3402      	adds	r4, #2
 800a23a:	9305      	str	r3, [sp, #20]
 800a23c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a300 <_svfiprintf_r+0x1f4>
 800a240:	7821      	ldrb	r1, [r4, #0]
 800a242:	2203      	movs	r2, #3
 800a244:	4650      	mov	r0, sl
 800a246:	f7f5 fff3 	bl	8000230 <memchr>
 800a24a:	b138      	cbz	r0, 800a25c <_svfiprintf_r+0x150>
 800a24c:	9b04      	ldr	r3, [sp, #16]
 800a24e:	eba0 000a 	sub.w	r0, r0, sl
 800a252:	2240      	movs	r2, #64	@ 0x40
 800a254:	4082      	lsls	r2, r0
 800a256:	4313      	orrs	r3, r2
 800a258:	3401      	adds	r4, #1
 800a25a:	9304      	str	r3, [sp, #16]
 800a25c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a260:	4824      	ldr	r0, [pc, #144]	@ (800a2f4 <_svfiprintf_r+0x1e8>)
 800a262:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a266:	2206      	movs	r2, #6
 800a268:	f7f5 ffe2 	bl	8000230 <memchr>
 800a26c:	2800      	cmp	r0, #0
 800a26e:	d036      	beq.n	800a2de <_svfiprintf_r+0x1d2>
 800a270:	4b21      	ldr	r3, [pc, #132]	@ (800a2f8 <_svfiprintf_r+0x1ec>)
 800a272:	bb1b      	cbnz	r3, 800a2bc <_svfiprintf_r+0x1b0>
 800a274:	9b03      	ldr	r3, [sp, #12]
 800a276:	3307      	adds	r3, #7
 800a278:	f023 0307 	bic.w	r3, r3, #7
 800a27c:	3308      	adds	r3, #8
 800a27e:	9303      	str	r3, [sp, #12]
 800a280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a282:	4433      	add	r3, r6
 800a284:	9309      	str	r3, [sp, #36]	@ 0x24
 800a286:	e76a      	b.n	800a15e <_svfiprintf_r+0x52>
 800a288:	fb0c 3202 	mla	r2, ip, r2, r3
 800a28c:	460c      	mov	r4, r1
 800a28e:	2001      	movs	r0, #1
 800a290:	e7a8      	b.n	800a1e4 <_svfiprintf_r+0xd8>
 800a292:	2300      	movs	r3, #0
 800a294:	3401      	adds	r4, #1
 800a296:	9305      	str	r3, [sp, #20]
 800a298:	4619      	mov	r1, r3
 800a29a:	f04f 0c0a 	mov.w	ip, #10
 800a29e:	4620      	mov	r0, r4
 800a2a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2a4:	3a30      	subs	r2, #48	@ 0x30
 800a2a6:	2a09      	cmp	r2, #9
 800a2a8:	d903      	bls.n	800a2b2 <_svfiprintf_r+0x1a6>
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d0c6      	beq.n	800a23c <_svfiprintf_r+0x130>
 800a2ae:	9105      	str	r1, [sp, #20]
 800a2b0:	e7c4      	b.n	800a23c <_svfiprintf_r+0x130>
 800a2b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e7f0      	b.n	800a29e <_svfiprintf_r+0x192>
 800a2bc:	ab03      	add	r3, sp, #12
 800a2be:	9300      	str	r3, [sp, #0]
 800a2c0:	462a      	mov	r2, r5
 800a2c2:	4b0e      	ldr	r3, [pc, #56]	@ (800a2fc <_svfiprintf_r+0x1f0>)
 800a2c4:	a904      	add	r1, sp, #16
 800a2c6:	4638      	mov	r0, r7
 800a2c8:	f3af 8000 	nop.w
 800a2cc:	1c42      	adds	r2, r0, #1
 800a2ce:	4606      	mov	r6, r0
 800a2d0:	d1d6      	bne.n	800a280 <_svfiprintf_r+0x174>
 800a2d2:	89ab      	ldrh	r3, [r5, #12]
 800a2d4:	065b      	lsls	r3, r3, #25
 800a2d6:	f53f af2d 	bmi.w	800a134 <_svfiprintf_r+0x28>
 800a2da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a2dc:	e72c      	b.n	800a138 <_svfiprintf_r+0x2c>
 800a2de:	ab03      	add	r3, sp, #12
 800a2e0:	9300      	str	r3, [sp, #0]
 800a2e2:	462a      	mov	r2, r5
 800a2e4:	4b05      	ldr	r3, [pc, #20]	@ (800a2fc <_svfiprintf_r+0x1f0>)
 800a2e6:	a904      	add	r1, sp, #16
 800a2e8:	4638      	mov	r0, r7
 800a2ea:	f000 f9bb 	bl	800a664 <_printf_i>
 800a2ee:	e7ed      	b.n	800a2cc <_svfiprintf_r+0x1c0>
 800a2f0:	0800af3c 	.word	0x0800af3c
 800a2f4:	0800af46 	.word	0x0800af46
 800a2f8:	00000000 	.word	0x00000000
 800a2fc:	0800a055 	.word	0x0800a055
 800a300:	0800af42 	.word	0x0800af42

0800a304 <__sfputc_r>:
 800a304:	6893      	ldr	r3, [r2, #8]
 800a306:	3b01      	subs	r3, #1
 800a308:	2b00      	cmp	r3, #0
 800a30a:	b410      	push	{r4}
 800a30c:	6093      	str	r3, [r2, #8]
 800a30e:	da08      	bge.n	800a322 <__sfputc_r+0x1e>
 800a310:	6994      	ldr	r4, [r2, #24]
 800a312:	42a3      	cmp	r3, r4
 800a314:	db01      	blt.n	800a31a <__sfputc_r+0x16>
 800a316:	290a      	cmp	r1, #10
 800a318:	d103      	bne.n	800a322 <__sfputc_r+0x1e>
 800a31a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a31e:	f000 bb9f 	b.w	800aa60 <__swbuf_r>
 800a322:	6813      	ldr	r3, [r2, #0]
 800a324:	1c58      	adds	r0, r3, #1
 800a326:	6010      	str	r0, [r2, #0]
 800a328:	7019      	strb	r1, [r3, #0]
 800a32a:	4608      	mov	r0, r1
 800a32c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a330:	4770      	bx	lr

0800a332 <__sfputs_r>:
 800a332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a334:	4606      	mov	r6, r0
 800a336:	460f      	mov	r7, r1
 800a338:	4614      	mov	r4, r2
 800a33a:	18d5      	adds	r5, r2, r3
 800a33c:	42ac      	cmp	r4, r5
 800a33e:	d101      	bne.n	800a344 <__sfputs_r+0x12>
 800a340:	2000      	movs	r0, #0
 800a342:	e007      	b.n	800a354 <__sfputs_r+0x22>
 800a344:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a348:	463a      	mov	r2, r7
 800a34a:	4630      	mov	r0, r6
 800a34c:	f7ff ffda 	bl	800a304 <__sfputc_r>
 800a350:	1c43      	adds	r3, r0, #1
 800a352:	d1f3      	bne.n	800a33c <__sfputs_r+0xa>
 800a354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a358 <_vfiprintf_r>:
 800a358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a35c:	460d      	mov	r5, r1
 800a35e:	b09d      	sub	sp, #116	@ 0x74
 800a360:	4614      	mov	r4, r2
 800a362:	4698      	mov	r8, r3
 800a364:	4606      	mov	r6, r0
 800a366:	b118      	cbz	r0, 800a370 <_vfiprintf_r+0x18>
 800a368:	6a03      	ldr	r3, [r0, #32]
 800a36a:	b90b      	cbnz	r3, 800a370 <_vfiprintf_r+0x18>
 800a36c:	f7ff fc34 	bl	8009bd8 <__sinit>
 800a370:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a372:	07d9      	lsls	r1, r3, #31
 800a374:	d405      	bmi.n	800a382 <_vfiprintf_r+0x2a>
 800a376:	89ab      	ldrh	r3, [r5, #12]
 800a378:	059a      	lsls	r2, r3, #22
 800a37a:	d402      	bmi.n	800a382 <_vfiprintf_r+0x2a>
 800a37c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a37e:	f7ff fd6e 	bl	8009e5e <__retarget_lock_acquire_recursive>
 800a382:	89ab      	ldrh	r3, [r5, #12]
 800a384:	071b      	lsls	r3, r3, #28
 800a386:	d501      	bpl.n	800a38c <_vfiprintf_r+0x34>
 800a388:	692b      	ldr	r3, [r5, #16]
 800a38a:	b99b      	cbnz	r3, 800a3b4 <_vfiprintf_r+0x5c>
 800a38c:	4629      	mov	r1, r5
 800a38e:	4630      	mov	r0, r6
 800a390:	f000 fba4 	bl	800aadc <__swsetup_r>
 800a394:	b170      	cbz	r0, 800a3b4 <_vfiprintf_r+0x5c>
 800a396:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a398:	07dc      	lsls	r4, r3, #31
 800a39a:	d504      	bpl.n	800a3a6 <_vfiprintf_r+0x4e>
 800a39c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a3a0:	b01d      	add	sp, #116	@ 0x74
 800a3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3a6:	89ab      	ldrh	r3, [r5, #12]
 800a3a8:	0598      	lsls	r0, r3, #22
 800a3aa:	d4f7      	bmi.n	800a39c <_vfiprintf_r+0x44>
 800a3ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3ae:	f7ff fd57 	bl	8009e60 <__retarget_lock_release_recursive>
 800a3b2:	e7f3      	b.n	800a39c <_vfiprintf_r+0x44>
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3b8:	2320      	movs	r3, #32
 800a3ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a3be:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3c2:	2330      	movs	r3, #48	@ 0x30
 800a3c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a574 <_vfiprintf_r+0x21c>
 800a3c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a3cc:	f04f 0901 	mov.w	r9, #1
 800a3d0:	4623      	mov	r3, r4
 800a3d2:	469a      	mov	sl, r3
 800a3d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3d8:	b10a      	cbz	r2, 800a3de <_vfiprintf_r+0x86>
 800a3da:	2a25      	cmp	r2, #37	@ 0x25
 800a3dc:	d1f9      	bne.n	800a3d2 <_vfiprintf_r+0x7a>
 800a3de:	ebba 0b04 	subs.w	fp, sl, r4
 800a3e2:	d00b      	beq.n	800a3fc <_vfiprintf_r+0xa4>
 800a3e4:	465b      	mov	r3, fp
 800a3e6:	4622      	mov	r2, r4
 800a3e8:	4629      	mov	r1, r5
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	f7ff ffa1 	bl	800a332 <__sfputs_r>
 800a3f0:	3001      	adds	r0, #1
 800a3f2:	f000 80a7 	beq.w	800a544 <_vfiprintf_r+0x1ec>
 800a3f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3f8:	445a      	add	r2, fp
 800a3fa:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3fc:	f89a 3000 	ldrb.w	r3, [sl]
 800a400:	2b00      	cmp	r3, #0
 800a402:	f000 809f 	beq.w	800a544 <_vfiprintf_r+0x1ec>
 800a406:	2300      	movs	r3, #0
 800a408:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a40c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a410:	f10a 0a01 	add.w	sl, sl, #1
 800a414:	9304      	str	r3, [sp, #16]
 800a416:	9307      	str	r3, [sp, #28]
 800a418:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a41c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a41e:	4654      	mov	r4, sl
 800a420:	2205      	movs	r2, #5
 800a422:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a426:	4853      	ldr	r0, [pc, #332]	@ (800a574 <_vfiprintf_r+0x21c>)
 800a428:	f7f5 ff02 	bl	8000230 <memchr>
 800a42c:	9a04      	ldr	r2, [sp, #16]
 800a42e:	b9d8      	cbnz	r0, 800a468 <_vfiprintf_r+0x110>
 800a430:	06d1      	lsls	r1, r2, #27
 800a432:	bf44      	itt	mi
 800a434:	2320      	movmi	r3, #32
 800a436:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a43a:	0713      	lsls	r3, r2, #28
 800a43c:	bf44      	itt	mi
 800a43e:	232b      	movmi	r3, #43	@ 0x2b
 800a440:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a444:	f89a 3000 	ldrb.w	r3, [sl]
 800a448:	2b2a      	cmp	r3, #42	@ 0x2a
 800a44a:	d015      	beq.n	800a478 <_vfiprintf_r+0x120>
 800a44c:	9a07      	ldr	r2, [sp, #28]
 800a44e:	4654      	mov	r4, sl
 800a450:	2000      	movs	r0, #0
 800a452:	f04f 0c0a 	mov.w	ip, #10
 800a456:	4621      	mov	r1, r4
 800a458:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a45c:	3b30      	subs	r3, #48	@ 0x30
 800a45e:	2b09      	cmp	r3, #9
 800a460:	d94b      	bls.n	800a4fa <_vfiprintf_r+0x1a2>
 800a462:	b1b0      	cbz	r0, 800a492 <_vfiprintf_r+0x13a>
 800a464:	9207      	str	r2, [sp, #28]
 800a466:	e014      	b.n	800a492 <_vfiprintf_r+0x13a>
 800a468:	eba0 0308 	sub.w	r3, r0, r8
 800a46c:	fa09 f303 	lsl.w	r3, r9, r3
 800a470:	4313      	orrs	r3, r2
 800a472:	9304      	str	r3, [sp, #16]
 800a474:	46a2      	mov	sl, r4
 800a476:	e7d2      	b.n	800a41e <_vfiprintf_r+0xc6>
 800a478:	9b03      	ldr	r3, [sp, #12]
 800a47a:	1d19      	adds	r1, r3, #4
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	9103      	str	r1, [sp, #12]
 800a480:	2b00      	cmp	r3, #0
 800a482:	bfbb      	ittet	lt
 800a484:	425b      	neglt	r3, r3
 800a486:	f042 0202 	orrlt.w	r2, r2, #2
 800a48a:	9307      	strge	r3, [sp, #28]
 800a48c:	9307      	strlt	r3, [sp, #28]
 800a48e:	bfb8      	it	lt
 800a490:	9204      	strlt	r2, [sp, #16]
 800a492:	7823      	ldrb	r3, [r4, #0]
 800a494:	2b2e      	cmp	r3, #46	@ 0x2e
 800a496:	d10a      	bne.n	800a4ae <_vfiprintf_r+0x156>
 800a498:	7863      	ldrb	r3, [r4, #1]
 800a49a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a49c:	d132      	bne.n	800a504 <_vfiprintf_r+0x1ac>
 800a49e:	9b03      	ldr	r3, [sp, #12]
 800a4a0:	1d1a      	adds	r2, r3, #4
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	9203      	str	r2, [sp, #12]
 800a4a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a4aa:	3402      	adds	r4, #2
 800a4ac:	9305      	str	r3, [sp, #20]
 800a4ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a584 <_vfiprintf_r+0x22c>
 800a4b2:	7821      	ldrb	r1, [r4, #0]
 800a4b4:	2203      	movs	r2, #3
 800a4b6:	4650      	mov	r0, sl
 800a4b8:	f7f5 feba 	bl	8000230 <memchr>
 800a4bc:	b138      	cbz	r0, 800a4ce <_vfiprintf_r+0x176>
 800a4be:	9b04      	ldr	r3, [sp, #16]
 800a4c0:	eba0 000a 	sub.w	r0, r0, sl
 800a4c4:	2240      	movs	r2, #64	@ 0x40
 800a4c6:	4082      	lsls	r2, r0
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	3401      	adds	r4, #1
 800a4cc:	9304      	str	r3, [sp, #16]
 800a4ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4d2:	4829      	ldr	r0, [pc, #164]	@ (800a578 <_vfiprintf_r+0x220>)
 800a4d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a4d8:	2206      	movs	r2, #6
 800a4da:	f7f5 fea9 	bl	8000230 <memchr>
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	d03f      	beq.n	800a562 <_vfiprintf_r+0x20a>
 800a4e2:	4b26      	ldr	r3, [pc, #152]	@ (800a57c <_vfiprintf_r+0x224>)
 800a4e4:	bb1b      	cbnz	r3, 800a52e <_vfiprintf_r+0x1d6>
 800a4e6:	9b03      	ldr	r3, [sp, #12]
 800a4e8:	3307      	adds	r3, #7
 800a4ea:	f023 0307 	bic.w	r3, r3, #7
 800a4ee:	3308      	adds	r3, #8
 800a4f0:	9303      	str	r3, [sp, #12]
 800a4f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4f4:	443b      	add	r3, r7
 800a4f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4f8:	e76a      	b.n	800a3d0 <_vfiprintf_r+0x78>
 800a4fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4fe:	460c      	mov	r4, r1
 800a500:	2001      	movs	r0, #1
 800a502:	e7a8      	b.n	800a456 <_vfiprintf_r+0xfe>
 800a504:	2300      	movs	r3, #0
 800a506:	3401      	adds	r4, #1
 800a508:	9305      	str	r3, [sp, #20]
 800a50a:	4619      	mov	r1, r3
 800a50c:	f04f 0c0a 	mov.w	ip, #10
 800a510:	4620      	mov	r0, r4
 800a512:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a516:	3a30      	subs	r2, #48	@ 0x30
 800a518:	2a09      	cmp	r2, #9
 800a51a:	d903      	bls.n	800a524 <_vfiprintf_r+0x1cc>
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d0c6      	beq.n	800a4ae <_vfiprintf_r+0x156>
 800a520:	9105      	str	r1, [sp, #20]
 800a522:	e7c4      	b.n	800a4ae <_vfiprintf_r+0x156>
 800a524:	fb0c 2101 	mla	r1, ip, r1, r2
 800a528:	4604      	mov	r4, r0
 800a52a:	2301      	movs	r3, #1
 800a52c:	e7f0      	b.n	800a510 <_vfiprintf_r+0x1b8>
 800a52e:	ab03      	add	r3, sp, #12
 800a530:	9300      	str	r3, [sp, #0]
 800a532:	462a      	mov	r2, r5
 800a534:	4b12      	ldr	r3, [pc, #72]	@ (800a580 <_vfiprintf_r+0x228>)
 800a536:	a904      	add	r1, sp, #16
 800a538:	4630      	mov	r0, r6
 800a53a:	f3af 8000 	nop.w
 800a53e:	4607      	mov	r7, r0
 800a540:	1c78      	adds	r0, r7, #1
 800a542:	d1d6      	bne.n	800a4f2 <_vfiprintf_r+0x19a>
 800a544:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a546:	07d9      	lsls	r1, r3, #31
 800a548:	d405      	bmi.n	800a556 <_vfiprintf_r+0x1fe>
 800a54a:	89ab      	ldrh	r3, [r5, #12]
 800a54c:	059a      	lsls	r2, r3, #22
 800a54e:	d402      	bmi.n	800a556 <_vfiprintf_r+0x1fe>
 800a550:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a552:	f7ff fc85 	bl	8009e60 <__retarget_lock_release_recursive>
 800a556:	89ab      	ldrh	r3, [r5, #12]
 800a558:	065b      	lsls	r3, r3, #25
 800a55a:	f53f af1f 	bmi.w	800a39c <_vfiprintf_r+0x44>
 800a55e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a560:	e71e      	b.n	800a3a0 <_vfiprintf_r+0x48>
 800a562:	ab03      	add	r3, sp, #12
 800a564:	9300      	str	r3, [sp, #0]
 800a566:	462a      	mov	r2, r5
 800a568:	4b05      	ldr	r3, [pc, #20]	@ (800a580 <_vfiprintf_r+0x228>)
 800a56a:	a904      	add	r1, sp, #16
 800a56c:	4630      	mov	r0, r6
 800a56e:	f000 f879 	bl	800a664 <_printf_i>
 800a572:	e7e4      	b.n	800a53e <_vfiprintf_r+0x1e6>
 800a574:	0800af3c 	.word	0x0800af3c
 800a578:	0800af46 	.word	0x0800af46
 800a57c:	00000000 	.word	0x00000000
 800a580:	0800a333 	.word	0x0800a333
 800a584:	0800af42 	.word	0x0800af42

0800a588 <_printf_common>:
 800a588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a58c:	4616      	mov	r6, r2
 800a58e:	4698      	mov	r8, r3
 800a590:	688a      	ldr	r2, [r1, #8]
 800a592:	690b      	ldr	r3, [r1, #16]
 800a594:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a598:	4293      	cmp	r3, r2
 800a59a:	bfb8      	it	lt
 800a59c:	4613      	movlt	r3, r2
 800a59e:	6033      	str	r3, [r6, #0]
 800a5a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a5a4:	4607      	mov	r7, r0
 800a5a6:	460c      	mov	r4, r1
 800a5a8:	b10a      	cbz	r2, 800a5ae <_printf_common+0x26>
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	6033      	str	r3, [r6, #0]
 800a5ae:	6823      	ldr	r3, [r4, #0]
 800a5b0:	0699      	lsls	r1, r3, #26
 800a5b2:	bf42      	ittt	mi
 800a5b4:	6833      	ldrmi	r3, [r6, #0]
 800a5b6:	3302      	addmi	r3, #2
 800a5b8:	6033      	strmi	r3, [r6, #0]
 800a5ba:	6825      	ldr	r5, [r4, #0]
 800a5bc:	f015 0506 	ands.w	r5, r5, #6
 800a5c0:	d106      	bne.n	800a5d0 <_printf_common+0x48>
 800a5c2:	f104 0a19 	add.w	sl, r4, #25
 800a5c6:	68e3      	ldr	r3, [r4, #12]
 800a5c8:	6832      	ldr	r2, [r6, #0]
 800a5ca:	1a9b      	subs	r3, r3, r2
 800a5cc:	42ab      	cmp	r3, r5
 800a5ce:	dc26      	bgt.n	800a61e <_printf_common+0x96>
 800a5d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a5d4:	6822      	ldr	r2, [r4, #0]
 800a5d6:	3b00      	subs	r3, #0
 800a5d8:	bf18      	it	ne
 800a5da:	2301      	movne	r3, #1
 800a5dc:	0692      	lsls	r2, r2, #26
 800a5de:	d42b      	bmi.n	800a638 <_printf_common+0xb0>
 800a5e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a5e4:	4641      	mov	r1, r8
 800a5e6:	4638      	mov	r0, r7
 800a5e8:	47c8      	blx	r9
 800a5ea:	3001      	adds	r0, #1
 800a5ec:	d01e      	beq.n	800a62c <_printf_common+0xa4>
 800a5ee:	6823      	ldr	r3, [r4, #0]
 800a5f0:	6922      	ldr	r2, [r4, #16]
 800a5f2:	f003 0306 	and.w	r3, r3, #6
 800a5f6:	2b04      	cmp	r3, #4
 800a5f8:	bf02      	ittt	eq
 800a5fa:	68e5      	ldreq	r5, [r4, #12]
 800a5fc:	6833      	ldreq	r3, [r6, #0]
 800a5fe:	1aed      	subeq	r5, r5, r3
 800a600:	68a3      	ldr	r3, [r4, #8]
 800a602:	bf0c      	ite	eq
 800a604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a608:	2500      	movne	r5, #0
 800a60a:	4293      	cmp	r3, r2
 800a60c:	bfc4      	itt	gt
 800a60e:	1a9b      	subgt	r3, r3, r2
 800a610:	18ed      	addgt	r5, r5, r3
 800a612:	2600      	movs	r6, #0
 800a614:	341a      	adds	r4, #26
 800a616:	42b5      	cmp	r5, r6
 800a618:	d11a      	bne.n	800a650 <_printf_common+0xc8>
 800a61a:	2000      	movs	r0, #0
 800a61c:	e008      	b.n	800a630 <_printf_common+0xa8>
 800a61e:	2301      	movs	r3, #1
 800a620:	4652      	mov	r2, sl
 800a622:	4641      	mov	r1, r8
 800a624:	4638      	mov	r0, r7
 800a626:	47c8      	blx	r9
 800a628:	3001      	adds	r0, #1
 800a62a:	d103      	bne.n	800a634 <_printf_common+0xac>
 800a62c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a634:	3501      	adds	r5, #1
 800a636:	e7c6      	b.n	800a5c6 <_printf_common+0x3e>
 800a638:	18e1      	adds	r1, r4, r3
 800a63a:	1c5a      	adds	r2, r3, #1
 800a63c:	2030      	movs	r0, #48	@ 0x30
 800a63e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a642:	4422      	add	r2, r4
 800a644:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a648:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a64c:	3302      	adds	r3, #2
 800a64e:	e7c7      	b.n	800a5e0 <_printf_common+0x58>
 800a650:	2301      	movs	r3, #1
 800a652:	4622      	mov	r2, r4
 800a654:	4641      	mov	r1, r8
 800a656:	4638      	mov	r0, r7
 800a658:	47c8      	blx	r9
 800a65a:	3001      	adds	r0, #1
 800a65c:	d0e6      	beq.n	800a62c <_printf_common+0xa4>
 800a65e:	3601      	adds	r6, #1
 800a660:	e7d9      	b.n	800a616 <_printf_common+0x8e>
	...

0800a664 <_printf_i>:
 800a664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a668:	7e0f      	ldrb	r7, [r1, #24]
 800a66a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a66c:	2f78      	cmp	r7, #120	@ 0x78
 800a66e:	4691      	mov	r9, r2
 800a670:	4680      	mov	r8, r0
 800a672:	460c      	mov	r4, r1
 800a674:	469a      	mov	sl, r3
 800a676:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a67a:	d807      	bhi.n	800a68c <_printf_i+0x28>
 800a67c:	2f62      	cmp	r7, #98	@ 0x62
 800a67e:	d80a      	bhi.n	800a696 <_printf_i+0x32>
 800a680:	2f00      	cmp	r7, #0
 800a682:	f000 80d1 	beq.w	800a828 <_printf_i+0x1c4>
 800a686:	2f58      	cmp	r7, #88	@ 0x58
 800a688:	f000 80b8 	beq.w	800a7fc <_printf_i+0x198>
 800a68c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a690:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a694:	e03a      	b.n	800a70c <_printf_i+0xa8>
 800a696:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a69a:	2b15      	cmp	r3, #21
 800a69c:	d8f6      	bhi.n	800a68c <_printf_i+0x28>
 800a69e:	a101      	add	r1, pc, #4	@ (adr r1, 800a6a4 <_printf_i+0x40>)
 800a6a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6a4:	0800a6fd 	.word	0x0800a6fd
 800a6a8:	0800a711 	.word	0x0800a711
 800a6ac:	0800a68d 	.word	0x0800a68d
 800a6b0:	0800a68d 	.word	0x0800a68d
 800a6b4:	0800a68d 	.word	0x0800a68d
 800a6b8:	0800a68d 	.word	0x0800a68d
 800a6bc:	0800a711 	.word	0x0800a711
 800a6c0:	0800a68d 	.word	0x0800a68d
 800a6c4:	0800a68d 	.word	0x0800a68d
 800a6c8:	0800a68d 	.word	0x0800a68d
 800a6cc:	0800a68d 	.word	0x0800a68d
 800a6d0:	0800a80f 	.word	0x0800a80f
 800a6d4:	0800a73b 	.word	0x0800a73b
 800a6d8:	0800a7c9 	.word	0x0800a7c9
 800a6dc:	0800a68d 	.word	0x0800a68d
 800a6e0:	0800a68d 	.word	0x0800a68d
 800a6e4:	0800a831 	.word	0x0800a831
 800a6e8:	0800a68d 	.word	0x0800a68d
 800a6ec:	0800a73b 	.word	0x0800a73b
 800a6f0:	0800a68d 	.word	0x0800a68d
 800a6f4:	0800a68d 	.word	0x0800a68d
 800a6f8:	0800a7d1 	.word	0x0800a7d1
 800a6fc:	6833      	ldr	r3, [r6, #0]
 800a6fe:	1d1a      	adds	r2, r3, #4
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	6032      	str	r2, [r6, #0]
 800a704:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a708:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a70c:	2301      	movs	r3, #1
 800a70e:	e09c      	b.n	800a84a <_printf_i+0x1e6>
 800a710:	6833      	ldr	r3, [r6, #0]
 800a712:	6820      	ldr	r0, [r4, #0]
 800a714:	1d19      	adds	r1, r3, #4
 800a716:	6031      	str	r1, [r6, #0]
 800a718:	0606      	lsls	r6, r0, #24
 800a71a:	d501      	bpl.n	800a720 <_printf_i+0xbc>
 800a71c:	681d      	ldr	r5, [r3, #0]
 800a71e:	e003      	b.n	800a728 <_printf_i+0xc4>
 800a720:	0645      	lsls	r5, r0, #25
 800a722:	d5fb      	bpl.n	800a71c <_printf_i+0xb8>
 800a724:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a728:	2d00      	cmp	r5, #0
 800a72a:	da03      	bge.n	800a734 <_printf_i+0xd0>
 800a72c:	232d      	movs	r3, #45	@ 0x2d
 800a72e:	426d      	negs	r5, r5
 800a730:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a734:	4858      	ldr	r0, [pc, #352]	@ (800a898 <_printf_i+0x234>)
 800a736:	230a      	movs	r3, #10
 800a738:	e011      	b.n	800a75e <_printf_i+0xfa>
 800a73a:	6821      	ldr	r1, [r4, #0]
 800a73c:	6833      	ldr	r3, [r6, #0]
 800a73e:	0608      	lsls	r0, r1, #24
 800a740:	f853 5b04 	ldr.w	r5, [r3], #4
 800a744:	d402      	bmi.n	800a74c <_printf_i+0xe8>
 800a746:	0649      	lsls	r1, r1, #25
 800a748:	bf48      	it	mi
 800a74a:	b2ad      	uxthmi	r5, r5
 800a74c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a74e:	4852      	ldr	r0, [pc, #328]	@ (800a898 <_printf_i+0x234>)
 800a750:	6033      	str	r3, [r6, #0]
 800a752:	bf14      	ite	ne
 800a754:	230a      	movne	r3, #10
 800a756:	2308      	moveq	r3, #8
 800a758:	2100      	movs	r1, #0
 800a75a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a75e:	6866      	ldr	r6, [r4, #4]
 800a760:	60a6      	str	r6, [r4, #8]
 800a762:	2e00      	cmp	r6, #0
 800a764:	db05      	blt.n	800a772 <_printf_i+0x10e>
 800a766:	6821      	ldr	r1, [r4, #0]
 800a768:	432e      	orrs	r6, r5
 800a76a:	f021 0104 	bic.w	r1, r1, #4
 800a76e:	6021      	str	r1, [r4, #0]
 800a770:	d04b      	beq.n	800a80a <_printf_i+0x1a6>
 800a772:	4616      	mov	r6, r2
 800a774:	fbb5 f1f3 	udiv	r1, r5, r3
 800a778:	fb03 5711 	mls	r7, r3, r1, r5
 800a77c:	5dc7      	ldrb	r7, [r0, r7]
 800a77e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a782:	462f      	mov	r7, r5
 800a784:	42bb      	cmp	r3, r7
 800a786:	460d      	mov	r5, r1
 800a788:	d9f4      	bls.n	800a774 <_printf_i+0x110>
 800a78a:	2b08      	cmp	r3, #8
 800a78c:	d10b      	bne.n	800a7a6 <_printf_i+0x142>
 800a78e:	6823      	ldr	r3, [r4, #0]
 800a790:	07df      	lsls	r7, r3, #31
 800a792:	d508      	bpl.n	800a7a6 <_printf_i+0x142>
 800a794:	6923      	ldr	r3, [r4, #16]
 800a796:	6861      	ldr	r1, [r4, #4]
 800a798:	4299      	cmp	r1, r3
 800a79a:	bfde      	ittt	le
 800a79c:	2330      	movle	r3, #48	@ 0x30
 800a79e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a7a2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a7a6:	1b92      	subs	r2, r2, r6
 800a7a8:	6122      	str	r2, [r4, #16]
 800a7aa:	f8cd a000 	str.w	sl, [sp]
 800a7ae:	464b      	mov	r3, r9
 800a7b0:	aa03      	add	r2, sp, #12
 800a7b2:	4621      	mov	r1, r4
 800a7b4:	4640      	mov	r0, r8
 800a7b6:	f7ff fee7 	bl	800a588 <_printf_common>
 800a7ba:	3001      	adds	r0, #1
 800a7bc:	d14a      	bne.n	800a854 <_printf_i+0x1f0>
 800a7be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a7c2:	b004      	add	sp, #16
 800a7c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7c8:	6823      	ldr	r3, [r4, #0]
 800a7ca:	f043 0320 	orr.w	r3, r3, #32
 800a7ce:	6023      	str	r3, [r4, #0]
 800a7d0:	4832      	ldr	r0, [pc, #200]	@ (800a89c <_printf_i+0x238>)
 800a7d2:	2778      	movs	r7, #120	@ 0x78
 800a7d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a7d8:	6823      	ldr	r3, [r4, #0]
 800a7da:	6831      	ldr	r1, [r6, #0]
 800a7dc:	061f      	lsls	r7, r3, #24
 800a7de:	f851 5b04 	ldr.w	r5, [r1], #4
 800a7e2:	d402      	bmi.n	800a7ea <_printf_i+0x186>
 800a7e4:	065f      	lsls	r7, r3, #25
 800a7e6:	bf48      	it	mi
 800a7e8:	b2ad      	uxthmi	r5, r5
 800a7ea:	6031      	str	r1, [r6, #0]
 800a7ec:	07d9      	lsls	r1, r3, #31
 800a7ee:	bf44      	itt	mi
 800a7f0:	f043 0320 	orrmi.w	r3, r3, #32
 800a7f4:	6023      	strmi	r3, [r4, #0]
 800a7f6:	b11d      	cbz	r5, 800a800 <_printf_i+0x19c>
 800a7f8:	2310      	movs	r3, #16
 800a7fa:	e7ad      	b.n	800a758 <_printf_i+0xf4>
 800a7fc:	4826      	ldr	r0, [pc, #152]	@ (800a898 <_printf_i+0x234>)
 800a7fe:	e7e9      	b.n	800a7d4 <_printf_i+0x170>
 800a800:	6823      	ldr	r3, [r4, #0]
 800a802:	f023 0320 	bic.w	r3, r3, #32
 800a806:	6023      	str	r3, [r4, #0]
 800a808:	e7f6      	b.n	800a7f8 <_printf_i+0x194>
 800a80a:	4616      	mov	r6, r2
 800a80c:	e7bd      	b.n	800a78a <_printf_i+0x126>
 800a80e:	6833      	ldr	r3, [r6, #0]
 800a810:	6825      	ldr	r5, [r4, #0]
 800a812:	6961      	ldr	r1, [r4, #20]
 800a814:	1d18      	adds	r0, r3, #4
 800a816:	6030      	str	r0, [r6, #0]
 800a818:	062e      	lsls	r6, r5, #24
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	d501      	bpl.n	800a822 <_printf_i+0x1be>
 800a81e:	6019      	str	r1, [r3, #0]
 800a820:	e002      	b.n	800a828 <_printf_i+0x1c4>
 800a822:	0668      	lsls	r0, r5, #25
 800a824:	d5fb      	bpl.n	800a81e <_printf_i+0x1ba>
 800a826:	8019      	strh	r1, [r3, #0]
 800a828:	2300      	movs	r3, #0
 800a82a:	6123      	str	r3, [r4, #16]
 800a82c:	4616      	mov	r6, r2
 800a82e:	e7bc      	b.n	800a7aa <_printf_i+0x146>
 800a830:	6833      	ldr	r3, [r6, #0]
 800a832:	1d1a      	adds	r2, r3, #4
 800a834:	6032      	str	r2, [r6, #0]
 800a836:	681e      	ldr	r6, [r3, #0]
 800a838:	6862      	ldr	r2, [r4, #4]
 800a83a:	2100      	movs	r1, #0
 800a83c:	4630      	mov	r0, r6
 800a83e:	f7f5 fcf7 	bl	8000230 <memchr>
 800a842:	b108      	cbz	r0, 800a848 <_printf_i+0x1e4>
 800a844:	1b80      	subs	r0, r0, r6
 800a846:	6060      	str	r0, [r4, #4]
 800a848:	6863      	ldr	r3, [r4, #4]
 800a84a:	6123      	str	r3, [r4, #16]
 800a84c:	2300      	movs	r3, #0
 800a84e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a852:	e7aa      	b.n	800a7aa <_printf_i+0x146>
 800a854:	6923      	ldr	r3, [r4, #16]
 800a856:	4632      	mov	r2, r6
 800a858:	4649      	mov	r1, r9
 800a85a:	4640      	mov	r0, r8
 800a85c:	47d0      	blx	sl
 800a85e:	3001      	adds	r0, #1
 800a860:	d0ad      	beq.n	800a7be <_printf_i+0x15a>
 800a862:	6823      	ldr	r3, [r4, #0]
 800a864:	079b      	lsls	r3, r3, #30
 800a866:	d413      	bmi.n	800a890 <_printf_i+0x22c>
 800a868:	68e0      	ldr	r0, [r4, #12]
 800a86a:	9b03      	ldr	r3, [sp, #12]
 800a86c:	4298      	cmp	r0, r3
 800a86e:	bfb8      	it	lt
 800a870:	4618      	movlt	r0, r3
 800a872:	e7a6      	b.n	800a7c2 <_printf_i+0x15e>
 800a874:	2301      	movs	r3, #1
 800a876:	4632      	mov	r2, r6
 800a878:	4649      	mov	r1, r9
 800a87a:	4640      	mov	r0, r8
 800a87c:	47d0      	blx	sl
 800a87e:	3001      	adds	r0, #1
 800a880:	d09d      	beq.n	800a7be <_printf_i+0x15a>
 800a882:	3501      	adds	r5, #1
 800a884:	68e3      	ldr	r3, [r4, #12]
 800a886:	9903      	ldr	r1, [sp, #12]
 800a888:	1a5b      	subs	r3, r3, r1
 800a88a:	42ab      	cmp	r3, r5
 800a88c:	dcf2      	bgt.n	800a874 <_printf_i+0x210>
 800a88e:	e7eb      	b.n	800a868 <_printf_i+0x204>
 800a890:	2500      	movs	r5, #0
 800a892:	f104 0619 	add.w	r6, r4, #25
 800a896:	e7f5      	b.n	800a884 <_printf_i+0x220>
 800a898:	0800af4d 	.word	0x0800af4d
 800a89c:	0800af5e 	.word	0x0800af5e

0800a8a0 <__sflush_r>:
 800a8a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a8:	0716      	lsls	r6, r2, #28
 800a8aa:	4605      	mov	r5, r0
 800a8ac:	460c      	mov	r4, r1
 800a8ae:	d454      	bmi.n	800a95a <__sflush_r+0xba>
 800a8b0:	684b      	ldr	r3, [r1, #4]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	dc02      	bgt.n	800a8bc <__sflush_r+0x1c>
 800a8b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	dd48      	ble.n	800a94e <__sflush_r+0xae>
 800a8bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8be:	2e00      	cmp	r6, #0
 800a8c0:	d045      	beq.n	800a94e <__sflush_r+0xae>
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a8c8:	682f      	ldr	r7, [r5, #0]
 800a8ca:	6a21      	ldr	r1, [r4, #32]
 800a8cc:	602b      	str	r3, [r5, #0]
 800a8ce:	d030      	beq.n	800a932 <__sflush_r+0x92>
 800a8d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a8d2:	89a3      	ldrh	r3, [r4, #12]
 800a8d4:	0759      	lsls	r1, r3, #29
 800a8d6:	d505      	bpl.n	800a8e4 <__sflush_r+0x44>
 800a8d8:	6863      	ldr	r3, [r4, #4]
 800a8da:	1ad2      	subs	r2, r2, r3
 800a8dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a8de:	b10b      	cbz	r3, 800a8e4 <__sflush_r+0x44>
 800a8e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a8e2:	1ad2      	subs	r2, r2, r3
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8e8:	6a21      	ldr	r1, [r4, #32]
 800a8ea:	4628      	mov	r0, r5
 800a8ec:	47b0      	blx	r6
 800a8ee:	1c43      	adds	r3, r0, #1
 800a8f0:	89a3      	ldrh	r3, [r4, #12]
 800a8f2:	d106      	bne.n	800a902 <__sflush_r+0x62>
 800a8f4:	6829      	ldr	r1, [r5, #0]
 800a8f6:	291d      	cmp	r1, #29
 800a8f8:	d82b      	bhi.n	800a952 <__sflush_r+0xb2>
 800a8fa:	4a2a      	ldr	r2, [pc, #168]	@ (800a9a4 <__sflush_r+0x104>)
 800a8fc:	40ca      	lsrs	r2, r1
 800a8fe:	07d6      	lsls	r6, r2, #31
 800a900:	d527      	bpl.n	800a952 <__sflush_r+0xb2>
 800a902:	2200      	movs	r2, #0
 800a904:	6062      	str	r2, [r4, #4]
 800a906:	04d9      	lsls	r1, r3, #19
 800a908:	6922      	ldr	r2, [r4, #16]
 800a90a:	6022      	str	r2, [r4, #0]
 800a90c:	d504      	bpl.n	800a918 <__sflush_r+0x78>
 800a90e:	1c42      	adds	r2, r0, #1
 800a910:	d101      	bne.n	800a916 <__sflush_r+0x76>
 800a912:	682b      	ldr	r3, [r5, #0]
 800a914:	b903      	cbnz	r3, 800a918 <__sflush_r+0x78>
 800a916:	6560      	str	r0, [r4, #84]	@ 0x54
 800a918:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a91a:	602f      	str	r7, [r5, #0]
 800a91c:	b1b9      	cbz	r1, 800a94e <__sflush_r+0xae>
 800a91e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a922:	4299      	cmp	r1, r3
 800a924:	d002      	beq.n	800a92c <__sflush_r+0x8c>
 800a926:	4628      	mov	r0, r5
 800a928:	f7ff fa9c 	bl	8009e64 <_free_r>
 800a92c:	2300      	movs	r3, #0
 800a92e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a930:	e00d      	b.n	800a94e <__sflush_r+0xae>
 800a932:	2301      	movs	r3, #1
 800a934:	4628      	mov	r0, r5
 800a936:	47b0      	blx	r6
 800a938:	4602      	mov	r2, r0
 800a93a:	1c50      	adds	r0, r2, #1
 800a93c:	d1c9      	bne.n	800a8d2 <__sflush_r+0x32>
 800a93e:	682b      	ldr	r3, [r5, #0]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d0c6      	beq.n	800a8d2 <__sflush_r+0x32>
 800a944:	2b1d      	cmp	r3, #29
 800a946:	d001      	beq.n	800a94c <__sflush_r+0xac>
 800a948:	2b16      	cmp	r3, #22
 800a94a:	d11e      	bne.n	800a98a <__sflush_r+0xea>
 800a94c:	602f      	str	r7, [r5, #0]
 800a94e:	2000      	movs	r0, #0
 800a950:	e022      	b.n	800a998 <__sflush_r+0xf8>
 800a952:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a956:	b21b      	sxth	r3, r3
 800a958:	e01b      	b.n	800a992 <__sflush_r+0xf2>
 800a95a:	690f      	ldr	r7, [r1, #16]
 800a95c:	2f00      	cmp	r7, #0
 800a95e:	d0f6      	beq.n	800a94e <__sflush_r+0xae>
 800a960:	0793      	lsls	r3, r2, #30
 800a962:	680e      	ldr	r6, [r1, #0]
 800a964:	bf08      	it	eq
 800a966:	694b      	ldreq	r3, [r1, #20]
 800a968:	600f      	str	r7, [r1, #0]
 800a96a:	bf18      	it	ne
 800a96c:	2300      	movne	r3, #0
 800a96e:	eba6 0807 	sub.w	r8, r6, r7
 800a972:	608b      	str	r3, [r1, #8]
 800a974:	f1b8 0f00 	cmp.w	r8, #0
 800a978:	dde9      	ble.n	800a94e <__sflush_r+0xae>
 800a97a:	6a21      	ldr	r1, [r4, #32]
 800a97c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a97e:	4643      	mov	r3, r8
 800a980:	463a      	mov	r2, r7
 800a982:	4628      	mov	r0, r5
 800a984:	47b0      	blx	r6
 800a986:	2800      	cmp	r0, #0
 800a988:	dc08      	bgt.n	800a99c <__sflush_r+0xfc>
 800a98a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a98e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a992:	81a3      	strh	r3, [r4, #12]
 800a994:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a99c:	4407      	add	r7, r0
 800a99e:	eba8 0800 	sub.w	r8, r8, r0
 800a9a2:	e7e7      	b.n	800a974 <__sflush_r+0xd4>
 800a9a4:	20400001 	.word	0x20400001

0800a9a8 <_fflush_r>:
 800a9a8:	b538      	push	{r3, r4, r5, lr}
 800a9aa:	690b      	ldr	r3, [r1, #16]
 800a9ac:	4605      	mov	r5, r0
 800a9ae:	460c      	mov	r4, r1
 800a9b0:	b913      	cbnz	r3, 800a9b8 <_fflush_r+0x10>
 800a9b2:	2500      	movs	r5, #0
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	bd38      	pop	{r3, r4, r5, pc}
 800a9b8:	b118      	cbz	r0, 800a9c2 <_fflush_r+0x1a>
 800a9ba:	6a03      	ldr	r3, [r0, #32]
 800a9bc:	b90b      	cbnz	r3, 800a9c2 <_fflush_r+0x1a>
 800a9be:	f7ff f90b 	bl	8009bd8 <__sinit>
 800a9c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d0f3      	beq.n	800a9b2 <_fflush_r+0xa>
 800a9ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a9cc:	07d0      	lsls	r0, r2, #31
 800a9ce:	d404      	bmi.n	800a9da <_fflush_r+0x32>
 800a9d0:	0599      	lsls	r1, r3, #22
 800a9d2:	d402      	bmi.n	800a9da <_fflush_r+0x32>
 800a9d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9d6:	f7ff fa42 	bl	8009e5e <__retarget_lock_acquire_recursive>
 800a9da:	4628      	mov	r0, r5
 800a9dc:	4621      	mov	r1, r4
 800a9de:	f7ff ff5f 	bl	800a8a0 <__sflush_r>
 800a9e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9e4:	07da      	lsls	r2, r3, #31
 800a9e6:	4605      	mov	r5, r0
 800a9e8:	d4e4      	bmi.n	800a9b4 <_fflush_r+0xc>
 800a9ea:	89a3      	ldrh	r3, [r4, #12]
 800a9ec:	059b      	lsls	r3, r3, #22
 800a9ee:	d4e1      	bmi.n	800a9b4 <_fflush_r+0xc>
 800a9f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9f2:	f7ff fa35 	bl	8009e60 <__retarget_lock_release_recursive>
 800a9f6:	e7dd      	b.n	800a9b4 <_fflush_r+0xc>

0800a9f8 <_putc_r>:
 800a9f8:	b570      	push	{r4, r5, r6, lr}
 800a9fa:	460d      	mov	r5, r1
 800a9fc:	4614      	mov	r4, r2
 800a9fe:	4606      	mov	r6, r0
 800aa00:	b118      	cbz	r0, 800aa0a <_putc_r+0x12>
 800aa02:	6a03      	ldr	r3, [r0, #32]
 800aa04:	b90b      	cbnz	r3, 800aa0a <_putc_r+0x12>
 800aa06:	f7ff f8e7 	bl	8009bd8 <__sinit>
 800aa0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa0c:	07d8      	lsls	r0, r3, #31
 800aa0e:	d405      	bmi.n	800aa1c <_putc_r+0x24>
 800aa10:	89a3      	ldrh	r3, [r4, #12]
 800aa12:	0599      	lsls	r1, r3, #22
 800aa14:	d402      	bmi.n	800aa1c <_putc_r+0x24>
 800aa16:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa18:	f7ff fa21 	bl	8009e5e <__retarget_lock_acquire_recursive>
 800aa1c:	68a3      	ldr	r3, [r4, #8]
 800aa1e:	3b01      	subs	r3, #1
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	60a3      	str	r3, [r4, #8]
 800aa24:	da05      	bge.n	800aa32 <_putc_r+0x3a>
 800aa26:	69a2      	ldr	r2, [r4, #24]
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	db12      	blt.n	800aa52 <_putc_r+0x5a>
 800aa2c:	b2eb      	uxtb	r3, r5
 800aa2e:	2b0a      	cmp	r3, #10
 800aa30:	d00f      	beq.n	800aa52 <_putc_r+0x5a>
 800aa32:	6823      	ldr	r3, [r4, #0]
 800aa34:	1c5a      	adds	r2, r3, #1
 800aa36:	6022      	str	r2, [r4, #0]
 800aa38:	701d      	strb	r5, [r3, #0]
 800aa3a:	b2ed      	uxtb	r5, r5
 800aa3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa3e:	07da      	lsls	r2, r3, #31
 800aa40:	d405      	bmi.n	800aa4e <_putc_r+0x56>
 800aa42:	89a3      	ldrh	r3, [r4, #12]
 800aa44:	059b      	lsls	r3, r3, #22
 800aa46:	d402      	bmi.n	800aa4e <_putc_r+0x56>
 800aa48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa4a:	f7ff fa09 	bl	8009e60 <__retarget_lock_release_recursive>
 800aa4e:	4628      	mov	r0, r5
 800aa50:	bd70      	pop	{r4, r5, r6, pc}
 800aa52:	4629      	mov	r1, r5
 800aa54:	4622      	mov	r2, r4
 800aa56:	4630      	mov	r0, r6
 800aa58:	f000 f802 	bl	800aa60 <__swbuf_r>
 800aa5c:	4605      	mov	r5, r0
 800aa5e:	e7ed      	b.n	800aa3c <_putc_r+0x44>

0800aa60 <__swbuf_r>:
 800aa60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa62:	460e      	mov	r6, r1
 800aa64:	4614      	mov	r4, r2
 800aa66:	4605      	mov	r5, r0
 800aa68:	b118      	cbz	r0, 800aa72 <__swbuf_r+0x12>
 800aa6a:	6a03      	ldr	r3, [r0, #32]
 800aa6c:	b90b      	cbnz	r3, 800aa72 <__swbuf_r+0x12>
 800aa6e:	f7ff f8b3 	bl	8009bd8 <__sinit>
 800aa72:	69a3      	ldr	r3, [r4, #24]
 800aa74:	60a3      	str	r3, [r4, #8]
 800aa76:	89a3      	ldrh	r3, [r4, #12]
 800aa78:	071a      	lsls	r2, r3, #28
 800aa7a:	d501      	bpl.n	800aa80 <__swbuf_r+0x20>
 800aa7c:	6923      	ldr	r3, [r4, #16]
 800aa7e:	b943      	cbnz	r3, 800aa92 <__swbuf_r+0x32>
 800aa80:	4621      	mov	r1, r4
 800aa82:	4628      	mov	r0, r5
 800aa84:	f000 f82a 	bl	800aadc <__swsetup_r>
 800aa88:	b118      	cbz	r0, 800aa92 <__swbuf_r+0x32>
 800aa8a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800aa8e:	4638      	mov	r0, r7
 800aa90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa92:	6823      	ldr	r3, [r4, #0]
 800aa94:	6922      	ldr	r2, [r4, #16]
 800aa96:	1a98      	subs	r0, r3, r2
 800aa98:	6963      	ldr	r3, [r4, #20]
 800aa9a:	b2f6      	uxtb	r6, r6
 800aa9c:	4283      	cmp	r3, r0
 800aa9e:	4637      	mov	r7, r6
 800aaa0:	dc05      	bgt.n	800aaae <__swbuf_r+0x4e>
 800aaa2:	4621      	mov	r1, r4
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	f7ff ff7f 	bl	800a9a8 <_fflush_r>
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	d1ed      	bne.n	800aa8a <__swbuf_r+0x2a>
 800aaae:	68a3      	ldr	r3, [r4, #8]
 800aab0:	3b01      	subs	r3, #1
 800aab2:	60a3      	str	r3, [r4, #8]
 800aab4:	6823      	ldr	r3, [r4, #0]
 800aab6:	1c5a      	adds	r2, r3, #1
 800aab8:	6022      	str	r2, [r4, #0]
 800aaba:	701e      	strb	r6, [r3, #0]
 800aabc:	6962      	ldr	r2, [r4, #20]
 800aabe:	1c43      	adds	r3, r0, #1
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d004      	beq.n	800aace <__swbuf_r+0x6e>
 800aac4:	89a3      	ldrh	r3, [r4, #12]
 800aac6:	07db      	lsls	r3, r3, #31
 800aac8:	d5e1      	bpl.n	800aa8e <__swbuf_r+0x2e>
 800aaca:	2e0a      	cmp	r6, #10
 800aacc:	d1df      	bne.n	800aa8e <__swbuf_r+0x2e>
 800aace:	4621      	mov	r1, r4
 800aad0:	4628      	mov	r0, r5
 800aad2:	f7ff ff69 	bl	800a9a8 <_fflush_r>
 800aad6:	2800      	cmp	r0, #0
 800aad8:	d0d9      	beq.n	800aa8e <__swbuf_r+0x2e>
 800aada:	e7d6      	b.n	800aa8a <__swbuf_r+0x2a>

0800aadc <__swsetup_r>:
 800aadc:	b538      	push	{r3, r4, r5, lr}
 800aade:	4b29      	ldr	r3, [pc, #164]	@ (800ab84 <__swsetup_r+0xa8>)
 800aae0:	4605      	mov	r5, r0
 800aae2:	6818      	ldr	r0, [r3, #0]
 800aae4:	460c      	mov	r4, r1
 800aae6:	b118      	cbz	r0, 800aaf0 <__swsetup_r+0x14>
 800aae8:	6a03      	ldr	r3, [r0, #32]
 800aaea:	b90b      	cbnz	r3, 800aaf0 <__swsetup_r+0x14>
 800aaec:	f7ff f874 	bl	8009bd8 <__sinit>
 800aaf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaf4:	0719      	lsls	r1, r3, #28
 800aaf6:	d422      	bmi.n	800ab3e <__swsetup_r+0x62>
 800aaf8:	06da      	lsls	r2, r3, #27
 800aafa:	d407      	bmi.n	800ab0c <__swsetup_r+0x30>
 800aafc:	2209      	movs	r2, #9
 800aafe:	602a      	str	r2, [r5, #0]
 800ab00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab04:	81a3      	strh	r3, [r4, #12]
 800ab06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab0a:	e033      	b.n	800ab74 <__swsetup_r+0x98>
 800ab0c:	0758      	lsls	r0, r3, #29
 800ab0e:	d512      	bpl.n	800ab36 <__swsetup_r+0x5a>
 800ab10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab12:	b141      	cbz	r1, 800ab26 <__swsetup_r+0x4a>
 800ab14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab18:	4299      	cmp	r1, r3
 800ab1a:	d002      	beq.n	800ab22 <__swsetup_r+0x46>
 800ab1c:	4628      	mov	r0, r5
 800ab1e:	f7ff f9a1 	bl	8009e64 <_free_r>
 800ab22:	2300      	movs	r3, #0
 800ab24:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab26:	89a3      	ldrh	r3, [r4, #12]
 800ab28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ab2c:	81a3      	strh	r3, [r4, #12]
 800ab2e:	2300      	movs	r3, #0
 800ab30:	6063      	str	r3, [r4, #4]
 800ab32:	6923      	ldr	r3, [r4, #16]
 800ab34:	6023      	str	r3, [r4, #0]
 800ab36:	89a3      	ldrh	r3, [r4, #12]
 800ab38:	f043 0308 	orr.w	r3, r3, #8
 800ab3c:	81a3      	strh	r3, [r4, #12]
 800ab3e:	6923      	ldr	r3, [r4, #16]
 800ab40:	b94b      	cbnz	r3, 800ab56 <__swsetup_r+0x7a>
 800ab42:	89a3      	ldrh	r3, [r4, #12]
 800ab44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ab48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab4c:	d003      	beq.n	800ab56 <__swsetup_r+0x7a>
 800ab4e:	4621      	mov	r1, r4
 800ab50:	4628      	mov	r0, r5
 800ab52:	f000 f8a5 	bl	800aca0 <__smakebuf_r>
 800ab56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab5a:	f013 0201 	ands.w	r2, r3, #1
 800ab5e:	d00a      	beq.n	800ab76 <__swsetup_r+0x9a>
 800ab60:	2200      	movs	r2, #0
 800ab62:	60a2      	str	r2, [r4, #8]
 800ab64:	6962      	ldr	r2, [r4, #20]
 800ab66:	4252      	negs	r2, r2
 800ab68:	61a2      	str	r2, [r4, #24]
 800ab6a:	6922      	ldr	r2, [r4, #16]
 800ab6c:	b942      	cbnz	r2, 800ab80 <__swsetup_r+0xa4>
 800ab6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ab72:	d1c5      	bne.n	800ab00 <__swsetup_r+0x24>
 800ab74:	bd38      	pop	{r3, r4, r5, pc}
 800ab76:	0799      	lsls	r1, r3, #30
 800ab78:	bf58      	it	pl
 800ab7a:	6962      	ldrpl	r2, [r4, #20]
 800ab7c:	60a2      	str	r2, [r4, #8]
 800ab7e:	e7f4      	b.n	800ab6a <__swsetup_r+0x8e>
 800ab80:	2000      	movs	r0, #0
 800ab82:	e7f7      	b.n	800ab74 <__swsetup_r+0x98>
 800ab84:	20000190 	.word	0x20000190

0800ab88 <memmove>:
 800ab88:	4288      	cmp	r0, r1
 800ab8a:	b510      	push	{r4, lr}
 800ab8c:	eb01 0402 	add.w	r4, r1, r2
 800ab90:	d902      	bls.n	800ab98 <memmove+0x10>
 800ab92:	4284      	cmp	r4, r0
 800ab94:	4623      	mov	r3, r4
 800ab96:	d807      	bhi.n	800aba8 <memmove+0x20>
 800ab98:	1e43      	subs	r3, r0, #1
 800ab9a:	42a1      	cmp	r1, r4
 800ab9c:	d008      	beq.n	800abb0 <memmove+0x28>
 800ab9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aba2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aba6:	e7f8      	b.n	800ab9a <memmove+0x12>
 800aba8:	4402      	add	r2, r0
 800abaa:	4601      	mov	r1, r0
 800abac:	428a      	cmp	r2, r1
 800abae:	d100      	bne.n	800abb2 <memmove+0x2a>
 800abb0:	bd10      	pop	{r4, pc}
 800abb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800abb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800abba:	e7f7      	b.n	800abac <memmove+0x24>

0800abbc <_sbrk_r>:
 800abbc:	b538      	push	{r3, r4, r5, lr}
 800abbe:	4d06      	ldr	r5, [pc, #24]	@ (800abd8 <_sbrk_r+0x1c>)
 800abc0:	2300      	movs	r3, #0
 800abc2:	4604      	mov	r4, r0
 800abc4:	4608      	mov	r0, r1
 800abc6:	602b      	str	r3, [r5, #0]
 800abc8:	f7f5 ffac 	bl	8000b24 <_sbrk>
 800abcc:	1c43      	adds	r3, r0, #1
 800abce:	d102      	bne.n	800abd6 <_sbrk_r+0x1a>
 800abd0:	682b      	ldr	r3, [r5, #0]
 800abd2:	b103      	cbz	r3, 800abd6 <_sbrk_r+0x1a>
 800abd4:	6023      	str	r3, [r4, #0]
 800abd6:	bd38      	pop	{r3, r4, r5, pc}
 800abd8:	20001fbc 	.word	0x20001fbc

0800abdc <memcpy>:
 800abdc:	440a      	add	r2, r1
 800abde:	4291      	cmp	r1, r2
 800abe0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800abe4:	d100      	bne.n	800abe8 <memcpy+0xc>
 800abe6:	4770      	bx	lr
 800abe8:	b510      	push	{r4, lr}
 800abea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abf2:	4291      	cmp	r1, r2
 800abf4:	d1f9      	bne.n	800abea <memcpy+0xe>
 800abf6:	bd10      	pop	{r4, pc}

0800abf8 <_realloc_r>:
 800abf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abfc:	4607      	mov	r7, r0
 800abfe:	4614      	mov	r4, r2
 800ac00:	460d      	mov	r5, r1
 800ac02:	b921      	cbnz	r1, 800ac0e <_realloc_r+0x16>
 800ac04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac08:	4611      	mov	r1, r2
 800ac0a:	f7ff b997 	b.w	8009f3c <_malloc_r>
 800ac0e:	b92a      	cbnz	r2, 800ac1c <_realloc_r+0x24>
 800ac10:	f7ff f928 	bl	8009e64 <_free_r>
 800ac14:	4625      	mov	r5, r4
 800ac16:	4628      	mov	r0, r5
 800ac18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac1c:	f000 f89e 	bl	800ad5c <_malloc_usable_size_r>
 800ac20:	4284      	cmp	r4, r0
 800ac22:	4606      	mov	r6, r0
 800ac24:	d802      	bhi.n	800ac2c <_realloc_r+0x34>
 800ac26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac2a:	d8f4      	bhi.n	800ac16 <_realloc_r+0x1e>
 800ac2c:	4621      	mov	r1, r4
 800ac2e:	4638      	mov	r0, r7
 800ac30:	f7ff f984 	bl	8009f3c <_malloc_r>
 800ac34:	4680      	mov	r8, r0
 800ac36:	b908      	cbnz	r0, 800ac3c <_realloc_r+0x44>
 800ac38:	4645      	mov	r5, r8
 800ac3a:	e7ec      	b.n	800ac16 <_realloc_r+0x1e>
 800ac3c:	42b4      	cmp	r4, r6
 800ac3e:	4622      	mov	r2, r4
 800ac40:	4629      	mov	r1, r5
 800ac42:	bf28      	it	cs
 800ac44:	4632      	movcs	r2, r6
 800ac46:	f7ff ffc9 	bl	800abdc <memcpy>
 800ac4a:	4629      	mov	r1, r5
 800ac4c:	4638      	mov	r0, r7
 800ac4e:	f7ff f909 	bl	8009e64 <_free_r>
 800ac52:	e7f1      	b.n	800ac38 <_realloc_r+0x40>

0800ac54 <__swhatbuf_r>:
 800ac54:	b570      	push	{r4, r5, r6, lr}
 800ac56:	460c      	mov	r4, r1
 800ac58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac5c:	2900      	cmp	r1, #0
 800ac5e:	b096      	sub	sp, #88	@ 0x58
 800ac60:	4615      	mov	r5, r2
 800ac62:	461e      	mov	r6, r3
 800ac64:	da0d      	bge.n	800ac82 <__swhatbuf_r+0x2e>
 800ac66:	89a3      	ldrh	r3, [r4, #12]
 800ac68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ac6c:	f04f 0100 	mov.w	r1, #0
 800ac70:	bf14      	ite	ne
 800ac72:	2340      	movne	r3, #64	@ 0x40
 800ac74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ac78:	2000      	movs	r0, #0
 800ac7a:	6031      	str	r1, [r6, #0]
 800ac7c:	602b      	str	r3, [r5, #0]
 800ac7e:	b016      	add	sp, #88	@ 0x58
 800ac80:	bd70      	pop	{r4, r5, r6, pc}
 800ac82:	466a      	mov	r2, sp
 800ac84:	f000 f848 	bl	800ad18 <_fstat_r>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	dbec      	blt.n	800ac66 <__swhatbuf_r+0x12>
 800ac8c:	9901      	ldr	r1, [sp, #4]
 800ac8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ac92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ac96:	4259      	negs	r1, r3
 800ac98:	4159      	adcs	r1, r3
 800ac9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac9e:	e7eb      	b.n	800ac78 <__swhatbuf_r+0x24>

0800aca0 <__smakebuf_r>:
 800aca0:	898b      	ldrh	r3, [r1, #12]
 800aca2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aca4:	079d      	lsls	r5, r3, #30
 800aca6:	4606      	mov	r6, r0
 800aca8:	460c      	mov	r4, r1
 800acaa:	d507      	bpl.n	800acbc <__smakebuf_r+0x1c>
 800acac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800acb0:	6023      	str	r3, [r4, #0]
 800acb2:	6123      	str	r3, [r4, #16]
 800acb4:	2301      	movs	r3, #1
 800acb6:	6163      	str	r3, [r4, #20]
 800acb8:	b003      	add	sp, #12
 800acba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acbc:	ab01      	add	r3, sp, #4
 800acbe:	466a      	mov	r2, sp
 800acc0:	f7ff ffc8 	bl	800ac54 <__swhatbuf_r>
 800acc4:	9f00      	ldr	r7, [sp, #0]
 800acc6:	4605      	mov	r5, r0
 800acc8:	4639      	mov	r1, r7
 800acca:	4630      	mov	r0, r6
 800accc:	f7ff f936 	bl	8009f3c <_malloc_r>
 800acd0:	b948      	cbnz	r0, 800ace6 <__smakebuf_r+0x46>
 800acd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acd6:	059a      	lsls	r2, r3, #22
 800acd8:	d4ee      	bmi.n	800acb8 <__smakebuf_r+0x18>
 800acda:	f023 0303 	bic.w	r3, r3, #3
 800acde:	f043 0302 	orr.w	r3, r3, #2
 800ace2:	81a3      	strh	r3, [r4, #12]
 800ace4:	e7e2      	b.n	800acac <__smakebuf_r+0xc>
 800ace6:	89a3      	ldrh	r3, [r4, #12]
 800ace8:	6020      	str	r0, [r4, #0]
 800acea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acee:	81a3      	strh	r3, [r4, #12]
 800acf0:	9b01      	ldr	r3, [sp, #4]
 800acf2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800acf6:	b15b      	cbz	r3, 800ad10 <__smakebuf_r+0x70>
 800acf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acfc:	4630      	mov	r0, r6
 800acfe:	f000 f81d 	bl	800ad3c <_isatty_r>
 800ad02:	b128      	cbz	r0, 800ad10 <__smakebuf_r+0x70>
 800ad04:	89a3      	ldrh	r3, [r4, #12]
 800ad06:	f023 0303 	bic.w	r3, r3, #3
 800ad0a:	f043 0301 	orr.w	r3, r3, #1
 800ad0e:	81a3      	strh	r3, [r4, #12]
 800ad10:	89a3      	ldrh	r3, [r4, #12]
 800ad12:	431d      	orrs	r5, r3
 800ad14:	81a5      	strh	r5, [r4, #12]
 800ad16:	e7cf      	b.n	800acb8 <__smakebuf_r+0x18>

0800ad18 <_fstat_r>:
 800ad18:	b538      	push	{r3, r4, r5, lr}
 800ad1a:	4d07      	ldr	r5, [pc, #28]	@ (800ad38 <_fstat_r+0x20>)
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	4604      	mov	r4, r0
 800ad20:	4608      	mov	r0, r1
 800ad22:	4611      	mov	r1, r2
 800ad24:	602b      	str	r3, [r5, #0]
 800ad26:	f7f5 fed4 	bl	8000ad2 <_fstat>
 800ad2a:	1c43      	adds	r3, r0, #1
 800ad2c:	d102      	bne.n	800ad34 <_fstat_r+0x1c>
 800ad2e:	682b      	ldr	r3, [r5, #0]
 800ad30:	b103      	cbz	r3, 800ad34 <_fstat_r+0x1c>
 800ad32:	6023      	str	r3, [r4, #0]
 800ad34:	bd38      	pop	{r3, r4, r5, pc}
 800ad36:	bf00      	nop
 800ad38:	20001fbc 	.word	0x20001fbc

0800ad3c <_isatty_r>:
 800ad3c:	b538      	push	{r3, r4, r5, lr}
 800ad3e:	4d06      	ldr	r5, [pc, #24]	@ (800ad58 <_isatty_r+0x1c>)
 800ad40:	2300      	movs	r3, #0
 800ad42:	4604      	mov	r4, r0
 800ad44:	4608      	mov	r0, r1
 800ad46:	602b      	str	r3, [r5, #0]
 800ad48:	f7f5 fed3 	bl	8000af2 <_isatty>
 800ad4c:	1c43      	adds	r3, r0, #1
 800ad4e:	d102      	bne.n	800ad56 <_isatty_r+0x1a>
 800ad50:	682b      	ldr	r3, [r5, #0]
 800ad52:	b103      	cbz	r3, 800ad56 <_isatty_r+0x1a>
 800ad54:	6023      	str	r3, [r4, #0]
 800ad56:	bd38      	pop	{r3, r4, r5, pc}
 800ad58:	20001fbc 	.word	0x20001fbc

0800ad5c <_malloc_usable_size_r>:
 800ad5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad60:	1f18      	subs	r0, r3, #4
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	bfbc      	itt	lt
 800ad66:	580b      	ldrlt	r3, [r1, r0]
 800ad68:	18c0      	addlt	r0, r0, r3
 800ad6a:	4770      	bx	lr

0800ad6c <_init>:
 800ad6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6e:	bf00      	nop
 800ad70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad72:	bc08      	pop	{r3}
 800ad74:	469e      	mov	lr, r3
 800ad76:	4770      	bx	lr

0800ad78 <_fini>:
 800ad78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad7a:	bf00      	nop
 800ad7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad7e:	bc08      	pop	{r3}
 800ad80:	469e      	mov	lr, r3
 800ad82:	4770      	bx	lr
