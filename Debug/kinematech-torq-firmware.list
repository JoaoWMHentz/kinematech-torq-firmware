
kinematech-torq-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004010  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  080041e8  080041e8  000051e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045c8  080045c8  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080045c8  080045c8  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080045c8  080045c8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045c8  080045c8  000055c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045cc  080045cc  000055cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080045d0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  080045dc  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080045dc  00006090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb18  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc8  00000000  00000000  00011b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00013820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000980  00000000  00000000  00014480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f4cb  00000000  00000000  00014e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c711  00000000  00000000  000342cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1f61  00000000  00000000  000409dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011293d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003590  00000000  00000000  00112980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00115f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080041d0 	.word	0x080041d0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080041d0 	.word	0x080041d0

08000218 <ESC_Main_Init>:

// Open-loop FOC state
static OpenLoopFOC_t ol;

void ESC_Main_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  // Start PWM channels + complementary outputs
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800021c:	2100      	movs	r1, #0
 800021e:	4816      	ldr	r0, [pc, #88]	@ (8000278 <ESC_Main_Init+0x60>)
 8000220:	f001 fe3e 	bl	8001ea0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000224:	2104      	movs	r1, #4
 8000226:	4814      	ldr	r0, [pc, #80]	@ (8000278 <ESC_Main_Init+0x60>)
 8000228:	f001 fe3a 	bl	8001ea0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800022c:	2108      	movs	r1, #8
 800022e:	4812      	ldr	r0, [pc, #72]	@ (8000278 <ESC_Main_Init+0x60>)
 8000230:	f001 fe36 	bl	8001ea0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000234:	2100      	movs	r1, #0
 8000236:	4810      	ldr	r0, [pc, #64]	@ (8000278 <ESC_Main_Init+0x60>)
 8000238:	f002 ff7c 	bl	8003134 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800023c:	2104      	movs	r1, #4
 800023e:	480e      	ldr	r0, [pc, #56]	@ (8000278 <ESC_Main_Init+0x60>)
 8000240:	f002 ff78 	bl	8003134 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000244:	2108      	movs	r1, #8
 8000246:	480c      	ldr	r0, [pc, #48]	@ (8000278 <ESC_Main_Init+0x60>)
 8000248:	f002 ff74 	bl	8003134 <HAL_TIMEx_PWMN_Start>

  // Initialize open-loop control
  OpenLoopFOC_Init(&ol, VBUS_V, PWM_FREQ_HZ);
 800024c:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 800027c <ESC_Main_Init+0x64>
 8000250:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8000280 <ESC_Main_Init+0x68>
 8000254:	480b      	ldr	r0, [pc, #44]	@ (8000284 <ESC_Main_Init+0x6c>)
 8000256:	f000 faaf 	bl	80007b8 <OpenLoopFOC_Init>

  // Enable TIM1 update interrupt
  __HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_UPDATE);
 800025a:	4b07      	ldr	r3, [pc, #28]	@ (8000278 <ESC_Main_Init+0x60>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f06f 0201 	mvn.w	r2, #1
 8000262:	611a      	str	r2, [r3, #16]
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8000264:	4b04      	ldr	r3, [pc, #16]	@ (8000278 <ESC_Main_Init+0x60>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	68da      	ldr	r2, [r3, #12]
 800026a:	4b03      	ldr	r3, [pc, #12]	@ (8000278 <ESC_Main_Init+0x60>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f042 0201 	orr.w	r2, r2, #1
 8000272:	60da      	str	r2, [r3, #12]
}
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20000040 	.word	0x20000040
 800027c:	469c4000 	.word	0x469c4000
 8000280:	41866666 	.word	0x41866666
 8000284:	20000028 	.word	0x20000028

08000288 <ESC_Main_Loop>:

void ESC_Main_Loop(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  // Nothing here yet: everything runs in TIM1 interrupt
  // You can add commands, ramps, serial interface, etc.
}
 800028c:	bf00      	nop
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
	...

08000298 <HAL_TIM_PeriodElapsedCallback>:

// TIM1 update ISR callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1){
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a05      	ldr	r2, [pc, #20]	@ (80002bc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d103      	bne.n	80002b2 <HAL_TIM_PeriodElapsedCallback+0x1a>
    OpenLoopFOC_Step(&ol, &htim1);
 80002aa:	4905      	ldr	r1, [pc, #20]	@ (80002c0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80002ac:	4805      	ldr	r0, [pc, #20]	@ (80002c4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80002ae:	f000 fbd7 	bl	8000a60 <OpenLoopFOC_Step>
  }
}
 80002b2:	bf00      	nop
 80002b4:	3708      	adds	r7, #8
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40012c00 	.word	0x40012c00
 80002c0:	20000040 	.word	0x20000040
 80002c4:	20000028 	.word	0x20000028

080002c8 <main>:
 * @retval int
 */

extern TIM_HandleTypeDef htim1;

int main(void) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0

	HAL_Init();
 80002cc:	f000 fc51 	bl	8000b72 <HAL_Init>
	SystemClock_Config();
 80002d0:	f000 f812 	bl	80002f8 <SystemClock_Config>
	MX_GPIO_Init();
 80002d4:	f000 f8fc 	bl	80004d0 <MX_GPIO_Init>
	MX_TIM1_Init_20kHz();
 80002d8:	f000 f84e 	bl	8000378 <MX_TIM1_Init_20kHz>

	HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80002dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002e0:	4804      	ldr	r0, [pc, #16]	@ (80002f4 <main+0x2c>)
 80002e2:	f000 ff61 	bl	80011a8 <HAL_GPIO_TogglePin>

	ESC_Main_Init();
 80002e6:	f7ff ff97 	bl	8000218 <ESC_Main_Init>

	while (1) {
		/* USER CODE END WHILE */

		ESC_Main_Loop();
 80002ea:	f7ff ffcd 	bl	8000288 <ESC_Main_Loop>
		__WFI();
 80002ee:	bf30      	wfi
		ESC_Main_Loop();
 80002f0:	bf00      	nop
 80002f2:	e7fa      	b.n	80002ea <main+0x22>
 80002f4:	48000800 	.word	0x48000800

080002f8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b094      	sub	sp, #80	@ 0x50
 80002fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002fe:	f107 0318 	add.w	r3, r7, #24
 8000302:	2238      	movs	r2, #56	@ 0x38
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f003 ff36 	bl	8004178 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
 8000318:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800031a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800031e:	f000 ff5d 	bl	80011dc <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000322:	2302      	movs	r3, #2
 8000324:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000326:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800032a:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032c:	2340      	movs	r3, #64	@ 0x40
 800032e:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000330:	2300      	movs	r3, #0
 8000332:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000334:	f107 0318 	add.w	r3, r7, #24
 8000338:	4618      	mov	r0, r3
 800033a:	f001 f803 	bl	8001344 <HAL_RCC_OscConfig>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0x50>
		Error_Handler();
 8000344:	f000 f91a 	bl	800057c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000348:	230f      	movs	r3, #15
 800034a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800034c:	2301      	movs	r3, #1
 800034e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2100      	movs	r1, #0
 8000360:	4618      	mov	r0, r3
 8000362:	f001 fb01 	bl	8001968 <HAL_RCC_ClockConfig>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <SystemClock_Config+0x78>
		Error_Handler();
 800036c:	f000 f906 	bl	800057c <Error_Handler>
	}
}
 8000370:	bf00      	nop
 8000372:	3750      	adds	r7, #80	@ 0x50
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <MX_TIM1_Init_20kHz>:

static void MX_TIM1_Init_20kHz(void) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b09c      	sub	sp, #112	@ 0x70
 800037c:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM1_CLK_ENABLE();
 800037e:	4b51      	ldr	r3, [pc, #324]	@ (80004c4 <MX_TIM1_Init_20kHz+0x14c>)
 8000380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000382:	4a50      	ldr	r2, [pc, #320]	@ (80004c4 <MX_TIM1_Init_20kHz+0x14c>)
 8000384:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000388:	6613      	str	r3, [r2, #96]	@ 0x60
 800038a:	4b4e      	ldr	r3, [pc, #312]	@ (80004c4 <MX_TIM1_Init_20kHz+0x14c>)
 800038c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800038e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000392:	603b      	str	r3, [r7, #0]
 8000394:	683b      	ldr	r3, [r7, #0]

	// Com 170 MHz e center-aligned: f_pwm = f_tim / (2*(ARR+1))
	// Para ~20 kHz -> ARR ≈ 4249
	htim1.Instance = TIM1;
 8000396:	4b4c      	ldr	r3, [pc, #304]	@ (80004c8 <MX_TIM1_Init_20kHz+0x150>)
 8000398:	4a4c      	ldr	r2, [pc, #304]	@ (80004cc <MX_TIM1_Init_20kHz+0x154>)
 800039a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800039c:	4b4a      	ldr	r3, [pc, #296]	@ (80004c8 <MX_TIM1_Init_20kHz+0x150>)
 800039e:	2200      	movs	r2, #0
 80003a0:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80003a2:	4b49      	ldr	r3, [pc, #292]	@ (80004c8 <MX_TIM1_Init_20kHz+0x150>)
 80003a4:	2220      	movs	r2, #32
 80003a6:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 4249;
 80003a8:	4b47      	ldr	r3, [pc, #284]	@ (80004c8 <MX_TIM1_Init_20kHz+0x150>)
 80003aa:	f241 0299 	movw	r2, #4249	@ 0x1099
 80003ae:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b0:	4b45      	ldr	r3, [pc, #276]	@ (80004c8 <MX_TIM1_Init_20kHz+0x150>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80003b6:	4b44      	ldr	r3, [pc, #272]	@ (80004c8 <MX_TIM1_Init_20kHz+0x150>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003bc:	4b42      	ldr	r3, [pc, #264]	@ (80004c8 <MX_TIM1_Init_20kHz+0x150>)
 80003be:	2280      	movs	r2, #128	@ 0x80
 80003c0:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim1);
 80003c2:	4841      	ldr	r0, [pc, #260]	@ (80004c8 <MX_TIM1_Init_20kHz+0x150>)
 80003c4:	f001 fcb4 	bl	8001d30 <HAL_TIM_Base_Init>

	HAL_TIM_PWM_Init(&htim1);
 80003c8:	483f      	ldr	r0, [pc, #252]	@ (80004c8 <MX_TIM1_Init_20kHz+0x150>)
 80003ca:	f001 fd08 	bl	8001dde <HAL_TIM_PWM_Init>

	TIM_ClockConfigTypeDef clk = { 0 };
 80003ce:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
	clk.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003e0:	663b      	str	r3, [r7, #96]	@ 0x60
	HAL_TIM_ConfigClockSource(&htim1, &clk);
 80003e2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80003e6:	4619      	mov	r1, r3
 80003e8:	4837      	ldr	r0, [pc, #220]	@ (80004c8 <MX_TIM1_Init_20kHz+0x150>)
 80003ea:	f002 f8cf 	bl	800258c <HAL_TIM_ConfigClockSource>

	TIM_MasterConfigTypeDef master = { 0 };
 80003ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
	master.MasterOutputTrigger = TIM_TRGO_RESET;
 80003fa:	2300      	movs	r3, #0
 80003fc:	657b      	str	r3, [r7, #84]	@ 0x54
	master.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003fe:	2300      	movs	r3, #0
 8000400:	65bb      	str	r3, [r7, #88]	@ 0x58
	master.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000402:	2300      	movs	r3, #0
 8000404:	65fb      	str	r3, [r7, #92]	@ 0x5c
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &master);
 8000406:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800040a:	4619      	mov	r1, r3
 800040c:	482e      	ldr	r0, [pc, #184]	@ (80004c8 <MX_TIM1_Init_20kHz+0x150>)
 800040e:	f002 ff53 	bl	80032b8 <HAL_TIMEx_MasterConfigSynchronization>

	TIM_OC_InitTypeDef oc = { 0 };
 8000412:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]
 8000420:	611a      	str	r2, [r3, #16]
 8000422:	615a      	str	r2, [r3, #20]
 8000424:	619a      	str	r2, [r3, #24]
	oc.OCMode = TIM_OCMODE_PWM1;
 8000426:	2360      	movs	r3, #96	@ 0x60
 8000428:	63bb      	str	r3, [r7, #56]	@ 0x38
	oc.Pulse = 0; // duty inicial 0
 800042a:	2300      	movs	r3, #0
 800042c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	oc.OCPolarity = TIM_OCPOLARITY_HIGH;
 800042e:	2300      	movs	r3, #0
 8000430:	643b      	str	r3, [r7, #64]	@ 0x40
	oc.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000432:	2300      	movs	r3, #0
 8000434:	647b      	str	r3, [r7, #68]	@ 0x44
	oc.OCFastMode = TIM_OCFAST_DISABLE;
 8000436:	2300      	movs	r3, #0
 8000438:	64bb      	str	r3, [r7, #72]	@ 0x48
	oc.OCIdleState = TIM_OCIDLESTATE_RESET;
 800043a:	2300      	movs	r3, #0
 800043c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	oc.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800043e:	2300      	movs	r3, #0
 8000440:	653b      	str	r3, [r7, #80]	@ 0x50

	HAL_TIM_PWM_ConfigChannel(&htim1, &oc, TIM_CHANNEL_1);
 8000442:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000446:	2200      	movs	r2, #0
 8000448:	4619      	mov	r1, r3
 800044a:	481f      	ldr	r0, [pc, #124]	@ (80004c8 <MX_TIM1_Init_20kHz+0x150>)
 800044c:	f001 ff8a 	bl	8002364 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_ConfigChannel(&htim1, &oc, TIM_CHANNEL_2);
 8000450:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000454:	2204      	movs	r2, #4
 8000456:	4619      	mov	r1, r3
 8000458:	481b      	ldr	r0, [pc, #108]	@ (80004c8 <MX_TIM1_Init_20kHz+0x150>)
 800045a:	f001 ff83 	bl	8002364 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_ConfigChannel(&htim1, &oc, TIM_CHANNEL_3);
 800045e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000462:	2208      	movs	r2, #8
 8000464:	4619      	mov	r1, r3
 8000466:	4818      	ldr	r0, [pc, #96]	@ (80004c8 <MX_TIM1_Init_20kHz+0x150>)
 8000468:	f001 ff7c 	bl	8002364 <HAL_TIM_PWM_ConfigChannel>

	// Dead-time / Break
	TIM_BreakDeadTimeConfigTypeDef bd = { 0 };
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	2234      	movs	r2, #52	@ 0x34
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f003 fe80 	bl	8004178 <memset>
	bd.OffStateRunMode = TIM_OSSR_ENABLE;
 8000478:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800047c:	607b      	str	r3, [r7, #4]
	bd.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800047e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000482:	60bb      	str	r3, [r7, #8]
	bd.LockLevel = TIM_LOCKLEVEL_OFF;
 8000484:	2300      	movs	r3, #0
 8000486:	60fb      	str	r3, [r7, #12]

	// deadtime ~250 ns (ajuste conforme driver/MOSFET)
	// Em G4, escala depende de CKD; use HAL_TIMEx_ConfigBreakDeadTime para montar
	bd.DeadTime = 50; // valor aproximado; calibre depois!
 8000488:	2332      	movs	r3, #50	@ 0x32
 800048a:	613b      	str	r3, [r7, #16]
	bd.BreakState = TIM_BREAK_DISABLE;   // habilite quando ligar a proteção
 800048c:	2300      	movs	r3, #0
 800048e:	617b      	str	r3, [r7, #20]
	bd.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000490:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000494:	61bb      	str	r3, [r7, #24]
	bd.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000496:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800049a:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_TIMEx_ConfigBreakDeadTime(&htim1, &bd);
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	4619      	mov	r1, r3
 80004a0:	4809      	ldr	r0, [pc, #36]	@ (80004c8 <MX_TIM1_Init_20kHz+0x150>)
 80004a2:	f002 ff9f 	bl	80033e4 <HAL_TIMEx_ConfigBreakDeadTime>

	HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2101      	movs	r1, #1
 80004aa:	2019      	movs	r0, #25
 80004ac:	f000 fcad 	bl	8000e0a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80004b0:	2019      	movs	r0, #25
 80004b2:	f000 fcc4 	bl	8000e3e <HAL_NVIC_EnableIRQ>

	HAL_TIM_MspPostInit(&htim1);
 80004b6:	4804      	ldr	r0, [pc, #16]	@ (80004c8 <MX_TIM1_Init_20kHz+0x150>)
 80004b8:	f000 f8aa 	bl	8000610 <HAL_TIM_MspPostInit>

}
 80004bc:	bf00      	nop
 80004be:	3770      	adds	r7, #112	@ 0x70
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	40021000 	.word	0x40021000
 80004c8:	20000040 	.word	0x20000040
 80004cc:	40012c00 	.word	0x40012c00

080004d0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80004d6:	f107 030c 	add.w	r3, r7, #12
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000560 <MX_GPIO_Init+0x90>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ea:	4a1d      	ldr	r2, [pc, #116]	@ (8000560 <MX_GPIO_Init+0x90>)
 80004ec:	f043 0304 	orr.w	r3, r3, #4
 80004f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000560 <MX_GPIO_Init+0x90>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004f6:	f003 0304 	and.w	r3, r3, #4
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80004fe:	4b18      	ldr	r3, [pc, #96]	@ (8000560 <MX_GPIO_Init+0x90>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000502:	4a17      	ldr	r2, [pc, #92]	@ (8000560 <MX_GPIO_Init+0x90>)
 8000504:	f043 0302 	orr.w	r3, r3, #2
 8000508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800050a:	4b15      	ldr	r3, [pc, #84]	@ (8000560 <MX_GPIO_Init+0x90>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800050e:	f003 0302 	and.w	r3, r3, #2
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	4b12      	ldr	r3, [pc, #72]	@ (8000560 <MX_GPIO_Init+0x90>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051a:	4a11      	ldr	r2, [pc, #68]	@ (8000560 <MX_GPIO_Init+0x90>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000522:	4b0f      	ldr	r3, [pc, #60]	@ (8000560 <MX_GPIO_Init+0x90>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800052e:	2201      	movs	r2, #1
 8000530:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000534:	480b      	ldr	r0, [pc, #44]	@ (8000564 <MX_GPIO_Init+0x94>)
 8000536:	f000 fe1f 	bl	8001178 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_BLUE_Pin */
	GPIO_InitStruct.Pin = LED_BLUE_Pin;
 800053a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800053e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000540:	2301      	movs	r3, #1
 8000542:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000544:	2301      	movs	r3, #1
 8000546:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	2300      	movs	r3, #0
 800054a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	4619      	mov	r1, r3
 8000552:	4804      	ldr	r0, [pc, #16]	@ (8000564 <MX_GPIO_Init+0x94>)
 8000554:	f000 fc8e 	bl	8000e74 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000558:	bf00      	nop
 800055a:	3720      	adds	r7, #32
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40021000 	.word	0x40021000
 8000564:	48000800 	.word	0x48000800

08000568 <TIM1_UP_TIM16_IRQHandler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */

void TIM1_UP_TIM16_IRQHandler(void){
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim1);
 800056c:	4802      	ldr	r0, [pc, #8]	@ (8000578 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800056e:	f001 fda9 	bl	80020c4 <HAL_TIM_IRQHandler>
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000040 	.word	0x20000040

0800057c <Error_Handler>:

void Error_Handler(void) {
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000580:	b672      	cpsid	i
}
 8000582:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000584:	bf00      	nop
 8000586:	e7fd      	b.n	8000584 <Error_Handler+0x8>

08000588 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058e:	4b0f      	ldr	r3, [pc, #60]	@ (80005cc <HAL_MspInit+0x44>)
 8000590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000592:	4a0e      	ldr	r2, [pc, #56]	@ (80005cc <HAL_MspInit+0x44>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6613      	str	r3, [r2, #96]	@ 0x60
 800059a:	4b0c      	ldr	r3, [pc, #48]	@ (80005cc <HAL_MspInit+0x44>)
 800059c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a6:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <HAL_MspInit+0x44>)
 80005a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005aa:	4a08      	ldr	r2, [pc, #32]	@ (80005cc <HAL_MspInit+0x44>)
 80005ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80005b2:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <HAL_MspInit+0x44>)
 80005b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80005be:	f000 feb1 	bl	8001324 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40021000 	.word	0x40021000

080005d0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000608 <HAL_TIM_Base_MspInit+0x38>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d10b      	bne.n	80005fa <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005e2:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <HAL_TIM_Base_MspInit+0x3c>)
 80005e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005e6:	4a09      	ldr	r2, [pc, #36]	@ (800060c <HAL_TIM_Base_MspInit+0x3c>)
 80005e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80005ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80005ee:	4b07      	ldr	r3, [pc, #28]	@ (800060c <HAL_TIM_Base_MspInit+0x3c>)
 80005f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40012c00 	.word	0x40012c00
 800060c:	40021000 	.word	0x40021000

08000610 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	@ 0x28
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a29      	ldr	r2, [pc, #164]	@ (80006d4 <HAL_TIM_MspPostInit+0xc4>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d14b      	bne.n	80006ca <HAL_TIM_MspPostInit+0xba>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	4b29      	ldr	r3, [pc, #164]	@ (80006d8 <HAL_TIM_MspPostInit+0xc8>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000636:	4a28      	ldr	r2, [pc, #160]	@ (80006d8 <HAL_TIM_MspPostInit+0xc8>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800063e:	4b26      	ldr	r3, [pc, #152]	@ (80006d8 <HAL_TIM_MspPostInit+0xc8>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b23      	ldr	r3, [pc, #140]	@ (80006d8 <HAL_TIM_MspPostInit+0xc8>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	4a22      	ldr	r2, [pc, #136]	@ (80006d8 <HAL_TIM_MspPostInit+0xc8>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000656:	4b20      	ldr	r3, [pc, #128]	@ (80006d8 <HAL_TIM_MspPostInit+0xc8>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PA_LIN_Pin|PB_LIN_Pin;
 8000662:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000668:	2302      	movs	r3, #2
 800066a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000670:	2303      	movs	r3, #3
 8000672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000674:	2306      	movs	r3, #6
 8000676:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	4817      	ldr	r0, [pc, #92]	@ (80006dc <HAL_TIM_MspPostInit+0xcc>)
 8000680:	f000 fbf8 	bl	8000e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PC_LIN_Pin;
 8000684:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000692:	2303      	movs	r3, #3
 8000694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8000696:	2304      	movs	r3, #4
 8000698:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PC_LIN_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	480e      	ldr	r0, [pc, #56]	@ (80006dc <HAL_TIM_MspPostInit+0xcc>)
 80006a2:	f000 fbe7 	bl	8000e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PA_HIN_Pin|PB_HIN_Pin|PC_HIN_Pin;
 80006a6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80006aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ac:	2302      	movs	r3, #2
 80006ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b4:	2303      	movs	r3, #3
 80006b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80006b8:	2306      	movs	r3, #6
 80006ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c6:	f000 fbd5 	bl	8000e74 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80006ca:	bf00      	nop
 80006cc:	3728      	adds	r7, #40	@ 0x28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40012c00 	.word	0x40012c00
 80006d8:	40021000 	.word	0x40021000
 80006dc:	48000400 	.word	0x48000400

080006e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <NMI_Handler+0x4>

080006e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <HardFault_Handler+0x4>

080006f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <MemManage_Handler+0x4>

080006f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <BusFault_Handler+0x4>

08000700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <UsageFault_Handler+0x4>

08000708 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000736:	f000 fa6f 	bl	8000c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000744:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <SystemInit+0x20>)
 8000746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800074a:	4a05      	ldr	r2, [pc, #20]	@ (8000760 <SystemInit+0x20>)
 800074c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000750:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <clampf>:

#include <math.h>
#include "foc/foc_openloop.h"
#include "definitions.h"

static inline float clampf(float x, float a, float b){ return x<a?a:(x>b?b:x); }
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	ed87 0a03 	vstr	s0, [r7, #12]
 800076e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000772:	ed87 1a01 	vstr	s2, [r7, #4]
 8000776:	ed97 7a03 	vldr	s14, [r7, #12]
 800077a:	edd7 7a02 	vldr	s15, [r7, #8]
 800077e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000786:	d501      	bpl.n	800078c <clampf+0x28>
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	e00b      	b.n	80007a4 <clampf+0x40>
 800078c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000790:	edd7 7a01 	vldr	s15, [r7, #4]
 8000794:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079c:	dd01      	ble.n	80007a2 <clampf+0x3e>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	e000      	b.n	80007a4 <clampf+0x40>
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	ee07 3a90 	vmov	s15, r3
 80007a8:	eeb0 0a67 	vmov.f32	s0, s15
 80007ac:	3714      	adds	r7, #20
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
	...

080007b8 <OpenLoopFOC_Init>:

void OpenLoopFOC_Init(OpenLoopFOC_t *s, float vbus, float loop_hz){
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80007c4:	edc7 0a01 	vstr	s1, [r7, #4]
  s->vbus    = vbus;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	601a      	str	r2, [r3, #0]
  s->v_limit = SVPWM_LIMIT_K * vbus;
 80007ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80007d2:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000814 <OpenLoopFOC_Init+0x5c>
 80007d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	edc3 7a01 	vstr	s15, [r3, #4]
  s->uq_set  = OL_UQ_V;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80007e6:	609a      	str	r2, [r3, #8]
  s->w_elec  = 2.0f * (float)M_PI * OL_FREQ_ELEC_HZ;
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000818 <OpenLoopFOC_Init+0x60>)
 80007ec:	60da      	str	r2, [r3, #12]
  s->theta   = 0.0f;
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	f04f 0200 	mov.w	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  s->dt      = 1.0f / loop_hz;
 80007f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80007fa:	ed97 7a01 	vldr	s14, [r7, #4]
 80007fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8000808:	bf00      	nop
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	3f5db22d 	.word	0x3f5db22d
 8000818:	41fb53d2 	.word	0x41fb53d2

0800081c <svpwm>:

// Apply SVPWM to TIM1
static inline void svpwm(float Ud, float Uq, float theta,
                         float v_limit, float vbus,
                         uint32_t period, TIM_HandleTypeDef *htim)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b096      	sub	sp, #88	@ 0x58
 8000820:	af00      	add	r7, sp, #0
 8000822:	ed87 0a07 	vstr	s0, [r7, #28]
 8000826:	edc7 0a06 	vstr	s1, [r7, #24]
 800082a:	ed87 1a05 	vstr	s2, [r7, #20]
 800082e:	edc7 1a04 	vstr	s3, [r7, #16]
 8000832:	ed87 2a03 	vstr	s4, [r7, #12]
 8000836:	60b8      	str	r0, [r7, #8]
 8000838:	6079      	str	r1, [r7, #4]
  // Inverse Park transform
  float s = sinf(theta), c = cosf(theta);
 800083a:	ed97 0a05 	vldr	s0, [r7, #20]
 800083e:	f002 ff15 	bl	800366c <sinf>
 8000842:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54
 8000846:	ed97 0a05 	vldr	s0, [r7, #20]
 800084a:	f002 fecb 	bl	80035e4 <cosf>
 800084e:	ed87 0a14 	vstr	s0, [r7, #80]	@ 0x50
  float Ualpha =  c*Ud - s*Uq;
 8000852:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8000856:	edd7 7a07 	vldr	s15, [r7, #28]
 800085a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800085e:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8000862:	edd7 7a06 	vldr	s15, [r7, #24]
 8000866:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800086a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800086e:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
  float Ubeta  =  s*Ud + c*Uq;
 8000872:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8000876:	edd7 7a07 	vldr	s15, [r7, #28]
 800087a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800087e:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8000882:	edd7 7a06 	vldr	s15, [r7, #24]
 8000886:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800088a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800088e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

  // Clarke transform (αβ → abc)
  float Ua = Ualpha;
 8000892:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000894:	647b      	str	r3, [r7, #68]	@ 0x44
  float Ub = -0.5f*Ualpha + _SQRT3_2*Ubeta;
 8000896:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800089a:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800089e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008a2:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80008a6:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 8000a58 <svpwm+0x23c>
 80008aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80008ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008b2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
  float Uc = -0.5f*Ualpha - _SQRT3_2*Ubeta;
 80008b6:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80008ba:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80008be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008c2:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80008c6:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8000a58 <svpwm+0x23c>
 80008ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80008ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008d2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

  // Center voltage shift
  float Umin = fminf(Ua, fminf(Ub, Uc));
 80008d6:	edd7 0a0f 	vldr	s1, [r7, #60]	@ 0x3c
 80008da:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 80008de:	f002 ff28 	bl	8003732 <fminf>
 80008e2:	eef0 7a40 	vmov.f32	s15, s0
 80008e6:	eef0 0a67 	vmov.f32	s1, s15
 80008ea:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 80008ee:	f002 ff20 	bl	8003732 <fminf>
 80008f2:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
  float Umax = fmaxf(Ua, fmaxf(Ub, Uc));
 80008f6:	edd7 0a0f 	vldr	s1, [r7, #60]	@ 0x3c
 80008fa:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 80008fe:	f002 fefb 	bl	80036f8 <fmaxf>
 8000902:	eef0 7a40 	vmov.f32	s15, s0
 8000906:	eef0 0a67 	vmov.f32	s1, s15
 800090a:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 800090e:	f002 fef3 	bl	80036f8 <fmaxf>
 8000912:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
  float center = -0.5f*(Umax + Umin);
 8000916:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800091a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800091e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000922:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8000926:	ee67 7a87 	vmul.f32	s15, s15, s14
 800092a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

  Ua = clampf(Ua+center, 0.0f, v_limit);
 800092e:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000932:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800093a:	ed97 1a04 	vldr	s2, [r7, #16]
 800093e:	eddf 0a47 	vldr	s1, [pc, #284]	@ 8000a5c <svpwm+0x240>
 8000942:	eeb0 0a67 	vmov.f32	s0, s15
 8000946:	f7ff ff0d 	bl	8000764 <clampf>
 800094a:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
  Ub = clampf(Ub+center, 0.0f, v_limit);
 800094e:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8000952:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800095a:	ed97 1a04 	vldr	s2, [r7, #16]
 800095e:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 8000a5c <svpwm+0x240>
 8000962:	eeb0 0a67 	vmov.f32	s0, s15
 8000966:	f7ff fefd 	bl	8000764 <clampf>
 800096a:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40
  Uc = clampf(Uc+center, 0.0f, v_limit);
 800096e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000972:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800097a:	ed97 1a04 	vldr	s2, [r7, #16]
 800097e:	eddf 0a37 	vldr	s1, [pc, #220]	@ 8000a5c <svpwm+0x240>
 8000982:	eeb0 0a67 	vmov.f32	s0, s15
 8000986:	f7ff feed 	bl	8000764 <clampf>
 800098a:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c

  // Duty cycles [0..1]
  float da = clampf(Ua/vbus, 0.0f, 1.0f);
 800098e:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000992:	edd7 7a03 	vldr	s15, [r7, #12]
 8000996:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800099a:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 800099e:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8000a5c <svpwm+0x240>
 80009a2:	eeb0 0a66 	vmov.f32	s0, s13
 80009a6:	f7ff fedd 	bl	8000764 <clampf>
 80009aa:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
  float db = clampf(Ub/vbus, 0.0f, 1.0f);
 80009ae:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80009b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80009b6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80009ba:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80009be:	eddf 0a27 	vldr	s1, [pc, #156]	@ 8000a5c <svpwm+0x240>
 80009c2:	eeb0 0a66 	vmov.f32	s0, s13
 80009c6:	f7ff fecd 	bl	8000764 <clampf>
 80009ca:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
  float dc = clampf(Uc/vbus, 0.0f, 1.0f);
 80009ce:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80009d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80009d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80009da:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80009de:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 8000a5c <svpwm+0x240>
 80009e2:	eeb0 0a66 	vmov.f32	s0, s13
 80009e6:	f7ff febd 	bl	8000764 <clampf>
 80009ea:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

  __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, (uint32_t)(da*period));
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	ee07 3a90 	vmov	s15, r3
 80009f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009f8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80009fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a08:	ee17 2a90 	vmov	r2, s15
 8000a0c:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, (uint32_t)(db*period));
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	ee07 3a90 	vmov	s15, r3
 8000a14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a18:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a28:	ee17 2a90 	vmov	r2, s15
 8000a2c:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, (uint32_t)(dc*period));
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	ee07 3a90 	vmov	s15, r3
 8000a34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a38:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a48:	ee17 2a90 	vmov	r2, s15
 8000a4c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000a4e:	bf00      	nop
 8000a50:	3758      	adds	r7, #88	@ 0x58
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	3f5db3d7 	.word	0x3f5db3d7
 8000a5c:	00000000 	.word	0x00000000

08000a60 <OpenLoopFOC_Step>:

// One FOC open-loop step (called every PWM period)
void OpenLoopFOC_Step(OpenLoopFOC_t *s, TIM_HandleTypeDef *htim1){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
  // Integrate electrical angle
  s->theta += s->w_elec * s->dt;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	ed93 7a04 	vldr	s14, [r3, #16]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	edd3 6a03 	vldr	s13, [r3, #12]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	edd3 7a05 	vldr	s15, [r3, #20]
 8000a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	edc3 7a04 	vstr	s15, [r3, #16]
  if (s->theta >= TWO_PI) s->theta -= TWO_PI;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000a90:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8000b18 <OpenLoopFOC_Step+0xb8>
 8000a94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a9c:	db09      	blt.n	8000ab2 <OpenLoopFOC_Step+0x52>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	edd3 7a04 	vldr	s15, [r3, #16]
 8000aa4:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8000b18 <OpenLoopFOC_Step+0xb8>
 8000aa8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	edc3 7a04 	vstr	s15, [r3, #16]

  // Open-loop: Ud = 0, Uq = constant
  const float Ud = 0.0f;
 8000ab2:	f04f 0300 	mov.w	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
  const float Uq = clampf(s->uq_set, 0.0f, s->v_limit);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	edd3 7a02 	vldr	s15, [r3, #8]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ac4:	eeb0 1a47 	vmov.f32	s2, s14
 8000ac8:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8000b1c <OpenLoopFOC_Step+0xbc>
 8000acc:	eeb0 0a67 	vmov.f32	s0, s15
 8000ad0:	f7ff fe48 	bl	8000764 <clampf>
 8000ad4:	ed87 0a04 	vstr	s0, [r7, #16]

  uint32_t arr = __HAL_TIM_GET_AUTORELOAD(htim1);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ade:	60fb      	str	r3, [r7, #12]
  svpwm(Ud, Uq, s->theta, s->v_limit, s->vbus, arr, htim1);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	edd3 7a04 	vldr	s15, [r3, #16]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	ed93 7a01 	vldr	s14, [r3, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	edd3 6a00 	vldr	s13, [r3]
 8000af2:	6839      	ldr	r1, [r7, #0]
 8000af4:	68f8      	ldr	r0, [r7, #12]
 8000af6:	eeb0 2a66 	vmov.f32	s4, s13
 8000afa:	eef0 1a47 	vmov.f32	s3, s14
 8000afe:	eeb0 1a67 	vmov.f32	s2, s15
 8000b02:	edd7 0a04 	vldr	s1, [r7, #16]
 8000b06:	ed97 0a05 	vldr	s0, [r7, #20]
 8000b0a:	f7ff fe87 	bl	800081c <svpwm>
}
 8000b0e:	bf00      	nop
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40c90fdb 	.word	0x40c90fdb
 8000b1c:	00000000 	.word	0x00000000

08000b20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b20:	480d      	ldr	r0, [pc, #52]	@ (8000b58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b22:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b24:	f7ff fe0c 	bl	8000740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b28:	480c      	ldr	r0, [pc, #48]	@ (8000b5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b2a:	490d      	ldr	r1, [pc, #52]	@ (8000b60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b64 <LoopForever+0xe>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b30:	e002      	b.n	8000b38 <LoopCopyDataInit>

08000b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b36:	3304      	adds	r3, #4

08000b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b3c:	d3f9      	bcc.n	8000b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b40:	4c0a      	ldr	r4, [pc, #40]	@ (8000b6c <LoopForever+0x16>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b44:	e001      	b.n	8000b4a <LoopFillZerobss>

08000b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b48:	3204      	adds	r2, #4

08000b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b4c:	d3fb      	bcc.n	8000b46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b4e:	f003 fb1b 	bl	8004188 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b52:	f7ff fbb9 	bl	80002c8 <main>

08000b56 <LoopForever>:

LoopForever:
    b LoopForever
 8000b56:	e7fe      	b.n	8000b56 <LoopForever>
  ldr   r0, =_estack
 8000b58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b64:	080045d0 	.word	0x080045d0
  ldr r2, =_sbss
 8000b68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b6c:	20000090 	.word	0x20000090

08000b70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b70:	e7fe      	b.n	8000b70 <ADC1_2_IRQHandler>

08000b72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7c:	2003      	movs	r0, #3
 8000b7e:	f000 f939 	bl	8000df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b82:	200f      	movs	r0, #15
 8000b84:	f000 f80e 	bl	8000ba4 <HAL_InitTick>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d002      	beq.n	8000b94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	71fb      	strb	r3, [r7, #7]
 8000b92:	e001      	b.n	8000b98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b94:	f7ff fcf8 	bl	8000588 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b98:	79fb      	ldrb	r3, [r7, #7]

}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bac:	2300      	movs	r3, #0
 8000bae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bb0:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <HAL_InitTick+0x68>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d022      	beq.n	8000bfe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bb8:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <HAL_InitTick+0x6c>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <HAL_InitTick+0x68>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000bc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 f944 	bl	8000e5a <HAL_SYSTICK_Config>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d10f      	bne.n	8000bf8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b0f      	cmp	r3, #15
 8000bdc:	d809      	bhi.n	8000bf2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bde:	2200      	movs	r2, #0
 8000be0:	6879      	ldr	r1, [r7, #4]
 8000be2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be6:	f000 f910 	bl	8000e0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bea:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <HAL_InitTick+0x70>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	e007      	b.n	8000c02 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	73fb      	strb	r3, [r7, #15]
 8000bf6:	e004      	b.n	8000c02 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	73fb      	strb	r3, [r7, #15]
 8000bfc:	e001      	b.n	8000c02 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	20000000 	.word	0x20000000
 8000c14:	20000004 	.word	0x20000004

08000c18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c1c:	4b05      	ldr	r3, [pc, #20]	@ (8000c34 <HAL_IncTick+0x1c>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b05      	ldr	r3, [pc, #20]	@ (8000c38 <HAL_IncTick+0x20>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4413      	add	r3, r2
 8000c26:	4a03      	ldr	r2, [pc, #12]	@ (8000c34 <HAL_IncTick+0x1c>)
 8000c28:	6013      	str	r3, [r2, #0]
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	2000008c 	.word	0x2000008c
 8000c38:	20000008 	.word	0x20000008

08000c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c40:	4b03      	ldr	r3, [pc, #12]	@ (8000c50 <HAL_GetTick+0x14>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	2000008c 	.word	0x2000008c

08000c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c64:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c70:	4013      	ands	r3, r2
 8000c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c86:	4a04      	ldr	r2, [pc, #16]	@ (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	60d3      	str	r3, [r2, #12]
}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca0:	4b04      	ldr	r3, [pc, #16]	@ (8000cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	f003 0307 	and.w	r3, r3, #7
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db0b      	blt.n	8000ce2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	f003 021f 	and.w	r2, r3, #31
 8000cd0:	4907      	ldr	r1, [pc, #28]	@ (8000cf0 <__NVIC_EnableIRQ+0x38>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	095b      	lsrs	r3, r3, #5
 8000cd8:	2001      	movs	r0, #1
 8000cda:	fa00 f202 	lsl.w	r2, r0, r2
 8000cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000e100 	.word	0xe000e100

08000cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	db0a      	blt.n	8000d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	490c      	ldr	r1, [pc, #48]	@ (8000d40 <__NVIC_SetPriority+0x4c>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	0112      	lsls	r2, r2, #4
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	440b      	add	r3, r1
 8000d18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d1c:	e00a      	b.n	8000d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4908      	ldr	r1, [pc, #32]	@ (8000d44 <__NVIC_SetPriority+0x50>)
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	f003 030f 	and.w	r3, r3, #15
 8000d2a:	3b04      	subs	r3, #4
 8000d2c:	0112      	lsls	r2, r2, #4
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	440b      	add	r3, r1
 8000d32:	761a      	strb	r2, [r3, #24]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000e100 	.word	0xe000e100
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	@ 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f1c3 0307 	rsb	r3, r3, #7
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	bf28      	it	cs
 8000d66:	2304      	movcs	r3, #4
 8000d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	2b06      	cmp	r3, #6
 8000d70:	d902      	bls.n	8000d78 <NVIC_EncodePriority+0x30>
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3b03      	subs	r3, #3
 8000d76:	e000      	b.n	8000d7a <NVIC_EncodePriority+0x32>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43da      	mvns	r2, r3
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	43d9      	mvns	r1, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	4313      	orrs	r3, r2
         );
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3724      	adds	r7, #36	@ 0x24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
	...

08000db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dc0:	d301      	bcc.n	8000dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e00f      	b.n	8000de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000df0 <SysTick_Config+0x40>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dce:	210f      	movs	r1, #15
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dd4:	f7ff ff8e 	bl	8000cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd8:	4b05      	ldr	r3, [pc, #20]	@ (8000df0 <SysTick_Config+0x40>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dde:	4b04      	ldr	r3, [pc, #16]	@ (8000df0 <SysTick_Config+0x40>)
 8000de0:	2207      	movs	r2, #7
 8000de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	e000e010 	.word	0xe000e010

08000df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff ff29 	bl	8000c54 <__NVIC_SetPriorityGrouping>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e18:	f7ff ff40 	bl	8000c9c <__NVIC_GetPriorityGrouping>
 8000e1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	68b9      	ldr	r1, [r7, #8]
 8000e22:	6978      	ldr	r0, [r7, #20]
 8000e24:	f7ff ff90 	bl	8000d48 <NVIC_EncodePriority>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff5f 	bl	8000cf4 <__NVIC_SetPriority>
}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff33 	bl	8000cb8 <__NVIC_EnableIRQ>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ffa4 	bl	8000db0 <SysTick_Config>
 8000e68:	4603      	mov	r3, r0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b087      	sub	sp, #28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e82:	e15a      	b.n	800113a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	2101      	movs	r1, #1
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e90:	4013      	ands	r3, r2
 8000e92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f000 814c 	beq.w	8001134 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d005      	beq.n	8000eb4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d130      	bne.n	8000f16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	68da      	ldr	r2, [r3, #12]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eea:	2201      	movs	r2, #1
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	091b      	lsrs	r3, r3, #4
 8000f00:	f003 0201 	and.w	r2, r3, #1
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	2b03      	cmp	r3, #3
 8000f20:	d017      	beq.n	8000f52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d123      	bne.n	8000fa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	08da      	lsrs	r2, r3, #3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3208      	adds	r2, #8
 8000f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	220f      	movs	r2, #15
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	691a      	ldr	r2, [r3, #16]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	08da      	lsrs	r2, r3, #3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3208      	adds	r2, #8
 8000fa0:	6939      	ldr	r1, [r7, #16]
 8000fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0203 	and.w	r2, r3, #3
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f000 80a6 	beq.w	8001134 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe8:	4b5b      	ldr	r3, [pc, #364]	@ (8001158 <HAL_GPIO_Init+0x2e4>)
 8000fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fec:	4a5a      	ldr	r2, [pc, #360]	@ (8001158 <HAL_GPIO_Init+0x2e4>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ff4:	4b58      	ldr	r3, [pc, #352]	@ (8001158 <HAL_GPIO_Init+0x2e4>)
 8000ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001000:	4a56      	ldr	r2, [pc, #344]	@ (800115c <HAL_GPIO_Init+0x2e8>)
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	089b      	lsrs	r3, r3, #2
 8001006:	3302      	adds	r3, #2
 8001008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	220f      	movs	r2, #15
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800102a:	d01f      	beq.n	800106c <HAL_GPIO_Init+0x1f8>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a4c      	ldr	r2, [pc, #304]	@ (8001160 <HAL_GPIO_Init+0x2ec>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d019      	beq.n	8001068 <HAL_GPIO_Init+0x1f4>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a4b      	ldr	r2, [pc, #300]	@ (8001164 <HAL_GPIO_Init+0x2f0>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d013      	beq.n	8001064 <HAL_GPIO_Init+0x1f0>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a4a      	ldr	r2, [pc, #296]	@ (8001168 <HAL_GPIO_Init+0x2f4>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d00d      	beq.n	8001060 <HAL_GPIO_Init+0x1ec>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a49      	ldr	r2, [pc, #292]	@ (800116c <HAL_GPIO_Init+0x2f8>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d007      	beq.n	800105c <HAL_GPIO_Init+0x1e8>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a48      	ldr	r2, [pc, #288]	@ (8001170 <HAL_GPIO_Init+0x2fc>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d101      	bne.n	8001058 <HAL_GPIO_Init+0x1e4>
 8001054:	2305      	movs	r3, #5
 8001056:	e00a      	b.n	800106e <HAL_GPIO_Init+0x1fa>
 8001058:	2306      	movs	r3, #6
 800105a:	e008      	b.n	800106e <HAL_GPIO_Init+0x1fa>
 800105c:	2304      	movs	r3, #4
 800105e:	e006      	b.n	800106e <HAL_GPIO_Init+0x1fa>
 8001060:	2303      	movs	r3, #3
 8001062:	e004      	b.n	800106e <HAL_GPIO_Init+0x1fa>
 8001064:	2302      	movs	r3, #2
 8001066:	e002      	b.n	800106e <HAL_GPIO_Init+0x1fa>
 8001068:	2301      	movs	r3, #1
 800106a:	e000      	b.n	800106e <HAL_GPIO_Init+0x1fa>
 800106c:	2300      	movs	r3, #0
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	f002 0203 	and.w	r2, r2, #3
 8001074:	0092      	lsls	r2, r2, #2
 8001076:	4093      	lsls	r3, r2
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800107e:	4937      	ldr	r1, [pc, #220]	@ (800115c <HAL_GPIO_Init+0x2e8>)
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	089b      	lsrs	r3, r3, #2
 8001084:	3302      	adds	r3, #2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800108c:	4b39      	ldr	r3, [pc, #228]	@ (8001174 <HAL_GPIO_Init+0x300>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	43db      	mvns	r3, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010b0:	4a30      	ldr	r2, [pc, #192]	@ (8001174 <HAL_GPIO_Init+0x300>)
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001174 <HAL_GPIO_Init+0x300>)
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	43db      	mvns	r3, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010da:	4a26      	ldr	r2, [pc, #152]	@ (8001174 <HAL_GPIO_Init+0x300>)
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80010e0:	4b24      	ldr	r3, [pc, #144]	@ (8001174 <HAL_GPIO_Init+0x300>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001104:	4a1b      	ldr	r2, [pc, #108]	@ (8001174 <HAL_GPIO_Init+0x300>)
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800110a:	4b1a      	ldr	r3, [pc, #104]	@ (8001174 <HAL_GPIO_Init+0x300>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800112e:	4a11      	ldr	r2, [pc, #68]	@ (8001174 <HAL_GPIO_Init+0x300>)
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	3301      	adds	r3, #1
 8001138:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	fa22 f303 	lsr.w	r3, r2, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	f47f ae9d 	bne.w	8000e84 <HAL_GPIO_Init+0x10>
  }
}
 800114a:	bf00      	nop
 800114c:	bf00      	nop
 800114e:	371c      	adds	r7, #28
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	40021000 	.word	0x40021000
 800115c:	40010000 	.word	0x40010000
 8001160:	48000400 	.word	0x48000400
 8001164:	48000800 	.word	0x48000800
 8001168:	48000c00 	.word	0x48000c00
 800116c:	48001000 	.word	0x48001000
 8001170:	48001400 	.word	0x48001400
 8001174:	40010400 	.word	0x40010400

08001178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	807b      	strh	r3, [r7, #2]
 8001184:	4613      	mov	r3, r2
 8001186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001188:	787b      	ldrb	r3, [r7, #1]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800118e:	887a      	ldrh	r2, [r7, #2]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001194:	e002      	b.n	800119c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001196:	887a      	ldrh	r2, [r7, #2]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011ba:	887a      	ldrh	r2, [r7, #2]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4013      	ands	r3, r2
 80011c0:	041a      	lsls	r2, r3, #16
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	43d9      	mvns	r1, r3
 80011c6:	887b      	ldrh	r3, [r7, #2]
 80011c8:	400b      	ands	r3, r1
 80011ca:	431a      	orrs	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	619a      	str	r2, [r3, #24]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d141      	bne.n	800126e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011ea:	4b4b      	ldr	r3, [pc, #300]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011f6:	d131      	bne.n	800125c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011f8:	4b47      	ldr	r3, [pc, #284]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011fe:	4a46      	ldr	r2, [pc, #280]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001200:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001204:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001208:	4b43      	ldr	r3, [pc, #268]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001210:	4a41      	ldr	r2, [pc, #260]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001212:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001216:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001218:	4b40      	ldr	r3, [pc, #256]	@ (800131c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2232      	movs	r2, #50	@ 0x32
 800121e:	fb02 f303 	mul.w	r3, r2, r3
 8001222:	4a3f      	ldr	r2, [pc, #252]	@ (8001320 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001224:	fba2 2303 	umull	r2, r3, r2, r3
 8001228:	0c9b      	lsrs	r3, r3, #18
 800122a:	3301      	adds	r3, #1
 800122c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800122e:	e002      	b.n	8001236 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	3b01      	subs	r3, #1
 8001234:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001236:	4b38      	ldr	r3, [pc, #224]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800123e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001242:	d102      	bne.n	800124a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f2      	bne.n	8001230 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800124a:	4b33      	ldr	r3, [pc, #204]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001252:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001256:	d158      	bne.n	800130a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e057      	b.n	800130c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800125c:	4b2e      	ldr	r3, [pc, #184]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800125e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001262:	4a2d      	ldr	r2, [pc, #180]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001268:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800126c:	e04d      	b.n	800130a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001274:	d141      	bne.n	80012fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001276:	4b28      	ldr	r3, [pc, #160]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800127e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001282:	d131      	bne.n	80012e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001284:	4b24      	ldr	r3, [pc, #144]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001286:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800128a:	4a23      	ldr	r2, [pc, #140]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800128c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001290:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001294:	4b20      	ldr	r3, [pc, #128]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800129c:	4a1e      	ldr	r2, [pc, #120]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800129e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012a4:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2232      	movs	r2, #50	@ 0x32
 80012aa:	fb02 f303 	mul.w	r3, r2, r3
 80012ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001320 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012b0:	fba2 2303 	umull	r2, r3, r2, r3
 80012b4:	0c9b      	lsrs	r3, r3, #18
 80012b6:	3301      	adds	r3, #1
 80012b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012ba:	e002      	b.n	80012c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	3b01      	subs	r3, #1
 80012c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012c2:	4b15      	ldr	r3, [pc, #84]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ce:	d102      	bne.n	80012d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f2      	bne.n	80012bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012d6:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012e2:	d112      	bne.n	800130a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e011      	b.n	800130c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80012f8:	e007      	b.n	800130a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012fa:	4b07      	ldr	r3, [pc, #28]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001302:	4a05      	ldr	r2, [pc, #20]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001304:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001308:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	40007000 	.word	0x40007000
 800131c:	20000000 	.word	0x20000000
 8001320:	431bde83 	.word	0x431bde83

08001324 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001328:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	4a04      	ldr	r2, [pc, #16]	@ (8001340 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800132e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001332:	6093      	str	r3, [r2, #8]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40007000 	.word	0x40007000

08001344 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e2fe      	b.n	8001954 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d075      	beq.n	800144e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001362:	4b97      	ldr	r3, [pc, #604]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800136c:	4b94      	ldr	r3, [pc, #592]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	2b0c      	cmp	r3, #12
 800137a:	d102      	bne.n	8001382 <HAL_RCC_OscConfig+0x3e>
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	2b03      	cmp	r3, #3
 8001380:	d002      	beq.n	8001388 <HAL_RCC_OscConfig+0x44>
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	2b08      	cmp	r3, #8
 8001386:	d10b      	bne.n	80013a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001388:	4b8d      	ldr	r3, [pc, #564]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d05b      	beq.n	800144c <HAL_RCC_OscConfig+0x108>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d157      	bne.n	800144c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e2d9      	b.n	8001954 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013a8:	d106      	bne.n	80013b8 <HAL_RCC_OscConfig+0x74>
 80013aa:	4b85      	ldr	r3, [pc, #532]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a84      	ldr	r2, [pc, #528]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 80013b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	e01d      	b.n	80013f4 <HAL_RCC_OscConfig+0xb0>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013c0:	d10c      	bne.n	80013dc <HAL_RCC_OscConfig+0x98>
 80013c2:	4b7f      	ldr	r3, [pc, #508]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a7e      	ldr	r2, [pc, #504]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 80013c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	4b7c      	ldr	r3, [pc, #496]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a7b      	ldr	r2, [pc, #492]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 80013d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e00b      	b.n	80013f4 <HAL_RCC_OscConfig+0xb0>
 80013dc:	4b78      	ldr	r3, [pc, #480]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a77      	ldr	r2, [pc, #476]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 80013e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	4b75      	ldr	r3, [pc, #468]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a74      	ldr	r2, [pc, #464]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 80013ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d013      	beq.n	8001424 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fc:	f7ff fc1e 	bl	8000c3c <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001404:	f7ff fc1a 	bl	8000c3c <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b64      	cmp	r3, #100	@ 0x64
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e29e      	b.n	8001954 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001416:	4b6a      	ldr	r3, [pc, #424]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0xc0>
 8001422:	e014      	b.n	800144e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001424:	f7ff fc0a 	bl	8000c3c <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800142c:	f7ff fc06 	bl	8000c3c <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b64      	cmp	r3, #100	@ 0x64
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e28a      	b.n	8001954 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800143e:	4b60      	ldr	r3, [pc, #384]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f0      	bne.n	800142c <HAL_RCC_OscConfig+0xe8>
 800144a:	e000      	b.n	800144e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d075      	beq.n	8001546 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800145a:	4b59      	ldr	r3, [pc, #356]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 030c 	and.w	r3, r3, #12
 8001462:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001464:	4b56      	ldr	r3, [pc, #344]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	2b0c      	cmp	r3, #12
 8001472:	d102      	bne.n	800147a <HAL_RCC_OscConfig+0x136>
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	2b02      	cmp	r3, #2
 8001478:	d002      	beq.n	8001480 <HAL_RCC_OscConfig+0x13c>
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	2b04      	cmp	r3, #4
 800147e:	d11f      	bne.n	80014c0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001480:	4b4f      	ldr	r3, [pc, #316]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001488:	2b00      	cmp	r3, #0
 800148a:	d005      	beq.n	8001498 <HAL_RCC_OscConfig+0x154>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e25d      	b.n	8001954 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001498:	4b49      	ldr	r3, [pc, #292]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	061b      	lsls	r3, r3, #24
 80014a6:	4946      	ldr	r1, [pc, #280]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014ac:	4b45      	ldr	r3, [pc, #276]	@ (80015c4 <HAL_RCC_OscConfig+0x280>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fb77 	bl	8000ba4 <HAL_InitTick>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d043      	beq.n	8001544 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e249      	b.n	8001954 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d023      	beq.n	8001510 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c8:	4b3d      	ldr	r3, [pc, #244]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a3c      	ldr	r2, [pc, #240]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 80014ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d4:	f7ff fbb2 	bl	8000c3c <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014dc:	f7ff fbae 	bl	8000c3c <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e232      	b.n	8001954 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014ee:	4b34      	ldr	r3, [pc, #208]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f0      	beq.n	80014dc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fa:	4b31      	ldr	r3, [pc, #196]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	061b      	lsls	r3, r3, #24
 8001508:	492d      	ldr	r1, [pc, #180]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 800150a:	4313      	orrs	r3, r2
 800150c:	604b      	str	r3, [r1, #4]
 800150e:	e01a      	b.n	8001546 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001510:	4b2b      	ldr	r3, [pc, #172]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a2a      	ldr	r2, [pc, #168]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 8001516:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800151a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151c:	f7ff fb8e 	bl	8000c3c <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001524:	f7ff fb8a 	bl	8000c3c <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e20e      	b.n	8001954 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001536:	4b22      	ldr	r3, [pc, #136]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0x1e0>
 8001542:	e000      	b.n	8001546 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001544:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d041      	beq.n	80015d6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d01c      	beq.n	8001594 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800155a:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 800155c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001560:	4a17      	ldr	r2, [pc, #92]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156a:	f7ff fb67 	bl	8000c3c <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001572:	f7ff fb63 	bl	8000c3c <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e1e7      	b.n	8001954 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001584:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 8001586:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0ef      	beq.n	8001572 <HAL_RCC_OscConfig+0x22e>
 8001592:	e020      	b.n	80015d6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001594:	4b0a      	ldr	r3, [pc, #40]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 8001596:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800159a:	4a09      	ldr	r2, [pc, #36]	@ (80015c0 <HAL_RCC_OscConfig+0x27c>)
 800159c:	f023 0301 	bic.w	r3, r3, #1
 80015a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a4:	f7ff fb4a 	bl	8000c3c <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015aa:	e00d      	b.n	80015c8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ac:	f7ff fb46 	bl	8000c3c <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d906      	bls.n	80015c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e1ca      	b.n	8001954 <HAL_RCC_OscConfig+0x610>
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000
 80015c4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015c8:	4b8c      	ldr	r3, [pc, #560]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 80015ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1ea      	bne.n	80015ac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 80a6 	beq.w	8001730 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015e8:	4b84      	ldr	r3, [pc, #528]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 80015ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_RCC_OscConfig+0x2b4>
 80015f4:	2301      	movs	r3, #1
 80015f6:	e000      	b.n	80015fa <HAL_RCC_OscConfig+0x2b6>
 80015f8:	2300      	movs	r3, #0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00d      	beq.n	800161a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015fe:	4b7f      	ldr	r3, [pc, #508]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 8001600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001602:	4a7e      	ldr	r2, [pc, #504]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 8001604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001608:	6593      	str	r3, [r2, #88]	@ 0x58
 800160a:	4b7c      	ldr	r3, [pc, #496]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 800160c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001616:	2301      	movs	r3, #1
 8001618:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800161a:	4b79      	ldr	r3, [pc, #484]	@ (8001800 <HAL_RCC_OscConfig+0x4bc>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001622:	2b00      	cmp	r3, #0
 8001624:	d118      	bne.n	8001658 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001626:	4b76      	ldr	r3, [pc, #472]	@ (8001800 <HAL_RCC_OscConfig+0x4bc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a75      	ldr	r2, [pc, #468]	@ (8001800 <HAL_RCC_OscConfig+0x4bc>)
 800162c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001632:	f7ff fb03 	bl	8000c3c <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163a:	f7ff faff 	bl	8000c3c <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e183      	b.n	8001954 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800164c:	4b6c      	ldr	r3, [pc, #432]	@ (8001800 <HAL_RCC_OscConfig+0x4bc>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f0      	beq.n	800163a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d108      	bne.n	8001672 <HAL_RCC_OscConfig+0x32e>
 8001660:	4b66      	ldr	r3, [pc, #408]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 8001662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001666:	4a65      	ldr	r2, [pc, #404]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001670:	e024      	b.n	80016bc <HAL_RCC_OscConfig+0x378>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b05      	cmp	r3, #5
 8001678:	d110      	bne.n	800169c <HAL_RCC_OscConfig+0x358>
 800167a:	4b60      	ldr	r3, [pc, #384]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 800167c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001680:	4a5e      	ldr	r2, [pc, #376]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 8001682:	f043 0304 	orr.w	r3, r3, #4
 8001686:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800168a:	4b5c      	ldr	r3, [pc, #368]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 800168c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001690:	4a5a      	ldr	r2, [pc, #360]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800169a:	e00f      	b.n	80016bc <HAL_RCC_OscConfig+0x378>
 800169c:	4b57      	ldr	r3, [pc, #348]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 800169e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016a2:	4a56      	ldr	r2, [pc, #344]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 80016a4:	f023 0301 	bic.w	r3, r3, #1
 80016a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016ac:	4b53      	ldr	r3, [pc, #332]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 80016ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016b2:	4a52      	ldr	r2, [pc, #328]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 80016b4:	f023 0304 	bic.w	r3, r3, #4
 80016b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d016      	beq.n	80016f2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c4:	f7ff faba 	bl	8000c3c <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ca:	e00a      	b.n	80016e2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016cc:	f7ff fab6 	bl	8000c3c <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016da:	4293      	cmp	r3, r2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e138      	b.n	8001954 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016e2:	4b46      	ldr	r3, [pc, #280]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 80016e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0ed      	beq.n	80016cc <HAL_RCC_OscConfig+0x388>
 80016f0:	e015      	b.n	800171e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f2:	f7ff faa3 	bl	8000c3c <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016f8:	e00a      	b.n	8001710 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fa:	f7ff fa9f 	bl	8000c3c <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001708:	4293      	cmp	r3, r2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e121      	b.n	8001954 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001710:	4b3a      	ldr	r3, [pc, #232]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 8001712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1ed      	bne.n	80016fa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800171e:	7ffb      	ldrb	r3, [r7, #31]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d105      	bne.n	8001730 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001724:	4b35      	ldr	r3, [pc, #212]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 8001726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001728:	4a34      	ldr	r2, [pc, #208]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 800172a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800172e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0320 	and.w	r3, r3, #32
 8001738:	2b00      	cmp	r3, #0
 800173a:	d03c      	beq.n	80017b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d01c      	beq.n	800177e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001744:	4b2d      	ldr	r3, [pc, #180]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 8001746:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800174a:	4a2c      	ldr	r2, [pc, #176]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001754:	f7ff fa72 	bl	8000c3c <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800175c:	f7ff fa6e 	bl	8000c3c <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e0f2      	b.n	8001954 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800176e:	4b23      	ldr	r3, [pc, #140]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 8001770:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0ef      	beq.n	800175c <HAL_RCC_OscConfig+0x418>
 800177c:	e01b      	b.n	80017b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800177e:	4b1f      	ldr	r3, [pc, #124]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 8001780:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001784:	4a1d      	ldr	r2, [pc, #116]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 8001786:	f023 0301 	bic.w	r3, r3, #1
 800178a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178e:	f7ff fa55 	bl	8000c3c <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001796:	f7ff fa51 	bl	8000c3c <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e0d5      	b.n	8001954 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017a8:	4b14      	ldr	r3, [pc, #80]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 80017aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1ef      	bne.n	8001796 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 80c9 	beq.w	8001952 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017c0:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b0c      	cmp	r3, #12
 80017ca:	f000 8083 	beq.w	80018d4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d15e      	bne.n	8001894 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d6:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a08      	ldr	r2, [pc, #32]	@ (80017fc <HAL_RCC_OscConfig+0x4b8>)
 80017dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e2:	f7ff fa2b 	bl	8000c3c <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017e8:	e00c      	b.n	8001804 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ea:	f7ff fa27 	bl	8000c3c <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d905      	bls.n	8001804 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e0ab      	b.n	8001954 <HAL_RCC_OscConfig+0x610>
 80017fc:	40021000 	.word	0x40021000
 8001800:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001804:	4b55      	ldr	r3, [pc, #340]	@ (800195c <HAL_RCC_OscConfig+0x618>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1ec      	bne.n	80017ea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001810:	4b52      	ldr	r3, [pc, #328]	@ (800195c <HAL_RCC_OscConfig+0x618>)
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	4b52      	ldr	r3, [pc, #328]	@ (8001960 <HAL_RCC_OscConfig+0x61c>)
 8001816:	4013      	ands	r3, r2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6a11      	ldr	r1, [r2, #32]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001820:	3a01      	subs	r2, #1
 8001822:	0112      	lsls	r2, r2, #4
 8001824:	4311      	orrs	r1, r2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800182a:	0212      	lsls	r2, r2, #8
 800182c:	4311      	orrs	r1, r2
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001832:	0852      	lsrs	r2, r2, #1
 8001834:	3a01      	subs	r2, #1
 8001836:	0552      	lsls	r2, r2, #21
 8001838:	4311      	orrs	r1, r2
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800183e:	0852      	lsrs	r2, r2, #1
 8001840:	3a01      	subs	r2, #1
 8001842:	0652      	lsls	r2, r2, #25
 8001844:	4311      	orrs	r1, r2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800184a:	06d2      	lsls	r2, r2, #27
 800184c:	430a      	orrs	r2, r1
 800184e:	4943      	ldr	r1, [pc, #268]	@ (800195c <HAL_RCC_OscConfig+0x618>)
 8001850:	4313      	orrs	r3, r2
 8001852:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001854:	4b41      	ldr	r3, [pc, #260]	@ (800195c <HAL_RCC_OscConfig+0x618>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a40      	ldr	r2, [pc, #256]	@ (800195c <HAL_RCC_OscConfig+0x618>)
 800185a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800185e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001860:	4b3e      	ldr	r3, [pc, #248]	@ (800195c <HAL_RCC_OscConfig+0x618>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	4a3d      	ldr	r2, [pc, #244]	@ (800195c <HAL_RCC_OscConfig+0x618>)
 8001866:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800186a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7ff f9e6 	bl	8000c3c <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001874:	f7ff f9e2 	bl	8000c3c <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e066      	b.n	8001954 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001886:	4b35      	ldr	r3, [pc, #212]	@ (800195c <HAL_RCC_OscConfig+0x618>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f0      	beq.n	8001874 <HAL_RCC_OscConfig+0x530>
 8001892:	e05e      	b.n	8001952 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001894:	4b31      	ldr	r3, [pc, #196]	@ (800195c <HAL_RCC_OscConfig+0x618>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a30      	ldr	r2, [pc, #192]	@ (800195c <HAL_RCC_OscConfig+0x618>)
 800189a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800189e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a0:	f7ff f9cc 	bl	8000c3c <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a8:	f7ff f9c8 	bl	8000c3c <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e04c      	b.n	8001954 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ba:	4b28      	ldr	r3, [pc, #160]	@ (800195c <HAL_RCC_OscConfig+0x618>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80018c6:	4b25      	ldr	r3, [pc, #148]	@ (800195c <HAL_RCC_OscConfig+0x618>)
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	4924      	ldr	r1, [pc, #144]	@ (800195c <HAL_RCC_OscConfig+0x618>)
 80018cc:	4b25      	ldr	r3, [pc, #148]	@ (8001964 <HAL_RCC_OscConfig+0x620>)
 80018ce:	4013      	ands	r3, r2
 80018d0:	60cb      	str	r3, [r1, #12]
 80018d2:	e03e      	b.n	8001952 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e039      	b.n	8001954 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80018e0:	4b1e      	ldr	r3, [pc, #120]	@ (800195c <HAL_RCC_OscConfig+0x618>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f003 0203 	and.w	r2, r3, #3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d12c      	bne.n	800194e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fe:	3b01      	subs	r3, #1
 8001900:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001902:	429a      	cmp	r2, r3
 8001904:	d123      	bne.n	800194e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001910:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001912:	429a      	cmp	r2, r3
 8001914:	d11b      	bne.n	800194e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001920:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001922:	429a      	cmp	r2, r3
 8001924:	d113      	bne.n	800194e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001930:	085b      	lsrs	r3, r3, #1
 8001932:	3b01      	subs	r3, #1
 8001934:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001936:	429a      	cmp	r2, r3
 8001938:	d109      	bne.n	800194e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001944:	085b      	lsrs	r3, r3, #1
 8001946:	3b01      	subs	r3, #1
 8001948:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800194a:	429a      	cmp	r2, r3
 800194c:	d001      	beq.n	8001952 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3720      	adds	r7, #32
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40021000 	.word	0x40021000
 8001960:	019f800c 	.word	0x019f800c
 8001964:	feeefffc 	.word	0xfeeefffc

08001968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e11e      	b.n	8001bbe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001980:	4b91      	ldr	r3, [pc, #580]	@ (8001bc8 <HAL_RCC_ClockConfig+0x260>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 030f 	and.w	r3, r3, #15
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d910      	bls.n	80019b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198e:	4b8e      	ldr	r3, [pc, #568]	@ (8001bc8 <HAL_RCC_ClockConfig+0x260>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 020f 	bic.w	r2, r3, #15
 8001996:	498c      	ldr	r1, [pc, #560]	@ (8001bc8 <HAL_RCC_ClockConfig+0x260>)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800199e:	4b8a      	ldr	r3, [pc, #552]	@ (8001bc8 <HAL_RCC_ClockConfig+0x260>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e106      	b.n	8001bbe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d073      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d129      	bne.n	8001a18 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c4:	4b81      	ldr	r3, [pc, #516]	@ (8001bcc <HAL_RCC_ClockConfig+0x264>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0f4      	b.n	8001bbe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80019d4:	f000 f966 	bl	8001ca4 <RCC_GetSysClockFreqFromPLLSource>
 80019d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	4a7c      	ldr	r2, [pc, #496]	@ (8001bd0 <HAL_RCC_ClockConfig+0x268>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d93f      	bls.n	8001a62 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019e2:	4b7a      	ldr	r3, [pc, #488]	@ (8001bcc <HAL_RCC_ClockConfig+0x264>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d009      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d033      	beq.n	8001a62 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d12f      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a02:	4b72      	ldr	r3, [pc, #456]	@ (8001bcc <HAL_RCC_ClockConfig+0x264>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a0a:	4a70      	ldr	r2, [pc, #448]	@ (8001bcc <HAL_RCC_ClockConfig+0x264>)
 8001a0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a10:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a12:	2380      	movs	r3, #128	@ 0x80
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	e024      	b.n	8001a62 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d107      	bne.n	8001a30 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a20:	4b6a      	ldr	r3, [pc, #424]	@ (8001bcc <HAL_RCC_ClockConfig+0x264>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d109      	bne.n	8001a40 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e0c6      	b.n	8001bbe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a30:	4b66      	ldr	r3, [pc, #408]	@ (8001bcc <HAL_RCC_ClockConfig+0x264>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0be      	b.n	8001bbe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a40:	f000 f8ce 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 8001a44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	4a61      	ldr	r2, [pc, #388]	@ (8001bd0 <HAL_RCC_ClockConfig+0x268>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d909      	bls.n	8001a62 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a4e:	4b5f      	ldr	r3, [pc, #380]	@ (8001bcc <HAL_RCC_ClockConfig+0x264>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a56:	4a5d      	ldr	r2, [pc, #372]	@ (8001bcc <HAL_RCC_ClockConfig+0x264>)
 8001a58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a5c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a5e:	2380      	movs	r3, #128	@ 0x80
 8001a60:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a62:	4b5a      	ldr	r3, [pc, #360]	@ (8001bcc <HAL_RCC_ClockConfig+0x264>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f023 0203 	bic.w	r2, r3, #3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	4957      	ldr	r1, [pc, #348]	@ (8001bcc <HAL_RCC_ClockConfig+0x264>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a74:	f7ff f8e2 	bl	8000c3c <HAL_GetTick>
 8001a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7a:	e00a      	b.n	8001a92 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a7c:	f7ff f8de 	bl	8000c3c <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e095      	b.n	8001bbe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a92:	4b4e      	ldr	r3, [pc, #312]	@ (8001bcc <HAL_RCC_ClockConfig+0x264>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 020c 	and.w	r2, r3, #12
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d1eb      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d023      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001abc:	4b43      	ldr	r3, [pc, #268]	@ (8001bcc <HAL_RCC_ClockConfig+0x264>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4a42      	ldr	r2, [pc, #264]	@ (8001bcc <HAL_RCC_ClockConfig+0x264>)
 8001ac2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ac6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d007      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ad4:	4b3d      	ldr	r3, [pc, #244]	@ (8001bcc <HAL_RCC_ClockConfig+0x264>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001adc:	4a3b      	ldr	r2, [pc, #236]	@ (8001bcc <HAL_RCC_ClockConfig+0x264>)
 8001ade:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ae2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae4:	4b39      	ldr	r3, [pc, #228]	@ (8001bcc <HAL_RCC_ClockConfig+0x264>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4936      	ldr	r1, [pc, #216]	@ (8001bcc <HAL_RCC_ClockConfig+0x264>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	608b      	str	r3, [r1, #8]
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	2b80      	cmp	r3, #128	@ 0x80
 8001afc:	d105      	bne.n	8001b0a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001afe:	4b33      	ldr	r3, [pc, #204]	@ (8001bcc <HAL_RCC_ClockConfig+0x264>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	4a32      	ldr	r2, [pc, #200]	@ (8001bcc <HAL_RCC_ClockConfig+0x264>)
 8001b04:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b08:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8001bc8 <HAL_RCC_ClockConfig+0x260>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d21d      	bcs.n	8001b54 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b18:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc8 <HAL_RCC_ClockConfig+0x260>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f023 020f 	bic.w	r2, r3, #15
 8001b20:	4929      	ldr	r1, [pc, #164]	@ (8001bc8 <HAL_RCC_ClockConfig+0x260>)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b28:	f7ff f888 	bl	8000c3c <HAL_GetTick>
 8001b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2e:	e00a      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b30:	f7ff f884 	bl	8000c3c <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e03b      	b.n	8001bbe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b46:	4b20      	ldr	r3, [pc, #128]	@ (8001bc8 <HAL_RCC_ClockConfig+0x260>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d1ed      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d008      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b60:	4b1a      	ldr	r3, [pc, #104]	@ (8001bcc <HAL_RCC_ClockConfig+0x264>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	4917      	ldr	r1, [pc, #92]	@ (8001bcc <HAL_RCC_ClockConfig+0x264>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d009      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b7e:	4b13      	ldr	r3, [pc, #76]	@ (8001bcc <HAL_RCC_ClockConfig+0x264>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	490f      	ldr	r1, [pc, #60]	@ (8001bcc <HAL_RCC_ClockConfig+0x264>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b92:	f000 f825 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 8001b96:	4602      	mov	r2, r0
 8001b98:	4b0c      	ldr	r3, [pc, #48]	@ (8001bcc <HAL_RCC_ClockConfig+0x264>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	490c      	ldr	r1, [pc, #48]	@ (8001bd4 <HAL_RCC_ClockConfig+0x26c>)
 8001ba4:	5ccb      	ldrb	r3, [r1, r3]
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bae:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd8 <HAL_RCC_ClockConfig+0x270>)
 8001bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bdc <HAL_RCC_ClockConfig+0x274>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fff4 	bl	8000ba4 <HAL_InitTick>
 8001bbc:	4603      	mov	r3, r0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40022000 	.word	0x40022000
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	04c4b400 	.word	0x04c4b400
 8001bd4:	080041e8 	.word	0x080041e8
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	20000004 	.word	0x20000004

08001be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b087      	sub	sp, #28
 8001be4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001be6:	4b2c      	ldr	r3, [pc, #176]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 030c 	and.w	r3, r3, #12
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d102      	bne.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	e047      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001bf8:	4b27      	ldr	r3, [pc, #156]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d102      	bne.n	8001c0a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c04:	4b26      	ldr	r3, [pc, #152]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	e03e      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001c0a:	4b23      	ldr	r3, [pc, #140]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	2b0c      	cmp	r3, #12
 8001c14:	d136      	bne.n	8001c84 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c16:	4b20      	ldr	r3, [pc, #128]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c20:	4b1d      	ldr	r3, [pc, #116]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	091b      	lsrs	r3, r3, #4
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d10c      	bne.n	8001c4e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c34:	4a1a      	ldr	r2, [pc, #104]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3c:	4a16      	ldr	r2, [pc, #88]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c3e:	68d2      	ldr	r2, [r2, #12]
 8001c40:	0a12      	lsrs	r2, r2, #8
 8001c42:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c46:	fb02 f303 	mul.w	r3, r2, r3
 8001c4a:	617b      	str	r3, [r7, #20]
      break;
 8001c4c:	e00c      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c4e:	4a13      	ldr	r2, [pc, #76]	@ (8001c9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c56:	4a10      	ldr	r2, [pc, #64]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c58:	68d2      	ldr	r2, [r2, #12]
 8001c5a:	0a12      	lsrs	r2, r2, #8
 8001c5c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c60:	fb02 f303 	mul.w	r3, r2, r3
 8001c64:	617b      	str	r3, [r7, #20]
      break;
 8001c66:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c68:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	0e5b      	lsrs	r3, r3, #25
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	3301      	adds	r3, #1
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	e001      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c88:	693b      	ldr	r3, [r7, #16]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	371c      	adds	r7, #28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	00f42400 	.word	0x00f42400
 8001ca0:	007a1200 	.word	0x007a1200

08001ca4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b087      	sub	sp, #28
 8001ca8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001caa:	4b1e      	ldr	r3, [pc, #120]	@ (8001d24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	d10c      	bne.n	8001ce2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cc8:	4a17      	ldr	r2, [pc, #92]	@ (8001d28 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd0:	4a14      	ldr	r2, [pc, #80]	@ (8001d24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cd2:	68d2      	ldr	r2, [r2, #12]
 8001cd4:	0a12      	lsrs	r2, r2, #8
 8001cd6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001cda:	fb02 f303 	mul.w	r3, r2, r3
 8001cde:	617b      	str	r3, [r7, #20]
    break;
 8001ce0:	e00c      	b.n	8001cfc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ce2:	4a12      	ldr	r2, [pc, #72]	@ (8001d2c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cea:	4a0e      	ldr	r2, [pc, #56]	@ (8001d24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cec:	68d2      	ldr	r2, [r2, #12]
 8001cee:	0a12      	lsrs	r2, r2, #8
 8001cf0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001cf4:	fb02 f303 	mul.w	r3, r2, r3
 8001cf8:	617b      	str	r3, [r7, #20]
    break;
 8001cfa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cfc:	4b09      	ldr	r3, [pc, #36]	@ (8001d24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	0e5b      	lsrs	r3, r3, #25
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	3301      	adds	r3, #1
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d14:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001d16:	687b      	ldr	r3, [r7, #4]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	371c      	adds	r7, #28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	40021000 	.word	0x40021000
 8001d28:	007a1200 	.word	0x007a1200
 8001d2c:	00f42400 	.word	0x00f42400

08001d30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e049      	b.n	8001dd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d106      	bne.n	8001d5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7fe fc3a 	bl	80005d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4610      	mov	r0, r2
 8001d70:	f000 fd40 	bl	80027f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e049      	b.n	8001e84 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d106      	bne.n	8001e0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f841 	bl	8001e8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	f000 fce9 	bl	80027f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d109      	bne.n	8001ec4 <HAL_TIM_PWM_Start+0x24>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	bf14      	ite	ne
 8001ebc:	2301      	movne	r3, #1
 8001ebe:	2300      	moveq	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	e03c      	b.n	8001f3e <HAL_TIM_PWM_Start+0x9e>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d109      	bne.n	8001ede <HAL_TIM_PWM_Start+0x3e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	bf14      	ite	ne
 8001ed6:	2301      	movne	r3, #1
 8001ed8:	2300      	moveq	r3, #0
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	e02f      	b.n	8001f3e <HAL_TIM_PWM_Start+0x9e>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d109      	bne.n	8001ef8 <HAL_TIM_PWM_Start+0x58>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	bf14      	ite	ne
 8001ef0:	2301      	movne	r3, #1
 8001ef2:	2300      	moveq	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	e022      	b.n	8001f3e <HAL_TIM_PWM_Start+0x9e>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	2b0c      	cmp	r3, #12
 8001efc:	d109      	bne.n	8001f12 <HAL_TIM_PWM_Start+0x72>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	bf14      	ite	ne
 8001f0a:	2301      	movne	r3, #1
 8001f0c:	2300      	moveq	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	e015      	b.n	8001f3e <HAL_TIM_PWM_Start+0x9e>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2b10      	cmp	r3, #16
 8001f16:	d109      	bne.n	8001f2c <HAL_TIM_PWM_Start+0x8c>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	bf14      	ite	ne
 8001f24:	2301      	movne	r3, #1
 8001f26:	2300      	moveq	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	e008      	b.n	8001f3e <HAL_TIM_PWM_Start+0x9e>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	bf14      	ite	ne
 8001f38:	2301      	movne	r3, #1
 8001f3a:	2300      	moveq	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e0a6      	b.n	8002094 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d104      	bne.n	8001f56 <HAL_TIM_PWM_Start+0xb6>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f54:	e023      	b.n	8001f9e <HAL_TIM_PWM_Start+0xfe>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d104      	bne.n	8001f66 <HAL_TIM_PWM_Start+0xc6>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f64:	e01b      	b.n	8001f9e <HAL_TIM_PWM_Start+0xfe>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d104      	bne.n	8001f76 <HAL_TIM_PWM_Start+0xd6>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f74:	e013      	b.n	8001f9e <HAL_TIM_PWM_Start+0xfe>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b0c      	cmp	r3, #12
 8001f7a:	d104      	bne.n	8001f86 <HAL_TIM_PWM_Start+0xe6>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001f84:	e00b      	b.n	8001f9e <HAL_TIM_PWM_Start+0xfe>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2b10      	cmp	r3, #16
 8001f8a:	d104      	bne.n	8001f96 <HAL_TIM_PWM_Start+0xf6>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f94:	e003      	b.n	8001f9e <HAL_TIM_PWM_Start+0xfe>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2202      	movs	r2, #2
 8001f9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	6839      	ldr	r1, [r7, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f001 f89e 	bl	80030e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a3a      	ldr	r2, [pc, #232]	@ (800209c <HAL_TIM_PWM_Start+0x1fc>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d018      	beq.n	8001fe8 <HAL_TIM_PWM_Start+0x148>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a39      	ldr	r2, [pc, #228]	@ (80020a0 <HAL_TIM_PWM_Start+0x200>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d013      	beq.n	8001fe8 <HAL_TIM_PWM_Start+0x148>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a37      	ldr	r2, [pc, #220]	@ (80020a4 <HAL_TIM_PWM_Start+0x204>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00e      	beq.n	8001fe8 <HAL_TIM_PWM_Start+0x148>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a36      	ldr	r2, [pc, #216]	@ (80020a8 <HAL_TIM_PWM_Start+0x208>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d009      	beq.n	8001fe8 <HAL_TIM_PWM_Start+0x148>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a34      	ldr	r2, [pc, #208]	@ (80020ac <HAL_TIM_PWM_Start+0x20c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d004      	beq.n	8001fe8 <HAL_TIM_PWM_Start+0x148>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a33      	ldr	r2, [pc, #204]	@ (80020b0 <HAL_TIM_PWM_Start+0x210>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d101      	bne.n	8001fec <HAL_TIM_PWM_Start+0x14c>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <HAL_TIM_PWM_Start+0x14e>
 8001fec:	2300      	movs	r3, #0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d007      	beq.n	8002002 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002000:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a25      	ldr	r2, [pc, #148]	@ (800209c <HAL_TIM_PWM_Start+0x1fc>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d022      	beq.n	8002052 <HAL_TIM_PWM_Start+0x1b2>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002014:	d01d      	beq.n	8002052 <HAL_TIM_PWM_Start+0x1b2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a26      	ldr	r2, [pc, #152]	@ (80020b4 <HAL_TIM_PWM_Start+0x214>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d018      	beq.n	8002052 <HAL_TIM_PWM_Start+0x1b2>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a24      	ldr	r2, [pc, #144]	@ (80020b8 <HAL_TIM_PWM_Start+0x218>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d013      	beq.n	8002052 <HAL_TIM_PWM_Start+0x1b2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a23      	ldr	r2, [pc, #140]	@ (80020bc <HAL_TIM_PWM_Start+0x21c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d00e      	beq.n	8002052 <HAL_TIM_PWM_Start+0x1b2>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a19      	ldr	r2, [pc, #100]	@ (80020a0 <HAL_TIM_PWM_Start+0x200>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d009      	beq.n	8002052 <HAL_TIM_PWM_Start+0x1b2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a18      	ldr	r2, [pc, #96]	@ (80020a4 <HAL_TIM_PWM_Start+0x204>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d004      	beq.n	8002052 <HAL_TIM_PWM_Start+0x1b2>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a18      	ldr	r2, [pc, #96]	@ (80020b0 <HAL_TIM_PWM_Start+0x210>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d115      	bne.n	800207e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	4b19      	ldr	r3, [pc, #100]	@ (80020c0 <HAL_TIM_PWM_Start+0x220>)
 800205a:	4013      	ands	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2b06      	cmp	r3, #6
 8002062:	d015      	beq.n	8002090 <HAL_TIM_PWM_Start+0x1f0>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800206a:	d011      	beq.n	8002090 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 0201 	orr.w	r2, r2, #1
 800207a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800207c:	e008      	b.n	8002090 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f042 0201 	orr.w	r2, r2, #1
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	e000      	b.n	8002092 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002090:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40012c00 	.word	0x40012c00
 80020a0:	40013400 	.word	0x40013400
 80020a4:	40014000 	.word	0x40014000
 80020a8:	40014400 	.word	0x40014400
 80020ac:	40014800 	.word	0x40014800
 80020b0:	40015000 	.word	0x40015000
 80020b4:	40000400 	.word	0x40000400
 80020b8:	40000800 	.word	0x40000800
 80020bc:	40000c00 	.word	0x40000c00
 80020c0:	00010007 	.word	0x00010007

080020c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d020      	beq.n	8002128 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d01b      	beq.n	8002128 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0202 	mvn.w	r2, #2
 80020f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 fb52 	bl	80027b8 <HAL_TIM_IC_CaptureCallback>
 8002114:	e005      	b.n	8002122 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 fb44 	bl	80027a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 fb55 	bl	80027cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	2b00      	cmp	r3, #0
 8002130:	d020      	beq.n	8002174 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b00      	cmp	r3, #0
 800213a:	d01b      	beq.n	8002174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0204 	mvn.w	r2, #4
 8002144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2202      	movs	r2, #2
 800214a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 fb2c 	bl	80027b8 <HAL_TIM_IC_CaptureCallback>
 8002160:	e005      	b.n	800216e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 fb1e 	bl	80027a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 fb2f 	bl	80027cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d020      	beq.n	80021c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d01b      	beq.n	80021c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f06f 0208 	mvn.w	r2, #8
 8002190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2204      	movs	r2, #4
 8002196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 fb06 	bl	80027b8 <HAL_TIM_IC_CaptureCallback>
 80021ac:	e005      	b.n	80021ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 faf8 	bl	80027a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 fb09 	bl	80027cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d020      	beq.n	800220c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d01b      	beq.n	800220c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f06f 0210 	mvn.w	r2, #16
 80021dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2208      	movs	r2, #8
 80021e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 fae0 	bl	80027b8 <HAL_TIM_IC_CaptureCallback>
 80021f8:	e005      	b.n	8002206 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 fad2 	bl	80027a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 fae3 	bl	80027cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00c      	beq.n	8002230 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	d007      	beq.n	8002230 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f06f 0201 	mvn.w	r2, #1
 8002228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7fe f834 	bl	8000298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002236:	2b00      	cmp	r3, #0
 8002238:	d104      	bne.n	8002244 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00c      	beq.n	800225e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800224a:	2b00      	cmp	r3, #0
 800224c:	d007      	beq.n	800225e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f001 f961 	bl	8003520 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00c      	beq.n	8002282 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800227a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f001 f959 	bl	8003534 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00c      	beq.n	80022a6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002292:	2b00      	cmp	r3, #0
 8002294:	d007      	beq.n	80022a6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800229e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 fa9d 	bl	80027e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00c      	beq.n	80022ca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d007      	beq.n	80022ca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f06f 0220 	mvn.w	r2, #32
 80022c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f001 f921 	bl	800350c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00c      	beq.n	80022ee <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d007      	beq.n	80022ee <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80022e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f001 f92d 	bl	8003548 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00c      	beq.n	8002312 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d007      	beq.n	8002312 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800230a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f001 f925 	bl	800355c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00c      	beq.n	8002336 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d007      	beq.n	8002336 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800232e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f001 f91d 	bl	8003570 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00c      	beq.n	800235a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d007      	beq.n	800235a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8002352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f001 f915 	bl	8003584 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800237e:	2302      	movs	r3, #2
 8002380:	e0ff      	b.n	8002582 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b14      	cmp	r3, #20
 800238e:	f200 80f0 	bhi.w	8002572 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002392:	a201      	add	r2, pc, #4	@ (adr r2, 8002398 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002398:	080023ed 	.word	0x080023ed
 800239c:	08002573 	.word	0x08002573
 80023a0:	08002573 	.word	0x08002573
 80023a4:	08002573 	.word	0x08002573
 80023a8:	0800242d 	.word	0x0800242d
 80023ac:	08002573 	.word	0x08002573
 80023b0:	08002573 	.word	0x08002573
 80023b4:	08002573 	.word	0x08002573
 80023b8:	0800246f 	.word	0x0800246f
 80023bc:	08002573 	.word	0x08002573
 80023c0:	08002573 	.word	0x08002573
 80023c4:	08002573 	.word	0x08002573
 80023c8:	080024af 	.word	0x080024af
 80023cc:	08002573 	.word	0x08002573
 80023d0:	08002573 	.word	0x08002573
 80023d4:	08002573 	.word	0x08002573
 80023d8:	080024f1 	.word	0x080024f1
 80023dc:	08002573 	.word	0x08002573
 80023e0:	08002573 	.word	0x08002573
 80023e4:	08002573 	.word	0x08002573
 80023e8:	08002531 	.word	0x08002531
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68b9      	ldr	r1, [r7, #8]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 fab2 	bl	800295c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699a      	ldr	r2, [r3, #24]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0208 	orr.w	r2, r2, #8
 8002406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	699a      	ldr	r2, [r3, #24]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0204 	bic.w	r2, r2, #4
 8002416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6999      	ldr	r1, [r3, #24]
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	691a      	ldr	r2, [r3, #16]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	619a      	str	r2, [r3, #24]
      break;
 800242a:	e0a5      	b.n	8002578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	4618      	mov	r0, r3
 8002434:	f000 fb2c 	bl	8002a90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	699a      	ldr	r2, [r3, #24]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002446:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699a      	ldr	r2, [r3, #24]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6999      	ldr	r1, [r3, #24]
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	021a      	lsls	r2, r3, #8
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	619a      	str	r2, [r3, #24]
      break;
 800246c:	e084      	b.n	8002578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68b9      	ldr	r1, [r7, #8]
 8002474:	4618      	mov	r0, r3
 8002476:	f000 fb9f 	bl	8002bb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	69da      	ldr	r2, [r3, #28]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 0208 	orr.w	r2, r2, #8
 8002488:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	69da      	ldr	r2, [r3, #28]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0204 	bic.w	r2, r2, #4
 8002498:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	69d9      	ldr	r1, [r3, #28]
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	691a      	ldr	r2, [r3, #16]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	61da      	str	r2, [r3, #28]
      break;
 80024ac:	e064      	b.n	8002578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68b9      	ldr	r1, [r7, #8]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 fc11 	bl	8002cdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	69da      	ldr	r2, [r3, #28]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	69da      	ldr	r2, [r3, #28]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	69d9      	ldr	r1, [r3, #28]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	021a      	lsls	r2, r3, #8
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	61da      	str	r2, [r3, #28]
      break;
 80024ee:	e043      	b.n	8002578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fc84 	bl	8002e04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0208 	orr.w	r2, r2, #8
 800250a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0204 	bic.w	r2, r2, #4
 800251a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	691a      	ldr	r2, [r3, #16]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800252e:	e023      	b.n	8002578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	4618      	mov	r0, r3
 8002538:	f000 fcce 	bl	8002ed8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800254a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800255a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	021a      	lsls	r2, r3, #8
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002570:	e002      	b.n	8002578 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	75fb      	strb	r3, [r7, #23]
      break;
 8002576:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002580:	7dfb      	ldrb	r3, [r7, #23]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop

0800258c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_TIM_ConfigClockSource+0x1c>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e0ee      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x1fa>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2202      	movs	r2, #2
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80025c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80025ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80025d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a6b      	ldr	r2, [pc, #428]	@ (8002790 <HAL_TIM_ConfigClockSource+0x204>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	f000 80b9 	beq.w	800275a <HAL_TIM_ConfigClockSource+0x1ce>
 80025e8:	4a69      	ldr	r2, [pc, #420]	@ (8002790 <HAL_TIM_ConfigClockSource+0x204>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	f200 80be 	bhi.w	800276c <HAL_TIM_ConfigClockSource+0x1e0>
 80025f0:	4a68      	ldr	r2, [pc, #416]	@ (8002794 <HAL_TIM_ConfigClockSource+0x208>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	f000 80b1 	beq.w	800275a <HAL_TIM_ConfigClockSource+0x1ce>
 80025f8:	4a66      	ldr	r2, [pc, #408]	@ (8002794 <HAL_TIM_ConfigClockSource+0x208>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	f200 80b6 	bhi.w	800276c <HAL_TIM_ConfigClockSource+0x1e0>
 8002600:	4a65      	ldr	r2, [pc, #404]	@ (8002798 <HAL_TIM_ConfigClockSource+0x20c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	f000 80a9 	beq.w	800275a <HAL_TIM_ConfigClockSource+0x1ce>
 8002608:	4a63      	ldr	r2, [pc, #396]	@ (8002798 <HAL_TIM_ConfigClockSource+0x20c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	f200 80ae 	bhi.w	800276c <HAL_TIM_ConfigClockSource+0x1e0>
 8002610:	4a62      	ldr	r2, [pc, #392]	@ (800279c <HAL_TIM_ConfigClockSource+0x210>)
 8002612:	4293      	cmp	r3, r2
 8002614:	f000 80a1 	beq.w	800275a <HAL_TIM_ConfigClockSource+0x1ce>
 8002618:	4a60      	ldr	r2, [pc, #384]	@ (800279c <HAL_TIM_ConfigClockSource+0x210>)
 800261a:	4293      	cmp	r3, r2
 800261c:	f200 80a6 	bhi.w	800276c <HAL_TIM_ConfigClockSource+0x1e0>
 8002620:	4a5f      	ldr	r2, [pc, #380]	@ (80027a0 <HAL_TIM_ConfigClockSource+0x214>)
 8002622:	4293      	cmp	r3, r2
 8002624:	f000 8099 	beq.w	800275a <HAL_TIM_ConfigClockSource+0x1ce>
 8002628:	4a5d      	ldr	r2, [pc, #372]	@ (80027a0 <HAL_TIM_ConfigClockSource+0x214>)
 800262a:	4293      	cmp	r3, r2
 800262c:	f200 809e 	bhi.w	800276c <HAL_TIM_ConfigClockSource+0x1e0>
 8002630:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002634:	f000 8091 	beq.w	800275a <HAL_TIM_ConfigClockSource+0x1ce>
 8002638:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800263c:	f200 8096 	bhi.w	800276c <HAL_TIM_ConfigClockSource+0x1e0>
 8002640:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002644:	f000 8089 	beq.w	800275a <HAL_TIM_ConfigClockSource+0x1ce>
 8002648:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800264c:	f200 808e 	bhi.w	800276c <HAL_TIM_ConfigClockSource+0x1e0>
 8002650:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002654:	d03e      	beq.n	80026d4 <HAL_TIM_ConfigClockSource+0x148>
 8002656:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800265a:	f200 8087 	bhi.w	800276c <HAL_TIM_ConfigClockSource+0x1e0>
 800265e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002662:	f000 8086 	beq.w	8002772 <HAL_TIM_ConfigClockSource+0x1e6>
 8002666:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800266a:	d87f      	bhi.n	800276c <HAL_TIM_ConfigClockSource+0x1e0>
 800266c:	2b70      	cmp	r3, #112	@ 0x70
 800266e:	d01a      	beq.n	80026a6 <HAL_TIM_ConfigClockSource+0x11a>
 8002670:	2b70      	cmp	r3, #112	@ 0x70
 8002672:	d87b      	bhi.n	800276c <HAL_TIM_ConfigClockSource+0x1e0>
 8002674:	2b60      	cmp	r3, #96	@ 0x60
 8002676:	d050      	beq.n	800271a <HAL_TIM_ConfigClockSource+0x18e>
 8002678:	2b60      	cmp	r3, #96	@ 0x60
 800267a:	d877      	bhi.n	800276c <HAL_TIM_ConfigClockSource+0x1e0>
 800267c:	2b50      	cmp	r3, #80	@ 0x50
 800267e:	d03c      	beq.n	80026fa <HAL_TIM_ConfigClockSource+0x16e>
 8002680:	2b50      	cmp	r3, #80	@ 0x50
 8002682:	d873      	bhi.n	800276c <HAL_TIM_ConfigClockSource+0x1e0>
 8002684:	2b40      	cmp	r3, #64	@ 0x40
 8002686:	d058      	beq.n	800273a <HAL_TIM_ConfigClockSource+0x1ae>
 8002688:	2b40      	cmp	r3, #64	@ 0x40
 800268a:	d86f      	bhi.n	800276c <HAL_TIM_ConfigClockSource+0x1e0>
 800268c:	2b30      	cmp	r3, #48	@ 0x30
 800268e:	d064      	beq.n	800275a <HAL_TIM_ConfigClockSource+0x1ce>
 8002690:	2b30      	cmp	r3, #48	@ 0x30
 8002692:	d86b      	bhi.n	800276c <HAL_TIM_ConfigClockSource+0x1e0>
 8002694:	2b20      	cmp	r3, #32
 8002696:	d060      	beq.n	800275a <HAL_TIM_ConfigClockSource+0x1ce>
 8002698:	2b20      	cmp	r3, #32
 800269a:	d867      	bhi.n	800276c <HAL_TIM_ConfigClockSource+0x1e0>
 800269c:	2b00      	cmp	r3, #0
 800269e:	d05c      	beq.n	800275a <HAL_TIM_ConfigClockSource+0x1ce>
 80026a0:	2b10      	cmp	r3, #16
 80026a2:	d05a      	beq.n	800275a <HAL_TIM_ConfigClockSource+0x1ce>
 80026a4:	e062      	b.n	800276c <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026b6:	f000 fcf7 	bl	80030a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80026c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	609a      	str	r2, [r3, #8]
      break;
 80026d2:	e04f      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026e4:	f000 fce0 	bl	80030a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026f6:	609a      	str	r2, [r3, #8]
      break;
 80026f8:	e03c      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002706:	461a      	mov	r2, r3
 8002708:	f000 fc52 	bl	8002fb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2150      	movs	r1, #80	@ 0x50
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fcab 	bl	800306e <TIM_ITRx_SetConfig>
      break;
 8002718:	e02c      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002726:	461a      	mov	r2, r3
 8002728:	f000 fc71 	bl	800300e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2160      	movs	r1, #96	@ 0x60
 8002732:	4618      	mov	r0, r3
 8002734:	f000 fc9b 	bl	800306e <TIM_ITRx_SetConfig>
      break;
 8002738:	e01c      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002746:	461a      	mov	r2, r3
 8002748:	f000 fc32 	bl	8002fb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2140      	movs	r1, #64	@ 0x40
 8002752:	4618      	mov	r0, r3
 8002754:	f000 fc8b 	bl	800306e <TIM_ITRx_SetConfig>
      break;
 8002758:	e00c      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4619      	mov	r1, r3
 8002764:	4610      	mov	r0, r2
 8002766:	f000 fc82 	bl	800306e <TIM_ITRx_SetConfig>
      break;
 800276a:	e003      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
      break;
 8002770:	e000      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8002772:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002784:	7bfb      	ldrb	r3, [r7, #15]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	00100070 	.word	0x00100070
 8002794:	00100050 	.word	0x00100050
 8002798:	00100040 	.word	0x00100040
 800279c:	00100030 	.word	0x00100030
 80027a0:	00100020 	.word	0x00100020

080027a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a4c      	ldr	r2, [pc, #304]	@ (8002938 <TIM_Base_SetConfig+0x144>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d017      	beq.n	800283c <TIM_Base_SetConfig+0x48>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002812:	d013      	beq.n	800283c <TIM_Base_SetConfig+0x48>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a49      	ldr	r2, [pc, #292]	@ (800293c <TIM_Base_SetConfig+0x148>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d00f      	beq.n	800283c <TIM_Base_SetConfig+0x48>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a48      	ldr	r2, [pc, #288]	@ (8002940 <TIM_Base_SetConfig+0x14c>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d00b      	beq.n	800283c <TIM_Base_SetConfig+0x48>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a47      	ldr	r2, [pc, #284]	@ (8002944 <TIM_Base_SetConfig+0x150>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d007      	beq.n	800283c <TIM_Base_SetConfig+0x48>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a46      	ldr	r2, [pc, #280]	@ (8002948 <TIM_Base_SetConfig+0x154>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d003      	beq.n	800283c <TIM_Base_SetConfig+0x48>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a45      	ldr	r2, [pc, #276]	@ (800294c <TIM_Base_SetConfig+0x158>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d108      	bne.n	800284e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	4313      	orrs	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a39      	ldr	r2, [pc, #228]	@ (8002938 <TIM_Base_SetConfig+0x144>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d023      	beq.n	800289e <TIM_Base_SetConfig+0xaa>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800285c:	d01f      	beq.n	800289e <TIM_Base_SetConfig+0xaa>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a36      	ldr	r2, [pc, #216]	@ (800293c <TIM_Base_SetConfig+0x148>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d01b      	beq.n	800289e <TIM_Base_SetConfig+0xaa>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a35      	ldr	r2, [pc, #212]	@ (8002940 <TIM_Base_SetConfig+0x14c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d017      	beq.n	800289e <TIM_Base_SetConfig+0xaa>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a34      	ldr	r2, [pc, #208]	@ (8002944 <TIM_Base_SetConfig+0x150>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d013      	beq.n	800289e <TIM_Base_SetConfig+0xaa>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a33      	ldr	r2, [pc, #204]	@ (8002948 <TIM_Base_SetConfig+0x154>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00f      	beq.n	800289e <TIM_Base_SetConfig+0xaa>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a33      	ldr	r2, [pc, #204]	@ (8002950 <TIM_Base_SetConfig+0x15c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00b      	beq.n	800289e <TIM_Base_SetConfig+0xaa>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a32      	ldr	r2, [pc, #200]	@ (8002954 <TIM_Base_SetConfig+0x160>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d007      	beq.n	800289e <TIM_Base_SetConfig+0xaa>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a31      	ldr	r2, [pc, #196]	@ (8002958 <TIM_Base_SetConfig+0x164>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d003      	beq.n	800289e <TIM_Base_SetConfig+0xaa>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a2c      	ldr	r2, [pc, #176]	@ (800294c <TIM_Base_SetConfig+0x158>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d108      	bne.n	80028b0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a18      	ldr	r2, [pc, #96]	@ (8002938 <TIM_Base_SetConfig+0x144>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d013      	beq.n	8002904 <TIM_Base_SetConfig+0x110>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a1a      	ldr	r2, [pc, #104]	@ (8002948 <TIM_Base_SetConfig+0x154>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d00f      	beq.n	8002904 <TIM_Base_SetConfig+0x110>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002950 <TIM_Base_SetConfig+0x15c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d00b      	beq.n	8002904 <TIM_Base_SetConfig+0x110>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a19      	ldr	r2, [pc, #100]	@ (8002954 <TIM_Base_SetConfig+0x160>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d007      	beq.n	8002904 <TIM_Base_SetConfig+0x110>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a18      	ldr	r2, [pc, #96]	@ (8002958 <TIM_Base_SetConfig+0x164>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d003      	beq.n	8002904 <TIM_Base_SetConfig+0x110>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a13      	ldr	r2, [pc, #76]	@ (800294c <TIM_Base_SetConfig+0x158>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d103      	bne.n	800290c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	691a      	ldr	r2, [r3, #16]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b01      	cmp	r3, #1
 800291c:	d105      	bne.n	800292a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f023 0201 	bic.w	r2, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	611a      	str	r2, [r3, #16]
  }
}
 800292a:	bf00      	nop
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40012c00 	.word	0x40012c00
 800293c:	40000400 	.word	0x40000400
 8002940:	40000800 	.word	0x40000800
 8002944:	40000c00 	.word	0x40000c00
 8002948:	40013400 	.word	0x40013400
 800294c:	40015000 	.word	0x40015000
 8002950:	40014000 	.word	0x40014000
 8002954:	40014400 	.word	0x40014400
 8002958:	40014800 	.word	0x40014800

0800295c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800295c:	b480      	push	{r7}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	f023 0201 	bic.w	r2, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800298a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800298e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f023 0303 	bic.w	r3, r3, #3
 8002996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4313      	orrs	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f023 0302 	bic.w	r3, r3, #2
 80029a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a30      	ldr	r2, [pc, #192]	@ (8002a78 <TIM_OC1_SetConfig+0x11c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d013      	beq.n	80029e4 <TIM_OC1_SetConfig+0x88>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a2f      	ldr	r2, [pc, #188]	@ (8002a7c <TIM_OC1_SetConfig+0x120>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00f      	beq.n	80029e4 <TIM_OC1_SetConfig+0x88>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a2e      	ldr	r2, [pc, #184]	@ (8002a80 <TIM_OC1_SetConfig+0x124>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d00b      	beq.n	80029e4 <TIM_OC1_SetConfig+0x88>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a2d      	ldr	r2, [pc, #180]	@ (8002a84 <TIM_OC1_SetConfig+0x128>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d007      	beq.n	80029e4 <TIM_OC1_SetConfig+0x88>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a2c      	ldr	r2, [pc, #176]	@ (8002a88 <TIM_OC1_SetConfig+0x12c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d003      	beq.n	80029e4 <TIM_OC1_SetConfig+0x88>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a2b      	ldr	r2, [pc, #172]	@ (8002a8c <TIM_OC1_SetConfig+0x130>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d10c      	bne.n	80029fe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f023 0308 	bic.w	r3, r3, #8
 80029ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f023 0304 	bic.w	r3, r3, #4
 80029fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a1d      	ldr	r2, [pc, #116]	@ (8002a78 <TIM_OC1_SetConfig+0x11c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d013      	beq.n	8002a2e <TIM_OC1_SetConfig+0xd2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a1c      	ldr	r2, [pc, #112]	@ (8002a7c <TIM_OC1_SetConfig+0x120>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00f      	beq.n	8002a2e <TIM_OC1_SetConfig+0xd2>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a1b      	ldr	r2, [pc, #108]	@ (8002a80 <TIM_OC1_SetConfig+0x124>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00b      	beq.n	8002a2e <TIM_OC1_SetConfig+0xd2>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a1a      	ldr	r2, [pc, #104]	@ (8002a84 <TIM_OC1_SetConfig+0x128>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d007      	beq.n	8002a2e <TIM_OC1_SetConfig+0xd2>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a19      	ldr	r2, [pc, #100]	@ (8002a88 <TIM_OC1_SetConfig+0x12c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d003      	beq.n	8002a2e <TIM_OC1_SetConfig+0xd2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a18      	ldr	r2, [pc, #96]	@ (8002a8c <TIM_OC1_SetConfig+0x130>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d111      	bne.n	8002a52 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	621a      	str	r2, [r3, #32]
}
 8002a6c:	bf00      	nop
 8002a6e:	371c      	adds	r7, #28
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	40012c00 	.word	0x40012c00
 8002a7c:	40013400 	.word	0x40013400
 8002a80:	40014000 	.word	0x40014000
 8002a84:	40014400 	.word	0x40014400
 8002a88:	40014800 	.word	0x40014800
 8002a8c:	40015000 	.word	0x40015000

08002a90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	f023 0210 	bic.w	r2, r3, #16
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002abe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	021b      	lsls	r3, r3, #8
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f023 0320 	bic.w	r3, r3, #32
 8002ade:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a2c      	ldr	r2, [pc, #176]	@ (8002ba0 <TIM_OC2_SetConfig+0x110>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d007      	beq.n	8002b04 <TIM_OC2_SetConfig+0x74>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a2b      	ldr	r2, [pc, #172]	@ (8002ba4 <TIM_OC2_SetConfig+0x114>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d003      	beq.n	8002b04 <TIM_OC2_SetConfig+0x74>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a2a      	ldr	r2, [pc, #168]	@ (8002ba8 <TIM_OC2_SetConfig+0x118>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d10d      	bne.n	8002b20 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a1f      	ldr	r2, [pc, #124]	@ (8002ba0 <TIM_OC2_SetConfig+0x110>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d013      	beq.n	8002b50 <TIM_OC2_SetConfig+0xc0>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ba4 <TIM_OC2_SetConfig+0x114>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d00f      	beq.n	8002b50 <TIM_OC2_SetConfig+0xc0>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a1e      	ldr	r2, [pc, #120]	@ (8002bac <TIM_OC2_SetConfig+0x11c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d00b      	beq.n	8002b50 <TIM_OC2_SetConfig+0xc0>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8002bb0 <TIM_OC2_SetConfig+0x120>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d007      	beq.n	8002b50 <TIM_OC2_SetConfig+0xc0>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a1c      	ldr	r2, [pc, #112]	@ (8002bb4 <TIM_OC2_SetConfig+0x124>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d003      	beq.n	8002b50 <TIM_OC2_SetConfig+0xc0>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a17      	ldr	r2, [pc, #92]	@ (8002ba8 <TIM_OC2_SetConfig+0x118>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d113      	bne.n	8002b78 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	621a      	str	r2, [r3, #32]
}
 8002b92:	bf00      	nop
 8002b94:	371c      	adds	r7, #28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40012c00 	.word	0x40012c00
 8002ba4:	40013400 	.word	0x40013400
 8002ba8:	40015000 	.word	0x40015000
 8002bac:	40014000 	.word	0x40014000
 8002bb0:	40014400 	.word	0x40014400
 8002bb4:	40014800 	.word	0x40014800

08002bb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f023 0303 	bic.w	r3, r3, #3
 8002bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	021b      	lsls	r3, r3, #8
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a2b      	ldr	r2, [pc, #172]	@ (8002cc4 <TIM_OC3_SetConfig+0x10c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d007      	beq.n	8002c2a <TIM_OC3_SetConfig+0x72>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a2a      	ldr	r2, [pc, #168]	@ (8002cc8 <TIM_OC3_SetConfig+0x110>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d003      	beq.n	8002c2a <TIM_OC3_SetConfig+0x72>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a29      	ldr	r2, [pc, #164]	@ (8002ccc <TIM_OC3_SetConfig+0x114>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d10d      	bne.n	8002c46 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	021b      	lsls	r3, r3, #8
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc4 <TIM_OC3_SetConfig+0x10c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d013      	beq.n	8002c76 <TIM_OC3_SetConfig+0xbe>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc8 <TIM_OC3_SetConfig+0x110>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00f      	beq.n	8002c76 <TIM_OC3_SetConfig+0xbe>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd0 <TIM_OC3_SetConfig+0x118>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d00b      	beq.n	8002c76 <TIM_OC3_SetConfig+0xbe>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a1c      	ldr	r2, [pc, #112]	@ (8002cd4 <TIM_OC3_SetConfig+0x11c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d007      	beq.n	8002c76 <TIM_OC3_SetConfig+0xbe>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a1b      	ldr	r2, [pc, #108]	@ (8002cd8 <TIM_OC3_SetConfig+0x120>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d003      	beq.n	8002c76 <TIM_OC3_SetConfig+0xbe>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a16      	ldr	r2, [pc, #88]	@ (8002ccc <TIM_OC3_SetConfig+0x114>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d113      	bne.n	8002c9e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	621a      	str	r2, [r3, #32]
}
 8002cb8:	bf00      	nop
 8002cba:	371c      	adds	r7, #28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	40012c00 	.word	0x40012c00
 8002cc8:	40013400 	.word	0x40013400
 8002ccc:	40015000 	.word	0x40015000
 8002cd0:	40014000 	.word	0x40014000
 8002cd4:	40014400 	.word	0x40014400
 8002cd8:	40014800 	.word	0x40014800

08002cdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	021b      	lsls	r3, r3, #8
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	031b      	lsls	r3, r3, #12
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8002dec <TIM_OC4_SetConfig+0x110>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d007      	beq.n	8002d50 <TIM_OC4_SetConfig+0x74>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a2b      	ldr	r2, [pc, #172]	@ (8002df0 <TIM_OC4_SetConfig+0x114>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d003      	beq.n	8002d50 <TIM_OC4_SetConfig+0x74>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a2a      	ldr	r2, [pc, #168]	@ (8002df4 <TIM_OC4_SetConfig+0x118>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d10d      	bne.n	8002d6c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	031b      	lsls	r3, r3, #12
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8002dec <TIM_OC4_SetConfig+0x110>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d013      	beq.n	8002d9c <TIM_OC4_SetConfig+0xc0>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a1e      	ldr	r2, [pc, #120]	@ (8002df0 <TIM_OC4_SetConfig+0x114>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d00f      	beq.n	8002d9c <TIM_OC4_SetConfig+0xc0>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a1e      	ldr	r2, [pc, #120]	@ (8002df8 <TIM_OC4_SetConfig+0x11c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d00b      	beq.n	8002d9c <TIM_OC4_SetConfig+0xc0>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a1d      	ldr	r2, [pc, #116]	@ (8002dfc <TIM_OC4_SetConfig+0x120>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d007      	beq.n	8002d9c <TIM_OC4_SetConfig+0xc0>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8002e00 <TIM_OC4_SetConfig+0x124>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d003      	beq.n	8002d9c <TIM_OC4_SetConfig+0xc0>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a17      	ldr	r2, [pc, #92]	@ (8002df4 <TIM_OC4_SetConfig+0x118>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d113      	bne.n	8002dc4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002da2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002daa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	019b      	lsls	r3, r3, #6
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	019b      	lsls	r3, r3, #6
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	621a      	str	r2, [r3, #32]
}
 8002dde:	bf00      	nop
 8002de0:	371c      	adds	r7, #28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40012c00 	.word	0x40012c00
 8002df0:	40013400 	.word	0x40013400
 8002df4:	40015000 	.word	0x40015000
 8002df8:	40014000 	.word	0x40014000
 8002dfc:	40014400 	.word	0x40014400
 8002e00:	40014800 	.word	0x40014800

08002e04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002e48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	041b      	lsls	r3, r3, #16
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a19      	ldr	r2, [pc, #100]	@ (8002ec0 <TIM_OC5_SetConfig+0xbc>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d013      	beq.n	8002e86 <TIM_OC5_SetConfig+0x82>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a18      	ldr	r2, [pc, #96]	@ (8002ec4 <TIM_OC5_SetConfig+0xc0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d00f      	beq.n	8002e86 <TIM_OC5_SetConfig+0x82>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a17      	ldr	r2, [pc, #92]	@ (8002ec8 <TIM_OC5_SetConfig+0xc4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d00b      	beq.n	8002e86 <TIM_OC5_SetConfig+0x82>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a16      	ldr	r2, [pc, #88]	@ (8002ecc <TIM_OC5_SetConfig+0xc8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d007      	beq.n	8002e86 <TIM_OC5_SetConfig+0x82>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a15      	ldr	r2, [pc, #84]	@ (8002ed0 <TIM_OC5_SetConfig+0xcc>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d003      	beq.n	8002e86 <TIM_OC5_SetConfig+0x82>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a14      	ldr	r2, [pc, #80]	@ (8002ed4 <TIM_OC5_SetConfig+0xd0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d109      	bne.n	8002e9a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	621a      	str	r2, [r3, #32]
}
 8002eb4:	bf00      	nop
 8002eb6:	371c      	adds	r7, #28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	40012c00 	.word	0x40012c00
 8002ec4:	40013400 	.word	0x40013400
 8002ec8:	40014000 	.word	0x40014000
 8002ecc:	40014400 	.word	0x40014400
 8002ed0:	40014800 	.word	0x40014800
 8002ed4:	40015000 	.word	0x40015000

08002ed8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	021b      	lsls	r3, r3, #8
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002f1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	051b      	lsls	r3, r3, #20
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a1a      	ldr	r2, [pc, #104]	@ (8002f98 <TIM_OC6_SetConfig+0xc0>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d013      	beq.n	8002f5c <TIM_OC6_SetConfig+0x84>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a19      	ldr	r2, [pc, #100]	@ (8002f9c <TIM_OC6_SetConfig+0xc4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d00f      	beq.n	8002f5c <TIM_OC6_SetConfig+0x84>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a18      	ldr	r2, [pc, #96]	@ (8002fa0 <TIM_OC6_SetConfig+0xc8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d00b      	beq.n	8002f5c <TIM_OC6_SetConfig+0x84>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a17      	ldr	r2, [pc, #92]	@ (8002fa4 <TIM_OC6_SetConfig+0xcc>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d007      	beq.n	8002f5c <TIM_OC6_SetConfig+0x84>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a16      	ldr	r2, [pc, #88]	@ (8002fa8 <TIM_OC6_SetConfig+0xd0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d003      	beq.n	8002f5c <TIM_OC6_SetConfig+0x84>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a15      	ldr	r2, [pc, #84]	@ (8002fac <TIM_OC6_SetConfig+0xd4>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d109      	bne.n	8002f70 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	029b      	lsls	r3, r3, #10
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	621a      	str	r2, [r3, #32]
}
 8002f8a:	bf00      	nop
 8002f8c:	371c      	adds	r7, #28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40012c00 	.word	0x40012c00
 8002f9c:	40013400 	.word	0x40013400
 8002fa0:	40014000 	.word	0x40014000
 8002fa4:	40014400 	.word	0x40014400
 8002fa8:	40014800 	.word	0x40014800
 8002fac:	40015000 	.word	0x40015000

08002fb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b087      	sub	sp, #28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	f023 0201 	bic.w	r2, r3, #1
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f023 030a 	bic.w	r3, r3, #10
 8002fec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	621a      	str	r2, [r3, #32]
}
 8003002:	bf00      	nop
 8003004:	371c      	adds	r7, #28
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800300e:	b480      	push	{r7}
 8003010:	b087      	sub	sp, #28
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	f023 0210 	bic.w	r2, r3, #16
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003038:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	031b      	lsls	r3, r3, #12
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800304a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	4313      	orrs	r3, r2
 8003054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	621a      	str	r2, [r3, #32]
}
 8003062:	bf00      	nop
 8003064:	371c      	adds	r7, #28
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800306e:	b480      	push	{r7}
 8003070:	b085      	sub	sp, #20
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
 8003076:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003084:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003088:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4313      	orrs	r3, r2
 8003090:	f043 0307 	orr.w	r3, r3, #7
 8003094:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	609a      	str	r2, [r3, #8]
}
 800309c:	bf00      	nop
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b087      	sub	sp, #28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	021a      	lsls	r2, r3, #8
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	609a      	str	r2, [r3, #8]
}
 80030dc:	bf00      	nop
 80030de:	371c      	adds	r7, #28
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f003 031f 	and.w	r3, r3, #31
 80030fa:	2201      	movs	r2, #1
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a1a      	ldr	r2, [r3, #32]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	43db      	mvns	r3, r3
 800310a:	401a      	ands	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a1a      	ldr	r2, [r3, #32]
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f003 031f 	and.w	r3, r3, #31
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	fa01 f303 	lsl.w	r3, r1, r3
 8003120:	431a      	orrs	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	621a      	str	r2, [r3, #32]
}
 8003126:	bf00      	nop
 8003128:	371c      	adds	r7, #28
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
	...

08003134 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d109      	bne.n	8003158 <HAL_TIMEx_PWMN_Start+0x24>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b01      	cmp	r3, #1
 800314e:	bf14      	ite	ne
 8003150:	2301      	movne	r3, #1
 8003152:	2300      	moveq	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	e022      	b.n	800319e <HAL_TIMEx_PWMN_Start+0x6a>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2b04      	cmp	r3, #4
 800315c:	d109      	bne.n	8003172 <HAL_TIMEx_PWMN_Start+0x3e>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b01      	cmp	r3, #1
 8003168:	bf14      	ite	ne
 800316a:	2301      	movne	r3, #1
 800316c:	2300      	moveq	r3, #0
 800316e:	b2db      	uxtb	r3, r3
 8003170:	e015      	b.n	800319e <HAL_TIMEx_PWMN_Start+0x6a>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b08      	cmp	r3, #8
 8003176:	d109      	bne.n	800318c <HAL_TIMEx_PWMN_Start+0x58>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b01      	cmp	r3, #1
 8003182:	bf14      	ite	ne
 8003184:	2301      	movne	r3, #1
 8003186:	2300      	moveq	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	e008      	b.n	800319e <HAL_TIMEx_PWMN_Start+0x6a>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b01      	cmp	r3, #1
 8003196:	bf14      	ite	ne
 8003198:	2301      	movne	r3, #1
 800319a:	2300      	moveq	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e073      	b.n	800328e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d104      	bne.n	80031b6 <HAL_TIMEx_PWMN_Start+0x82>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031b4:	e013      	b.n	80031de <HAL_TIMEx_PWMN_Start+0xaa>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d104      	bne.n	80031c6 <HAL_TIMEx_PWMN_Start+0x92>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031c4:	e00b      	b.n	80031de <HAL_TIMEx_PWMN_Start+0xaa>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d104      	bne.n	80031d6 <HAL_TIMEx_PWMN_Start+0xa2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031d4:	e003      	b.n	80031de <HAL_TIMEx_PWMN_Start+0xaa>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2202      	movs	r2, #2
 80031da:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2204      	movs	r2, #4
 80031e4:	6839      	ldr	r1, [r7, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 f9d6 	bl	8003598 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031fa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a25      	ldr	r2, [pc, #148]	@ (8003298 <HAL_TIMEx_PWMN_Start+0x164>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d022      	beq.n	800324c <HAL_TIMEx_PWMN_Start+0x118>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800320e:	d01d      	beq.n	800324c <HAL_TIMEx_PWMN_Start+0x118>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a21      	ldr	r2, [pc, #132]	@ (800329c <HAL_TIMEx_PWMN_Start+0x168>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d018      	beq.n	800324c <HAL_TIMEx_PWMN_Start+0x118>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a20      	ldr	r2, [pc, #128]	@ (80032a0 <HAL_TIMEx_PWMN_Start+0x16c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d013      	beq.n	800324c <HAL_TIMEx_PWMN_Start+0x118>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a1e      	ldr	r2, [pc, #120]	@ (80032a4 <HAL_TIMEx_PWMN_Start+0x170>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00e      	beq.n	800324c <HAL_TIMEx_PWMN_Start+0x118>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a1d      	ldr	r2, [pc, #116]	@ (80032a8 <HAL_TIMEx_PWMN_Start+0x174>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d009      	beq.n	800324c <HAL_TIMEx_PWMN_Start+0x118>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1b      	ldr	r2, [pc, #108]	@ (80032ac <HAL_TIMEx_PWMN_Start+0x178>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d004      	beq.n	800324c <HAL_TIMEx_PWMN_Start+0x118>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1a      	ldr	r2, [pc, #104]	@ (80032b0 <HAL_TIMEx_PWMN_Start+0x17c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d115      	bne.n	8003278 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	4b18      	ldr	r3, [pc, #96]	@ (80032b4 <HAL_TIMEx_PWMN_Start+0x180>)
 8003254:	4013      	ands	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b06      	cmp	r3, #6
 800325c:	d015      	beq.n	800328a <HAL_TIMEx_PWMN_Start+0x156>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003264:	d011      	beq.n	800328a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 0201 	orr.w	r2, r2, #1
 8003274:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003276:	e008      	b.n	800328a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	e000      	b.n	800328c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800328a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40012c00 	.word	0x40012c00
 800329c:	40000400 	.word	0x40000400
 80032a0:	40000800 	.word	0x40000800
 80032a4:	40000c00 	.word	0x40000c00
 80032a8:	40013400 	.word	0x40013400
 80032ac:	40014000 	.word	0x40014000
 80032b0:	40015000 	.word	0x40015000
 80032b4:	00010007 	.word	0x00010007

080032b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e074      	b.n	80033ba <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a34      	ldr	r2, [pc, #208]	@ (80033c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d009      	beq.n	800330e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a33      	ldr	r2, [pc, #204]	@ (80033cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d004      	beq.n	800330e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a31      	ldr	r2, [pc, #196]	@ (80033d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d108      	bne.n	8003320 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003314:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4313      	orrs	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800332a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a21      	ldr	r2, [pc, #132]	@ (80033c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d022      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003350:	d01d      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1f      	ldr	r2, [pc, #124]	@ (80033d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d018      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1d      	ldr	r2, [pc, #116]	@ (80033d8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d013      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a1c      	ldr	r2, [pc, #112]	@ (80033dc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00e      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a15      	ldr	r2, [pc, #84]	@ (80033cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d009      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a18      	ldr	r2, [pc, #96]	@ (80033e0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d004      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a11      	ldr	r2, [pc, #68]	@ (80033d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d10c      	bne.n	80033a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003394:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	4313      	orrs	r3, r2
 800339e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	40012c00 	.word	0x40012c00
 80033cc:	40013400 	.word	0x40013400
 80033d0:	40015000 	.word	0x40015000
 80033d4:	40000400 	.word	0x40000400
 80033d8:	40000800 	.word	0x40000800
 80033dc:	40000c00 	.word	0x40000c00
 80033e0:	40014000 	.word	0x40014000

080033e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e078      	b.n	80034f2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	4313      	orrs	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4313      	orrs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	041b      	lsls	r3, r3, #16
 8003476:	4313      	orrs	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	4313      	orrs	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a1c      	ldr	r2, [pc, #112]	@ (8003500 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d009      	beq.n	80034a6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a1b      	ldr	r2, [pc, #108]	@ (8003504 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d004      	beq.n	80034a6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a19      	ldr	r2, [pc, #100]	@ (8003508 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d11c      	bne.n	80034e0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b0:	051b      	lsls	r3, r3, #20
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ce:	4313      	orrs	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034dc:	4313      	orrs	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40012c00 	.word	0x40012c00
 8003504:	40013400 	.word	0x40013400
 8003508:	40015000 	.word	0x40015000

0800350c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	2204      	movs	r2, #4
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6a1a      	ldr	r2, [r3, #32]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	43db      	mvns	r3, r3
 80035ba:	401a      	ands	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a1a      	ldr	r2, [r3, #32]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	fa01 f303 	lsl.w	r3, r1, r3
 80035d0:	431a      	orrs	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	621a      	str	r2, [r3, #32]
}
 80035d6:	bf00      	nop
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
	...

080035e4 <cosf>:
 80035e4:	ee10 3a10 	vmov	r3, s0
 80035e8:	b507      	push	{r0, r1, r2, lr}
 80035ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003664 <cosf+0x80>)
 80035ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d806      	bhi.n	8003602 <cosf+0x1e>
 80035f4:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8003668 <cosf+0x84>
 80035f8:	b003      	add	sp, #12
 80035fa:	f85d eb04 	ldr.w	lr, [sp], #4
 80035fe:	f000 b8d1 	b.w	80037a4 <__kernel_cosf>
 8003602:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8003606:	d304      	bcc.n	8003612 <cosf+0x2e>
 8003608:	ee30 0a40 	vsub.f32	s0, s0, s0
 800360c:	b003      	add	sp, #12
 800360e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003612:	4668      	mov	r0, sp
 8003614:	f000 f966 	bl	80038e4 <__ieee754_rem_pio2f>
 8003618:	f000 0003 	and.w	r0, r0, #3
 800361c:	2801      	cmp	r0, #1
 800361e:	d009      	beq.n	8003634 <cosf+0x50>
 8003620:	2802      	cmp	r0, #2
 8003622:	d010      	beq.n	8003646 <cosf+0x62>
 8003624:	b9b0      	cbnz	r0, 8003654 <cosf+0x70>
 8003626:	eddd 0a01 	vldr	s1, [sp, #4]
 800362a:	ed9d 0a00 	vldr	s0, [sp]
 800362e:	f000 f8b9 	bl	80037a4 <__kernel_cosf>
 8003632:	e7eb      	b.n	800360c <cosf+0x28>
 8003634:	eddd 0a01 	vldr	s1, [sp, #4]
 8003638:	ed9d 0a00 	vldr	s0, [sp]
 800363c:	f000 f90a 	bl	8003854 <__kernel_sinf>
 8003640:	eeb1 0a40 	vneg.f32	s0, s0
 8003644:	e7e2      	b.n	800360c <cosf+0x28>
 8003646:	eddd 0a01 	vldr	s1, [sp, #4]
 800364a:	ed9d 0a00 	vldr	s0, [sp]
 800364e:	f000 f8a9 	bl	80037a4 <__kernel_cosf>
 8003652:	e7f5      	b.n	8003640 <cosf+0x5c>
 8003654:	eddd 0a01 	vldr	s1, [sp, #4]
 8003658:	ed9d 0a00 	vldr	s0, [sp]
 800365c:	2001      	movs	r0, #1
 800365e:	f000 f8f9 	bl	8003854 <__kernel_sinf>
 8003662:	e7d3      	b.n	800360c <cosf+0x28>
 8003664:	3f490fd8 	.word	0x3f490fd8
 8003668:	00000000 	.word	0x00000000

0800366c <sinf>:
 800366c:	ee10 3a10 	vmov	r3, s0
 8003670:	b507      	push	{r0, r1, r2, lr}
 8003672:	4a1f      	ldr	r2, [pc, #124]	@ (80036f0 <sinf+0x84>)
 8003674:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003678:	4293      	cmp	r3, r2
 800367a:	d807      	bhi.n	800368c <sinf+0x20>
 800367c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80036f4 <sinf+0x88>
 8003680:	2000      	movs	r0, #0
 8003682:	b003      	add	sp, #12
 8003684:	f85d eb04 	ldr.w	lr, [sp], #4
 8003688:	f000 b8e4 	b.w	8003854 <__kernel_sinf>
 800368c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8003690:	d304      	bcc.n	800369c <sinf+0x30>
 8003692:	ee30 0a40 	vsub.f32	s0, s0, s0
 8003696:	b003      	add	sp, #12
 8003698:	f85d fb04 	ldr.w	pc, [sp], #4
 800369c:	4668      	mov	r0, sp
 800369e:	f000 f921 	bl	80038e4 <__ieee754_rem_pio2f>
 80036a2:	f000 0003 	and.w	r0, r0, #3
 80036a6:	2801      	cmp	r0, #1
 80036a8:	d00a      	beq.n	80036c0 <sinf+0x54>
 80036aa:	2802      	cmp	r0, #2
 80036ac:	d00f      	beq.n	80036ce <sinf+0x62>
 80036ae:	b9c0      	cbnz	r0, 80036e2 <sinf+0x76>
 80036b0:	eddd 0a01 	vldr	s1, [sp, #4]
 80036b4:	ed9d 0a00 	vldr	s0, [sp]
 80036b8:	2001      	movs	r0, #1
 80036ba:	f000 f8cb 	bl	8003854 <__kernel_sinf>
 80036be:	e7ea      	b.n	8003696 <sinf+0x2a>
 80036c0:	eddd 0a01 	vldr	s1, [sp, #4]
 80036c4:	ed9d 0a00 	vldr	s0, [sp]
 80036c8:	f000 f86c 	bl	80037a4 <__kernel_cosf>
 80036cc:	e7e3      	b.n	8003696 <sinf+0x2a>
 80036ce:	eddd 0a01 	vldr	s1, [sp, #4]
 80036d2:	ed9d 0a00 	vldr	s0, [sp]
 80036d6:	2001      	movs	r0, #1
 80036d8:	f000 f8bc 	bl	8003854 <__kernel_sinf>
 80036dc:	eeb1 0a40 	vneg.f32	s0, s0
 80036e0:	e7d9      	b.n	8003696 <sinf+0x2a>
 80036e2:	eddd 0a01 	vldr	s1, [sp, #4]
 80036e6:	ed9d 0a00 	vldr	s0, [sp]
 80036ea:	f000 f85b 	bl	80037a4 <__kernel_cosf>
 80036ee:	e7f5      	b.n	80036dc <sinf+0x70>
 80036f0:	3f490fd8 	.word	0x3f490fd8
 80036f4:	00000000 	.word	0x00000000

080036f8 <fmaxf>:
 80036f8:	b508      	push	{r3, lr}
 80036fa:	ed2d 8b02 	vpush	{d8}
 80036fe:	eeb0 8a40 	vmov.f32	s16, s0
 8003702:	eef0 8a60 	vmov.f32	s17, s1
 8003706:	f000 f831 	bl	800376c <__fpclassifyf>
 800370a:	b930      	cbnz	r0, 800371a <fmaxf+0x22>
 800370c:	eeb0 8a68 	vmov.f32	s16, s17
 8003710:	eeb0 0a48 	vmov.f32	s0, s16
 8003714:	ecbd 8b02 	vpop	{d8}
 8003718:	bd08      	pop	{r3, pc}
 800371a:	eeb0 0a68 	vmov.f32	s0, s17
 800371e:	f000 f825 	bl	800376c <__fpclassifyf>
 8003722:	2800      	cmp	r0, #0
 8003724:	d0f4      	beq.n	8003710 <fmaxf+0x18>
 8003726:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800372a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800372e:	dded      	ble.n	800370c <fmaxf+0x14>
 8003730:	e7ee      	b.n	8003710 <fmaxf+0x18>

08003732 <fminf>:
 8003732:	b508      	push	{r3, lr}
 8003734:	ed2d 8b02 	vpush	{d8}
 8003738:	eeb0 8a40 	vmov.f32	s16, s0
 800373c:	eef0 8a60 	vmov.f32	s17, s1
 8003740:	f000 f814 	bl	800376c <__fpclassifyf>
 8003744:	b930      	cbnz	r0, 8003754 <fminf+0x22>
 8003746:	eeb0 8a68 	vmov.f32	s16, s17
 800374a:	eeb0 0a48 	vmov.f32	s0, s16
 800374e:	ecbd 8b02 	vpop	{d8}
 8003752:	bd08      	pop	{r3, pc}
 8003754:	eeb0 0a68 	vmov.f32	s0, s17
 8003758:	f000 f808 	bl	800376c <__fpclassifyf>
 800375c:	2800      	cmp	r0, #0
 800375e:	d0f4      	beq.n	800374a <fminf+0x18>
 8003760:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8003764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003768:	d5ed      	bpl.n	8003746 <fminf+0x14>
 800376a:	e7ee      	b.n	800374a <fminf+0x18>

0800376c <__fpclassifyf>:
 800376c:	ee10 3a10 	vmov	r3, s0
 8003770:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8003774:	d00d      	beq.n	8003792 <__fpclassifyf+0x26>
 8003776:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800377a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800377e:	d30a      	bcc.n	8003796 <__fpclassifyf+0x2a>
 8003780:	4b07      	ldr	r3, [pc, #28]	@ (80037a0 <__fpclassifyf+0x34>)
 8003782:	1e42      	subs	r2, r0, #1
 8003784:	429a      	cmp	r2, r3
 8003786:	d908      	bls.n	800379a <__fpclassifyf+0x2e>
 8003788:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800378c:	4258      	negs	r0, r3
 800378e:	4158      	adcs	r0, r3
 8003790:	4770      	bx	lr
 8003792:	2002      	movs	r0, #2
 8003794:	4770      	bx	lr
 8003796:	2004      	movs	r0, #4
 8003798:	4770      	bx	lr
 800379a:	2003      	movs	r0, #3
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	007ffffe 	.word	0x007ffffe

080037a4 <__kernel_cosf>:
 80037a4:	ee10 3a10 	vmov	r3, s0
 80037a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037ac:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80037b0:	eef0 6a40 	vmov.f32	s13, s0
 80037b4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80037b8:	d204      	bcs.n	80037c4 <__kernel_cosf+0x20>
 80037ba:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80037be:	ee17 2a90 	vmov	r2, s15
 80037c2:	b342      	cbz	r2, 8003816 <__kernel_cosf+0x72>
 80037c4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80037c8:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8003834 <__kernel_cosf+0x90>
 80037cc:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8003838 <__kernel_cosf+0x94>
 80037d0:	4a1a      	ldr	r2, [pc, #104]	@ (800383c <__kernel_cosf+0x98>)
 80037d2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80037d6:	4293      	cmp	r3, r2
 80037d8:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8003840 <__kernel_cosf+0x9c>
 80037dc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80037e0:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8003844 <__kernel_cosf+0xa0>
 80037e4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80037e8:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8003848 <__kernel_cosf+0xa4>
 80037ec:	eee6 7a07 	vfma.f32	s15, s12, s14
 80037f0:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800384c <__kernel_cosf+0xa8>
 80037f4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80037f8:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80037fc:	ee26 6a07 	vmul.f32	s12, s12, s14
 8003800:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8003804:	eee7 0a06 	vfma.f32	s1, s14, s12
 8003808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800380c:	d804      	bhi.n	8003818 <__kernel_cosf+0x74>
 800380e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8003812:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003816:	4770      	bx	lr
 8003818:	4a0d      	ldr	r2, [pc, #52]	@ (8003850 <__kernel_cosf+0xac>)
 800381a:	4293      	cmp	r3, r2
 800381c:	bf9a      	itte	ls
 800381e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8003822:	ee07 3a10 	vmovls	s14, r3
 8003826:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800382a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800382e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003832:	e7ec      	b.n	800380e <__kernel_cosf+0x6a>
 8003834:	ad47d74e 	.word	0xad47d74e
 8003838:	310f74f6 	.word	0x310f74f6
 800383c:	3e999999 	.word	0x3e999999
 8003840:	b493f27c 	.word	0xb493f27c
 8003844:	37d00d01 	.word	0x37d00d01
 8003848:	bab60b61 	.word	0xbab60b61
 800384c:	3d2aaaab 	.word	0x3d2aaaab
 8003850:	3f480000 	.word	0x3f480000

08003854 <__kernel_sinf>:
 8003854:	ee10 3a10 	vmov	r3, s0
 8003858:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800385c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8003860:	d204      	bcs.n	800386c <__kernel_sinf+0x18>
 8003862:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003866:	ee17 3a90 	vmov	r3, s15
 800386a:	b35b      	cbz	r3, 80038c4 <__kernel_sinf+0x70>
 800386c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003870:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80038c8 <__kernel_sinf+0x74>
 8003874:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80038cc <__kernel_sinf+0x78>
 8003878:	eea7 6a27 	vfma.f32	s12, s14, s15
 800387c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80038d0 <__kernel_sinf+0x7c>
 8003880:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003884:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80038d4 <__kernel_sinf+0x80>
 8003888:	eea7 6a87 	vfma.f32	s12, s15, s14
 800388c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80038d8 <__kernel_sinf+0x84>
 8003890:	ee60 6a07 	vmul.f32	s13, s0, s14
 8003894:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003898:	b930      	cbnz	r0, 80038a8 <__kernel_sinf+0x54>
 800389a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80038dc <__kernel_sinf+0x88>
 800389e:	eea7 6a27 	vfma.f32	s12, s14, s15
 80038a2:	eea6 0a26 	vfma.f32	s0, s12, s13
 80038a6:	4770      	bx	lr
 80038a8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80038ac:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80038b0:	eee0 7a86 	vfma.f32	s15, s1, s12
 80038b4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80038b8:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80038e0 <__kernel_sinf+0x8c>
 80038bc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80038c0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	2f2ec9d3 	.word	0x2f2ec9d3
 80038cc:	b2d72f34 	.word	0xb2d72f34
 80038d0:	3638ef1b 	.word	0x3638ef1b
 80038d4:	b9500d01 	.word	0xb9500d01
 80038d8:	3c088889 	.word	0x3c088889
 80038dc:	be2aaaab 	.word	0xbe2aaaab
 80038e0:	3e2aaaab 	.word	0x3e2aaaab

080038e4 <__ieee754_rem_pio2f>:
 80038e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038e6:	ee10 6a10 	vmov	r6, s0
 80038ea:	4b88      	ldr	r3, [pc, #544]	@ (8003b0c <__ieee754_rem_pio2f+0x228>)
 80038ec:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80038f0:	429d      	cmp	r5, r3
 80038f2:	b087      	sub	sp, #28
 80038f4:	4604      	mov	r4, r0
 80038f6:	d805      	bhi.n	8003904 <__ieee754_rem_pio2f+0x20>
 80038f8:	2300      	movs	r3, #0
 80038fa:	ed80 0a00 	vstr	s0, [r0]
 80038fe:	6043      	str	r3, [r0, #4]
 8003900:	2000      	movs	r0, #0
 8003902:	e022      	b.n	800394a <__ieee754_rem_pio2f+0x66>
 8003904:	4b82      	ldr	r3, [pc, #520]	@ (8003b10 <__ieee754_rem_pio2f+0x22c>)
 8003906:	429d      	cmp	r5, r3
 8003908:	d83a      	bhi.n	8003980 <__ieee754_rem_pio2f+0x9c>
 800390a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800390e:	2e00      	cmp	r6, #0
 8003910:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8003b14 <__ieee754_rem_pio2f+0x230>
 8003914:	4a80      	ldr	r2, [pc, #512]	@ (8003b18 <__ieee754_rem_pio2f+0x234>)
 8003916:	f023 030f 	bic.w	r3, r3, #15
 800391a:	dd18      	ble.n	800394e <__ieee754_rem_pio2f+0x6a>
 800391c:	4293      	cmp	r3, r2
 800391e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8003922:	bf09      	itett	eq
 8003924:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8003b1c <__ieee754_rem_pio2f+0x238>
 8003928:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8003b20 <__ieee754_rem_pio2f+0x23c>
 800392c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8003b24 <__ieee754_rem_pio2f+0x240>
 8003930:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8003934:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8003938:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800393c:	ed80 7a00 	vstr	s14, [r0]
 8003940:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003944:	edc0 7a01 	vstr	s15, [r0, #4]
 8003948:	2001      	movs	r0, #1
 800394a:	b007      	add	sp, #28
 800394c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800394e:	4293      	cmp	r3, r2
 8003950:	ee70 7a07 	vadd.f32	s15, s0, s14
 8003954:	bf09      	itett	eq
 8003956:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8003b1c <__ieee754_rem_pio2f+0x238>
 800395a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8003b20 <__ieee754_rem_pio2f+0x23c>
 800395e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8003b24 <__ieee754_rem_pio2f+0x240>
 8003962:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8003966:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800396a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800396e:	ed80 7a00 	vstr	s14, [r0]
 8003972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003976:	edc0 7a01 	vstr	s15, [r0, #4]
 800397a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800397e:	e7e4      	b.n	800394a <__ieee754_rem_pio2f+0x66>
 8003980:	4b69      	ldr	r3, [pc, #420]	@ (8003b28 <__ieee754_rem_pio2f+0x244>)
 8003982:	429d      	cmp	r5, r3
 8003984:	d873      	bhi.n	8003a6e <__ieee754_rem_pio2f+0x18a>
 8003986:	f000 f8dd 	bl	8003b44 <fabsf>
 800398a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8003b2c <__ieee754_rem_pio2f+0x248>
 800398e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8003992:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003996:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800399a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800399e:	ee17 0a90 	vmov	r0, s15
 80039a2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8003b14 <__ieee754_rem_pio2f+0x230>
 80039a6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80039aa:	281f      	cmp	r0, #31
 80039ac:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8003b20 <__ieee754_rem_pio2f+0x23c>
 80039b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b4:	eeb1 6a47 	vneg.f32	s12, s14
 80039b8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80039bc:	ee16 1a90 	vmov	r1, s13
 80039c0:	dc09      	bgt.n	80039d6 <__ieee754_rem_pio2f+0xf2>
 80039c2:	4a5b      	ldr	r2, [pc, #364]	@ (8003b30 <__ieee754_rem_pio2f+0x24c>)
 80039c4:	1e47      	subs	r7, r0, #1
 80039c6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80039ca:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80039ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d107      	bne.n	80039e6 <__ieee754_rem_pio2f+0x102>
 80039d6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80039da:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80039de:	2a08      	cmp	r2, #8
 80039e0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80039e4:	dc14      	bgt.n	8003a10 <__ieee754_rem_pio2f+0x12c>
 80039e6:	6021      	str	r1, [r4, #0]
 80039e8:	ed94 7a00 	vldr	s14, [r4]
 80039ec:	ee30 0a47 	vsub.f32	s0, s0, s14
 80039f0:	2e00      	cmp	r6, #0
 80039f2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80039f6:	ed84 0a01 	vstr	s0, [r4, #4]
 80039fa:	daa6      	bge.n	800394a <__ieee754_rem_pio2f+0x66>
 80039fc:	eeb1 7a47 	vneg.f32	s14, s14
 8003a00:	eeb1 0a40 	vneg.f32	s0, s0
 8003a04:	ed84 7a00 	vstr	s14, [r4]
 8003a08:	ed84 0a01 	vstr	s0, [r4, #4]
 8003a0c:	4240      	negs	r0, r0
 8003a0e:	e79c      	b.n	800394a <__ieee754_rem_pio2f+0x66>
 8003a10:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8003b1c <__ieee754_rem_pio2f+0x238>
 8003a14:	eef0 6a40 	vmov.f32	s13, s0
 8003a18:	eee6 6a25 	vfma.f32	s13, s12, s11
 8003a1c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8003a20:	eee6 7a25 	vfma.f32	s15, s12, s11
 8003a24:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003b24 <__ieee754_rem_pio2f+0x240>
 8003a28:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8003a2c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8003a30:	ee15 2a90 	vmov	r2, s11
 8003a34:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8003a38:	1a5b      	subs	r3, r3, r1
 8003a3a:	2b19      	cmp	r3, #25
 8003a3c:	dc04      	bgt.n	8003a48 <__ieee754_rem_pio2f+0x164>
 8003a3e:	edc4 5a00 	vstr	s11, [r4]
 8003a42:	eeb0 0a66 	vmov.f32	s0, s13
 8003a46:	e7cf      	b.n	80039e8 <__ieee754_rem_pio2f+0x104>
 8003a48:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8003b34 <__ieee754_rem_pio2f+0x250>
 8003a4c:	eeb0 0a66 	vmov.f32	s0, s13
 8003a50:	eea6 0a25 	vfma.f32	s0, s12, s11
 8003a54:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8003a58:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8003b38 <__ieee754_rem_pio2f+0x254>
 8003a5c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8003a60:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8003a64:	ee30 7a67 	vsub.f32	s14, s0, s15
 8003a68:	ed84 7a00 	vstr	s14, [r4]
 8003a6c:	e7bc      	b.n	80039e8 <__ieee754_rem_pio2f+0x104>
 8003a6e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8003a72:	d306      	bcc.n	8003a82 <__ieee754_rem_pio2f+0x19e>
 8003a74:	ee70 7a40 	vsub.f32	s15, s0, s0
 8003a78:	edc0 7a01 	vstr	s15, [r0, #4]
 8003a7c:	edc0 7a00 	vstr	s15, [r0]
 8003a80:	e73e      	b.n	8003900 <__ieee754_rem_pio2f+0x1c>
 8003a82:	15ea      	asrs	r2, r5, #23
 8003a84:	3a86      	subs	r2, #134	@ 0x86
 8003a86:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8003a8a:	ee07 3a90 	vmov	s15, r3
 8003a8e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003a92:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8003b3c <__ieee754_rem_pio2f+0x258>
 8003a96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003a9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a9e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8003aa2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003aa6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003aaa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003aae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ab2:	ed8d 7a04 	vstr	s14, [sp, #16]
 8003ab6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003aba:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac2:	edcd 7a05 	vstr	s15, [sp, #20]
 8003ac6:	d11e      	bne.n	8003b06 <__ieee754_rem_pio2f+0x222>
 8003ac8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8003acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad0:	bf0c      	ite	eq
 8003ad2:	2301      	moveq	r3, #1
 8003ad4:	2302      	movne	r3, #2
 8003ad6:	491a      	ldr	r1, [pc, #104]	@ (8003b40 <__ieee754_rem_pio2f+0x25c>)
 8003ad8:	9101      	str	r1, [sp, #4]
 8003ada:	2102      	movs	r1, #2
 8003adc:	9100      	str	r1, [sp, #0]
 8003ade:	a803      	add	r0, sp, #12
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	f000 f837 	bl	8003b54 <__kernel_rem_pio2f>
 8003ae6:	2e00      	cmp	r6, #0
 8003ae8:	f6bf af2f 	bge.w	800394a <__ieee754_rem_pio2f+0x66>
 8003aec:	edd4 7a00 	vldr	s15, [r4]
 8003af0:	eef1 7a67 	vneg.f32	s15, s15
 8003af4:	edc4 7a00 	vstr	s15, [r4]
 8003af8:	edd4 7a01 	vldr	s15, [r4, #4]
 8003afc:	eef1 7a67 	vneg.f32	s15, s15
 8003b00:	edc4 7a01 	vstr	s15, [r4, #4]
 8003b04:	e782      	b.n	8003a0c <__ieee754_rem_pio2f+0x128>
 8003b06:	2303      	movs	r3, #3
 8003b08:	e7e5      	b.n	8003ad6 <__ieee754_rem_pio2f+0x1f2>
 8003b0a:	bf00      	nop
 8003b0c:	3f490fd8 	.word	0x3f490fd8
 8003b10:	4016cbe3 	.word	0x4016cbe3
 8003b14:	3fc90f80 	.word	0x3fc90f80
 8003b18:	3fc90fd0 	.word	0x3fc90fd0
 8003b1c:	37354400 	.word	0x37354400
 8003b20:	37354443 	.word	0x37354443
 8003b24:	2e85a308 	.word	0x2e85a308
 8003b28:	43490f80 	.word	0x43490f80
 8003b2c:	3f22f984 	.word	0x3f22f984
 8003b30:	080041f8 	.word	0x080041f8
 8003b34:	2e85a300 	.word	0x2e85a300
 8003b38:	248d3132 	.word	0x248d3132
 8003b3c:	43800000 	.word	0x43800000
 8003b40:	08004278 	.word	0x08004278

08003b44 <fabsf>:
 8003b44:	ee10 3a10 	vmov	r3, s0
 8003b48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b4c:	ee00 3a10 	vmov	s0, r3
 8003b50:	4770      	bx	lr
	...

08003b54 <__kernel_rem_pio2f>:
 8003b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b58:	ed2d 8b04 	vpush	{d8-d9}
 8003b5c:	b0d9      	sub	sp, #356	@ 0x164
 8003b5e:	4690      	mov	r8, r2
 8003b60:	9001      	str	r0, [sp, #4]
 8003b62:	4ab6      	ldr	r2, [pc, #728]	@ (8003e3c <__kernel_rem_pio2f+0x2e8>)
 8003b64:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8003b66:	f118 0f04 	cmn.w	r8, #4
 8003b6a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8003b6e:	460f      	mov	r7, r1
 8003b70:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8003b74:	db26      	blt.n	8003bc4 <__kernel_rem_pio2f+0x70>
 8003b76:	f1b8 0203 	subs.w	r2, r8, #3
 8003b7a:	bf48      	it	mi
 8003b7c:	f108 0204 	addmi.w	r2, r8, #4
 8003b80:	10d2      	asrs	r2, r2, #3
 8003b82:	1c55      	adds	r5, r2, #1
 8003b84:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8003b86:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8003e4c <__kernel_rem_pio2f+0x2f8>
 8003b8a:	00e8      	lsls	r0, r5, #3
 8003b8c:	eba2 060b 	sub.w	r6, r2, fp
 8003b90:	9002      	str	r0, [sp, #8]
 8003b92:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8003b96:	eb0a 0c0b 	add.w	ip, sl, fp
 8003b9a:	ac1c      	add	r4, sp, #112	@ 0x70
 8003b9c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8003ba0:	2000      	movs	r0, #0
 8003ba2:	4560      	cmp	r0, ip
 8003ba4:	dd10      	ble.n	8003bc8 <__kernel_rem_pio2f+0x74>
 8003ba6:	a91c      	add	r1, sp, #112	@ 0x70
 8003ba8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8003bac:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8003bb0:	2600      	movs	r6, #0
 8003bb2:	4556      	cmp	r6, sl
 8003bb4:	dc24      	bgt.n	8003c00 <__kernel_rem_pio2f+0xac>
 8003bb6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003bba:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8003e4c <__kernel_rem_pio2f+0x2f8>
 8003bbe:	4684      	mov	ip, r0
 8003bc0:	2400      	movs	r4, #0
 8003bc2:	e016      	b.n	8003bf2 <__kernel_rem_pio2f+0x9e>
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	e7dc      	b.n	8003b82 <__kernel_rem_pio2f+0x2e>
 8003bc8:	42c6      	cmn	r6, r0
 8003bca:	bf5d      	ittte	pl
 8003bcc:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8003bd0:	ee07 1a90 	vmovpl	s15, r1
 8003bd4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8003bd8:	eef0 7a47 	vmovmi.f32	s15, s14
 8003bdc:	ece4 7a01 	vstmia	r4!, {s15}
 8003be0:	3001      	adds	r0, #1
 8003be2:	e7de      	b.n	8003ba2 <__kernel_rem_pio2f+0x4e>
 8003be4:	ecfe 6a01 	vldmia	lr!, {s13}
 8003be8:	ed3c 7a01 	vldmdb	ip!, {s14}
 8003bec:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003bf0:	3401      	adds	r4, #1
 8003bf2:	455c      	cmp	r4, fp
 8003bf4:	ddf6      	ble.n	8003be4 <__kernel_rem_pio2f+0x90>
 8003bf6:	ece9 7a01 	vstmia	r9!, {s15}
 8003bfa:	3601      	adds	r6, #1
 8003bfc:	3004      	adds	r0, #4
 8003bfe:	e7d8      	b.n	8003bb2 <__kernel_rem_pio2f+0x5e>
 8003c00:	a908      	add	r1, sp, #32
 8003c02:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003c06:	9104      	str	r1, [sp, #16]
 8003c08:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8003c0a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8003e48 <__kernel_rem_pio2f+0x2f4>
 8003c0e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8003e44 <__kernel_rem_pio2f+0x2f0>
 8003c12:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8003c16:	9203      	str	r2, [sp, #12]
 8003c18:	4654      	mov	r4, sl
 8003c1a:	00a2      	lsls	r2, r4, #2
 8003c1c:	9205      	str	r2, [sp, #20]
 8003c1e:	aa58      	add	r2, sp, #352	@ 0x160
 8003c20:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8003c24:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8003c28:	a944      	add	r1, sp, #272	@ 0x110
 8003c2a:	aa08      	add	r2, sp, #32
 8003c2c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8003c30:	4694      	mov	ip, r2
 8003c32:	4626      	mov	r6, r4
 8003c34:	2e00      	cmp	r6, #0
 8003c36:	dc4c      	bgt.n	8003cd2 <__kernel_rem_pio2f+0x17e>
 8003c38:	4628      	mov	r0, r5
 8003c3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003c3e:	f000 f9f1 	bl	8004024 <scalbnf>
 8003c42:	eeb0 8a40 	vmov.f32	s16, s0
 8003c46:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8003c4a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8003c4e:	f000 fa4f 	bl	80040f0 <floorf>
 8003c52:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8003c56:	eea0 8a67 	vfms.f32	s16, s0, s15
 8003c5a:	2d00      	cmp	r5, #0
 8003c5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003c60:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8003c64:	ee17 9a90 	vmov	r9, s15
 8003c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c6c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8003c70:	dd41      	ble.n	8003cf6 <__kernel_rem_pio2f+0x1a2>
 8003c72:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8003c76:	a908      	add	r1, sp, #32
 8003c78:	f1c5 0e08 	rsb	lr, r5, #8
 8003c7c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8003c80:	fa46 f00e 	asr.w	r0, r6, lr
 8003c84:	4481      	add	r9, r0
 8003c86:	fa00 f00e 	lsl.w	r0, r0, lr
 8003c8a:	1a36      	subs	r6, r6, r0
 8003c8c:	f1c5 0007 	rsb	r0, r5, #7
 8003c90:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8003c94:	4106      	asrs	r6, r0
 8003c96:	2e00      	cmp	r6, #0
 8003c98:	dd3c      	ble.n	8003d14 <__kernel_rem_pio2f+0x1c0>
 8003c9a:	f04f 0e00 	mov.w	lr, #0
 8003c9e:	f109 0901 	add.w	r9, r9, #1
 8003ca2:	4670      	mov	r0, lr
 8003ca4:	4574      	cmp	r4, lr
 8003ca6:	dc68      	bgt.n	8003d7a <__kernel_rem_pio2f+0x226>
 8003ca8:	2d00      	cmp	r5, #0
 8003caa:	dd03      	ble.n	8003cb4 <__kernel_rem_pio2f+0x160>
 8003cac:	2d01      	cmp	r5, #1
 8003cae:	d074      	beq.n	8003d9a <__kernel_rem_pio2f+0x246>
 8003cb0:	2d02      	cmp	r5, #2
 8003cb2:	d07d      	beq.n	8003db0 <__kernel_rem_pio2f+0x25c>
 8003cb4:	2e02      	cmp	r6, #2
 8003cb6:	d12d      	bne.n	8003d14 <__kernel_rem_pio2f+0x1c0>
 8003cb8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003cbc:	ee30 8a48 	vsub.f32	s16, s0, s16
 8003cc0:	b340      	cbz	r0, 8003d14 <__kernel_rem_pio2f+0x1c0>
 8003cc2:	4628      	mov	r0, r5
 8003cc4:	9306      	str	r3, [sp, #24]
 8003cc6:	f000 f9ad 	bl	8004024 <scalbnf>
 8003cca:	9b06      	ldr	r3, [sp, #24]
 8003ccc:	ee38 8a40 	vsub.f32	s16, s16, s0
 8003cd0:	e020      	b.n	8003d14 <__kernel_rem_pio2f+0x1c0>
 8003cd2:	ee60 7a28 	vmul.f32	s15, s0, s17
 8003cd6:	3e01      	subs	r6, #1
 8003cd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ce0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8003ce4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003ce8:	ecac 0a01 	vstmia	ip!, {s0}
 8003cec:	ed30 0a01 	vldmdb	r0!, {s0}
 8003cf0:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003cf4:	e79e      	b.n	8003c34 <__kernel_rem_pio2f+0xe0>
 8003cf6:	d105      	bne.n	8003d04 <__kernel_rem_pio2f+0x1b0>
 8003cf8:	1e60      	subs	r0, r4, #1
 8003cfa:	a908      	add	r1, sp, #32
 8003cfc:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8003d00:	11f6      	asrs	r6, r6, #7
 8003d02:	e7c8      	b.n	8003c96 <__kernel_rem_pio2f+0x142>
 8003d04:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8003d08:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d10:	da31      	bge.n	8003d76 <__kernel_rem_pio2f+0x222>
 8003d12:	2600      	movs	r6, #0
 8003d14:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1c:	f040 8098 	bne.w	8003e50 <__kernel_rem_pio2f+0x2fc>
 8003d20:	1e60      	subs	r0, r4, #1
 8003d22:	2200      	movs	r2, #0
 8003d24:	4550      	cmp	r0, sl
 8003d26:	da4b      	bge.n	8003dc0 <__kernel_rem_pio2f+0x26c>
 8003d28:	2a00      	cmp	r2, #0
 8003d2a:	d065      	beq.n	8003df8 <__kernel_rem_pio2f+0x2a4>
 8003d2c:	3c01      	subs	r4, #1
 8003d2e:	ab08      	add	r3, sp, #32
 8003d30:	3d08      	subs	r5, #8
 8003d32:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f8      	beq.n	8003d2c <__kernel_rem_pio2f+0x1d8>
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003d40:	f000 f970 	bl	8004024 <scalbnf>
 8003d44:	1c63      	adds	r3, r4, #1
 8003d46:	aa44      	add	r2, sp, #272	@ 0x110
 8003d48:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8003e48 <__kernel_rem_pio2f+0x2f4>
 8003d4c:	0099      	lsls	r1, r3, #2
 8003d4e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003d52:	4623      	mov	r3, r4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f280 80a9 	bge.w	8003eac <__kernel_rem_pio2f+0x358>
 8003d5a:	4623      	mov	r3, r4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f2c0 80c7 	blt.w	8003ef0 <__kernel_rem_pio2f+0x39c>
 8003d62:	aa44      	add	r2, sp, #272	@ 0x110
 8003d64:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8003d68:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8003e40 <__kernel_rem_pio2f+0x2ec>
 8003d6c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8003e4c <__kernel_rem_pio2f+0x2f8>
 8003d70:	2000      	movs	r0, #0
 8003d72:	1ae2      	subs	r2, r4, r3
 8003d74:	e0b1      	b.n	8003eda <__kernel_rem_pio2f+0x386>
 8003d76:	2602      	movs	r6, #2
 8003d78:	e78f      	b.n	8003c9a <__kernel_rem_pio2f+0x146>
 8003d7a:	f852 1b04 	ldr.w	r1, [r2], #4
 8003d7e:	b948      	cbnz	r0, 8003d94 <__kernel_rem_pio2f+0x240>
 8003d80:	b121      	cbz	r1, 8003d8c <__kernel_rem_pio2f+0x238>
 8003d82:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8003d86:	f842 1c04 	str.w	r1, [r2, #-4]
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	f10e 0e01 	add.w	lr, lr, #1
 8003d90:	4608      	mov	r0, r1
 8003d92:	e787      	b.n	8003ca4 <__kernel_rem_pio2f+0x150>
 8003d94:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8003d98:	e7f5      	b.n	8003d86 <__kernel_rem_pio2f+0x232>
 8003d9a:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8003d9e:	aa08      	add	r2, sp, #32
 8003da0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8003da4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003da8:	a908      	add	r1, sp, #32
 8003daa:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8003dae:	e781      	b.n	8003cb4 <__kernel_rem_pio2f+0x160>
 8003db0:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8003db4:	aa08      	add	r2, sp, #32
 8003db6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8003dba:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8003dbe:	e7f3      	b.n	8003da8 <__kernel_rem_pio2f+0x254>
 8003dc0:	a908      	add	r1, sp, #32
 8003dc2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8003dc6:	3801      	subs	r0, #1
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	e7ab      	b.n	8003d24 <__kernel_rem_pio2f+0x1d0>
 8003dcc:	3201      	adds	r2, #1
 8003dce:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8003dd2:	2e00      	cmp	r6, #0
 8003dd4:	d0fa      	beq.n	8003dcc <__kernel_rem_pio2f+0x278>
 8003dd6:	9905      	ldr	r1, [sp, #20]
 8003dd8:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8003ddc:	eb0d 0001 	add.w	r0, sp, r1
 8003de0:	18e6      	adds	r6, r4, r3
 8003de2:	a91c      	add	r1, sp, #112	@ 0x70
 8003de4:	f104 0c01 	add.w	ip, r4, #1
 8003de8:	384c      	subs	r0, #76	@ 0x4c
 8003dea:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8003dee:	4422      	add	r2, r4
 8003df0:	4562      	cmp	r2, ip
 8003df2:	da04      	bge.n	8003dfe <__kernel_rem_pio2f+0x2aa>
 8003df4:	4614      	mov	r4, r2
 8003df6:	e710      	b.n	8003c1a <__kernel_rem_pio2f+0xc6>
 8003df8:	9804      	ldr	r0, [sp, #16]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	e7e7      	b.n	8003dce <__kernel_rem_pio2f+0x27a>
 8003dfe:	9903      	ldr	r1, [sp, #12]
 8003e00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003e04:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8003e08:	9105      	str	r1, [sp, #20]
 8003e0a:	ee07 1a90 	vmov	s15, r1
 8003e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e12:	2400      	movs	r4, #0
 8003e14:	ece6 7a01 	vstmia	r6!, {s15}
 8003e18:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8003e4c <__kernel_rem_pio2f+0x2f8>
 8003e1c:	46b1      	mov	r9, r6
 8003e1e:	455c      	cmp	r4, fp
 8003e20:	dd04      	ble.n	8003e2c <__kernel_rem_pio2f+0x2d8>
 8003e22:	ece0 7a01 	vstmia	r0!, {s15}
 8003e26:	f10c 0c01 	add.w	ip, ip, #1
 8003e2a:	e7e1      	b.n	8003df0 <__kernel_rem_pio2f+0x29c>
 8003e2c:	ecfe 6a01 	vldmia	lr!, {s13}
 8003e30:	ed39 7a01 	vldmdb	r9!, {s14}
 8003e34:	3401      	adds	r4, #1
 8003e36:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003e3a:	e7f0      	b.n	8003e1e <__kernel_rem_pio2f+0x2ca>
 8003e3c:	080045bc 	.word	0x080045bc
 8003e40:	08004590 	.word	0x08004590
 8003e44:	43800000 	.word	0x43800000
 8003e48:	3b800000 	.word	0x3b800000
 8003e4c:	00000000 	.word	0x00000000
 8003e50:	9b02      	ldr	r3, [sp, #8]
 8003e52:	eeb0 0a48 	vmov.f32	s0, s16
 8003e56:	eba3 0008 	sub.w	r0, r3, r8
 8003e5a:	f000 f8e3 	bl	8004024 <scalbnf>
 8003e5e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8003e44 <__kernel_rem_pio2f+0x2f0>
 8003e62:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8003e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e6a:	db19      	blt.n	8003ea0 <__kernel_rem_pio2f+0x34c>
 8003e6c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8003e48 <__kernel_rem_pio2f+0x2f4>
 8003e70:	ee60 7a27 	vmul.f32	s15, s0, s15
 8003e74:	aa08      	add	r2, sp, #32
 8003e76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e7a:	3508      	adds	r5, #8
 8003e7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e80:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8003e84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e88:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003e8c:	ee10 3a10 	vmov	r3, s0
 8003e90:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8003e94:	ee17 3a90 	vmov	r3, s15
 8003e98:	3401      	adds	r4, #1
 8003e9a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8003e9e:	e74c      	b.n	8003d3a <__kernel_rem_pio2f+0x1e6>
 8003ea0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003ea4:	aa08      	add	r2, sp, #32
 8003ea6:	ee10 3a10 	vmov	r3, s0
 8003eaa:	e7f6      	b.n	8003e9a <__kernel_rem_pio2f+0x346>
 8003eac:	a808      	add	r0, sp, #32
 8003eae:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8003eb2:	9001      	str	r0, [sp, #4]
 8003eb4:	ee07 0a90 	vmov	s15, r0
 8003eb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8003ec2:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003ec6:	ed62 7a01 	vstmdb	r2!, {s15}
 8003eca:	e743      	b.n	8003d54 <__kernel_rem_pio2f+0x200>
 8003ecc:	ecfc 6a01 	vldmia	ip!, {s13}
 8003ed0:	ecb5 7a01 	vldmia	r5!, {s14}
 8003ed4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003ed8:	3001      	adds	r0, #1
 8003eda:	4550      	cmp	r0, sl
 8003edc:	dc01      	bgt.n	8003ee2 <__kernel_rem_pio2f+0x38e>
 8003ede:	4290      	cmp	r0, r2
 8003ee0:	ddf4      	ble.n	8003ecc <__kernel_rem_pio2f+0x378>
 8003ee2:	a858      	add	r0, sp, #352	@ 0x160
 8003ee4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003ee8:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8003eec:	3b01      	subs	r3, #1
 8003eee:	e735      	b.n	8003d5c <__kernel_rem_pio2f+0x208>
 8003ef0:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	dc09      	bgt.n	8003f0a <__kernel_rem_pio2f+0x3b6>
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	dc27      	bgt.n	8003f4a <__kernel_rem_pio2f+0x3f6>
 8003efa:	d040      	beq.n	8003f7e <__kernel_rem_pio2f+0x42a>
 8003efc:	f009 0007 	and.w	r0, r9, #7
 8003f00:	b059      	add	sp, #356	@ 0x164
 8003f02:	ecbd 8b04 	vpop	{d8-d9}
 8003f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f0a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8003f0c:	2b03      	cmp	r3, #3
 8003f0e:	d1f5      	bne.n	8003efc <__kernel_rem_pio2f+0x3a8>
 8003f10:	aa30      	add	r2, sp, #192	@ 0xc0
 8003f12:	1f0b      	subs	r3, r1, #4
 8003f14:	4413      	add	r3, r2
 8003f16:	461a      	mov	r2, r3
 8003f18:	4620      	mov	r0, r4
 8003f1a:	2800      	cmp	r0, #0
 8003f1c:	dc50      	bgt.n	8003fc0 <__kernel_rem_pio2f+0x46c>
 8003f1e:	4622      	mov	r2, r4
 8003f20:	2a01      	cmp	r2, #1
 8003f22:	dc5d      	bgt.n	8003fe0 <__kernel_rem_pio2f+0x48c>
 8003f24:	ab30      	add	r3, sp, #192	@ 0xc0
 8003f26:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8003e4c <__kernel_rem_pio2f+0x2f8>
 8003f2a:	440b      	add	r3, r1
 8003f2c:	2c01      	cmp	r4, #1
 8003f2e:	dc67      	bgt.n	8004000 <__kernel_rem_pio2f+0x4ac>
 8003f30:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8003f34:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8003f38:	2e00      	cmp	r6, #0
 8003f3a:	d167      	bne.n	800400c <__kernel_rem_pio2f+0x4b8>
 8003f3c:	edc7 6a00 	vstr	s13, [r7]
 8003f40:	ed87 7a01 	vstr	s14, [r7, #4]
 8003f44:	edc7 7a02 	vstr	s15, [r7, #8]
 8003f48:	e7d8      	b.n	8003efc <__kernel_rem_pio2f+0x3a8>
 8003f4a:	ab30      	add	r3, sp, #192	@ 0xc0
 8003f4c:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8003e4c <__kernel_rem_pio2f+0x2f8>
 8003f50:	440b      	add	r3, r1
 8003f52:	4622      	mov	r2, r4
 8003f54:	2a00      	cmp	r2, #0
 8003f56:	da24      	bge.n	8003fa2 <__kernel_rem_pio2f+0x44e>
 8003f58:	b34e      	cbz	r6, 8003fae <__kernel_rem_pio2f+0x45a>
 8003f5a:	eef1 7a47 	vneg.f32	s15, s14
 8003f5e:	edc7 7a00 	vstr	s15, [r7]
 8003f62:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8003f66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f6a:	aa31      	add	r2, sp, #196	@ 0xc4
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	429c      	cmp	r4, r3
 8003f70:	da20      	bge.n	8003fb4 <__kernel_rem_pio2f+0x460>
 8003f72:	b10e      	cbz	r6, 8003f78 <__kernel_rem_pio2f+0x424>
 8003f74:	eef1 7a67 	vneg.f32	s15, s15
 8003f78:	edc7 7a01 	vstr	s15, [r7, #4]
 8003f7c:	e7be      	b.n	8003efc <__kernel_rem_pio2f+0x3a8>
 8003f7e:	ab30      	add	r3, sp, #192	@ 0xc0
 8003f80:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8003e4c <__kernel_rem_pio2f+0x2f8>
 8003f84:	440b      	add	r3, r1
 8003f86:	2c00      	cmp	r4, #0
 8003f88:	da05      	bge.n	8003f96 <__kernel_rem_pio2f+0x442>
 8003f8a:	b10e      	cbz	r6, 8003f90 <__kernel_rem_pio2f+0x43c>
 8003f8c:	eef1 7a67 	vneg.f32	s15, s15
 8003f90:	edc7 7a00 	vstr	s15, [r7]
 8003f94:	e7b2      	b.n	8003efc <__kernel_rem_pio2f+0x3a8>
 8003f96:	ed33 7a01 	vldmdb	r3!, {s14}
 8003f9a:	3c01      	subs	r4, #1
 8003f9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fa0:	e7f1      	b.n	8003f86 <__kernel_rem_pio2f+0x432>
 8003fa2:	ed73 7a01 	vldmdb	r3!, {s15}
 8003fa6:	3a01      	subs	r2, #1
 8003fa8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003fac:	e7d2      	b.n	8003f54 <__kernel_rem_pio2f+0x400>
 8003fae:	eef0 7a47 	vmov.f32	s15, s14
 8003fb2:	e7d4      	b.n	8003f5e <__kernel_rem_pio2f+0x40a>
 8003fb4:	ecb2 7a01 	vldmia	r2!, {s14}
 8003fb8:	3301      	adds	r3, #1
 8003fba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fbe:	e7d6      	b.n	8003f6e <__kernel_rem_pio2f+0x41a>
 8003fc0:	ed72 7a01 	vldmdb	r2!, {s15}
 8003fc4:	edd2 6a01 	vldr	s13, [r2, #4]
 8003fc8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003fcc:	3801      	subs	r0, #1
 8003fce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003fd2:	ed82 7a00 	vstr	s14, [r2]
 8003fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fda:	edc2 7a01 	vstr	s15, [r2, #4]
 8003fde:	e79c      	b.n	8003f1a <__kernel_rem_pio2f+0x3c6>
 8003fe0:	ed73 7a01 	vldmdb	r3!, {s15}
 8003fe4:	edd3 6a01 	vldr	s13, [r3, #4]
 8003fe8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003fec:	3a01      	subs	r2, #1
 8003fee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ff2:	ed83 7a00 	vstr	s14, [r3]
 8003ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ffa:	edc3 7a01 	vstr	s15, [r3, #4]
 8003ffe:	e78f      	b.n	8003f20 <__kernel_rem_pio2f+0x3cc>
 8004000:	ed33 7a01 	vldmdb	r3!, {s14}
 8004004:	3c01      	subs	r4, #1
 8004006:	ee77 7a87 	vadd.f32	s15, s15, s14
 800400a:	e78f      	b.n	8003f2c <__kernel_rem_pio2f+0x3d8>
 800400c:	eef1 6a66 	vneg.f32	s13, s13
 8004010:	eeb1 7a47 	vneg.f32	s14, s14
 8004014:	edc7 6a00 	vstr	s13, [r7]
 8004018:	ed87 7a01 	vstr	s14, [r7, #4]
 800401c:	eef1 7a67 	vneg.f32	s15, s15
 8004020:	e790      	b.n	8003f44 <__kernel_rem_pio2f+0x3f0>
 8004022:	bf00      	nop

08004024 <scalbnf>:
 8004024:	ee10 3a10 	vmov	r3, s0
 8004028:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800402c:	d02b      	beq.n	8004086 <scalbnf+0x62>
 800402e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8004032:	d302      	bcc.n	800403a <scalbnf+0x16>
 8004034:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004038:	4770      	bx	lr
 800403a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800403e:	d123      	bne.n	8004088 <scalbnf+0x64>
 8004040:	4b24      	ldr	r3, [pc, #144]	@ (80040d4 <scalbnf+0xb0>)
 8004042:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80040d8 <scalbnf+0xb4>
 8004046:	4298      	cmp	r0, r3
 8004048:	ee20 0a27 	vmul.f32	s0, s0, s15
 800404c:	db17      	blt.n	800407e <scalbnf+0x5a>
 800404e:	ee10 3a10 	vmov	r3, s0
 8004052:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004056:	3a19      	subs	r2, #25
 8004058:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800405c:	4288      	cmp	r0, r1
 800405e:	dd15      	ble.n	800408c <scalbnf+0x68>
 8004060:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80040dc <scalbnf+0xb8>
 8004064:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80040e0 <scalbnf+0xbc>
 8004068:	ee10 3a10 	vmov	r3, s0
 800406c:	eeb0 7a67 	vmov.f32	s14, s15
 8004070:	2b00      	cmp	r3, #0
 8004072:	bfb8      	it	lt
 8004074:	eef0 7a66 	vmovlt.f32	s15, s13
 8004078:	ee27 0a87 	vmul.f32	s0, s15, s14
 800407c:	4770      	bx	lr
 800407e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80040e4 <scalbnf+0xc0>
 8004082:	ee27 0a80 	vmul.f32	s0, s15, s0
 8004086:	4770      	bx	lr
 8004088:	0dd2      	lsrs	r2, r2, #23
 800408a:	e7e5      	b.n	8004058 <scalbnf+0x34>
 800408c:	4410      	add	r0, r2
 800408e:	28fe      	cmp	r0, #254	@ 0xfe
 8004090:	dce6      	bgt.n	8004060 <scalbnf+0x3c>
 8004092:	2800      	cmp	r0, #0
 8004094:	dd06      	ble.n	80040a4 <scalbnf+0x80>
 8004096:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800409a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800409e:	ee00 3a10 	vmov	s0, r3
 80040a2:	4770      	bx	lr
 80040a4:	f110 0f16 	cmn.w	r0, #22
 80040a8:	da09      	bge.n	80040be <scalbnf+0x9a>
 80040aa:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80040e4 <scalbnf+0xc0>
 80040ae:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80040e8 <scalbnf+0xc4>
 80040b2:	ee10 3a10 	vmov	r3, s0
 80040b6:	eeb0 7a67 	vmov.f32	s14, s15
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	e7d9      	b.n	8004072 <scalbnf+0x4e>
 80040be:	3019      	adds	r0, #25
 80040c0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80040c4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80040c8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80040ec <scalbnf+0xc8>
 80040cc:	ee07 3a90 	vmov	s15, r3
 80040d0:	e7d7      	b.n	8004082 <scalbnf+0x5e>
 80040d2:	bf00      	nop
 80040d4:	ffff3cb0 	.word	0xffff3cb0
 80040d8:	4c000000 	.word	0x4c000000
 80040dc:	7149f2ca 	.word	0x7149f2ca
 80040e0:	f149f2ca 	.word	0xf149f2ca
 80040e4:	0da24260 	.word	0x0da24260
 80040e8:	8da24260 	.word	0x8da24260
 80040ec:	33000000 	.word	0x33000000

080040f0 <floorf>:
 80040f0:	ee10 3a10 	vmov	r3, s0
 80040f4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80040f8:	3a7f      	subs	r2, #127	@ 0x7f
 80040fa:	2a16      	cmp	r2, #22
 80040fc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004100:	dc2b      	bgt.n	800415a <floorf+0x6a>
 8004102:	2a00      	cmp	r2, #0
 8004104:	da12      	bge.n	800412c <floorf+0x3c>
 8004106:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800416c <floorf+0x7c>
 800410a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800410e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004116:	dd06      	ble.n	8004126 <floorf+0x36>
 8004118:	2b00      	cmp	r3, #0
 800411a:	da24      	bge.n	8004166 <floorf+0x76>
 800411c:	2900      	cmp	r1, #0
 800411e:	4b14      	ldr	r3, [pc, #80]	@ (8004170 <floorf+0x80>)
 8004120:	bf08      	it	eq
 8004122:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8004126:	ee00 3a10 	vmov	s0, r3
 800412a:	4770      	bx	lr
 800412c:	4911      	ldr	r1, [pc, #68]	@ (8004174 <floorf+0x84>)
 800412e:	4111      	asrs	r1, r2
 8004130:	420b      	tst	r3, r1
 8004132:	d0fa      	beq.n	800412a <floorf+0x3a>
 8004134:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800416c <floorf+0x7c>
 8004138:	ee30 0a27 	vadd.f32	s0, s0, s15
 800413c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004144:	ddef      	ble.n	8004126 <floorf+0x36>
 8004146:	2b00      	cmp	r3, #0
 8004148:	bfbe      	ittt	lt
 800414a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800414e:	fa40 f202 	asrlt.w	r2, r0, r2
 8004152:	189b      	addlt	r3, r3, r2
 8004154:	ea23 0301 	bic.w	r3, r3, r1
 8004158:	e7e5      	b.n	8004126 <floorf+0x36>
 800415a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800415e:	d3e4      	bcc.n	800412a <floorf+0x3a>
 8004160:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004164:	4770      	bx	lr
 8004166:	2300      	movs	r3, #0
 8004168:	e7dd      	b.n	8004126 <floorf+0x36>
 800416a:	bf00      	nop
 800416c:	7149f2ca 	.word	0x7149f2ca
 8004170:	bf800000 	.word	0xbf800000
 8004174:	007fffff 	.word	0x007fffff

08004178 <memset>:
 8004178:	4402      	add	r2, r0
 800417a:	4603      	mov	r3, r0
 800417c:	4293      	cmp	r3, r2
 800417e:	d100      	bne.n	8004182 <memset+0xa>
 8004180:	4770      	bx	lr
 8004182:	f803 1b01 	strb.w	r1, [r3], #1
 8004186:	e7f9      	b.n	800417c <memset+0x4>

08004188 <__libc_init_array>:
 8004188:	b570      	push	{r4, r5, r6, lr}
 800418a:	4d0d      	ldr	r5, [pc, #52]	@ (80041c0 <__libc_init_array+0x38>)
 800418c:	4c0d      	ldr	r4, [pc, #52]	@ (80041c4 <__libc_init_array+0x3c>)
 800418e:	1b64      	subs	r4, r4, r5
 8004190:	10a4      	asrs	r4, r4, #2
 8004192:	2600      	movs	r6, #0
 8004194:	42a6      	cmp	r6, r4
 8004196:	d109      	bne.n	80041ac <__libc_init_array+0x24>
 8004198:	4d0b      	ldr	r5, [pc, #44]	@ (80041c8 <__libc_init_array+0x40>)
 800419a:	4c0c      	ldr	r4, [pc, #48]	@ (80041cc <__libc_init_array+0x44>)
 800419c:	f000 f818 	bl	80041d0 <_init>
 80041a0:	1b64      	subs	r4, r4, r5
 80041a2:	10a4      	asrs	r4, r4, #2
 80041a4:	2600      	movs	r6, #0
 80041a6:	42a6      	cmp	r6, r4
 80041a8:	d105      	bne.n	80041b6 <__libc_init_array+0x2e>
 80041aa:	bd70      	pop	{r4, r5, r6, pc}
 80041ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80041b0:	4798      	blx	r3
 80041b2:	3601      	adds	r6, #1
 80041b4:	e7ee      	b.n	8004194 <__libc_init_array+0xc>
 80041b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ba:	4798      	blx	r3
 80041bc:	3601      	adds	r6, #1
 80041be:	e7f2      	b.n	80041a6 <__libc_init_array+0x1e>
 80041c0:	080045c8 	.word	0x080045c8
 80041c4:	080045c8 	.word	0x080045c8
 80041c8:	080045c8 	.word	0x080045c8
 80041cc:	080045cc 	.word	0x080045cc

080041d0 <_init>:
 80041d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d2:	bf00      	nop
 80041d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d6:	bc08      	pop	{r3}
 80041d8:	469e      	mov	lr, r3
 80041da:	4770      	bx	lr

080041dc <_fini>:
 80041dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041de:	bf00      	nop
 80041e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041e2:	bc08      	pop	{r3}
 80041e4:	469e      	mov	lr, r3
 80041e6:	4770      	bx	lr
