
kinematech-torq-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ec4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800a0a4  0800a0a4  0000b0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a168  0800a168  0000c1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a168  0800a168  0000b168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a170  0800a170  0000c1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a170  0800a170  0000b170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a174  0800a174  0000b174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800a178  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bd8  200001e0  0800a358  0000c1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001db8  0800a358  0000cdb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015796  00000000  00000000  0000c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039a6  00000000  00000000  000219a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  00025350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f2e  00000000  00000000  00026768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023c0d  00000000  00000000  00027696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001701d  00000000  00000000  0004b2a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d939c  00000000  00000000  000622c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013b65c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059f0  00000000  00000000  0013b6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00141090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a08c 	.word	0x0800a08c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800a08c 	.word	0x0800a08c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <MX_GPIO_Init>:
        * EXTI
     PA15   ------> I2C1_SCL
     PB7   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08a      	sub	sp, #40	@ 0x28
 80002c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c6:	f107 0314 	add.w	r3, r7, #20
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]
 80002d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d6:	4b35      	ldr	r3, [pc, #212]	@ (80003ac <MX_GPIO_Init+0xec>)
 80002d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002da:	4a34      	ldr	r2, [pc, #208]	@ (80003ac <MX_GPIO_Init+0xec>)
 80002dc:	f043 0304 	orr.w	r3, r3, #4
 80002e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002e2:	4b32      	ldr	r3, [pc, #200]	@ (80003ac <MX_GPIO_Init+0xec>)
 80002e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002e6:	f003 0304 	and.w	r3, r3, #4
 80002ea:	613b      	str	r3, [r7, #16]
 80002ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ee:	4b2f      	ldr	r3, [pc, #188]	@ (80003ac <MX_GPIO_Init+0xec>)
 80002f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002f2:	4a2e      	ldr	r2, [pc, #184]	@ (80003ac <MX_GPIO_Init+0xec>)
 80002f4:	f043 0320 	orr.w	r3, r3, #32
 80002f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002fa:	4b2c      	ldr	r3, [pc, #176]	@ (80003ac <MX_GPIO_Init+0xec>)
 80002fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002fe:	f003 0320 	and.w	r3, r3, #32
 8000302:	60fb      	str	r3, [r7, #12]
 8000304:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000306:	4b29      	ldr	r3, [pc, #164]	@ (80003ac <MX_GPIO_Init+0xec>)
 8000308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800030a:	4a28      	ldr	r2, [pc, #160]	@ (80003ac <MX_GPIO_Init+0xec>)
 800030c:	f043 0302 	orr.w	r3, r3, #2
 8000310:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000312:	4b26      	ldr	r3, [pc, #152]	@ (80003ac <MX_GPIO_Init+0xec>)
 8000314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000316:	f003 0302 	and.w	r3, r3, #2
 800031a:	60bb      	str	r3, [r7, #8]
 800031c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031e:	4b23      	ldr	r3, [pc, #140]	@ (80003ac <MX_GPIO_Init+0xec>)
 8000320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000322:	4a22      	ldr	r2, [pc, #136]	@ (80003ac <MX_GPIO_Init+0xec>)
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800032a:	4b20      	ldr	r3, [pc, #128]	@ (80003ac <MX_GPIO_Init+0xec>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800032e:	f003 0301 	and.w	r3, r3, #1
 8000332:	607b      	str	r3, [r7, #4]
 8000334:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_BLUE_Pin|LED_RED_Pin, GPIO_PIN_SET);
 8000336:	2201      	movs	r2, #1
 8000338:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 800033c:	481c      	ldr	r0, [pc, #112]	@ (80003b0 <MX_GPIO_Init+0xf0>)
 800033e:	f000 ff0b 	bl	8001158 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_BLUE_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_RED_Pin;
 8000342:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000348:	2301      	movs	r3, #1
 800034a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800034c:	2301      	movs	r3, #1
 800034e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000350:	2300      	movs	r3, #0
 8000352:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000354:	f107 0314 	add.w	r3, r7, #20
 8000358:	4619      	mov	r1, r3
 800035a:	4815      	ldr	r0, [pc, #84]	@ (80003b0 <MX_GPIO_Init+0xf0>)
 800035c:	f000 fd7a 	bl	8000e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_SCL_Pin */
  GPIO_InitStruct.Pin = ENCODER_SCL_Pin;
 8000360:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000366:	2312      	movs	r3, #18
 8000368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036a:	2300      	movs	r3, #0
 800036c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036e:	2300      	movs	r3, #0
 8000370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000372:	2304      	movs	r3, #4
 8000374:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ENCODER_SCL_GPIO_Port, &GPIO_InitStruct);
 8000376:	f107 0314 	add.w	r3, r7, #20
 800037a:	4619      	mov	r1, r3
 800037c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000380:	f000 fd68 	bl	8000e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_SDA_Pin */
  GPIO_InitStruct.Pin = ENCODER_SDA_Pin;
 8000384:	2380      	movs	r3, #128	@ 0x80
 8000386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000388:	2312      	movs	r3, #18
 800038a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038c:	2300      	movs	r3, #0
 800038e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000390:	2300      	movs	r3, #0
 8000392:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000394:	2304      	movs	r3, #4
 8000396:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ENCODER_SDA_GPIO_Port, &GPIO_InitStruct);
 8000398:	f107 0314 	add.w	r3, r7, #20
 800039c:	4619      	mov	r1, r3
 800039e:	4805      	ldr	r0, [pc, #20]	@ (80003b4 <MX_GPIO_Init+0xf4>)
 80003a0:	f000 fd58 	bl	8000e54 <HAL_GPIO_Init>

}
 80003a4:	bf00      	nop
 80003a6:	3728      	adds	r7, #40	@ 0x28
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	40021000 	.word	0x40021000
 80003b0:	48000800 	.word	0x48000800
 80003b4:	48000400 	.word	0x48000400

080003b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003bc:	f000 fbc9 	bl	8000b52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c0:	f000 f80a 	bl	80003d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c4:	f7ff ff7c 	bl	80002c0 <MX_GPIO_Init>
  MX_TIM1_Init();
 80003c8:	f000 f980 	bl	80006cc <MX_TIM1_Init>
  MX_TIM8_Init();
 80003cc:	f000 fa4a 	bl	8000864 <MX_TIM8_Init>
  MX_USB_Device_Init();
 80003d0:	f008 fa0e 	bl	80087f0 <MX_USB_Device_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003d4:	bf00      	nop
 80003d6:	e7fd      	b.n	80003d4 <main+0x1c>

080003d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b094      	sub	sp, #80	@ 0x50
 80003dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003de:	f107 0318 	add.w	r3, r7, #24
 80003e2:	2238      	movs	r2, #56	@ 0x38
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f009 f805 	bl	80093f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	605a      	str	r2, [r3, #4]
 80003f4:	609a      	str	r2, [r3, #8]
 80003f6:	60da      	str	r2, [r3, #12]
 80003f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80003fa:	2000      	movs	r0, #0
 80003fc:	f002 fbc6 	bl	8002b8c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000400:	2321      	movs	r3, #33	@ 0x21
 8000402:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000404:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000408:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800040a:	2301      	movs	r3, #1
 800040c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800040e:	2302      	movs	r3, #2
 8000410:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000412:	2303      	movs	r3, #3
 8000414:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000416:	2306      	movs	r3, #6
 8000418:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800041a:	2355      	movs	r3, #85	@ 0x55
 800041c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800041e:	2302      	movs	r3, #2
 8000420:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000422:	2302      	movs	r3, #2
 8000424:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000426:	2302      	movs	r3, #2
 8000428:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042a:	f107 0318 	add.w	r3, r7, #24
 800042e:	4618      	mov	r0, r3
 8000430:	f002 fc60 	bl	8002cf4 <HAL_RCC_OscConfig>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800043a:	f000 f818 	bl	800046e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043e:	230f      	movs	r3, #15
 8000440:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000442:	2303      	movs	r3, #3
 8000444:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000446:	2300      	movs	r3, #0
 8000448:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2104      	movs	r1, #4
 8000456:	4618      	mov	r0, r3
 8000458:	f002 ff5e 	bl	8003318 <HAL_RCC_ClockConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000462:	f000 f804 	bl	800046e <Error_Handler>
  }
}
 8000466:	bf00      	nop
 8000468:	3750      	adds	r7, #80	@ 0x50
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}

0800046e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000472:	b672      	cpsid	i
}
 8000474:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000476:	bf00      	nop
 8000478:	e7fd      	b.n	8000476 <Error_Handler+0x8>
	...

0800047c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000482:	4b0f      	ldr	r3, [pc, #60]	@ (80004c0 <HAL_MspInit+0x44>)
 8000484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000486:	4a0e      	ldr	r2, [pc, #56]	@ (80004c0 <HAL_MspInit+0x44>)
 8000488:	f043 0301 	orr.w	r3, r3, #1
 800048c:	6613      	str	r3, [r2, #96]	@ 0x60
 800048e:	4b0c      	ldr	r3, [pc, #48]	@ (80004c0 <HAL_MspInit+0x44>)
 8000490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049a:	4b09      	ldr	r3, [pc, #36]	@ (80004c0 <HAL_MspInit+0x44>)
 800049c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800049e:	4a08      	ldr	r2, [pc, #32]	@ (80004c0 <HAL_MspInit+0x44>)
 80004a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80004a6:	4b06      	ldr	r3, [pc, #24]	@ (80004c0 <HAL_MspInit+0x44>)
 80004a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004ae:	603b      	str	r3, [r7, #0]
 80004b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80004b2:	f002 fc0f 	bl	8002cd4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000

080004c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004c8:	bf00      	nop
 80004ca:	e7fd      	b.n	80004c8 <NMI_Handler+0x4>

080004cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d0:	bf00      	nop
 80004d2:	e7fd      	b.n	80004d0 <HardFault_Handler+0x4>

080004d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d8:	bf00      	nop
 80004da:	e7fd      	b.n	80004d8 <MemManage_Handler+0x4>

080004dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e0:	bf00      	nop
 80004e2:	e7fd      	b.n	80004e0 <BusFault_Handler+0x4>

080004e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <UsageFault_Handler+0x4>

080004ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800051a:	f000 fb6d 	bl	8000bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000528:	4802      	ldr	r0, [pc, #8]	@ (8000534 <USB_LP_IRQHandler+0x10>)
 800052a:	f000 ff1d 	bl	8001368 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20001770 	.word	0x20001770

08000538 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800053c:	4802      	ldr	r0, [pc, #8]	@ (8000548 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800053e:	f003 fbd5 	bl	8003cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000200 	.word	0x20000200

0800054c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000550:	4802      	ldr	r0, [pc, #8]	@ (800055c <TIM8_CC_IRQHandler+0x10>)
 8000552:	f003 fbcb 	bl	8003cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	2000024c 	.word	0x2000024c

08000560 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
 8000570:	e00a      	b.n	8000588 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000572:	f3af 8000 	nop.w
 8000576:	4601      	mov	r1, r0
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	1c5a      	adds	r2, r3, #1
 800057c:	60ba      	str	r2, [r7, #8]
 800057e:	b2ca      	uxtb	r2, r1
 8000580:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	3301      	adds	r3, #1
 8000586:	617b      	str	r3, [r7, #20]
 8000588:	697a      	ldr	r2, [r7, #20]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	429a      	cmp	r2, r3
 800058e:	dbf0      	blt.n	8000572 <_read+0x12>
  }

  return len;
 8000590:	687b      	ldr	r3, [r7, #4]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3718      	adds	r7, #24
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	b086      	sub	sp, #24
 800059e:	af00      	add	r7, sp, #0
 80005a0:	60f8      	str	r0, [r7, #12]
 80005a2:	60b9      	str	r1, [r7, #8]
 80005a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
 80005aa:	e009      	b.n	80005c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	1c5a      	adds	r2, r3, #1
 80005b0:	60ba      	str	r2, [r7, #8]
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	3301      	adds	r3, #1
 80005be:	617b      	str	r3, [r7, #20]
 80005c0:	697a      	ldr	r2, [r7, #20]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	dbf1      	blt.n	80005ac <_write+0x12>
  }
  return len;
 80005c8:	687b      	ldr	r3, [r7, #4]
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3718      	adds	r7, #24
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <_close>:

int _close(int file)
{
 80005d2:	b480      	push	{r7}
 80005d4:	b083      	sub	sp, #12
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80005de:	4618      	mov	r0, r3
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
 80005f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005fa:	605a      	str	r2, [r3, #4]
  return 0;
 80005fc:	2300      	movs	r3, #0
}
 80005fe:	4618      	mov	r0, r3
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <_isatty>:

int _isatty(int file)
{
 800060a:	b480      	push	{r7}
 800060c:	b083      	sub	sp, #12
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000612:	2301      	movs	r3, #1
}
 8000614:	4618      	mov	r0, r3
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800062c:	2300      	movs	r3, #0
}
 800062e:	4618      	mov	r0, r3
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000644:	4a14      	ldr	r2, [pc, #80]	@ (8000698 <_sbrk+0x5c>)
 8000646:	4b15      	ldr	r3, [pc, #84]	@ (800069c <_sbrk+0x60>)
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000650:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <_sbrk+0x64>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d102      	bne.n	800065e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000658:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <_sbrk+0x64>)
 800065a:	4a12      	ldr	r2, [pc, #72]	@ (80006a4 <_sbrk+0x68>)
 800065c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800065e:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <_sbrk+0x64>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	693a      	ldr	r2, [r7, #16]
 8000668:	429a      	cmp	r2, r3
 800066a:	d207      	bcs.n	800067c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800066c:	f008 ff12 	bl	8009494 <__errno>
 8000670:	4603      	mov	r3, r0
 8000672:	220c      	movs	r2, #12
 8000674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000676:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800067a:	e009      	b.n	8000690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800067c:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <_sbrk+0x64>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000682:	4b07      	ldr	r3, [pc, #28]	@ (80006a0 <_sbrk+0x64>)
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4413      	add	r3, r2
 800068a:	4a05      	ldr	r2, [pc, #20]	@ (80006a0 <_sbrk+0x64>)
 800068c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800068e:	68fb      	ldr	r3, [r7, #12]
}
 8000690:	4618      	mov	r0, r3
 8000692:	3718      	adds	r7, #24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20020000 	.word	0x20020000
 800069c:	00000400 	.word	0x00000400
 80006a0:	200001fc 	.word	0x200001fc
 80006a4:	20001db8 	.word	0x20001db8

080006a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006ac:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <SystemInit+0x20>)
 80006ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006b2:	4a05      	ldr	r2, [pc, #20]	@ (80006c8 <SystemInit+0x20>)
 80006b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b09c      	sub	sp, #112	@ 0x70
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
 80006fc:	615a      	str	r2, [r3, #20]
 80006fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2234      	movs	r2, #52	@ 0x34
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f008 fe75 	bl	80093f6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800070c:	4b53      	ldr	r3, [pc, #332]	@ (800085c <MX_TIM1_Init+0x190>)
 800070e:	4a54      	ldr	r2, [pc, #336]	@ (8000860 <MX_TIM1_Init+0x194>)
 8000710:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000712:	4b52      	ldr	r3, [pc, #328]	@ (800085c <MX_TIM1_Init+0x190>)
 8000714:	2200      	movs	r2, #0
 8000716:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000718:	4b50      	ldr	r3, [pc, #320]	@ (800085c <MX_TIM1_Init+0x190>)
 800071a:	2220      	movs	r2, #32
 800071c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4249;
 800071e:	4b4f      	ldr	r3, [pc, #316]	@ (800085c <MX_TIM1_Init+0x190>)
 8000720:	f241 0299 	movw	r2, #4249	@ 0x1099
 8000724:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000726:	4b4d      	ldr	r3, [pc, #308]	@ (800085c <MX_TIM1_Init+0x190>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800072c:	4b4b      	ldr	r3, [pc, #300]	@ (800085c <MX_TIM1_Init+0x190>)
 800072e:	2200      	movs	r2, #0
 8000730:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000732:	4b4a      	ldr	r3, [pc, #296]	@ (800085c <MX_TIM1_Init+0x190>)
 8000734:	2280      	movs	r2, #128	@ 0x80
 8000736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000738:	4848      	ldr	r0, [pc, #288]	@ (800085c <MX_TIM1_Init+0x190>)
 800073a:	f003 fa1f 	bl	8003b7c <HAL_TIM_Base_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000744:	f7ff fe93 	bl	800046e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000748:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800074c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800074e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000752:	4619      	mov	r1, r3
 8000754:	4841      	ldr	r0, [pc, #260]	@ (800085c <MX_TIM1_Init+0x190>)
 8000756:	f003 fd2d 	bl	80041b4 <HAL_TIM_ConfigClockSource>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000760:	f7ff fe85 	bl	800046e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000764:	483d      	ldr	r0, [pc, #244]	@ (800085c <MX_TIM1_Init+0x190>)
 8000766:	f003 fa60 	bl	8003c2a <HAL_TIM_PWM_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000770:	f7ff fe7d 	bl	800046e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000774:	2300      	movs	r3, #0
 8000776:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000778:	2300      	movs	r3, #0
 800077a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800077c:	2300      	movs	r3, #0
 800077e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000780:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000784:	4619      	mov	r1, r3
 8000786:	4835      	ldr	r0, [pc, #212]	@ (800085c <MX_TIM1_Init+0x190>)
 8000788:	f004 fbfa 	bl	8004f80 <HAL_TIMEx_MasterConfigSynchronization>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000792:	f7ff fe6c 	bl	800046e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000796:	2360      	movs	r3, #96	@ 0x60
 8000798:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800079e:	2300      	movs	r3, #0
 80007a0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007a2:	2300      	movs	r3, #0
 80007a4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007aa:	2300      	movs	r3, #0
 80007ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007ae:	2300      	movs	r3, #0
 80007b0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007b2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007b6:	2200      	movs	r2, #0
 80007b8:	4619      	mov	r1, r3
 80007ba:	4828      	ldr	r0, [pc, #160]	@ (800085c <MX_TIM1_Init+0x190>)
 80007bc:	f003 fbe6 	bl	8003f8c <HAL_TIM_PWM_ConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80007c6:	f7ff fe52 	bl	800046e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007ca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007ce:	2204      	movs	r2, #4
 80007d0:	4619      	mov	r1, r3
 80007d2:	4822      	ldr	r0, [pc, #136]	@ (800085c <MX_TIM1_Init+0x190>)
 80007d4:	f003 fbda 	bl	8003f8c <HAL_TIM_PWM_ConfigChannel>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80007de:	f7ff fe46 	bl	800046e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007e6:	2208      	movs	r2, #8
 80007e8:	4619      	mov	r1, r3
 80007ea:	481c      	ldr	r0, [pc, #112]	@ (800085c <MX_TIM1_Init+0x190>)
 80007ec:	f003 fbce 	bl	8003f8c <HAL_TIM_PWM_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80007f6:	f7ff fe3a 	bl	800046e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80007fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000800:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000804:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = DEADTIME_NS;
 800080a:	2332      	movs	r3, #50	@ 0x32
 800080c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000812:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000816:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000824:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000828:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800082e:	2300      	movs	r3, #0
 8000830:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000832:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000836:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	4619      	mov	r1, r3
 800083c:	4807      	ldr	r0, [pc, #28]	@ (800085c <MX_TIM1_Init+0x190>)
 800083e:	f004 fc35 	bl	80050ac <HAL_TIMEx_ConfigBreakDeadTime>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM1_Init+0x180>
  {
    Error_Handler();
 8000848:	f7ff fe11 	bl	800046e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800084c:	4803      	ldr	r0, [pc, #12]	@ (800085c <MX_TIM1_Init+0x190>)
 800084e:	f000 f8ef 	bl	8000a30 <HAL_TIM_MspPostInit>

}
 8000852:	bf00      	nop
 8000854:	3770      	adds	r7, #112	@ 0x70
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000200 	.word	0x20000200
 8000860:	40012c00 	.word	0x40012c00

08000864 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08c      	sub	sp, #48	@ 0x30
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086a:	f107 0320 	add.w	r3, r7, #32
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000890:	4b29      	ldr	r3, [pc, #164]	@ (8000938 <MX_TIM8_Init+0xd4>)
 8000892:	4a2a      	ldr	r2, [pc, #168]	@ (800093c <MX_TIM8_Init+0xd8>)
 8000894:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 8000896:	4b28      	ldr	r3, [pc, #160]	@ (8000938 <MX_TIM8_Init+0xd4>)
 8000898:	22a9      	movs	r2, #169	@ 0xa9
 800089a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b26      	ldr	r3, [pc, #152]	@ (8000938 <MX_TIM8_Init+0xd4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80008a2:	4b25      	ldr	r3, [pc, #148]	@ (8000938 <MX_TIM8_Init+0xd4>)
 80008a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008a8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008aa:	4b23      	ldr	r3, [pc, #140]	@ (8000938 <MX_TIM8_Init+0xd4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80008b0:	4b21      	ldr	r3, [pc, #132]	@ (8000938 <MX_TIM8_Init+0xd4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b6:	4b20      	ldr	r3, [pc, #128]	@ (8000938 <MX_TIM8_Init+0xd4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80008bc:	481e      	ldr	r0, [pc, #120]	@ (8000938 <MX_TIM8_Init+0xd4>)
 80008be:	f003 f95d 	bl	8003b7c <HAL_TIM_Base_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 80008c8:	f7ff fdd1 	bl	800046e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80008d2:	f107 0320 	add.w	r3, r7, #32
 80008d6:	4619      	mov	r1, r3
 80008d8:	4817      	ldr	r0, [pc, #92]	@ (8000938 <MX_TIM8_Init+0xd4>)
 80008da:	f003 fc6b 	bl	80041b4 <HAL_TIM_ConfigClockSource>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80008e4:	f7ff fdc3 	bl	800046e <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008e8:	2300      	movs	r3, #0
 80008ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim8, &sConfig) != HAL_OK)
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	4619      	mov	r1, r3
 80008fe:	480e      	ldr	r0, [pc, #56]	@ (8000938 <MX_TIM8_Init+0xd4>)
 8000900:	f004 fa84 	bl	8004e0c <HAL_TIMEx_HallSensor_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 800090a:	f7ff fdb0 	bl	800046e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800090e:	2350      	movs	r3, #80	@ 0x50
 8000910:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	@ (8000938 <MX_TIM8_Init+0xd4>)
 8000920:	f004 fb2e 	bl	8004f80 <HAL_TIMEx_MasterConfigSynchronization>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800092a:	f7ff fda0 	bl	800046e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3730      	adds	r7, #48	@ 0x30
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	2000024c 	.word	0x2000024c
 800093c:	40013400 	.word	0x40013400

08000940 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	@ 0x28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a30      	ldr	r2, [pc, #192]	@ (8000a20 <HAL_TIM_Base_MspInit+0xe0>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d114      	bne.n	800098c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000962:	4b30      	ldr	r3, [pc, #192]	@ (8000a24 <HAL_TIM_Base_MspInit+0xe4>)
 8000964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000966:	4a2f      	ldr	r2, [pc, #188]	@ (8000a24 <HAL_TIM_Base_MspInit+0xe4>)
 8000968:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800096c:	6613      	str	r3, [r2, #96]	@ 0x60
 800096e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a24 <HAL_TIM_Base_MspInit+0xe4>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000972:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2102      	movs	r1, #2
 800097e:	2019      	movs	r0, #25
 8000980:	f000 fa33 	bl	8000dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000984:	2019      	movs	r0, #25
 8000986:	f000 fa4a 	bl	8000e1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800098a:	e045      	b.n	8000a18 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM8)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a25      	ldr	r2, [pc, #148]	@ (8000a28 <HAL_TIM_Base_MspInit+0xe8>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d140      	bne.n	8000a18 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000996:	4b23      	ldr	r3, [pc, #140]	@ (8000a24 <HAL_TIM_Base_MspInit+0xe4>)
 8000998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800099a:	4a22      	ldr	r2, [pc, #136]	@ (8000a24 <HAL_TIM_Base_MspInit+0xe4>)
 800099c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80009a2:	4b20      	ldr	r3, [pc, #128]	@ (8000a24 <HAL_TIM_Base_MspInit+0xe4>)
 80009a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000a24 <HAL_TIM_Base_MspInit+0xe4>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a24 <HAL_TIM_Base_MspInit+0xe4>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000a24 <HAL_TIM_Base_MspInit+0xe4>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HALL_A_Pin;
 80009c6:	2340      	movs	r3, #64	@ 0x40
 80009c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 80009d6:	2305      	movs	r3, #5
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(HALL_A_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	4812      	ldr	r0, [pc, #72]	@ (8000a2c <HAL_TIM_Base_MspInit+0xec>)
 80009e2:	f000 fa37 	bl	8000e54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HALL_B_Pin|HALL_C_Pin;
 80009e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80009f8:	230a      	movs	r3, #10
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	480a      	ldr	r0, [pc, #40]	@ (8000a2c <HAL_TIM_Base_MspInit+0xec>)
 8000a04:	f000 fa26 	bl	8000e54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	202e      	movs	r0, #46	@ 0x2e
 8000a0e:	f000 f9ec 	bl	8000dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8000a12:	202e      	movs	r0, #46	@ 0x2e
 8000a14:	f000 fa03 	bl	8000e1e <HAL_NVIC_EnableIRQ>
}
 8000a18:	bf00      	nop
 8000a1a:	3728      	adds	r7, #40	@ 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40012c00 	.word	0x40012c00
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40013400 	.word	0x40013400
 8000a2c:	48000400 	.word	0x48000400

08000a30 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	@ 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a29      	ldr	r2, [pc, #164]	@ (8000af4 <HAL_TIM_MspPostInit+0xc4>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d14b      	bne.n	8000aea <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	4b29      	ldr	r3, [pc, #164]	@ (8000af8 <HAL_TIM_MspPostInit+0xc8>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	4a28      	ldr	r2, [pc, #160]	@ (8000af8 <HAL_TIM_MspPostInit+0xc8>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5e:	4b26      	ldr	r3, [pc, #152]	@ (8000af8 <HAL_TIM_MspPostInit+0xc8>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b23      	ldr	r3, [pc, #140]	@ (8000af8 <HAL_TIM_MspPostInit+0xc8>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6e:	4a22      	ldr	r2, [pc, #136]	@ (8000af8 <HAL_TIM_MspPostInit+0xc8>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a76:	4b20      	ldr	r3, [pc, #128]	@ (8000af8 <HAL_TIM_MspPostInit+0xc8>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PA_LIN_Pin|PB_LIN_Pin;
 8000a82:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a90:	2303      	movs	r3, #3
 8000a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000a94:	2306      	movs	r3, #6
 8000a96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4817      	ldr	r0, [pc, #92]	@ (8000afc <HAL_TIM_MspPostInit+0xcc>)
 8000aa0:	f000 f9d8 	bl	8000e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PC_LIN_Pin;
 8000aa4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PC_LIN_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480e      	ldr	r0, [pc, #56]	@ (8000afc <HAL_TIM_MspPostInit+0xcc>)
 8000ac2:	f000 f9c7 	bl	8000e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PA_HIN_Pin|PB_HIN_Pin|PC_HIN_Pin;
 8000ac6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000ad8:	2306      	movs	r3, #6
 8000ada:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae6:	f000 f9b5 	bl	8000e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000aea:	bf00      	nop
 8000aec:	3728      	adds	r7, #40	@ 0x28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40012c00 	.word	0x40012c00
 8000af8:	40021000 	.word	0x40021000
 8000afc:	48000400 	.word	0x48000400

08000b00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b00:	480d      	ldr	r0, [pc, #52]	@ (8000b38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b02:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b04:	f7ff fdd0 	bl	80006a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b08:	480c      	ldr	r0, [pc, #48]	@ (8000b3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b0a:	490d      	ldr	r1, [pc, #52]	@ (8000b40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b44 <LoopForever+0xe>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b20:	4c0a      	ldr	r4, [pc, #40]	@ (8000b4c <LoopForever+0x16>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f008 fcb7 	bl	80094a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b32:	f7ff fc41 	bl	80003b8 <main>

08000b36 <LoopForever>:

LoopForever:
    b LoopForever
 8000b36:	e7fe      	b.n	8000b36 <LoopForever>
  ldr   r0, =_estack
 8000b38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000b44:	0800a178 	.word	0x0800a178
  ldr r2, =_sbss
 8000b48:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000b4c:	20001db8 	.word	0x20001db8

08000b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC1_2_IRQHandler>

08000b52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f000 f939 	bl	8000dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b62:	200f      	movs	r0, #15
 8000b64:	f000 f80e 	bl	8000b84 <HAL_InitTick>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d002      	beq.n	8000b74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	71fb      	strb	r3, [r7, #7]
 8000b72:	e001      	b.n	8000b78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b74:	f7ff fc82 	bl	800047c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b78:	79fb      	ldrb	r3, [r7, #7]

}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b90:	4b16      	ldr	r3, [pc, #88]	@ (8000bec <HAL_InitTick+0x68>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d022      	beq.n	8000bde <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b98:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <HAL_InitTick+0x6c>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b13      	ldr	r3, [pc, #76]	@ (8000bec <HAL_InitTick+0x68>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ba4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 f944 	bl	8000e3a <HAL_SYSTICK_Config>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d10f      	bne.n	8000bd8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b0f      	cmp	r3, #15
 8000bbc:	d809      	bhi.n	8000bd2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	6879      	ldr	r1, [r7, #4]
 8000bc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bc6:	f000 f910 	bl	8000dea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bca:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf4 <HAL_InitTick+0x70>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	e007      	b.n	8000be2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	73fb      	strb	r3, [r7, #15]
 8000bd6:	e004      	b.n	8000be2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	73fb      	strb	r3, [r7, #15]
 8000bdc:	e001      	b.n	8000be2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b05      	ldr	r3, [pc, #20]	@ (8000c14 <HAL_IncTick+0x1c>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b05      	ldr	r3, [pc, #20]	@ (8000c18 <HAL_IncTick+0x20>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4413      	add	r3, r2
 8000c06:	4a03      	ldr	r2, [pc, #12]	@ (8000c14 <HAL_IncTick+0x1c>)
 8000c08:	6013      	str	r3, [r2, #0]
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	20000298 	.word	0x20000298
 8000c18:	20000008 	.word	0x20000008

08000c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b03      	ldr	r3, [pc, #12]	@ (8000c30 <HAL_GetTick+0x14>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000298 	.word	0x20000298

08000c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c66:	4a04      	ldr	r2, [pc, #16]	@ (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	60d3      	str	r3, [r2, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c80:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <__NVIC_GetPriorityGrouping+0x18>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	f003 0307 	and.w	r3, r3, #7
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	db0b      	blt.n	8000cc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f003 021f 	and.w	r2, r3, #31
 8000cb0:	4907      	ldr	r1, [pc, #28]	@ (8000cd0 <__NVIC_EnableIRQ+0x38>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	2001      	movs	r0, #1
 8000cba:	fa00 f202 	lsl.w	r2, r0, r2
 8000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000e100 	.word	0xe000e100

08000cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db0a      	blt.n	8000cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	490c      	ldr	r1, [pc, #48]	@ (8000d20 <__NVIC_SetPriority+0x4c>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	0112      	lsls	r2, r2, #4
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cfc:	e00a      	b.n	8000d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4908      	ldr	r1, [pc, #32]	@ (8000d24 <__NVIC_SetPriority+0x50>)
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	3b04      	subs	r3, #4
 8000d0c:	0112      	lsls	r2, r2, #4
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	440b      	add	r3, r1
 8000d12:	761a      	strb	r2, [r3, #24]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000e100 	.word	0xe000e100
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	@ 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f1c3 0307 	rsb	r3, r3, #7
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	bf28      	it	cs
 8000d46:	2304      	movcs	r3, #4
 8000d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	2b06      	cmp	r3, #6
 8000d50:	d902      	bls.n	8000d58 <NVIC_EncodePriority+0x30>
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3b03      	subs	r3, #3
 8000d56:	e000      	b.n	8000d5a <NVIC_EncodePriority+0x32>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43da      	mvns	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d70:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	43d9      	mvns	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	4313      	orrs	r3, r2
         );
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3724      	adds	r7, #36	@ 0x24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
	...

08000d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000da0:	d301      	bcc.n	8000da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da2:	2301      	movs	r3, #1
 8000da4:	e00f      	b.n	8000dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <SysTick_Config+0x40>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dae:	210f      	movs	r1, #15
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000db4:	f7ff ff8e 	bl	8000cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db8:	4b05      	ldr	r3, [pc, #20]	@ (8000dd0 <SysTick_Config+0x40>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dbe:	4b04      	ldr	r3, [pc, #16]	@ (8000dd0 <SysTick_Config+0x40>)
 8000dc0:	2207      	movs	r2, #7
 8000dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	e000e010 	.word	0xe000e010

08000dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ff29 	bl	8000c34 <__NVIC_SetPriorityGrouping>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	4603      	mov	r3, r0
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
 8000df6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000df8:	f7ff ff40 	bl	8000c7c <__NVIC_GetPriorityGrouping>
 8000dfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	68b9      	ldr	r1, [r7, #8]
 8000e02:	6978      	ldr	r0, [r7, #20]
 8000e04:	f7ff ff90 	bl	8000d28 <NVIC_EncodePriority>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff5f 	bl	8000cd4 <__NVIC_SetPriority>
}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4603      	mov	r3, r0
 8000e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff33 	bl	8000c98 <__NVIC_EnableIRQ>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ffa4 	bl	8000d90 <SysTick_Config>
 8000e48:	4603      	mov	r3, r0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b087      	sub	sp, #28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e62:	e15a      	b.n	800111a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	2101      	movs	r1, #1
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e70:	4013      	ands	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f000 814c 	beq.w	8001114 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0303 	and.w	r3, r3, #3
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d005      	beq.n	8000e94 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d130      	bne.n	8000ef6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	68da      	ldr	r2, [r3, #12]
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eca:	2201      	movs	r2, #1
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	091b      	lsrs	r3, r3, #4
 8000ee0:	f003 0201 	and.w	r2, r3, #1
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	d017      	beq.n	8000f32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d123      	bne.n	8000f86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	08da      	lsrs	r2, r3, #3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3208      	adds	r2, #8
 8000f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	220f      	movs	r2, #15
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	691a      	ldr	r2, [r3, #16]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	f003 0307 	and.w	r3, r3, #7
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	08da      	lsrs	r2, r3, #3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3208      	adds	r2, #8
 8000f80:	6939      	ldr	r1, [r7, #16]
 8000f82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	2203      	movs	r2, #3
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 0203 	and.w	r2, r3, #3
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f000 80a6 	beq.w	8001114 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc8:	4b5b      	ldr	r3, [pc, #364]	@ (8001138 <HAL_GPIO_Init+0x2e4>)
 8000fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fcc:	4a5a      	ldr	r2, [pc, #360]	@ (8001138 <HAL_GPIO_Init+0x2e4>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fd4:	4b58      	ldr	r3, [pc, #352]	@ (8001138 <HAL_GPIO_Init+0x2e4>)
 8000fd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fe0:	4a56      	ldr	r2, [pc, #344]	@ (800113c <HAL_GPIO_Init+0x2e8>)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	089b      	lsrs	r3, r3, #2
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	220f      	movs	r2, #15
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800100a:	d01f      	beq.n	800104c <HAL_GPIO_Init+0x1f8>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a4c      	ldr	r2, [pc, #304]	@ (8001140 <HAL_GPIO_Init+0x2ec>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d019      	beq.n	8001048 <HAL_GPIO_Init+0x1f4>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a4b      	ldr	r2, [pc, #300]	@ (8001144 <HAL_GPIO_Init+0x2f0>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d013      	beq.n	8001044 <HAL_GPIO_Init+0x1f0>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a4a      	ldr	r2, [pc, #296]	@ (8001148 <HAL_GPIO_Init+0x2f4>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d00d      	beq.n	8001040 <HAL_GPIO_Init+0x1ec>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a49      	ldr	r2, [pc, #292]	@ (800114c <HAL_GPIO_Init+0x2f8>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d007      	beq.n	800103c <HAL_GPIO_Init+0x1e8>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a48      	ldr	r2, [pc, #288]	@ (8001150 <HAL_GPIO_Init+0x2fc>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d101      	bne.n	8001038 <HAL_GPIO_Init+0x1e4>
 8001034:	2305      	movs	r3, #5
 8001036:	e00a      	b.n	800104e <HAL_GPIO_Init+0x1fa>
 8001038:	2306      	movs	r3, #6
 800103a:	e008      	b.n	800104e <HAL_GPIO_Init+0x1fa>
 800103c:	2304      	movs	r3, #4
 800103e:	e006      	b.n	800104e <HAL_GPIO_Init+0x1fa>
 8001040:	2303      	movs	r3, #3
 8001042:	e004      	b.n	800104e <HAL_GPIO_Init+0x1fa>
 8001044:	2302      	movs	r3, #2
 8001046:	e002      	b.n	800104e <HAL_GPIO_Init+0x1fa>
 8001048:	2301      	movs	r3, #1
 800104a:	e000      	b.n	800104e <HAL_GPIO_Init+0x1fa>
 800104c:	2300      	movs	r3, #0
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	f002 0203 	and.w	r2, r2, #3
 8001054:	0092      	lsls	r2, r2, #2
 8001056:	4093      	lsls	r3, r2
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800105e:	4937      	ldr	r1, [pc, #220]	@ (800113c <HAL_GPIO_Init+0x2e8>)
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	089b      	lsrs	r3, r3, #2
 8001064:	3302      	adds	r3, #2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800106c:	4b39      	ldr	r3, [pc, #228]	@ (8001154 <HAL_GPIO_Init+0x300>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	43db      	mvns	r3, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001090:	4a30      	ldr	r2, [pc, #192]	@ (8001154 <HAL_GPIO_Init+0x300>)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001096:	4b2f      	ldr	r3, [pc, #188]	@ (8001154 <HAL_GPIO_Init+0x300>)
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010ba:	4a26      	ldr	r2, [pc, #152]	@ (8001154 <HAL_GPIO_Init+0x300>)
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80010c0:	4b24      	ldr	r3, [pc, #144]	@ (8001154 <HAL_GPIO_Init+0x300>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001154 <HAL_GPIO_Init+0x300>)
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <HAL_GPIO_Init+0x300>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800110e:	4a11      	ldr	r2, [pc, #68]	@ (8001154 <HAL_GPIO_Init+0x300>)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	3301      	adds	r3, #1
 8001118:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	fa22 f303 	lsr.w	r3, r2, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	f47f ae9d 	bne.w	8000e64 <HAL_GPIO_Init+0x10>
  }
}
 800112a:	bf00      	nop
 800112c:	bf00      	nop
 800112e:	371c      	adds	r7, #28
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40021000 	.word	0x40021000
 800113c:	40010000 	.word	0x40010000
 8001140:	48000400 	.word	0x48000400
 8001144:	48000800 	.word	0x48000800
 8001148:	48000c00 	.word	0x48000c00
 800114c:	48001000 	.word	0x48001000
 8001150:	48001400 	.word	0x48001400
 8001154:	40010400 	.word	0x40010400

08001158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]
 8001164:	4613      	mov	r3, r2
 8001166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001168:	787b      	ldrb	r3, [r7, #1]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800116e:	887a      	ldrh	r2, [r7, #2]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001174:	e002      	b.n	800117c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001176:	887a      	ldrh	r2, [r7, #2]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e0c0      	b.n	800131c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d106      	bne.n	80011b4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f007 fcfe 	bl	8008bb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2203      	movs	r2, #3
 80011b8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f004 f864 	bl	800528e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011c6:	2300      	movs	r3, #0
 80011c8:	73fb      	strb	r3, [r7, #15]
 80011ca:	e03e      	b.n	800124a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011cc:	7bfa      	ldrb	r2, [r7, #15]
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	440b      	add	r3, r1
 80011da:	3311      	adds	r3, #17
 80011dc:	2201      	movs	r2, #1
 80011de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011e0:	7bfa      	ldrb	r2, [r7, #15]
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	440b      	add	r3, r1
 80011ee:	3310      	adds	r3, #16
 80011f0:	7bfa      	ldrb	r2, [r7, #15]
 80011f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011f4:	7bfa      	ldrb	r2, [r7, #15]
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	4613      	mov	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	440b      	add	r3, r1
 8001202:	3313      	adds	r3, #19
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001208:	7bfa      	ldrb	r2, [r7, #15]
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	4613      	mov	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4413      	add	r3, r2
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	440b      	add	r3, r1
 8001216:	3320      	adds	r3, #32
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800121c:	7bfa      	ldrb	r2, [r7, #15]
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	440b      	add	r3, r1
 800122a:	3324      	adds	r3, #36	@ 0x24
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	1c5a      	adds	r2, r3, #1
 8001236:	4613      	mov	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	440b      	add	r3, r1
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	3301      	adds	r3, #1
 8001248:	73fb      	strb	r3, [r7, #15]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	791b      	ldrb	r3, [r3, #4]
 800124e:	7bfa      	ldrb	r2, [r7, #15]
 8001250:	429a      	cmp	r2, r3
 8001252:	d3bb      	bcc.n	80011cc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001254:	2300      	movs	r3, #0
 8001256:	73fb      	strb	r3, [r7, #15]
 8001258:	e044      	b.n	80012e4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800125a:	7bfa      	ldrb	r2, [r7, #15]
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	4613      	mov	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	440b      	add	r3, r1
 8001268:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	4613      	mov	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	440b      	add	r3, r1
 800127e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001282:	7bfa      	ldrb	r2, [r7, #15]
 8001284:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001286:	7bfa      	ldrb	r2, [r7, #15]
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	4613      	mov	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	440b      	add	r3, r1
 8001294:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800129c:	7bfa      	ldrb	r2, [r7, #15]
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	440b      	add	r3, r1
 80012aa:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012b2:	7bfa      	ldrb	r2, [r7, #15]
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	440b      	add	r3, r1
 80012c0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	440b      	add	r3, r1
 80012d6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	3301      	adds	r3, #1
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	791b      	ldrb	r3, [r3, #4]
 80012e8:	7bfa      	ldrb	r2, [r7, #15]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d3b5      	bcc.n	800125a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3304      	adds	r3, #4
 80012f6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80012fa:	f003 ffe3 	bl	80052c4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7a9b      	ldrb	r3, [r3, #10]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d102      	bne.n	800131a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f001 fc0e 	bl	8002b36 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001332:	2b01      	cmp	r3, #1
 8001334:	d101      	bne.n	800133a <HAL_PCD_Start+0x16>
 8001336:	2302      	movs	r3, #2
 8001338:	e012      	b.n	8001360 <HAL_PCD_Start+0x3c>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2201      	movs	r2, #1
 800133e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f003 ff8a 	bl	8005260 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f005 fd67 	bl	8006e24 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f005 fd6c 	bl	8006e52 <USB_ReadInterrupts>
 800137a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 fb06 	bl	8001998 <PCD_EP_ISR_Handler>

    return;
 800138c:	e110      	b.n	80015b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001394:	2b00      	cmp	r3, #0
 8001396:	d013      	beq.n	80013c0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80013aa:	b292      	uxth	r2, r2
 80013ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f007 fc8e 	bl	8008cd2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80013b6:	2100      	movs	r1, #0
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 f8fc 	bl	80015b6 <HAL_PCD_SetAddress>

    return;
 80013be:	e0f7      	b.n	80015b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00c      	beq.n	80013e4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80013dc:	b292      	uxth	r2, r2
 80013de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80013e2:	e0e5      	b.n	80015b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00c      	beq.n	8001408 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001400:	b292      	uxth	r2, r2
 8001402:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001406:	e0d3      	b.n	80015b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d034      	beq.n	800147c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800141a:	b29a      	uxth	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0204 	bic.w	r2, r2, #4
 8001424:	b292      	uxth	r2, r2
 8001426:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001432:	b29a      	uxth	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0208 	bic.w	r2, r2, #8
 800143c:	b292      	uxth	r2, r2
 800143e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8001448:	2b01      	cmp	r3, #1
 800144a:	d107      	bne.n	800145c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001454:	2100      	movs	r1, #0
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f007 fe2e 	bl	80090b8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f007 fc71 	bl	8008d44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800146a:	b29a      	uxth	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001474:	b292      	uxth	r2, r2
 8001476:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800147a:	e099      	b.n	80015b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001482:	2b00      	cmp	r3, #0
 8001484:	d027      	beq.n	80014d6 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800148e:	b29a      	uxth	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f042 0208 	orr.w	r2, r2, #8
 8001498:	b292      	uxth	r2, r2
 800149a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014b0:	b292      	uxth	r2, r2
 80014b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80014be:	b29a      	uxth	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f042 0204 	orr.w	r2, r2, #4
 80014c8:	b292      	uxth	r2, r2
 80014ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f007 fc1e 	bl	8008d10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80014d4:	e06c      	b.n	80015b0 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d040      	beq.n	8001562 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014f2:	b292      	uxth	r2, r2
 80014f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d12b      	bne.n	800155a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800150a:	b29a      	uxth	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f042 0204 	orr.w	r2, r2, #4
 8001514:	b292      	uxth	r2, r2
 8001516:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001522:	b29a      	uxth	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f042 0208 	orr.w	r2, r2, #8
 800152c:	b292      	uxth	r2, r2
 800152e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001542:	b29b      	uxth	r3, r3
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001550:	2101      	movs	r1, #1
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f007 fdb0 	bl	80090b8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001558:	e02a      	b.n	80015b0 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f007 fbd8 	bl	8008d10 <HAL_PCD_SuspendCallback>
    return;
 8001560:	e026      	b.n	80015b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00f      	beq.n	800158c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001574:	b29a      	uxth	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800157e:	b292      	uxth	r2, r2
 8001580:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f007 fb96 	bl	8008cb6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800158a:	e011      	b.n	80015b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00c      	beq.n	80015b0 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800159e:	b29a      	uxth	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015a8:	b292      	uxth	r2, r2
 80015aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80015ae:	bf00      	nop
  }
}
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	460b      	mov	r3, r1
 80015c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <HAL_PCD_SetAddress+0x1a>
 80015cc:	2302      	movs	r3, #2
 80015ce:	e012      	b.n	80015f6 <HAL_PCD_SetAddress+0x40>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	78fa      	ldrb	r2, [r7, #3]
 80015dc:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	78fa      	ldrb	r2, [r7, #3]
 80015e4:	4611      	mov	r1, r2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f005 fc08 	bl	8006dfc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b084      	sub	sp, #16
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	4608      	mov	r0, r1
 8001608:	4611      	mov	r1, r2
 800160a:	461a      	mov	r2, r3
 800160c:	4603      	mov	r3, r0
 800160e:	70fb      	strb	r3, [r7, #3]
 8001610:	460b      	mov	r3, r1
 8001612:	803b      	strh	r3, [r7, #0]
 8001614:	4613      	mov	r3, r2
 8001616:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800161c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001620:	2b00      	cmp	r3, #0
 8001622:	da0e      	bge.n	8001642 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001624:	78fb      	ldrb	r3, [r7, #3]
 8001626:	f003 0207 	and.w	r2, r3, #7
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	3310      	adds	r3, #16
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	4413      	add	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2201      	movs	r2, #1
 800163e:	705a      	strb	r2, [r3, #1]
 8001640:	e00e      	b.n	8001660 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001642:	78fb      	ldrb	r3, [r7, #3]
 8001644:	f003 0207 	and.w	r2, r3, #7
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	4413      	add	r3, r2
 8001658:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2200      	movs	r2, #0
 800165e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001660:	78fb      	ldrb	r3, [r7, #3]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	b2da      	uxtb	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800166c:	883b      	ldrh	r3, [r7, #0]
 800166e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	78ba      	ldrb	r2, [r7, #2]
 800167a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800167c:	78bb      	ldrb	r3, [r7, #2]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d102      	bne.n	8001688 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2200      	movs	r2, #0
 8001686:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800168e:	2b01      	cmp	r3, #1
 8001690:	d101      	bne.n	8001696 <HAL_PCD_EP_Open+0x98>
 8001692:	2302      	movs	r3, #2
 8001694:	e00e      	b.n	80016b4 <HAL_PCD_EP_Open+0xb6>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68f9      	ldr	r1, [r7, #12]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f003 fe2b 	bl	8005300 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80016b2:	7afb      	ldrb	r3, [r7, #11]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	da0e      	bge.n	80016ee <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016d0:	78fb      	ldrb	r3, [r7, #3]
 80016d2:	f003 0207 	and.w	r2, r3, #7
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	3310      	adds	r3, #16
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	4413      	add	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2201      	movs	r2, #1
 80016ea:	705a      	strb	r2, [r3, #1]
 80016ec:	e00e      	b.n	800170c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016ee:	78fb      	ldrb	r3, [r7, #3]
 80016f0:	f003 0207 	and.w	r2, r3, #7
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	4413      	add	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	b2da      	uxtb	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800171e:	2b01      	cmp	r3, #1
 8001720:	d101      	bne.n	8001726 <HAL_PCD_EP_Close+0x6a>
 8001722:	2302      	movs	r3, #2
 8001724:	e00e      	b.n	8001744 <HAL_PCD_EP_Close+0x88>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68f9      	ldr	r1, [r7, #12]
 8001734:	4618      	mov	r0, r3
 8001736:	f004 facb 	bl	8005cd0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	460b      	mov	r3, r1
 800175a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800175c:	7afb      	ldrb	r3, [r7, #11]
 800175e:	f003 0207 	and.w	r2, r3, #7
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	4413      	add	r3, r2
 8001772:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	2200      	movs	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	2200      	movs	r2, #0
 800178a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800178c:	7afb      	ldrb	r3, [r7, #11]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	b2da      	uxtb	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6979      	ldr	r1, [r7, #20]
 800179e:	4618      	mov	r0, r3
 80017a0:	f004 fc83 	bl	80060aa <USB_EPStartXfer>

  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	460b      	mov	r3, r1
 80017b8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80017ba:	78fb      	ldrb	r3, [r7, #3]
 80017bc:	f003 0207 	and.w	r2, r3, #7
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	440b      	add	r3, r1
 80017cc:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80017d0:	681b      	ldr	r3, [r3, #0]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b086      	sub	sp, #24
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	60f8      	str	r0, [r7, #12]
 80017e6:	607a      	str	r2, [r7, #4]
 80017e8:	603b      	str	r3, [r7, #0]
 80017ea:	460b      	mov	r3, r1
 80017ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017ee:	7afb      	ldrb	r3, [r7, #11]
 80017f0:	f003 0207 	and.w	r2, r3, #7
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	3310      	adds	r3, #16
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	4413      	add	r3, r2
 8001802:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	2200      	movs	r2, #0
 8001822:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	2201      	movs	r2, #1
 8001828:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800182a:	7afb      	ldrb	r3, [r7, #11]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	b2da      	uxtb	r2, r3
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6979      	ldr	r1, [r7, #20]
 800183c:	4618      	mov	r0, r3
 800183e:	f004 fc34 	bl	80060aa <USB_EPStartXfer>

  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	7912      	ldrb	r2, [r2, #4]
 8001862:	4293      	cmp	r3, r2
 8001864:	d901      	bls.n	800186a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e03e      	b.n	80018e8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800186a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800186e:	2b00      	cmp	r3, #0
 8001870:	da0e      	bge.n	8001890 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001872:	78fb      	ldrb	r3, [r7, #3]
 8001874:	f003 0207 	and.w	r2, r3, #7
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	3310      	adds	r3, #16
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2201      	movs	r2, #1
 800188c:	705a      	strb	r2, [r3, #1]
 800188e:	e00c      	b.n	80018aa <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001890:	78fa      	ldrb	r2, [r7, #3]
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2201      	movs	r2, #1
 80018ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d101      	bne.n	80018ca <HAL_PCD_EP_SetStall+0x7e>
 80018c6:	2302      	movs	r3, #2
 80018c8:	e00e      	b.n	80018e8 <HAL_PCD_EP_SetStall+0x9c>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68f9      	ldr	r1, [r7, #12]
 80018d8:	4618      	mov	r0, r3
 80018da:	f005 f995 	bl	8006c08 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	7912      	ldrb	r2, [r2, #4]
 8001906:	4293      	cmp	r3, r2
 8001908:	d901      	bls.n	800190e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e040      	b.n	8001990 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800190e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001912:	2b00      	cmp	r3, #0
 8001914:	da0e      	bge.n	8001934 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001916:	78fb      	ldrb	r3, [r7, #3]
 8001918:	f003 0207 	and.w	r2, r3, #7
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	3310      	adds	r3, #16
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2201      	movs	r2, #1
 8001930:	705a      	strb	r2, [r3, #1]
 8001932:	e00e      	b.n	8001952 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	f003 0207 	and.w	r2, r3, #7
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001958:	78fb      	ldrb	r3, [r7, #3]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	b2da      	uxtb	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800196a:	2b01      	cmp	r3, #1
 800196c:	d101      	bne.n	8001972 <HAL_PCD_EP_ClrStall+0x82>
 800196e:	2302      	movs	r3, #2
 8001970:	e00e      	b.n	8001990 <HAL_PCD_EP_ClrStall+0xa0>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68f9      	ldr	r1, [r7, #12]
 8001980:	4618      	mov	r0, r3
 8001982:	f005 f992 	bl	8006caa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b092      	sub	sp, #72	@ 0x48
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80019a0:	e333      	b.n	800200a <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019aa:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80019ac:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	f003 030f 	and.w	r3, r3, #15
 80019b4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 80019b8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f040 8108 	bne.w	8001bd2 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80019c2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80019c4:	f003 0310 	and.w	r3, r3, #16
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d14c      	bne.n	8001a66 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80019d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019dc:	813b      	strh	r3, [r7, #8]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	893b      	ldrh	r3, [r7, #8]
 80019e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3310      	adds	r3, #16
 80019f4:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	461a      	mov	r2, r3
 8001a02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4413      	add	r3, r2
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a1c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a20:	695a      	ldr	r2, [r3, #20]
 8001a22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	441a      	add	r2, r3
 8001a28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a2a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f007 f927 	bl	8008c82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7b1b      	ldrb	r3, [r3, #12]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 82e5 	beq.w	800200a <PCD_EP_ISR_Handler+0x672>
 8001a40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f040 82e0 	bne.w	800200a <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	7b1b      	ldrb	r3, [r3, #12]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	731a      	strb	r2, [r3, #12]
 8001a64:	e2d1      	b.n	800200a <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001a6c:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001a76:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001a78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d032      	beq.n	8001ae6 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	4413      	add	r3, r2
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	4413      	add	r3, r2
 8001a9a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001aa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001aa6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001ab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ab4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ab8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	f005 fa1c 	bl	8006ef8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001acc:	4013      	ands	r3, r2
 8001ace:	817b      	strh	r3, [r7, #10]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	897a      	ldrh	r2, [r7, #10]
 8001ad6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ada:	b292      	uxth	r2, r2
 8001adc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f007 f8a2 	bl	8008c28 <HAL_PCD_SetupStageCallback>
 8001ae4:	e291      	b.n	800200a <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ae6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f280 828d 	bge.w	800200a <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001afc:	4013      	ands	r3, r2
 8001afe:	81fb      	strh	r3, [r7, #14]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	89fa      	ldrh	r2, [r7, #14]
 8001b06:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b0a:	b292      	uxth	r2, r2
 8001b0c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	461a      	mov	r2, r3
 8001b1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4413      	add	r3, r2
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6812      	ldr	r2, [r2, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b34:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d019      	beq.n	8001b72 <PCD_EP_ISR_Handler+0x1da>
 8001b3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d015      	beq.n	8001b72 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6818      	ldr	r0, [r3, #0]
 8001b4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b4c:	6959      	ldr	r1, [r3, #20]
 8001b4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b50:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b54:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	f005 f9ce 	bl	8006ef8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001b5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	441a      	add	r2, r3
 8001b66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b68:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f007 f86d 	bl	8008c4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001b7a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001b7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f040 8242 	bne.w	800200a <PCD_EP_ISR_Handler+0x672>
 8001b86:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001b88:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001b8c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001b90:	f000 823b 	beq.w	800200a <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ba0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ba4:	81bb      	strh	r3, [r7, #12]
 8001ba6:	89bb      	ldrh	r3, [r7, #12]
 8001ba8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001bac:	81bb      	strh	r3, [r7, #12]
 8001bae:	89bb      	ldrh	r3, [r7, #12]
 8001bb0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001bb4:	81bb      	strh	r3, [r7, #12]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	89bb      	ldrh	r3, [r7, #12]
 8001bbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001bc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001bc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	8013      	strh	r3, [r2, #0]
 8001bd0:	e21b      	b.n	800200a <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001be4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f280 80f1 	bge.w	8001dd0 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001c04:	4013      	ands	r3, r2
 8001c06:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001c18:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c1c:	b292      	uxth	r2, r2
 8001c1e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001c20:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	4413      	add	r3, r2
 8001c34:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001c36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c38:	7b1b      	ldrb	r3, [r3, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d123      	bne.n	8001c86 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	461a      	mov	r2, r3
 8001c4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	4413      	add	r3, r2
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6812      	ldr	r2, [r2, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c62:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8001c66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 808b 	beq.w	8001d86 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c76:	6959      	ldr	r1, [r3, #20]
 8001c78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c7a:	88da      	ldrh	r2, [r3, #6]
 8001c7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001c80:	f005 f93a 	bl	8006ef8 <USB_ReadPMA>
 8001c84:	e07f      	b.n	8001d86 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001c86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c88:	78db      	ldrb	r3, [r3, #3]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d109      	bne.n	8001ca2 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001c8e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001c90:	461a      	mov	r2, r3
 8001c92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f9c6 	bl	8002026 <HAL_PCD_EP_DB_Receive>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001ca0:	e071      	b.n	8001d86 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001cb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cbc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	441a      	add	r2, r3
 8001ccc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001cce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001cd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001cd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cda:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d022      	beq.n	8001d42 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	4413      	add	r3, r2
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6812      	ldr	r2, [r2, #0]
 8001d14:	4413      	add	r3, r2
 8001d16:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d20:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8001d24:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d02c      	beq.n	8001d86 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6818      	ldr	r0, [r3, #0]
 8001d30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d32:	6959      	ldr	r1, [r3, #20]
 8001d34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d36:	891a      	ldrh	r2, [r3, #8]
 8001d38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001d3c:	f005 f8dc 	bl	8006ef8 <USB_ReadPMA>
 8001d40:	e021      	b.n	8001d86 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4413      	add	r3, r2
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6812      	ldr	r2, [r2, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d66:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8001d6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d009      	beq.n	8001d86 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d78:	6959      	ldr	r1, [r3, #20]
 8001d7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d7c:	895a      	ldrh	r2, [r3, #10]
 8001d7e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001d82:	f005 f8b9 	bl	8006ef8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001d86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d88:	69da      	ldr	r2, [r3, #28]
 8001d8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001d8e:	441a      	add	r2, r3
 8001d90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d92:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001d94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d96:	695a      	ldr	r2, [r3, #20]
 8001d98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001d9c:	441a      	add	r2, r3
 8001d9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001da0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001da2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d005      	beq.n	8001db6 <PCD_EP_ISR_Handler+0x41e>
 8001daa:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8001dae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d206      	bcs.n	8001dc4 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001db6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	4619      	mov	r1, r3
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f006 ff45 	bl	8008c4c <HAL_PCD_DataOutStageCallback>
 8001dc2:	e005      	b.n	8001dd0 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f004 f96d 	bl	80060aa <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001dd0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 8117 	beq.w	800200a <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8001ddc:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	3310      	adds	r3, #16
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e0a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	441a      	add	r2, r3
 8001e1a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001e28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e2a:	78db      	ldrb	r3, [r3, #3]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	f040 80a1 	bne.w	8001f74 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8001e32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001e38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e3a:	7b1b      	ldrb	r3, [r3, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 8092 	beq.w	8001f66 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e42:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d046      	beq.n	8001eda <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e4e:	785b      	ldrb	r3, [r3, #1]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d126      	bne.n	8001ea2 <PCD_EP_ISR_Handler+0x50a>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	4413      	add	r3, r2
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	00da      	lsls	r2, r3, #3
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	4413      	add	r3, r2
 8001e76:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	801a      	strh	r2, [r3, #0]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	801a      	strh	r2, [r3, #0]
 8001ea0:	e061      	b.n	8001f66 <PCD_EP_ISR_Handler+0x5ce>
 8001ea2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ea4:	785b      	ldrb	r3, [r3, #1]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d15d      	bne.n	8001f66 <PCD_EP_ISR_Handler+0x5ce>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	61fb      	str	r3, [r7, #28]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	61fb      	str	r3, [r7, #28]
 8001ec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	00da      	lsls	r2, r3, #3
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	4413      	add	r3, r2
 8001ecc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001ed0:	61bb      	str	r3, [r7, #24]
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	801a      	strh	r2, [r3, #0]
 8001ed8:	e045      	b.n	8001f66 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ee0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ee2:	785b      	ldrb	r3, [r3, #1]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d126      	bne.n	8001f36 <PCD_EP_ISR_Handler+0x59e>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efc:	4413      	add	r3, r2
 8001efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	00da      	lsls	r2, r3, #3
 8001f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f08:	4413      	add	r3, r2
 8001f0a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001f0e:	623b      	str	r3, [r7, #32]
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	801a      	strh	r2, [r3, #0]
 8001f20:	6a3b      	ldr	r3, [r7, #32]
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	801a      	strh	r2, [r3, #0]
 8001f34:	e017      	b.n	8001f66 <PCD_EP_ISR_Handler+0x5ce>
 8001f36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f38:	785b      	ldrb	r3, [r3, #1]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d113      	bne.n	8001f66 <PCD_EP_ISR_Handler+0x5ce>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f4c:	4413      	add	r3, r2
 8001f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	00da      	lsls	r2, r3, #3
 8001f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f58:	4413      	add	r3, r2
 8001f5a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f62:	2200      	movs	r2, #0
 8001f64:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f006 fe88 	bl	8008c82 <HAL_PCD_DataInStageCallback>
 8001f72:	e04a      	b.n	800200a <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001f74:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d13f      	bne.n	8001ffe <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4413      	add	r3, r2
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6812      	ldr	r2, [r2, #0]
 8001f96:	4413      	add	r3, r2
 8001f98:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fa2:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8001fa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fa6:	699a      	ldr	r2, [r3, #24]
 8001fa8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d906      	bls.n	8001fbc <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8001fae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fb0:	699a      	ldr	r2, [r3, #24]
 8001fb2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001fb4:	1ad2      	subs	r2, r2, r3
 8001fb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fb8:	619a      	str	r2, [r3, #24]
 8001fba:	e002      	b.n	8001fc2 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8001fbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d106      	bne.n	8001fd8 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001fca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	4619      	mov	r1, r3
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f006 fe56 	bl	8008c82 <HAL_PCD_DataInStageCallback>
 8001fd6:	e018      	b.n	800200a <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001fd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fda:	695a      	ldr	r2, [r3, #20]
 8001fdc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001fde:	441a      	add	r2, r3
 8001fe0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fe2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001fe4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fe6:	69da      	ldr	r2, [r3, #28]
 8001fe8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001fea:	441a      	add	r2, r3
 8001fec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fee:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f004 f857 	bl	80060aa <USB_EPStartXfer>
 8001ffc:	e005      	b.n	800200a <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001ffe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002000:	461a      	mov	r2, r3
 8002002:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f917 	bl	8002238 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002012:	b29b      	uxth	r3, r3
 8002014:	b21b      	sxth	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	f6ff acc3 	blt.w	80019a2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3748      	adds	r7, #72	@ 0x48
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b088      	sub	sp, #32
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	4613      	mov	r3, r2
 8002032:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002034:	88fb      	ldrh	r3, [r7, #6]
 8002036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d07c      	beq.n	8002138 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002046:	b29b      	uxth	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4413      	add	r3, r2
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	4413      	add	r3, r2
 8002058:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002062:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	699a      	ldr	r2, [r3, #24]
 8002068:	8b7b      	ldrh	r3, [r7, #26]
 800206a:	429a      	cmp	r2, r3
 800206c:	d306      	bcc.n	800207c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	699a      	ldr	r2, [r3, #24]
 8002072:	8b7b      	ldrh	r3, [r7, #26]
 8002074:	1ad2      	subs	r2, r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	619a      	str	r2, [r3, #24]
 800207a:	e002      	b.n	8002082 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2200      	movs	r2, #0
 8002080:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d123      	bne.n	80020d2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	b29b      	uxth	r3, r3
 800209c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020a4:	833b      	strh	r3, [r7, #24]
 80020a6:	8b3b      	ldrh	r3, [r7, #24]
 80020a8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80020ac:	833b      	strh	r3, [r7, #24]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	441a      	add	r2, r3
 80020bc:	8b3b      	ldrh	r3, [r7, #24]
 80020be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80020c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80020c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020d2:	88fb      	ldrh	r3, [r7, #6]
 80020d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d01f      	beq.n	800211c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80020f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020f6:	82fb      	strh	r3, [r7, #22]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	461a      	mov	r2, r3
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	441a      	add	r2, r3
 8002106:	8afb      	ldrh	r3, [r7, #22]
 8002108:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800210c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002110:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002114:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002118:	b29b      	uxth	r3, r3
 800211a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800211c:	8b7b      	ldrh	r3, [r7, #26]
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 8085 	beq.w	800222e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	6959      	ldr	r1, [r3, #20]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	891a      	ldrh	r2, [r3, #8]
 8002130:	8b7b      	ldrh	r3, [r7, #26]
 8002132:	f004 fee1 	bl	8006ef8 <USB_ReadPMA>
 8002136:	e07a      	b.n	800222e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002140:	b29b      	uxth	r3, r3
 8002142:	461a      	mov	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4413      	add	r3, r2
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	4413      	add	r3, r2
 8002152:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800215c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	699a      	ldr	r2, [r3, #24]
 8002162:	8b7b      	ldrh	r3, [r7, #26]
 8002164:	429a      	cmp	r2, r3
 8002166:	d306      	bcc.n	8002176 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	699a      	ldr	r2, [r3, #24]
 800216c:	8b7b      	ldrh	r3, [r7, #26]
 800216e:	1ad2      	subs	r2, r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	619a      	str	r2, [r3, #24]
 8002174:	e002      	b.n	800217c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2200      	movs	r2, #0
 800217a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d123      	bne.n	80021cc <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	b29b      	uxth	r3, r3
 8002196:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800219a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800219e:	83fb      	strh	r3, [r7, #30]
 80021a0:	8bfb      	ldrh	r3, [r7, #30]
 80021a2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80021a6:	83fb      	strh	r3, [r7, #30]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	441a      	add	r2, r3
 80021b6:	8bfb      	ldrh	r3, [r7, #30]
 80021b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80021bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80021c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d11f      	bne.n	8002216 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80021ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021f0:	83bb      	strh	r3, [r7, #28]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	441a      	add	r2, r3
 8002200:	8bbb      	ldrh	r3, [r7, #28]
 8002202:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002206:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800220a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800220e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002212:	b29b      	uxth	r3, r3
 8002214:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002216:	8b7b      	ldrh	r3, [r7, #26]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d008      	beq.n	800222e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	6959      	ldr	r1, [r3, #20]
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	895a      	ldrh	r2, [r3, #10]
 8002228:	8b7b      	ldrh	r3, [r7, #26]
 800222a:	f004 fe65 	bl	8006ef8 <USB_ReadPMA>
    }
  }

  return count;
 800222e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3720      	adds	r7, #32
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b0a6      	sub	sp, #152	@ 0x98
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	4613      	mov	r3, r2
 8002244:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002246:	88fb      	ldrh	r3, [r7, #6]
 8002248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 81f7 	beq.w	8002640 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800225a:	b29b      	uxth	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4413      	add	r3, r2
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	4413      	add	r3, r2
 800226c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002276:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	699a      	ldr	r2, [r3, #24]
 800227e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002282:	429a      	cmp	r2, r3
 8002284:	d907      	bls.n	8002296 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	699a      	ldr	r2, [r3, #24]
 800228a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800228e:	1ad2      	subs	r2, r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	619a      	str	r2, [r3, #24]
 8002294:	e002      	b.n	800229c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f040 80e1 	bne.w	8002468 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	785b      	ldrb	r3, [r3, #1]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d126      	bne.n	80022fc <HAL_PCD_EP_DB_Transmit+0xc4>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022bc:	b29b      	uxth	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c2:	4413      	add	r3, r2
 80022c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	00da      	lsls	r2, r3, #3
 80022cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ce:	4413      	add	r3, r2
 80022d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80022d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022e4:	801a      	strh	r2, [r3, #0]
 80022e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f8:	801a      	strh	r2, [r3, #0]
 80022fa:	e01a      	b.n	8002332 <HAL_PCD_EP_DB_Transmit+0xfa>
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	785b      	ldrb	r3, [r3, #1]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d116      	bne.n	8002332 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	63bb      	str	r3, [r7, #56]	@ 0x38
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002312:	b29b      	uxth	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002318:	4413      	add	r3, r2
 800231a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	00da      	lsls	r2, r3, #3
 8002322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002324:	4413      	add	r3, r2
 8002326:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800232a:	637b      	str	r3, [r7, #52]	@ 0x34
 800232c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800232e:	2200      	movs	r2, #0
 8002330:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	785b      	ldrb	r3, [r3, #1]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d126      	bne.n	800238e <HAL_PCD_EP_DB_Transmit+0x156>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	623b      	str	r3, [r7, #32]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800234e:	b29b      	uxth	r3, r3
 8002350:	461a      	mov	r2, r3
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	4413      	add	r3, r2
 8002356:	623b      	str	r3, [r7, #32]
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	00da      	lsls	r2, r3, #3
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	4413      	add	r3, r2
 8002362:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002366:	61fb      	str	r3, [r7, #28]
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	b29b      	uxth	r3, r3
 800236e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002372:	b29a      	uxth	r2, r3
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	801a      	strh	r2, [r3, #0]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	b29b      	uxth	r3, r3
 800237e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002386:	b29a      	uxth	r2, r3
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	801a      	strh	r2, [r3, #0]
 800238c:	e017      	b.n	80023be <HAL_PCD_EP_DB_Transmit+0x186>
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	785b      	ldrb	r3, [r3, #1]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d113      	bne.n	80023be <HAL_PCD_EP_DB_Transmit+0x186>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800239e:	b29b      	uxth	r3, r3
 80023a0:	461a      	mov	r2, r3
 80023a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a4:	4413      	add	r3, r2
 80023a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	00da      	lsls	r2, r3, #3
 80023ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b0:	4413      	add	r3, r2
 80023b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80023b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80023b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ba:	2200      	movs	r2, #0
 80023bc:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	78db      	ldrb	r3, [r3, #3]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d123      	bne.n	800240e <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023e0:	837b      	strh	r3, [r7, #26]
 80023e2:	8b7b      	ldrh	r3, [r7, #26]
 80023e4:	f083 0320 	eor.w	r3, r3, #32
 80023e8:	837b      	strh	r3, [r7, #26]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	441a      	add	r2, r3
 80023f8:	8b7b      	ldrh	r3, [r7, #26]
 80023fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80023fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002402:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800240a:	b29b      	uxth	r3, r3
 800240c:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	4619      	mov	r1, r3
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f006 fc34 	bl	8008c82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d01f      	beq.n	8002464 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	b29b      	uxth	r3, r3
 8002436:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800243a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800243e:	833b      	strh	r3, [r7, #24]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	441a      	add	r2, r3
 800244e:	8b3b      	ldrh	r3, [r7, #24]
 8002450:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002454:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002458:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800245c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002460:	b29b      	uxth	r3, r3
 8002462:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	e31f      	b.n	8002aa8 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d021      	beq.n	80024b6 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002488:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800248c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	461a      	mov	r2, r3
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	441a      	add	r2, r3
 800249e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80024a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80024a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80024aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024bc:	2b01      	cmp	r3, #1
 80024be:	f040 82ca 	bne.w	8002a56 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80024ca:	441a      	add	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	69da      	ldr	r2, [r3, #28]
 80024d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80024d8:	441a      	add	r2, r3
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	6a1a      	ldr	r2, [r3, #32]
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d309      	bcc.n	80024fe <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	6a1a      	ldr	r2, [r3, #32]
 80024f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024f6:	1ad2      	subs	r2, r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	621a      	str	r2, [r3, #32]
 80024fc:	e015      	b.n	800252a <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d107      	bne.n	8002516 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8002506:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800250a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002514:	e009      	b.n	800252a <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2200      	movs	r2, #0
 8002528:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	785b      	ldrb	r3, [r3, #1]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d15f      	bne.n	80025f2 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	643b      	str	r3, [r7, #64]	@ 0x40
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002540:	b29b      	uxth	r3, r3
 8002542:	461a      	mov	r2, r3
 8002544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002546:	4413      	add	r3, r2
 8002548:	643b      	str	r3, [r7, #64]	@ 0x40
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	00da      	lsls	r2, r3, #3
 8002550:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002552:	4413      	add	r3, r2
 8002554:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002558:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800255a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	b29b      	uxth	r3, r3
 8002560:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002564:	b29a      	uxth	r2, r3
 8002566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002568:	801a      	strh	r2, [r3, #0]
 800256a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10a      	bne.n	8002586 <HAL_PCD_EP_DB_Transmit+0x34e>
 8002570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	b29b      	uxth	r3, r3
 8002576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800257a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800257e:	b29a      	uxth	r2, r3
 8002580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002582:	801a      	strh	r2, [r3, #0]
 8002584:	e051      	b.n	800262a <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002586:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002588:	2b3e      	cmp	r3, #62	@ 0x3e
 800258a:	d816      	bhi.n	80025ba <HAL_PCD_EP_DB_Transmit+0x382>
 800258c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800258e:	085b      	lsrs	r3, r3, #1
 8002590:	653b      	str	r3, [r7, #80]	@ 0x50
 8002592:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <HAL_PCD_EP_DB_Transmit+0x36a>
 800259c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800259e:	3301      	adds	r3, #1
 80025a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80025a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	029b      	lsls	r3, r3, #10
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	4313      	orrs	r3, r2
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025b6:	801a      	strh	r2, [r3, #0]
 80025b8:	e037      	b.n	800262a <HAL_PCD_EP_DB_Transmit+0x3f2>
 80025ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025bc:	095b      	lsrs	r3, r3, #5
 80025be:	653b      	str	r3, [r7, #80]	@ 0x50
 80025c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025c2:	f003 031f 	and.w	r3, r3, #31
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d102      	bne.n	80025d0 <HAL_PCD_EP_DB_Transmit+0x398>
 80025ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025cc:	3b01      	subs	r3, #1
 80025ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80025d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025d8:	b29b      	uxth	r3, r3
 80025da:	029b      	lsls	r3, r3, #10
 80025dc:	b29b      	uxth	r3, r3
 80025de:	4313      	orrs	r3, r2
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025ee:	801a      	strh	r2, [r3, #0]
 80025f0:	e01b      	b.n	800262a <HAL_PCD_EP_DB_Transmit+0x3f2>
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	785b      	ldrb	r3, [r3, #1]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d117      	bne.n	800262a <HAL_PCD_EP_DB_Transmit+0x3f2>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002608:	b29b      	uxth	r3, r3
 800260a:	461a      	mov	r2, r3
 800260c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800260e:	4413      	add	r3, r2
 8002610:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	00da      	lsls	r2, r3, #3
 8002618:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800261a:	4413      	add	r3, r2
 800261c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002620:	647b      	str	r3, [r7, #68]	@ 0x44
 8002622:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002624:	b29a      	uxth	r2, r3
 8002626:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002628:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	6959      	ldr	r1, [r3, #20]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	891a      	ldrh	r2, [r3, #8]
 8002636:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002638:	b29b      	uxth	r3, r3
 800263a:	f004 fc1a 	bl	8006e72 <USB_WritePMA>
 800263e:	e20a      	b.n	8002a56 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002648:	b29b      	uxth	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4413      	add	r3, r2
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	4413      	add	r3, r2
 800265a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002664:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	699a      	ldr	r2, [r3, #24]
 800266c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002670:	429a      	cmp	r2, r3
 8002672:	d307      	bcc.n	8002684 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	699a      	ldr	r2, [r3, #24]
 8002678:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800267c:	1ad2      	subs	r2, r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	619a      	str	r2, [r3, #24]
 8002682:	e002      	b.n	800268a <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2200      	movs	r2, #0
 8002688:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b00      	cmp	r3, #0
 8002690:	f040 80f6 	bne.w	8002880 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	785b      	ldrb	r3, [r3, #1]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d126      	bne.n	80026ea <HAL_PCD_EP_DB_Transmit+0x4b2>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	677b      	str	r3, [r7, #116]	@ 0x74
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026b0:	4413      	add	r3, r2
 80026b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	00da      	lsls	r2, r3, #3
 80026ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026bc:	4413      	add	r3, r2
 80026be:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80026c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80026c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026d2:	801a      	strh	r2, [r3, #0]
 80026d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026e6:	801a      	strh	r2, [r3, #0]
 80026e8:	e01a      	b.n	8002720 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	785b      	ldrb	r3, [r3, #1]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d116      	bne.n	8002720 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002700:	b29b      	uxth	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002706:	4413      	add	r3, r2
 8002708:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	00da      	lsls	r2, r3, #3
 8002710:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002712:	4413      	add	r3, r2
 8002714:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002718:	67bb      	str	r3, [r7, #120]	@ 0x78
 800271a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800271c:	2200      	movs	r2, #0
 800271e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	785b      	ldrb	r3, [r3, #1]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d12f      	bne.n	8002790 <HAL_PCD_EP_DB_Transmit+0x558>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002740:	b29b      	uxth	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002748:	4413      	add	r3, r2
 800274a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	00da      	lsls	r2, r3, #3
 8002754:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002758:	4413      	add	r3, r2
 800275a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800275e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002762:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	b29b      	uxth	r3, r3
 800276a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800276e:	b29a      	uxth	r2, r3
 8002770:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002774:	801a      	strh	r2, [r3, #0]
 8002776:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	b29b      	uxth	r3, r3
 800277e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002786:	b29a      	uxth	r2, r3
 8002788:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800278c:	801a      	strh	r2, [r3, #0]
 800278e:	e01c      	b.n	80027ca <HAL_PCD_EP_DB_Transmit+0x592>
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	785b      	ldrb	r3, [r3, #1]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d118      	bne.n	80027ca <HAL_PCD_EP_DB_Transmit+0x592>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	461a      	mov	r2, r3
 80027a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027a8:	4413      	add	r3, r2
 80027aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	00da      	lsls	r2, r3, #3
 80027b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027b8:	4413      	add	r3, r2
 80027ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80027be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80027c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027c6:	2200      	movs	r2, #0
 80027c8:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	78db      	ldrb	r3, [r3, #3]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d127      	bne.n	8002822 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027ec:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80027f0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80027f4:	f083 0320 	eor.w	r3, r3, #32
 80027f8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	441a      	add	r2, r3
 800280a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800280e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002812:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002816:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800281a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800281e:	b29b      	uxth	r3, r3
 8002820:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	4619      	mov	r1, r3
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f006 fa2a 	bl	8008c82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d121      	bne.n	800287c <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	b29b      	uxth	r3, r3
 800284a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800284e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002852:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	461a      	mov	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	441a      	add	r2, r3
 8002864:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8002868:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800286c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002870:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002874:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002878:	b29b      	uxth	r3, r3
 800287a:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	e113      	b.n	8002aa8 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d121      	bne.n	80028ce <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	b29b      	uxth	r3, r3
 800289c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028a4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	441a      	add	r2, r3
 80028b6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80028ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	f040 80be 	bne.w	8002a56 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	695a      	ldr	r2, [r3, #20]
 80028de:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80028e2:	441a      	add	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	69da      	ldr	r2, [r3, #28]
 80028ec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80028f0:	441a      	add	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	6a1a      	ldr	r2, [r3, #32]
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d309      	bcc.n	8002916 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	6a1a      	ldr	r2, [r3, #32]
 800290c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800290e:	1ad2      	subs	r2, r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	621a      	str	r2, [r3, #32]
 8002914:	e015      	b.n	8002942 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d107      	bne.n	800292e <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800291e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002922:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800292c:	e009      	b.n	8002942 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2200      	movs	r2, #0
 8002938:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	785b      	ldrb	r3, [r3, #1]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d15f      	bne.n	8002a10 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800295e:	b29b      	uxth	r3, r3
 8002960:	461a      	mov	r2, r3
 8002962:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002964:	4413      	add	r3, r2
 8002966:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	00da      	lsls	r2, r3, #3
 800296e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002970:	4413      	add	r3, r2
 8002972:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002976:	667b      	str	r3, [r7, #100]	@ 0x64
 8002978:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	b29b      	uxth	r3, r3
 800297e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002982:	b29a      	uxth	r2, r3
 8002984:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002986:	801a      	strh	r2, [r3, #0]
 8002988:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10a      	bne.n	80029a4 <HAL_PCD_EP_DB_Transmit+0x76c>
 800298e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	b29b      	uxth	r3, r3
 8002994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800299c:	b29a      	uxth	r2, r3
 800299e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029a0:	801a      	strh	r2, [r3, #0]
 80029a2:	e04e      	b.n	8002a42 <HAL_PCD_EP_DB_Transmit+0x80a>
 80029a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80029a8:	d816      	bhi.n	80029d8 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80029aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029ac:	085b      	lsrs	r3, r3, #1
 80029ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80029b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <HAL_PCD_EP_DB_Transmit+0x788>
 80029ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029bc:	3301      	adds	r3, #1
 80029be:	663b      	str	r3, [r7, #96]	@ 0x60
 80029c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	029b      	lsls	r3, r3, #10
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	4313      	orrs	r3, r2
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029d4:	801a      	strh	r2, [r3, #0]
 80029d6:	e034      	b.n	8002a42 <HAL_PCD_EP_DB_Transmit+0x80a>
 80029d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80029de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029e0:	f003 031f 	and.w	r3, r3, #31
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d102      	bne.n	80029ee <HAL_PCD_EP_DB_Transmit+0x7b6>
 80029e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029ea:	3b01      	subs	r3, #1
 80029ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80029ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	029b      	lsls	r3, r3, #10
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	4313      	orrs	r3, r2
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a0c:	801a      	strh	r2, [r3, #0]
 8002a0e:	e018      	b.n	8002a42 <HAL_PCD_EP_DB_Transmit+0x80a>
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	785b      	ldrb	r3, [r3, #1]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d114      	bne.n	8002a42 <HAL_PCD_EP_DB_Transmit+0x80a>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	461a      	mov	r2, r3
 8002a24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a26:	4413      	add	r3, r2
 8002a28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	00da      	lsls	r2, r3, #3
 8002a30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a32:	4413      	add	r3, r2
 8002a34:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002a38:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a40:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6818      	ldr	r0, [r3, #0]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	6959      	ldr	r1, [r3, #20]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	895a      	ldrh	r2, [r3, #10]
 8002a4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	f004 fa0e 	bl	8006e72 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a70:	82fb      	strh	r3, [r7, #22]
 8002a72:	8afb      	ldrh	r3, [r7, #22]
 8002a74:	f083 0310 	eor.w	r3, r3, #16
 8002a78:	82fb      	strh	r3, [r7, #22]
 8002a7a:	8afb      	ldrh	r3, [r7, #22]
 8002a7c:	f083 0320 	eor.w	r3, r3, #32
 8002a80:	82fb      	strh	r3, [r7, #22]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	441a      	add	r2, r3
 8002a90:	8afb      	ldrh	r3, [r7, #22]
 8002a92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3798      	adds	r7, #152	@ 0x98
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	607b      	str	r3, [r7, #4]
 8002aba:	460b      	mov	r3, r1
 8002abc:	817b      	strh	r3, [r7, #10]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002ac2:	897b      	ldrh	r3, [r7, #10]
 8002ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00b      	beq.n	8002ae6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ace:	897b      	ldrh	r3, [r7, #10]
 8002ad0:	f003 0207 	and.w	r2, r3, #7
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	3310      	adds	r3, #16
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	e009      	b.n	8002afa <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ae6:	897a      	ldrh	r2, [r7, #10]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	4413      	add	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002afa:	893b      	ldrh	r3, [r7, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d107      	bne.n	8002b10 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2200      	movs	r2, #0
 8002b04:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	80da      	strh	r2, [r3, #6]
 8002b0e:	e00b      	b.n	8002b28 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	2201      	movs	r2, #1
 8002b14:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	0c1b      	lsrs	r3, r3, #16
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	371c      	adds	r7, #28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b085      	sub	sp, #20
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	f043 0302 	orr.w	r3, r3, #2
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d141      	bne.n	8002c1e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b9a:	4b4b      	ldr	r3, [pc, #300]	@ (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ba2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ba6:	d131      	bne.n	8002c0c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ba8:	4b47      	ldr	r3, [pc, #284]	@ (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bae:	4a46      	ldr	r2, [pc, #280]	@ (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bb8:	4b43      	ldr	r3, [pc, #268]	@ (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bc0:	4a41      	ldr	r2, [pc, #260]	@ (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bc8:	4b40      	ldr	r3, [pc, #256]	@ (8002ccc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2232      	movs	r2, #50	@ 0x32
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	4a3f      	ldr	r2, [pc, #252]	@ (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd8:	0c9b      	lsrs	r3, r3, #18
 8002bda:	3301      	adds	r3, #1
 8002bdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bde:	e002      	b.n	8002be6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002be6:	4b38      	ldr	r3, [pc, #224]	@ (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bf2:	d102      	bne.n	8002bfa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f2      	bne.n	8002be0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bfa:	4b33      	ldr	r3, [pc, #204]	@ (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c06:	d158      	bne.n	8002cba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e057      	b.n	8002cbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c0c:	4b2e      	ldr	r3, [pc, #184]	@ (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c12:	4a2d      	ldr	r2, [pc, #180]	@ (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002c1c:	e04d      	b.n	8002cba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c24:	d141      	bne.n	8002caa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c26:	4b28      	ldr	r3, [pc, #160]	@ (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c32:	d131      	bne.n	8002c98 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c34:	4b24      	ldr	r3, [pc, #144]	@ (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c3a:	4a23      	ldr	r2, [pc, #140]	@ (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c44:	4b20      	ldr	r3, [pc, #128]	@ (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c54:	4b1d      	ldr	r3, [pc, #116]	@ (8002ccc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2232      	movs	r2, #50	@ 0x32
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
 8002c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c60:	fba2 2303 	umull	r2, r3, r2, r3
 8002c64:	0c9b      	lsrs	r3, r3, #18
 8002c66:	3301      	adds	r3, #1
 8002c68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c6a:	e002      	b.n	8002c72 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c72:	4b15      	ldr	r3, [pc, #84]	@ (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c7e:	d102      	bne.n	8002c86 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f2      	bne.n	8002c6c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c86:	4b10      	ldr	r3, [pc, #64]	@ (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c92:	d112      	bne.n	8002cba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e011      	b.n	8002cbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c98:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ca4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002ca8:	e007      	b.n	8002cba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002caa:	4b07      	ldr	r3, [pc, #28]	@ (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002cb2:	4a05      	ldr	r2, [pc, #20]	@ (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cb4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cb8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	40007000 	.word	0x40007000
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	431bde83 	.word	0x431bde83

08002cd4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002cd8:	4b05      	ldr	r3, [pc, #20]	@ (8002cf0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	4a04      	ldr	r2, [pc, #16]	@ (8002cf0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002cde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ce2:	6093      	str	r3, [r2, #8]
}
 8002ce4:	bf00      	nop
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40007000 	.word	0x40007000

08002cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e2fe      	b.n	8003304 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d075      	beq.n	8002dfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d12:	4b97      	ldr	r3, [pc, #604]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
 8002d1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d1c:	4b94      	ldr	r3, [pc, #592]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	2b0c      	cmp	r3, #12
 8002d2a:	d102      	bne.n	8002d32 <HAL_RCC_OscConfig+0x3e>
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d002      	beq.n	8002d38 <HAL_RCC_OscConfig+0x44>
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d10b      	bne.n	8002d50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d38:	4b8d      	ldr	r3, [pc, #564]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d05b      	beq.n	8002dfc <HAL_RCC_OscConfig+0x108>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d157      	bne.n	8002dfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e2d9      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d58:	d106      	bne.n	8002d68 <HAL_RCC_OscConfig+0x74>
 8002d5a:	4b85      	ldr	r3, [pc, #532]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a84      	ldr	r2, [pc, #528]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	e01d      	b.n	8002da4 <HAL_RCC_OscConfig+0xb0>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d70:	d10c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x98>
 8002d72:	4b7f      	ldr	r3, [pc, #508]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a7e      	ldr	r2, [pc, #504]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002d78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	4b7c      	ldr	r3, [pc, #496]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a7b      	ldr	r2, [pc, #492]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	e00b      	b.n	8002da4 <HAL_RCC_OscConfig+0xb0>
 8002d8c:	4b78      	ldr	r3, [pc, #480]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a77      	ldr	r2, [pc, #476]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002d92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	4b75      	ldr	r3, [pc, #468]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a74      	ldr	r2, [pc, #464]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002d9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d013      	beq.n	8002dd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dac:	f7fd ff36 	bl	8000c1c <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db4:	f7fd ff32 	bl	8000c1c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b64      	cmp	r3, #100	@ 0x64
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e29e      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dc6:	4b6a      	ldr	r3, [pc, #424]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f0      	beq.n	8002db4 <HAL_RCC_OscConfig+0xc0>
 8002dd2:	e014      	b.n	8002dfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd4:	f7fd ff22 	bl	8000c1c <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ddc:	f7fd ff1e 	bl	8000c1c <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b64      	cmp	r3, #100	@ 0x64
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e28a      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dee:	4b60      	ldr	r3, [pc, #384]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0xe8>
 8002dfa:	e000      	b.n	8002dfe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d075      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e0a:	4b59      	ldr	r3, [pc, #356]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e14:	4b56      	ldr	r3, [pc, #344]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	2b0c      	cmp	r3, #12
 8002e22:	d102      	bne.n	8002e2a <HAL_RCC_OscConfig+0x136>
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d002      	beq.n	8002e30 <HAL_RCC_OscConfig+0x13c>
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d11f      	bne.n	8002e70 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e30:	4b4f      	ldr	r3, [pc, #316]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_RCC_OscConfig+0x154>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e25d      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e48:	4b49      	ldr	r3, [pc, #292]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	061b      	lsls	r3, r3, #24
 8002e56:	4946      	ldr	r1, [pc, #280]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e5c:	4b45      	ldr	r3, [pc, #276]	@ (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fd fe8f 	bl	8000b84 <HAL_InitTick>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d043      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e249      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d023      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e78:	4b3d      	ldr	r3, [pc, #244]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a3c      	ldr	r2, [pc, #240]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002e7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e84:	f7fd feca 	bl	8000c1c <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e8c:	f7fd fec6 	bl	8000c1c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e232      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e9e:	4b34      	ldr	r3, [pc, #208]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eaa:	4b31      	ldr	r3, [pc, #196]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	061b      	lsls	r3, r3, #24
 8002eb8:	492d      	ldr	r1, [pc, #180]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	604b      	str	r3, [r1, #4]
 8002ebe:	e01a      	b.n	8002ef6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a2a      	ldr	r2, [pc, #168]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002ec6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7fd fea6 	bl	8000c1c <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed4:	f7fd fea2 	bl	8000c1c <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e20e      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ee6:	4b22      	ldr	r3, [pc, #136]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x1e0>
 8002ef2:	e000      	b.n	8002ef6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ef4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d041      	beq.n	8002f86 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d01c      	beq.n	8002f44 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f0a:	4b19      	ldr	r3, [pc, #100]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f10:	4a17      	ldr	r2, [pc, #92]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1a:	f7fd fe7f 	bl	8000c1c <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f22:	f7fd fe7b 	bl	8000c1c <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e1e7      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f34:	4b0e      	ldr	r3, [pc, #56]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0ef      	beq.n	8002f22 <HAL_RCC_OscConfig+0x22e>
 8002f42:	e020      	b.n	8002f86 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f44:	4b0a      	ldr	r3, [pc, #40]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f4a:	4a09      	ldr	r2, [pc, #36]	@ (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002f4c:	f023 0301 	bic.w	r3, r3, #1
 8002f50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f54:	f7fd fe62 	bl	8000c1c <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f5a:	e00d      	b.n	8002f78 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f5c:	f7fd fe5e 	bl	8000c1c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d906      	bls.n	8002f78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e1ca      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
 8002f6e:	bf00      	nop
 8002f70:	40021000 	.word	0x40021000
 8002f74:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f78:	4b8c      	ldr	r3, [pc, #560]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8002f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1ea      	bne.n	8002f5c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 80a6 	beq.w	80030e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f94:	2300      	movs	r3, #0
 8002f96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f98:	4b84      	ldr	r3, [pc, #528]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x2b4>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <HAL_RCC_OscConfig+0x2b6>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00d      	beq.n	8002fca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fae:	4b7f      	ldr	r3, [pc, #508]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb2:	4a7e      	ldr	r2, [pc, #504]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8002fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fba:	4b7c      	ldr	r3, [pc, #496]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8002fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fca:	4b79      	ldr	r3, [pc, #484]	@ (80031b0 <HAL_RCC_OscConfig+0x4bc>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d118      	bne.n	8003008 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fd6:	4b76      	ldr	r3, [pc, #472]	@ (80031b0 <HAL_RCC_OscConfig+0x4bc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a75      	ldr	r2, [pc, #468]	@ (80031b0 <HAL_RCC_OscConfig+0x4bc>)
 8002fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fe2:	f7fd fe1b 	bl	8000c1c <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fea:	f7fd fe17 	bl	8000c1c <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e183      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ffc:	4b6c      	ldr	r3, [pc, #432]	@ (80031b0 <HAL_RCC_OscConfig+0x4bc>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f0      	beq.n	8002fea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d108      	bne.n	8003022 <HAL_RCC_OscConfig+0x32e>
 8003010:	4b66      	ldr	r3, [pc, #408]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8003012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003016:	4a65      	ldr	r2, [pc, #404]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003020:	e024      	b.n	800306c <HAL_RCC_OscConfig+0x378>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	2b05      	cmp	r3, #5
 8003028:	d110      	bne.n	800304c <HAL_RCC_OscConfig+0x358>
 800302a:	4b60      	ldr	r3, [pc, #384]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 800302c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003030:	4a5e      	ldr	r2, [pc, #376]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8003032:	f043 0304 	orr.w	r3, r3, #4
 8003036:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800303a:	4b5c      	ldr	r3, [pc, #368]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 800303c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003040:	4a5a      	ldr	r2, [pc, #360]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800304a:	e00f      	b.n	800306c <HAL_RCC_OscConfig+0x378>
 800304c:	4b57      	ldr	r3, [pc, #348]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003052:	4a56      	ldr	r2, [pc, #344]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8003054:	f023 0301 	bic.w	r3, r3, #1
 8003058:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800305c:	4b53      	ldr	r3, [pc, #332]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 800305e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003062:	4a52      	ldr	r2, [pc, #328]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8003064:	f023 0304 	bic.w	r3, r3, #4
 8003068:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d016      	beq.n	80030a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003074:	f7fd fdd2 	bl	8000c1c <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800307a:	e00a      	b.n	8003092 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307c:	f7fd fdce 	bl	8000c1c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800308a:	4293      	cmp	r3, r2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e138      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003092:	4b46      	ldr	r3, [pc, #280]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8003094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0ed      	beq.n	800307c <HAL_RCC_OscConfig+0x388>
 80030a0:	e015      	b.n	80030ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a2:	f7fd fdbb 	bl	8000c1c <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030a8:	e00a      	b.n	80030c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030aa:	f7fd fdb7 	bl	8000c1c <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e121      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030c0:	4b3a      	ldr	r3, [pc, #232]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 80030c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1ed      	bne.n	80030aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030ce:	7ffb      	ldrb	r3, [r7, #31]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d105      	bne.n	80030e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030d4:	4b35      	ldr	r3, [pc, #212]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 80030d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d8:	4a34      	ldr	r2, [pc, #208]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 80030da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030de:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d03c      	beq.n	8003166 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d01c      	beq.n	800312e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030f4:	4b2d      	ldr	r3, [pc, #180]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 80030f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030fa:	4a2c      	ldr	r2, [pc, #176]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003104:	f7fd fd8a 	bl	8000c1c <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800310c:	f7fd fd86 	bl	8000c1c <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e0f2      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800311e:	4b23      	ldr	r3, [pc, #140]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8003120:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0ef      	beq.n	800310c <HAL_RCC_OscConfig+0x418>
 800312c:	e01b      	b.n	8003166 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800312e:	4b1f      	ldr	r3, [pc, #124]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8003130:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003134:	4a1d      	ldr	r2, [pc, #116]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8003136:	f023 0301 	bic.w	r3, r3, #1
 800313a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313e:	f7fd fd6d 	bl	8000c1c <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003146:	f7fd fd69 	bl	8000c1c <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e0d5      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003158:	4b14      	ldr	r3, [pc, #80]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 800315a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1ef      	bne.n	8003146 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 80c9 	beq.w	8003302 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003170:	4b0e      	ldr	r3, [pc, #56]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 030c 	and.w	r3, r3, #12
 8003178:	2b0c      	cmp	r3, #12
 800317a:	f000 8083 	beq.w	8003284 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d15e      	bne.n	8003244 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003186:	4b09      	ldr	r3, [pc, #36]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a08      	ldr	r2, [pc, #32]	@ (80031ac <HAL_RCC_OscConfig+0x4b8>)
 800318c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003192:	f7fd fd43 	bl	8000c1c <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003198:	e00c      	b.n	80031b4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800319a:	f7fd fd3f 	bl	8000c1c <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d905      	bls.n	80031b4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e0ab      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031b4:	4b55      	ldr	r3, [pc, #340]	@ (800330c <HAL_RCC_OscConfig+0x618>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1ec      	bne.n	800319a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031c0:	4b52      	ldr	r3, [pc, #328]	@ (800330c <HAL_RCC_OscConfig+0x618>)
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	4b52      	ldr	r3, [pc, #328]	@ (8003310 <HAL_RCC_OscConfig+0x61c>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6a11      	ldr	r1, [r2, #32]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031d0:	3a01      	subs	r2, #1
 80031d2:	0112      	lsls	r2, r2, #4
 80031d4:	4311      	orrs	r1, r2
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80031da:	0212      	lsls	r2, r2, #8
 80031dc:	4311      	orrs	r1, r2
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80031e2:	0852      	lsrs	r2, r2, #1
 80031e4:	3a01      	subs	r2, #1
 80031e6:	0552      	lsls	r2, r2, #21
 80031e8:	4311      	orrs	r1, r2
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80031ee:	0852      	lsrs	r2, r2, #1
 80031f0:	3a01      	subs	r2, #1
 80031f2:	0652      	lsls	r2, r2, #25
 80031f4:	4311      	orrs	r1, r2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80031fa:	06d2      	lsls	r2, r2, #27
 80031fc:	430a      	orrs	r2, r1
 80031fe:	4943      	ldr	r1, [pc, #268]	@ (800330c <HAL_RCC_OscConfig+0x618>)
 8003200:	4313      	orrs	r3, r2
 8003202:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003204:	4b41      	ldr	r3, [pc, #260]	@ (800330c <HAL_RCC_OscConfig+0x618>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a40      	ldr	r2, [pc, #256]	@ (800330c <HAL_RCC_OscConfig+0x618>)
 800320a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800320e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003210:	4b3e      	ldr	r3, [pc, #248]	@ (800330c <HAL_RCC_OscConfig+0x618>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	4a3d      	ldr	r2, [pc, #244]	@ (800330c <HAL_RCC_OscConfig+0x618>)
 8003216:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800321a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7fd fcfe 	bl	8000c1c <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003224:	f7fd fcfa 	bl	8000c1c <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e066      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003236:	4b35      	ldr	r3, [pc, #212]	@ (800330c <HAL_RCC_OscConfig+0x618>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0x530>
 8003242:	e05e      	b.n	8003302 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003244:	4b31      	ldr	r3, [pc, #196]	@ (800330c <HAL_RCC_OscConfig+0x618>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a30      	ldr	r2, [pc, #192]	@ (800330c <HAL_RCC_OscConfig+0x618>)
 800324a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800324e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7fd fce4 	bl	8000c1c <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003258:	f7fd fce0 	bl	8000c1c <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e04c      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800326a:	4b28      	ldr	r3, [pc, #160]	@ (800330c <HAL_RCC_OscConfig+0x618>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003276:	4b25      	ldr	r3, [pc, #148]	@ (800330c <HAL_RCC_OscConfig+0x618>)
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	4924      	ldr	r1, [pc, #144]	@ (800330c <HAL_RCC_OscConfig+0x618>)
 800327c:	4b25      	ldr	r3, [pc, #148]	@ (8003314 <HAL_RCC_OscConfig+0x620>)
 800327e:	4013      	ands	r3, r2
 8003280:	60cb      	str	r3, [r1, #12]
 8003282:	e03e      	b.n	8003302 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e039      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003290:	4b1e      	ldr	r3, [pc, #120]	@ (800330c <HAL_RCC_OscConfig+0x618>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f003 0203 	and.w	r2, r3, #3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d12c      	bne.n	80032fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ae:	3b01      	subs	r3, #1
 80032b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d123      	bne.n	80032fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d11b      	bne.n	80032fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d113      	bne.n	80032fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e0:	085b      	lsrs	r3, r3, #1
 80032e2:	3b01      	subs	r3, #1
 80032e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d109      	bne.n	80032fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032f4:	085b      	lsrs	r3, r3, #1
 80032f6:	3b01      	subs	r3, #1
 80032f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d001      	beq.n	8003302 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3720      	adds	r7, #32
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40021000 	.word	0x40021000
 8003310:	019f800c 	.word	0x019f800c
 8003314:	feeefffc 	.word	0xfeeefffc

08003318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003322:	2300      	movs	r3, #0
 8003324:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e11e      	b.n	800356e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003330:	4b91      	ldr	r3, [pc, #580]	@ (8003578 <HAL_RCC_ClockConfig+0x260>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 030f 	and.w	r3, r3, #15
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d910      	bls.n	8003360 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333e:	4b8e      	ldr	r3, [pc, #568]	@ (8003578 <HAL_RCC_ClockConfig+0x260>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f023 020f 	bic.w	r2, r3, #15
 8003346:	498c      	ldr	r1, [pc, #560]	@ (8003578 <HAL_RCC_ClockConfig+0x260>)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	4313      	orrs	r3, r2
 800334c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800334e:	4b8a      	ldr	r3, [pc, #552]	@ (8003578 <HAL_RCC_ClockConfig+0x260>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d001      	beq.n	8003360 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e106      	b.n	800356e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d073      	beq.n	8003454 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b03      	cmp	r3, #3
 8003372:	d129      	bne.n	80033c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003374:	4b81      	ldr	r3, [pc, #516]	@ (800357c <HAL_RCC_ClockConfig+0x264>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0f4      	b.n	800356e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003384:	f000 f966 	bl	8003654 <RCC_GetSysClockFreqFromPLLSource>
 8003388:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4a7c      	ldr	r2, [pc, #496]	@ (8003580 <HAL_RCC_ClockConfig+0x268>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d93f      	bls.n	8003412 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003392:	4b7a      	ldr	r3, [pc, #488]	@ (800357c <HAL_RCC_ClockConfig+0x264>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d009      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d033      	beq.n	8003412 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d12f      	bne.n	8003412 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033b2:	4b72      	ldr	r3, [pc, #456]	@ (800357c <HAL_RCC_ClockConfig+0x264>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033ba:	4a70      	ldr	r2, [pc, #448]	@ (800357c <HAL_RCC_ClockConfig+0x264>)
 80033bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80033c2:	2380      	movs	r3, #128	@ 0x80
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	e024      	b.n	8003412 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d107      	bne.n	80033e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033d0:	4b6a      	ldr	r3, [pc, #424]	@ (800357c <HAL_RCC_ClockConfig+0x264>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d109      	bne.n	80033f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0c6      	b.n	800356e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033e0:	4b66      	ldr	r3, [pc, #408]	@ (800357c <HAL_RCC_ClockConfig+0x264>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e0be      	b.n	800356e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80033f0:	f000 f8ce 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 80033f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4a61      	ldr	r2, [pc, #388]	@ (8003580 <HAL_RCC_ClockConfig+0x268>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d909      	bls.n	8003412 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033fe:	4b5f      	ldr	r3, [pc, #380]	@ (800357c <HAL_RCC_ClockConfig+0x264>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003406:	4a5d      	ldr	r2, [pc, #372]	@ (800357c <HAL_RCC_ClockConfig+0x264>)
 8003408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800340c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800340e:	2380      	movs	r3, #128	@ 0x80
 8003410:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003412:	4b5a      	ldr	r3, [pc, #360]	@ (800357c <HAL_RCC_ClockConfig+0x264>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f023 0203 	bic.w	r2, r3, #3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	4957      	ldr	r1, [pc, #348]	@ (800357c <HAL_RCC_ClockConfig+0x264>)
 8003420:	4313      	orrs	r3, r2
 8003422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003424:	f7fd fbfa 	bl	8000c1c <HAL_GetTick>
 8003428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342a:	e00a      	b.n	8003442 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800342c:	f7fd fbf6 	bl	8000c1c <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800343a:	4293      	cmp	r3, r2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e095      	b.n	800356e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003442:	4b4e      	ldr	r3, [pc, #312]	@ (800357c <HAL_RCC_ClockConfig+0x264>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 020c 	and.w	r2, r3, #12
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	429a      	cmp	r2, r3
 8003452:	d1eb      	bne.n	800342c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d023      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800346c:	4b43      	ldr	r3, [pc, #268]	@ (800357c <HAL_RCC_ClockConfig+0x264>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	4a42      	ldr	r2, [pc, #264]	@ (800357c <HAL_RCC_ClockConfig+0x264>)
 8003472:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003476:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0308 	and.w	r3, r3, #8
 8003480:	2b00      	cmp	r3, #0
 8003482:	d007      	beq.n	8003494 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003484:	4b3d      	ldr	r3, [pc, #244]	@ (800357c <HAL_RCC_ClockConfig+0x264>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800348c:	4a3b      	ldr	r2, [pc, #236]	@ (800357c <HAL_RCC_ClockConfig+0x264>)
 800348e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003492:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003494:	4b39      	ldr	r3, [pc, #228]	@ (800357c <HAL_RCC_ClockConfig+0x264>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	4936      	ldr	r1, [pc, #216]	@ (800357c <HAL_RCC_ClockConfig+0x264>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	608b      	str	r3, [r1, #8]
 80034a6:	e008      	b.n	80034ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2b80      	cmp	r3, #128	@ 0x80
 80034ac:	d105      	bne.n	80034ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80034ae:	4b33      	ldr	r3, [pc, #204]	@ (800357c <HAL_RCC_ClockConfig+0x264>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	4a32      	ldr	r2, [pc, #200]	@ (800357c <HAL_RCC_ClockConfig+0x264>)
 80034b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003578 <HAL_RCC_ClockConfig+0x260>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d21d      	bcs.n	8003504 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003578 <HAL_RCC_ClockConfig+0x260>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f023 020f 	bic.w	r2, r3, #15
 80034d0:	4929      	ldr	r1, [pc, #164]	@ (8003578 <HAL_RCC_ClockConfig+0x260>)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034d8:	f7fd fba0 	bl	8000c1c <HAL_GetTick>
 80034dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034de:	e00a      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e0:	f7fd fb9c 	bl	8000c1c <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e03b      	b.n	800356e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f6:	4b20      	ldr	r3, [pc, #128]	@ (8003578 <HAL_RCC_ClockConfig+0x260>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d1ed      	bne.n	80034e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003510:	4b1a      	ldr	r3, [pc, #104]	@ (800357c <HAL_RCC_ClockConfig+0x264>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4917      	ldr	r1, [pc, #92]	@ (800357c <HAL_RCC_ClockConfig+0x264>)
 800351e:	4313      	orrs	r3, r2
 8003520:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d009      	beq.n	8003542 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800352e:	4b13      	ldr	r3, [pc, #76]	@ (800357c <HAL_RCC_ClockConfig+0x264>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	490f      	ldr	r1, [pc, #60]	@ (800357c <HAL_RCC_ClockConfig+0x264>)
 800353e:	4313      	orrs	r3, r2
 8003540:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003542:	f000 f825 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 8003546:	4602      	mov	r2, r0
 8003548:	4b0c      	ldr	r3, [pc, #48]	@ (800357c <HAL_RCC_ClockConfig+0x264>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	091b      	lsrs	r3, r3, #4
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	490c      	ldr	r1, [pc, #48]	@ (8003584 <HAL_RCC_ClockConfig+0x26c>)
 8003554:	5ccb      	ldrb	r3, [r1, r3]
 8003556:	f003 031f 	and.w	r3, r3, #31
 800355a:	fa22 f303 	lsr.w	r3, r2, r3
 800355e:	4a0a      	ldr	r2, [pc, #40]	@ (8003588 <HAL_RCC_ClockConfig+0x270>)
 8003560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003562:	4b0a      	ldr	r3, [pc, #40]	@ (800358c <HAL_RCC_ClockConfig+0x274>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7fd fb0c 	bl	8000b84 <HAL_InitTick>
 800356c:	4603      	mov	r3, r0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40022000 	.word	0x40022000
 800357c:	40021000 	.word	0x40021000
 8003580:	04c4b400 	.word	0x04c4b400
 8003584:	0800a124 	.word	0x0800a124
 8003588:	20000000 	.word	0x20000000
 800358c:	20000004 	.word	0x20000004

08003590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003596:	4b2c      	ldr	r3, [pc, #176]	@ (8003648 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 030c 	and.w	r3, r3, #12
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d102      	bne.n	80035a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035a2:	4b2a      	ldr	r3, [pc, #168]	@ (800364c <HAL_RCC_GetSysClockFreq+0xbc>)
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	e047      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80035a8:	4b27      	ldr	r3, [pc, #156]	@ (8003648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 030c 	and.w	r3, r3, #12
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d102      	bne.n	80035ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035b4:	4b26      	ldr	r3, [pc, #152]	@ (8003650 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	e03e      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80035ba:	4b23      	ldr	r3, [pc, #140]	@ (8003648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 030c 	and.w	r3, r3, #12
 80035c2:	2b0c      	cmp	r3, #12
 80035c4:	d136      	bne.n	8003634 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035c6:	4b20      	ldr	r3, [pc, #128]	@ (8003648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	091b      	lsrs	r3, r3, #4
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	3301      	adds	r3, #1
 80035dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d10c      	bne.n	80035fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003650 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ec:	4a16      	ldr	r2, [pc, #88]	@ (8003648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035ee:	68d2      	ldr	r2, [r2, #12]
 80035f0:	0a12      	lsrs	r2, r2, #8
 80035f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035f6:	fb02 f303 	mul.w	r3, r2, r3
 80035fa:	617b      	str	r3, [r7, #20]
      break;
 80035fc:	e00c      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035fe:	4a13      	ldr	r2, [pc, #76]	@ (800364c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	fbb2 f3f3 	udiv	r3, r2, r3
 8003606:	4a10      	ldr	r2, [pc, #64]	@ (8003648 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003608:	68d2      	ldr	r2, [r2, #12]
 800360a:	0a12      	lsrs	r2, r2, #8
 800360c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003610:	fb02 f303 	mul.w	r3, r2, r3
 8003614:	617b      	str	r3, [r7, #20]
      break;
 8003616:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003618:	4b0b      	ldr	r3, [pc, #44]	@ (8003648 <HAL_RCC_GetSysClockFreq+0xb8>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	0e5b      	lsrs	r3, r3, #25
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	3301      	adds	r3, #1
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	e001      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003638:	693b      	ldr	r3, [r7, #16]
}
 800363a:	4618      	mov	r0, r3
 800363c:	371c      	adds	r7, #28
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40021000 	.word	0x40021000
 800364c:	00f42400 	.word	0x00f42400
 8003650:	016e3600 	.word	0x016e3600

08003654 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800365a:	4b1e      	ldr	r3, [pc, #120]	@ (80036d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003664:	4b1b      	ldr	r3, [pc, #108]	@ (80036d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	091b      	lsrs	r3, r3, #4
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	3301      	adds	r3, #1
 8003670:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	2b03      	cmp	r3, #3
 8003676:	d10c      	bne.n	8003692 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003678:	4a17      	ldr	r2, [pc, #92]	@ (80036d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003680:	4a14      	ldr	r2, [pc, #80]	@ (80036d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003682:	68d2      	ldr	r2, [r2, #12]
 8003684:	0a12      	lsrs	r2, r2, #8
 8003686:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800368a:	fb02 f303 	mul.w	r3, r2, r3
 800368e:	617b      	str	r3, [r7, #20]
    break;
 8003690:	e00c      	b.n	80036ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003692:	4a12      	ldr	r2, [pc, #72]	@ (80036dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	fbb2 f3f3 	udiv	r3, r2, r3
 800369a:	4a0e      	ldr	r2, [pc, #56]	@ (80036d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800369c:	68d2      	ldr	r2, [r2, #12]
 800369e:	0a12      	lsrs	r2, r2, #8
 80036a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036a4:	fb02 f303 	mul.w	r3, r2, r3
 80036a8:	617b      	str	r3, [r7, #20]
    break;
 80036aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036ac:	4b09      	ldr	r3, [pc, #36]	@ (80036d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	0e5b      	lsrs	r3, r3, #25
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	3301      	adds	r3, #1
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80036c6:	687b      	ldr	r3, [r7, #4]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	371c      	adds	r7, #28
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	40021000 	.word	0x40021000
 80036d8:	016e3600 	.word	0x016e3600
 80036dc:	00f42400 	.word	0x00f42400

080036e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036e8:	2300      	movs	r3, #0
 80036ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036ec:	2300      	movs	r3, #0
 80036ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 8098 	beq.w	800382e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036fe:	2300      	movs	r3, #0
 8003700:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003702:	4b43      	ldr	r3, [pc, #268]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10d      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800370e:	4b40      	ldr	r3, [pc, #256]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003712:	4a3f      	ldr	r2, [pc, #252]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003718:	6593      	str	r3, [r2, #88]	@ 0x58
 800371a:	4b3d      	ldr	r3, [pc, #244]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800371c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800371e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003722:	60bb      	str	r3, [r7, #8]
 8003724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003726:	2301      	movs	r3, #1
 8003728:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800372a:	4b3a      	ldr	r3, [pc, #232]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a39      	ldr	r2, [pc, #228]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003730:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003734:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003736:	f7fd fa71 	bl	8000c1c <HAL_GetTick>
 800373a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800373c:	e009      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800373e:	f7fd fa6d 	bl	8000c1c <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d902      	bls.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	74fb      	strb	r3, [r7, #19]
        break;
 8003750:	e005      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003752:	4b30      	ldr	r3, [pc, #192]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0ef      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800375e:	7cfb      	ldrb	r3, [r7, #19]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d159      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003764:	4b2a      	ldr	r3, [pc, #168]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800376a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800376e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d01e      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	429a      	cmp	r2, r3
 800377e:	d019      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003780:	4b23      	ldr	r3, [pc, #140]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003786:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800378a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800378c:	4b20      	ldr	r3, [pc, #128]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800378e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003792:	4a1f      	ldr	r2, [pc, #124]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003798:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800379c:	4b1c      	ldr	r3, [pc, #112]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800379e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037ac:	4a18      	ldr	r2, [pc, #96]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d016      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037be:	f7fd fa2d 	bl	8000c1c <HAL_GetTick>
 80037c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037c4:	e00b      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c6:	f7fd fa29 	bl	8000c1c <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d902      	bls.n	80037de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	74fb      	strb	r3, [r7, #19]
            break;
 80037dc:	e006      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037de:	4b0c      	ldr	r3, [pc, #48]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0ec      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80037ec:	7cfb      	ldrb	r3, [r7, #19]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10b      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037f2:	4b07      	ldr	r3, [pc, #28]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003800:	4903      	ldr	r1, [pc, #12]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003802:	4313      	orrs	r3, r2
 8003804:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003808:	e008      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800380a:	7cfb      	ldrb	r3, [r7, #19]
 800380c:	74bb      	strb	r3, [r7, #18]
 800380e:	e005      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003810:	40021000 	.word	0x40021000
 8003814:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003818:	7cfb      	ldrb	r3, [r7, #19]
 800381a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800381c:	7c7b      	ldrb	r3, [r7, #17]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d105      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003822:	4ba7      	ldr	r3, [pc, #668]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003826:	4aa6      	ldr	r2, [pc, #664]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003828:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800382c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800383a:	4ba1      	ldr	r3, [pc, #644]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800383c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003840:	f023 0203 	bic.w	r2, r3, #3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	499d      	ldr	r1, [pc, #628]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800385c:	4b98      	ldr	r3, [pc, #608]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800385e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003862:	f023 020c 	bic.w	r2, r3, #12
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	4995      	ldr	r1, [pc, #596]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0304 	and.w	r3, r3, #4
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800387e:	4b90      	ldr	r3, [pc, #576]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003884:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	498c      	ldr	r1, [pc, #560]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038a0:	4b87      	ldr	r3, [pc, #540]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	4984      	ldr	r1, [pc, #528]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0310 	and.w	r3, r3, #16
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00a      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038c2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	497b      	ldr	r1, [pc, #492]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0320 	and.w	r3, r3, #32
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00a      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038e4:	4b76      	ldr	r3, [pc, #472]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	4973      	ldr	r1, [pc, #460]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00a      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003906:	4b6e      	ldr	r3, [pc, #440]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	496a      	ldr	r1, [pc, #424]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00a      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003928:	4b65      	ldr	r3, [pc, #404]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800392a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800392e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	4962      	ldr	r1, [pc, #392]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003938:	4313      	orrs	r3, r2
 800393a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800394a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800394c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003950:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003958:	4959      	ldr	r1, [pc, #356]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800395a:	4313      	orrs	r3, r2
 800395c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00a      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800396c:	4b54      	ldr	r3, [pc, #336]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800396e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003972:	f023 0203 	bic.w	r2, r3, #3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800397a:	4951      	ldr	r1, [pc, #324]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800398e:	4b4c      	ldr	r3, [pc, #304]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003994:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800399c:	4948      	ldr	r1, [pc, #288]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d015      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039b0:	4b43      	ldr	r3, [pc, #268]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039be:	4940      	ldr	r1, [pc, #256]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039ce:	d105      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039d0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4a3a      	ldr	r2, [pc, #232]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039da:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d015      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039e8:	4b35      	ldr	r3, [pc, #212]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f6:	4932      	ldr	r1, [pc, #200]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a06:	d105      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a08:	4b2d      	ldr	r3, [pc, #180]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4a2c      	ldr	r2, [pc, #176]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a12:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d015      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a20:	4b27      	ldr	r3, [pc, #156]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a26:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a2e:	4924      	ldr	r1, [pc, #144]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a3e:	d105      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a40:	4b1f      	ldr	r3, [pc, #124]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4a1e      	ldr	r2, [pc, #120]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a4a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d015      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a58:	4b19      	ldr	r3, [pc, #100]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a66:	4916      	ldr	r1, [pc, #88]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a76:	d105      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a78:	4b11      	ldr	r3, [pc, #68]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	4a10      	ldr	r2, [pc, #64]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a82:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d019      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a90:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a96:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	4908      	ldr	r1, [pc, #32]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003aae:	d109      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ab0:	4b03      	ldr	r3, [pc, #12]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	4a02      	ldr	r2, [pc, #8]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003aba:	60d3      	str	r3, [r2, #12]
 8003abc:	e002      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003abe:	bf00      	nop
 8003ac0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d015      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ad0:	4b29      	ldr	r3, [pc, #164]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ad6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ade:	4926      	ldr	r1, [pc, #152]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003aee:	d105      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003af0:	4b21      	ldr	r3, [pc, #132]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4a20      	ldr	r2, [pc, #128]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003af6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003afa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d015      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003b08:	4b1b      	ldr	r3, [pc, #108]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b0e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b16:	4918      	ldr	r1, [pc, #96]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b26:	d105      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b28:	4b13      	ldr	r3, [pc, #76]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	4a12      	ldr	r2, [pc, #72]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b32:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d015      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b40:	4b0d      	ldr	r3, [pc, #52]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b4e:	490a      	ldr	r1, [pc, #40]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b5e:	d105      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b60:	4b05      	ldr	r3, [pc, #20]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	4a04      	ldr	r2, [pc, #16]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b6a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003b6c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40021000 	.word	0x40021000

08003b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e049      	b.n	8003c22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d106      	bne.n	8003ba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fc fecc 	bl	8000940 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4610      	mov	r0, r2
 8003bbc:	f000 fc38 	bl	8004430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b082      	sub	sp, #8
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e049      	b.n	8003cd0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d106      	bne.n	8003c56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f841 	bl	8003cd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2202      	movs	r2, #2
 8003c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3304      	adds	r3, #4
 8003c66:	4619      	mov	r1, r3
 8003c68:	4610      	mov	r0, r2
 8003c6a:	f000 fbe1 	bl	8004430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d020      	beq.n	8003d50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d01b      	beq.n	8003d50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f06f 0202 	mvn.w	r2, #2
 8003d20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fb5c 	bl	80043f4 <HAL_TIM_IC_CaptureCallback>
 8003d3c:	e005      	b.n	8003d4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fb4e 	bl	80043e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 fb5f 	bl	8004408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	f003 0304 	and.w	r3, r3, #4
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d020      	beq.n	8003d9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d01b      	beq.n	8003d9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f06f 0204 	mvn.w	r2, #4
 8003d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2202      	movs	r2, #2
 8003d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 fb36 	bl	80043f4 <HAL_TIM_IC_CaptureCallback>
 8003d88:	e005      	b.n	8003d96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fb28 	bl	80043e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 fb39 	bl	8004408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d020      	beq.n	8003de8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f003 0308 	and.w	r3, r3, #8
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01b      	beq.n	8003de8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f06f 0208 	mvn.w	r2, #8
 8003db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2204      	movs	r2, #4
 8003dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 fb10 	bl	80043f4 <HAL_TIM_IC_CaptureCallback>
 8003dd4:	e005      	b.n	8003de2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fb02 	bl	80043e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fb13 	bl	8004408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d020      	beq.n	8003e34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d01b      	beq.n	8003e34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f06f 0210 	mvn.w	r2, #16
 8003e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2208      	movs	r2, #8
 8003e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 faea 	bl	80043f4 <HAL_TIM_IC_CaptureCallback>
 8003e20:	e005      	b.n	8003e2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 fadc 	bl	80043e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 faed 	bl	8004408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00c      	beq.n	8003e58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d007      	beq.n	8003e58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f06f 0201 	mvn.w	r2, #1
 8003e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 faba 	bl	80043cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d104      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00c      	beq.n	8003e86 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d007      	beq.n	8003e86 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f001 f9b1 	bl	80051e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00c      	beq.n	8003eaa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d007      	beq.n	8003eaa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f001 f9a9 	bl	80051fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00c      	beq.n	8003ece <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d007      	beq.n	8003ece <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 faa7 	bl	800441c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00c      	beq.n	8003ef2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d007      	beq.n	8003ef2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f06f 0220 	mvn.w	r2, #32
 8003eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f001 f971 	bl	80051d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00c      	beq.n	8003f16 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d007      	beq.n	8003f16 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f001 f97d 	bl	8005210 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00c      	beq.n	8003f3a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d007      	beq.n	8003f3a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f001 f975 	bl	8005224 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00c      	beq.n	8003f5e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d007      	beq.n	8003f5e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f001 f96d 	bl	8005238 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00c      	beq.n	8003f82 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d007      	beq.n	8003f82 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f001 f965 	bl	800524c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f82:	bf00      	nop
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e0ff      	b.n	80041aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b14      	cmp	r3, #20
 8003fb6:	f200 80f0 	bhi.w	800419a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003fba:	a201      	add	r2, pc, #4	@ (adr r2, 8003fc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc0:	08004015 	.word	0x08004015
 8003fc4:	0800419b 	.word	0x0800419b
 8003fc8:	0800419b 	.word	0x0800419b
 8003fcc:	0800419b 	.word	0x0800419b
 8003fd0:	08004055 	.word	0x08004055
 8003fd4:	0800419b 	.word	0x0800419b
 8003fd8:	0800419b 	.word	0x0800419b
 8003fdc:	0800419b 	.word	0x0800419b
 8003fe0:	08004097 	.word	0x08004097
 8003fe4:	0800419b 	.word	0x0800419b
 8003fe8:	0800419b 	.word	0x0800419b
 8003fec:	0800419b 	.word	0x0800419b
 8003ff0:	080040d7 	.word	0x080040d7
 8003ff4:	0800419b 	.word	0x0800419b
 8003ff8:	0800419b 	.word	0x0800419b
 8003ffc:	0800419b 	.word	0x0800419b
 8004000:	08004119 	.word	0x08004119
 8004004:	0800419b 	.word	0x0800419b
 8004008:	0800419b 	.word	0x0800419b
 800400c:	0800419b 	.word	0x0800419b
 8004010:	08004159 	.word	0x08004159
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68b9      	ldr	r1, [r7, #8]
 800401a:	4618      	mov	r0, r3
 800401c:	f000 fabc 	bl	8004598 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699a      	ldr	r2, [r3, #24]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0208 	orr.w	r2, r2, #8
 800402e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0204 	bic.w	r2, r2, #4
 800403e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6999      	ldr	r1, [r3, #24]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	691a      	ldr	r2, [r3, #16]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	619a      	str	r2, [r3, #24]
      break;
 8004052:	e0a5      	b.n	80041a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68b9      	ldr	r1, [r7, #8]
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fb36 	bl	80046cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699a      	ldr	r2, [r3, #24]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800406e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800407e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6999      	ldr	r1, [r3, #24]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	021a      	lsls	r2, r3, #8
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	619a      	str	r2, [r3, #24]
      break;
 8004094:	e084      	b.n	80041a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fba9 	bl	80047f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	69da      	ldr	r2, [r3, #28]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f042 0208 	orr.w	r2, r2, #8
 80040b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69da      	ldr	r2, [r3, #28]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0204 	bic.w	r2, r2, #4
 80040c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69d9      	ldr	r1, [r3, #28]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	691a      	ldr	r2, [r3, #16]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	61da      	str	r2, [r3, #28]
      break;
 80040d4:	e064      	b.n	80041a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68b9      	ldr	r1, [r7, #8]
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 fc1b 	bl	8004918 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69da      	ldr	r2, [r3, #28]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69da      	ldr	r2, [r3, #28]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004100:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	69d9      	ldr	r1, [r3, #28]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	021a      	lsls	r2, r3, #8
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	61da      	str	r2, [r3, #28]
      break;
 8004116:	e043      	b.n	80041a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68b9      	ldr	r1, [r7, #8]
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fc8e 	bl	8004a40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0208 	orr.w	r2, r2, #8
 8004132:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0204 	bic.w	r2, r2, #4
 8004142:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	691a      	ldr	r2, [r3, #16]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004156:	e023      	b.n	80041a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68b9      	ldr	r1, [r7, #8]
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fcd8 	bl	8004b14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004172:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004182:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	021a      	lsls	r2, r3, #8
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004198:	e002      	b.n	80041a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	75fb      	strb	r3, [r7, #23]
      break;
 800419e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80041a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop

080041b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_TIM_ConfigClockSource+0x1c>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e0ee      	b.n	80043ae <HAL_TIM_ConfigClockSource+0x1fa>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80041ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80041f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a6b      	ldr	r2, [pc, #428]	@ (80043b8 <HAL_TIM_ConfigClockSource+0x204>)
 800420a:	4293      	cmp	r3, r2
 800420c:	f000 80b9 	beq.w	8004382 <HAL_TIM_ConfigClockSource+0x1ce>
 8004210:	4a69      	ldr	r2, [pc, #420]	@ (80043b8 <HAL_TIM_ConfigClockSource+0x204>)
 8004212:	4293      	cmp	r3, r2
 8004214:	f200 80be 	bhi.w	8004394 <HAL_TIM_ConfigClockSource+0x1e0>
 8004218:	4a68      	ldr	r2, [pc, #416]	@ (80043bc <HAL_TIM_ConfigClockSource+0x208>)
 800421a:	4293      	cmp	r3, r2
 800421c:	f000 80b1 	beq.w	8004382 <HAL_TIM_ConfigClockSource+0x1ce>
 8004220:	4a66      	ldr	r2, [pc, #408]	@ (80043bc <HAL_TIM_ConfigClockSource+0x208>)
 8004222:	4293      	cmp	r3, r2
 8004224:	f200 80b6 	bhi.w	8004394 <HAL_TIM_ConfigClockSource+0x1e0>
 8004228:	4a65      	ldr	r2, [pc, #404]	@ (80043c0 <HAL_TIM_ConfigClockSource+0x20c>)
 800422a:	4293      	cmp	r3, r2
 800422c:	f000 80a9 	beq.w	8004382 <HAL_TIM_ConfigClockSource+0x1ce>
 8004230:	4a63      	ldr	r2, [pc, #396]	@ (80043c0 <HAL_TIM_ConfigClockSource+0x20c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	f200 80ae 	bhi.w	8004394 <HAL_TIM_ConfigClockSource+0x1e0>
 8004238:	4a62      	ldr	r2, [pc, #392]	@ (80043c4 <HAL_TIM_ConfigClockSource+0x210>)
 800423a:	4293      	cmp	r3, r2
 800423c:	f000 80a1 	beq.w	8004382 <HAL_TIM_ConfigClockSource+0x1ce>
 8004240:	4a60      	ldr	r2, [pc, #384]	@ (80043c4 <HAL_TIM_ConfigClockSource+0x210>)
 8004242:	4293      	cmp	r3, r2
 8004244:	f200 80a6 	bhi.w	8004394 <HAL_TIM_ConfigClockSource+0x1e0>
 8004248:	4a5f      	ldr	r2, [pc, #380]	@ (80043c8 <HAL_TIM_ConfigClockSource+0x214>)
 800424a:	4293      	cmp	r3, r2
 800424c:	f000 8099 	beq.w	8004382 <HAL_TIM_ConfigClockSource+0x1ce>
 8004250:	4a5d      	ldr	r2, [pc, #372]	@ (80043c8 <HAL_TIM_ConfigClockSource+0x214>)
 8004252:	4293      	cmp	r3, r2
 8004254:	f200 809e 	bhi.w	8004394 <HAL_TIM_ConfigClockSource+0x1e0>
 8004258:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800425c:	f000 8091 	beq.w	8004382 <HAL_TIM_ConfigClockSource+0x1ce>
 8004260:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004264:	f200 8096 	bhi.w	8004394 <HAL_TIM_ConfigClockSource+0x1e0>
 8004268:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800426c:	f000 8089 	beq.w	8004382 <HAL_TIM_ConfigClockSource+0x1ce>
 8004270:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004274:	f200 808e 	bhi.w	8004394 <HAL_TIM_ConfigClockSource+0x1e0>
 8004278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800427c:	d03e      	beq.n	80042fc <HAL_TIM_ConfigClockSource+0x148>
 800427e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004282:	f200 8087 	bhi.w	8004394 <HAL_TIM_ConfigClockSource+0x1e0>
 8004286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800428a:	f000 8086 	beq.w	800439a <HAL_TIM_ConfigClockSource+0x1e6>
 800428e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004292:	d87f      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x1e0>
 8004294:	2b70      	cmp	r3, #112	@ 0x70
 8004296:	d01a      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0x11a>
 8004298:	2b70      	cmp	r3, #112	@ 0x70
 800429a:	d87b      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x1e0>
 800429c:	2b60      	cmp	r3, #96	@ 0x60
 800429e:	d050      	beq.n	8004342 <HAL_TIM_ConfigClockSource+0x18e>
 80042a0:	2b60      	cmp	r3, #96	@ 0x60
 80042a2:	d877      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x1e0>
 80042a4:	2b50      	cmp	r3, #80	@ 0x50
 80042a6:	d03c      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0x16e>
 80042a8:	2b50      	cmp	r3, #80	@ 0x50
 80042aa:	d873      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x1e0>
 80042ac:	2b40      	cmp	r3, #64	@ 0x40
 80042ae:	d058      	beq.n	8004362 <HAL_TIM_ConfigClockSource+0x1ae>
 80042b0:	2b40      	cmp	r3, #64	@ 0x40
 80042b2:	d86f      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x1e0>
 80042b4:	2b30      	cmp	r3, #48	@ 0x30
 80042b6:	d064      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x1ce>
 80042b8:	2b30      	cmp	r3, #48	@ 0x30
 80042ba:	d86b      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x1e0>
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d060      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x1ce>
 80042c0:	2b20      	cmp	r3, #32
 80042c2:	d867      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x1e0>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d05c      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x1ce>
 80042c8:	2b10      	cmp	r3, #16
 80042ca:	d05a      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x1ce>
 80042cc:	e062      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042de:	f000 fd75 	bl	8004dcc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80042f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	609a      	str	r2, [r3, #8]
      break;
 80042fa:	e04f      	b.n	800439c <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800430c:	f000 fd5e 	bl	8004dcc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800431e:	609a      	str	r2, [r3, #8]
      break;
 8004320:	e03c      	b.n	800439c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800432e:	461a      	mov	r2, r3
 8004330:	f000 fcd0 	bl	8004cd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2150      	movs	r1, #80	@ 0x50
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fd29 	bl	8004d92 <TIM_ITRx_SetConfig>
      break;
 8004340:	e02c      	b.n	800439c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800434e:	461a      	mov	r2, r3
 8004350:	f000 fcef 	bl	8004d32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2160      	movs	r1, #96	@ 0x60
 800435a:	4618      	mov	r0, r3
 800435c:	f000 fd19 	bl	8004d92 <TIM_ITRx_SetConfig>
      break;
 8004360:	e01c      	b.n	800439c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800436e:	461a      	mov	r2, r3
 8004370:	f000 fcb0 	bl	8004cd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2140      	movs	r1, #64	@ 0x40
 800437a:	4618      	mov	r0, r3
 800437c:	f000 fd09 	bl	8004d92 <TIM_ITRx_SetConfig>
      break;
 8004380:	e00c      	b.n	800439c <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4619      	mov	r1, r3
 800438c:	4610      	mov	r0, r2
 800438e:	f000 fd00 	bl	8004d92 <TIM_ITRx_SetConfig>
      break;
 8004392:	e003      	b.n	800439c <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	73fb      	strb	r3, [r7, #15]
      break;
 8004398:	e000      	b.n	800439c <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 800439a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	00100070 	.word	0x00100070
 80043bc:	00100050 	.word	0x00100050
 80043c0:	00100040 	.word	0x00100040
 80043c4:	00100030 	.word	0x00100030
 80043c8:	00100020 	.word	0x00100020

080043cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a4c      	ldr	r2, [pc, #304]	@ (8004574 <TIM_Base_SetConfig+0x144>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d017      	beq.n	8004478 <TIM_Base_SetConfig+0x48>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800444e:	d013      	beq.n	8004478 <TIM_Base_SetConfig+0x48>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a49      	ldr	r2, [pc, #292]	@ (8004578 <TIM_Base_SetConfig+0x148>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d00f      	beq.n	8004478 <TIM_Base_SetConfig+0x48>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a48      	ldr	r2, [pc, #288]	@ (800457c <TIM_Base_SetConfig+0x14c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00b      	beq.n	8004478 <TIM_Base_SetConfig+0x48>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a47      	ldr	r2, [pc, #284]	@ (8004580 <TIM_Base_SetConfig+0x150>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d007      	beq.n	8004478 <TIM_Base_SetConfig+0x48>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a46      	ldr	r2, [pc, #280]	@ (8004584 <TIM_Base_SetConfig+0x154>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d003      	beq.n	8004478 <TIM_Base_SetConfig+0x48>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a45      	ldr	r2, [pc, #276]	@ (8004588 <TIM_Base_SetConfig+0x158>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d108      	bne.n	800448a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800447e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a39      	ldr	r2, [pc, #228]	@ (8004574 <TIM_Base_SetConfig+0x144>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d023      	beq.n	80044da <TIM_Base_SetConfig+0xaa>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004498:	d01f      	beq.n	80044da <TIM_Base_SetConfig+0xaa>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a36      	ldr	r2, [pc, #216]	@ (8004578 <TIM_Base_SetConfig+0x148>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d01b      	beq.n	80044da <TIM_Base_SetConfig+0xaa>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a35      	ldr	r2, [pc, #212]	@ (800457c <TIM_Base_SetConfig+0x14c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d017      	beq.n	80044da <TIM_Base_SetConfig+0xaa>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a34      	ldr	r2, [pc, #208]	@ (8004580 <TIM_Base_SetConfig+0x150>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d013      	beq.n	80044da <TIM_Base_SetConfig+0xaa>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a33      	ldr	r2, [pc, #204]	@ (8004584 <TIM_Base_SetConfig+0x154>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d00f      	beq.n	80044da <TIM_Base_SetConfig+0xaa>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a33      	ldr	r2, [pc, #204]	@ (800458c <TIM_Base_SetConfig+0x15c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00b      	beq.n	80044da <TIM_Base_SetConfig+0xaa>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a32      	ldr	r2, [pc, #200]	@ (8004590 <TIM_Base_SetConfig+0x160>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d007      	beq.n	80044da <TIM_Base_SetConfig+0xaa>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a31      	ldr	r2, [pc, #196]	@ (8004594 <TIM_Base_SetConfig+0x164>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d003      	beq.n	80044da <TIM_Base_SetConfig+0xaa>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a2c      	ldr	r2, [pc, #176]	@ (8004588 <TIM_Base_SetConfig+0x158>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d108      	bne.n	80044ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a18      	ldr	r2, [pc, #96]	@ (8004574 <TIM_Base_SetConfig+0x144>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d013      	beq.n	8004540 <TIM_Base_SetConfig+0x110>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a1a      	ldr	r2, [pc, #104]	@ (8004584 <TIM_Base_SetConfig+0x154>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d00f      	beq.n	8004540 <TIM_Base_SetConfig+0x110>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a1a      	ldr	r2, [pc, #104]	@ (800458c <TIM_Base_SetConfig+0x15c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00b      	beq.n	8004540 <TIM_Base_SetConfig+0x110>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a19      	ldr	r2, [pc, #100]	@ (8004590 <TIM_Base_SetConfig+0x160>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d007      	beq.n	8004540 <TIM_Base_SetConfig+0x110>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a18      	ldr	r2, [pc, #96]	@ (8004594 <TIM_Base_SetConfig+0x164>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d003      	beq.n	8004540 <TIM_Base_SetConfig+0x110>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a13      	ldr	r2, [pc, #76]	@ (8004588 <TIM_Base_SetConfig+0x158>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d103      	bne.n	8004548 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b01      	cmp	r3, #1
 8004558:	d105      	bne.n	8004566 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f023 0201 	bic.w	r2, r3, #1
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	611a      	str	r2, [r3, #16]
  }
}
 8004566:	bf00      	nop
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	40012c00 	.word	0x40012c00
 8004578:	40000400 	.word	0x40000400
 800457c:	40000800 	.word	0x40000800
 8004580:	40000c00 	.word	0x40000c00
 8004584:	40013400 	.word	0x40013400
 8004588:	40015000 	.word	0x40015000
 800458c:	40014000 	.word	0x40014000
 8004590:	40014400 	.word	0x40014400
 8004594:	40014800 	.word	0x40014800

08004598 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	f023 0201 	bic.w	r2, r3, #1
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0303 	bic.w	r3, r3, #3
 80045d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f023 0302 	bic.w	r3, r3, #2
 80045e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a30      	ldr	r2, [pc, #192]	@ (80046b4 <TIM_OC1_SetConfig+0x11c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d013      	beq.n	8004620 <TIM_OC1_SetConfig+0x88>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a2f      	ldr	r2, [pc, #188]	@ (80046b8 <TIM_OC1_SetConfig+0x120>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00f      	beq.n	8004620 <TIM_OC1_SetConfig+0x88>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a2e      	ldr	r2, [pc, #184]	@ (80046bc <TIM_OC1_SetConfig+0x124>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d00b      	beq.n	8004620 <TIM_OC1_SetConfig+0x88>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a2d      	ldr	r2, [pc, #180]	@ (80046c0 <TIM_OC1_SetConfig+0x128>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d007      	beq.n	8004620 <TIM_OC1_SetConfig+0x88>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a2c      	ldr	r2, [pc, #176]	@ (80046c4 <TIM_OC1_SetConfig+0x12c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d003      	beq.n	8004620 <TIM_OC1_SetConfig+0x88>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a2b      	ldr	r2, [pc, #172]	@ (80046c8 <TIM_OC1_SetConfig+0x130>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d10c      	bne.n	800463a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f023 0308 	bic.w	r3, r3, #8
 8004626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	4313      	orrs	r3, r2
 8004630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f023 0304 	bic.w	r3, r3, #4
 8004638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a1d      	ldr	r2, [pc, #116]	@ (80046b4 <TIM_OC1_SetConfig+0x11c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d013      	beq.n	800466a <TIM_OC1_SetConfig+0xd2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a1c      	ldr	r2, [pc, #112]	@ (80046b8 <TIM_OC1_SetConfig+0x120>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d00f      	beq.n	800466a <TIM_OC1_SetConfig+0xd2>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a1b      	ldr	r2, [pc, #108]	@ (80046bc <TIM_OC1_SetConfig+0x124>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d00b      	beq.n	800466a <TIM_OC1_SetConfig+0xd2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a1a      	ldr	r2, [pc, #104]	@ (80046c0 <TIM_OC1_SetConfig+0x128>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d007      	beq.n	800466a <TIM_OC1_SetConfig+0xd2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a19      	ldr	r2, [pc, #100]	@ (80046c4 <TIM_OC1_SetConfig+0x12c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d003      	beq.n	800466a <TIM_OC1_SetConfig+0xd2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a18      	ldr	r2, [pc, #96]	@ (80046c8 <TIM_OC1_SetConfig+0x130>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d111      	bne.n	800468e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	4313      	orrs	r3, r2
 800468c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	621a      	str	r2, [r3, #32]
}
 80046a8:	bf00      	nop
 80046aa:	371c      	adds	r7, #28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	40012c00 	.word	0x40012c00
 80046b8:	40013400 	.word	0x40013400
 80046bc:	40014000 	.word	0x40014000
 80046c0:	40014400 	.word	0x40014400
 80046c4:	40014800 	.word	0x40014800
 80046c8:	40015000 	.word	0x40015000

080046cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	f023 0210 	bic.w	r2, r3, #16
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	021b      	lsls	r3, r3, #8
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	4313      	orrs	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f023 0320 	bic.w	r3, r3, #32
 800471a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	4313      	orrs	r3, r2
 8004726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a2c      	ldr	r2, [pc, #176]	@ (80047dc <TIM_OC2_SetConfig+0x110>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d007      	beq.n	8004740 <TIM_OC2_SetConfig+0x74>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a2b      	ldr	r2, [pc, #172]	@ (80047e0 <TIM_OC2_SetConfig+0x114>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d003      	beq.n	8004740 <TIM_OC2_SetConfig+0x74>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a2a      	ldr	r2, [pc, #168]	@ (80047e4 <TIM_OC2_SetConfig+0x118>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d10d      	bne.n	800475c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	4313      	orrs	r3, r2
 8004752:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800475a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a1f      	ldr	r2, [pc, #124]	@ (80047dc <TIM_OC2_SetConfig+0x110>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d013      	beq.n	800478c <TIM_OC2_SetConfig+0xc0>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a1e      	ldr	r2, [pc, #120]	@ (80047e0 <TIM_OC2_SetConfig+0x114>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d00f      	beq.n	800478c <TIM_OC2_SetConfig+0xc0>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a1e      	ldr	r2, [pc, #120]	@ (80047e8 <TIM_OC2_SetConfig+0x11c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d00b      	beq.n	800478c <TIM_OC2_SetConfig+0xc0>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a1d      	ldr	r2, [pc, #116]	@ (80047ec <TIM_OC2_SetConfig+0x120>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d007      	beq.n	800478c <TIM_OC2_SetConfig+0xc0>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a1c      	ldr	r2, [pc, #112]	@ (80047f0 <TIM_OC2_SetConfig+0x124>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d003      	beq.n	800478c <TIM_OC2_SetConfig+0xc0>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a17      	ldr	r2, [pc, #92]	@ (80047e4 <TIM_OC2_SetConfig+0x118>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d113      	bne.n	80047b4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004792:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800479a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	621a      	str	r2, [r3, #32]
}
 80047ce:	bf00      	nop
 80047d0:	371c      	adds	r7, #28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40012c00 	.word	0x40012c00
 80047e0:	40013400 	.word	0x40013400
 80047e4:	40015000 	.word	0x40015000
 80047e8:	40014000 	.word	0x40014000
 80047ec:	40014400 	.word	0x40014400
 80047f0:	40014800 	.word	0x40014800

080047f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f023 0303 	bic.w	r3, r3, #3
 800482e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	021b      	lsls	r3, r3, #8
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	4313      	orrs	r3, r2
 800484c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a2b      	ldr	r2, [pc, #172]	@ (8004900 <TIM_OC3_SetConfig+0x10c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d007      	beq.n	8004866 <TIM_OC3_SetConfig+0x72>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a2a      	ldr	r2, [pc, #168]	@ (8004904 <TIM_OC3_SetConfig+0x110>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d003      	beq.n	8004866 <TIM_OC3_SetConfig+0x72>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a29      	ldr	r2, [pc, #164]	@ (8004908 <TIM_OC3_SetConfig+0x114>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d10d      	bne.n	8004882 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800486c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	021b      	lsls	r3, r3, #8
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	4313      	orrs	r3, r2
 8004878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a1e      	ldr	r2, [pc, #120]	@ (8004900 <TIM_OC3_SetConfig+0x10c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d013      	beq.n	80048b2 <TIM_OC3_SetConfig+0xbe>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a1d      	ldr	r2, [pc, #116]	@ (8004904 <TIM_OC3_SetConfig+0x110>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00f      	beq.n	80048b2 <TIM_OC3_SetConfig+0xbe>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a1d      	ldr	r2, [pc, #116]	@ (800490c <TIM_OC3_SetConfig+0x118>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00b      	beq.n	80048b2 <TIM_OC3_SetConfig+0xbe>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a1c      	ldr	r2, [pc, #112]	@ (8004910 <TIM_OC3_SetConfig+0x11c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d007      	beq.n	80048b2 <TIM_OC3_SetConfig+0xbe>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004914 <TIM_OC3_SetConfig+0x120>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d003      	beq.n	80048b2 <TIM_OC3_SetConfig+0xbe>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a16      	ldr	r2, [pc, #88]	@ (8004908 <TIM_OC3_SetConfig+0x114>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d113      	bne.n	80048da <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	621a      	str	r2, [r3, #32]
}
 80048f4:	bf00      	nop
 80048f6:	371c      	adds	r7, #28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	40012c00 	.word	0x40012c00
 8004904:	40013400 	.word	0x40013400
 8004908:	40015000 	.word	0x40015000
 800490c:	40014000 	.word	0x40014000
 8004910:	40014400 	.word	0x40014400
 8004914:	40014800 	.word	0x40014800

08004918 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004946:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800494a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	021b      	lsls	r3, r3, #8
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4313      	orrs	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004966:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	031b      	lsls	r3, r3, #12
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4313      	orrs	r3, r2
 8004972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a2c      	ldr	r2, [pc, #176]	@ (8004a28 <TIM_OC4_SetConfig+0x110>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d007      	beq.n	800498c <TIM_OC4_SetConfig+0x74>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a2b      	ldr	r2, [pc, #172]	@ (8004a2c <TIM_OC4_SetConfig+0x114>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d003      	beq.n	800498c <TIM_OC4_SetConfig+0x74>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a2a      	ldr	r2, [pc, #168]	@ (8004a30 <TIM_OC4_SetConfig+0x118>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d10d      	bne.n	80049a8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	031b      	lsls	r3, r3, #12
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	4313      	orrs	r3, r2
 800499e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a1f      	ldr	r2, [pc, #124]	@ (8004a28 <TIM_OC4_SetConfig+0x110>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d013      	beq.n	80049d8 <TIM_OC4_SetConfig+0xc0>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a1e      	ldr	r2, [pc, #120]	@ (8004a2c <TIM_OC4_SetConfig+0x114>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00f      	beq.n	80049d8 <TIM_OC4_SetConfig+0xc0>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004a34 <TIM_OC4_SetConfig+0x11c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00b      	beq.n	80049d8 <TIM_OC4_SetConfig+0xc0>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a1d      	ldr	r2, [pc, #116]	@ (8004a38 <TIM_OC4_SetConfig+0x120>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d007      	beq.n	80049d8 <TIM_OC4_SetConfig+0xc0>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a1c      	ldr	r2, [pc, #112]	@ (8004a3c <TIM_OC4_SetConfig+0x124>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d003      	beq.n	80049d8 <TIM_OC4_SetConfig+0xc0>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a17      	ldr	r2, [pc, #92]	@ (8004a30 <TIM_OC4_SetConfig+0x118>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d113      	bne.n	8004a00 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049de:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80049e6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	019b      	lsls	r3, r3, #6
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	019b      	lsls	r3, r3, #6
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	621a      	str	r2, [r3, #32]
}
 8004a1a:	bf00      	nop
 8004a1c:	371c      	adds	r7, #28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40012c00 	.word	0x40012c00
 8004a2c:	40013400 	.word	0x40013400
 8004a30:	40015000 	.word	0x40015000
 8004a34:	40014000 	.word	0x40014000
 8004a38:	40014400 	.word	0x40014400
 8004a3c:	40014800 	.word	0x40014800

08004a40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004a84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	041b      	lsls	r3, r3, #16
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a19      	ldr	r2, [pc, #100]	@ (8004afc <TIM_OC5_SetConfig+0xbc>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d013      	beq.n	8004ac2 <TIM_OC5_SetConfig+0x82>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a18      	ldr	r2, [pc, #96]	@ (8004b00 <TIM_OC5_SetConfig+0xc0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00f      	beq.n	8004ac2 <TIM_OC5_SetConfig+0x82>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a17      	ldr	r2, [pc, #92]	@ (8004b04 <TIM_OC5_SetConfig+0xc4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d00b      	beq.n	8004ac2 <TIM_OC5_SetConfig+0x82>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a16      	ldr	r2, [pc, #88]	@ (8004b08 <TIM_OC5_SetConfig+0xc8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d007      	beq.n	8004ac2 <TIM_OC5_SetConfig+0x82>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a15      	ldr	r2, [pc, #84]	@ (8004b0c <TIM_OC5_SetConfig+0xcc>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d003      	beq.n	8004ac2 <TIM_OC5_SetConfig+0x82>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a14      	ldr	r2, [pc, #80]	@ (8004b10 <TIM_OC5_SetConfig+0xd0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d109      	bne.n	8004ad6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ac8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	021b      	lsls	r3, r3, #8
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	621a      	str	r2, [r3, #32]
}
 8004af0:	bf00      	nop
 8004af2:	371c      	adds	r7, #28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	40012c00 	.word	0x40012c00
 8004b00:	40013400 	.word	0x40013400
 8004b04:	40014000 	.word	0x40014000
 8004b08:	40014400 	.word	0x40014400
 8004b0c:	40014800 	.word	0x40014800
 8004b10:	40015000 	.word	0x40015000

08004b14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	021b      	lsls	r3, r3, #8
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	051b      	lsls	r3, r3, #20
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a1a      	ldr	r2, [pc, #104]	@ (8004bd4 <TIM_OC6_SetConfig+0xc0>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d013      	beq.n	8004b98 <TIM_OC6_SetConfig+0x84>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a19      	ldr	r2, [pc, #100]	@ (8004bd8 <TIM_OC6_SetConfig+0xc4>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d00f      	beq.n	8004b98 <TIM_OC6_SetConfig+0x84>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a18      	ldr	r2, [pc, #96]	@ (8004bdc <TIM_OC6_SetConfig+0xc8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00b      	beq.n	8004b98 <TIM_OC6_SetConfig+0x84>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a17      	ldr	r2, [pc, #92]	@ (8004be0 <TIM_OC6_SetConfig+0xcc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d007      	beq.n	8004b98 <TIM_OC6_SetConfig+0x84>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a16      	ldr	r2, [pc, #88]	@ (8004be4 <TIM_OC6_SetConfig+0xd0>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d003      	beq.n	8004b98 <TIM_OC6_SetConfig+0x84>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a15      	ldr	r2, [pc, #84]	@ (8004be8 <TIM_OC6_SetConfig+0xd4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d109      	bne.n	8004bac <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	029b      	lsls	r3, r3, #10
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	621a      	str	r2, [r3, #32]
}
 8004bc6:	bf00      	nop
 8004bc8:	371c      	adds	r7, #28
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	40012c00 	.word	0x40012c00
 8004bd8:	40013400 	.word	0x40013400
 8004bdc:	40014000 	.word	0x40014000
 8004be0:	40014400 	.word	0x40014400
 8004be4:	40014800 	.word	0x40014800
 8004be8:	40015000 	.word	0x40015000

08004bec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
 8004bf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6a1b      	ldr	r3, [r3, #32]
 8004c04:	f023 0201 	bic.w	r2, r3, #1
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4a28      	ldr	r2, [pc, #160]	@ (8004cb8 <TIM_TI1_SetConfig+0xcc>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d01b      	beq.n	8004c52 <TIM_TI1_SetConfig+0x66>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c20:	d017      	beq.n	8004c52 <TIM_TI1_SetConfig+0x66>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	4a25      	ldr	r2, [pc, #148]	@ (8004cbc <TIM_TI1_SetConfig+0xd0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d013      	beq.n	8004c52 <TIM_TI1_SetConfig+0x66>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4a24      	ldr	r2, [pc, #144]	@ (8004cc0 <TIM_TI1_SetConfig+0xd4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d00f      	beq.n	8004c52 <TIM_TI1_SetConfig+0x66>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4a23      	ldr	r2, [pc, #140]	@ (8004cc4 <TIM_TI1_SetConfig+0xd8>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d00b      	beq.n	8004c52 <TIM_TI1_SetConfig+0x66>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4a22      	ldr	r2, [pc, #136]	@ (8004cc8 <TIM_TI1_SetConfig+0xdc>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d007      	beq.n	8004c52 <TIM_TI1_SetConfig+0x66>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4a21      	ldr	r2, [pc, #132]	@ (8004ccc <TIM_TI1_SetConfig+0xe0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d003      	beq.n	8004c52 <TIM_TI1_SetConfig+0x66>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4a20      	ldr	r2, [pc, #128]	@ (8004cd0 <TIM_TI1_SetConfig+0xe4>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d101      	bne.n	8004c56 <TIM_TI1_SetConfig+0x6a>
 8004c52:	2301      	movs	r3, #1
 8004c54:	e000      	b.n	8004c58 <TIM_TI1_SetConfig+0x6c>
 8004c56:	2300      	movs	r3, #0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d008      	beq.n	8004c6e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f023 0303 	bic.w	r3, r3, #3
 8004c62:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	e003      	b.n	8004c76 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f043 0301 	orr.w	r3, r3, #1
 8004c74:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f023 030a 	bic.w	r3, r3, #10
 8004c90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	f003 030a 	and.w	r3, r3, #10
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	621a      	str	r2, [r3, #32]
}
 8004caa:	bf00      	nop
 8004cac:	371c      	adds	r7, #28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	40012c00 	.word	0x40012c00
 8004cbc:	40000400 	.word	0x40000400
 8004cc0:	40000800 	.word	0x40000800
 8004cc4:	40000c00 	.word	0x40000c00
 8004cc8:	40013400 	.word	0x40013400
 8004ccc:	40014000 	.word	0x40014000
 8004cd0:	40015000 	.word	0x40015000

08004cd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	f023 0201 	bic.w	r2, r3, #1
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f023 030a 	bic.w	r3, r3, #10
 8004d10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	621a      	str	r2, [r3, #32]
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b087      	sub	sp, #28
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	f023 0210 	bic.w	r2, r3, #16
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	031b      	lsls	r3, r3, #12
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	621a      	str	r2, [r3, #32]
}
 8004d86:	bf00      	nop
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b085      	sub	sp, #20
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004da8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f043 0307 	orr.w	r3, r3, #7
 8004db8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	609a      	str	r2, [r3, #8]
}
 8004dc0:	bf00      	nop
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004de6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	021a      	lsls	r2, r3, #8
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	431a      	orrs	r2, r3
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	609a      	str	r2, [r3, #8]
}
 8004e00:	bf00      	nop
 8004e02:	371c      	adds	r7, #28
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08a      	sub	sp, #40	@ 0x28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e0a0      	b.n	8004f62 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d106      	bne.n	8004e3a <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f898 	bl	8004f6a <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	3304      	adds	r3, #4
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	f7ff faef 	bl	8004430 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6818      	ldr	r0, [r3, #0]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	6819      	ldr	r1, [r3, #0]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	2203      	movs	r2, #3
 8004e60:	f7ff fec4 	bl	8004bec <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699a      	ldr	r2, [r3, #24]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 020c 	bic.w	r2, r2, #12
 8004e72:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6999      	ldr	r1, [r3, #24]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004e94:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6812      	ldr	r2, [r2, #0]
 8004ea0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004ea4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ea8:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004eb8:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6812      	ldr	r2, [r2, #0]
 8004ec4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ec8:	f023 0307 	bic.w	r3, r3, #7
 8004ecc:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f042 0204 	orr.w	r2, r2, #4
 8004edc:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8004ee6:	2370      	movs	r3, #112	@ 0x70
 8004ee8:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004eea:	2300      	movs	r3, #0
 8004eec:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f107 020c 	add.w	r2, r7, #12
 8004f04:	4611      	mov	r1, r2
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7ff fbe0 	bl	80046cc <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	6812      	ldr	r2, [r2, #0]
 8004f16:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f1e:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8004f2e:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3728      	adds	r7, #40	@ 0x28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b083      	sub	sp, #12
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8004f72:	bf00      	nop
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
	...

08004f80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f94:	2302      	movs	r3, #2
 8004f96:	e074      	b.n	8005082 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a34      	ldr	r2, [pc, #208]	@ (8005090 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d009      	beq.n	8004fd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a33      	ldr	r2, [pc, #204]	@ (8005094 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d004      	beq.n	8004fd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a31      	ldr	r2, [pc, #196]	@ (8005098 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d108      	bne.n	8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004fdc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ff2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a21      	ldr	r2, [pc, #132]	@ (8005090 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d022      	beq.n	8005056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005018:	d01d      	beq.n	8005056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a1f      	ldr	r2, [pc, #124]	@ (800509c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d018      	beq.n	8005056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a1d      	ldr	r2, [pc, #116]	@ (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d013      	beq.n	8005056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a1c      	ldr	r2, [pc, #112]	@ (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d00e      	beq.n	8005056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a15      	ldr	r2, [pc, #84]	@ (8005094 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d009      	beq.n	8005056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a18      	ldr	r2, [pc, #96]	@ (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d004      	beq.n	8005056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a11      	ldr	r2, [pc, #68]	@ (8005098 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d10c      	bne.n	8005070 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800505c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	4313      	orrs	r3, r2
 8005066:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	40012c00 	.word	0x40012c00
 8005094:	40013400 	.word	0x40013400
 8005098:	40015000 	.word	0x40015000
 800509c:	40000400 	.word	0x40000400
 80050a0:	40000800 	.word	0x40000800
 80050a4:	40000c00 	.word	0x40000c00
 80050a8:	40014000 	.word	0x40014000

080050ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d101      	bne.n	80050c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050c4:	2302      	movs	r3, #2
 80050c6:	e078      	b.n	80051ba <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4313      	orrs	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	4313      	orrs	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	041b      	lsls	r3, r3, #16
 800513e:	4313      	orrs	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	4313      	orrs	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a1c      	ldr	r2, [pc, #112]	@ (80051c8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d009      	beq.n	800516e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a1b      	ldr	r2, [pc, #108]	@ (80051cc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d004      	beq.n	800516e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a19      	ldr	r2, [pc, #100]	@ (80051d0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d11c      	bne.n	80051a8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005178:	051b      	lsls	r3, r3, #20
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	4313      	orrs	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	40012c00 	.word	0x40012c00
 80051cc:	40013400 	.word	0x40013400
 80051d0:	40015000 	.word	0x40015000

080051d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005270:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005274:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	b29a      	uxth	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800528e:	b480      	push	{r7}
 8005290:	b085      	sub	sp, #20
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005296:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800529a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	43db      	mvns	r3, r3
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	4013      	ands	r3, r2
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	1d3b      	adds	r3, r7, #4
 80052ce:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005300:	b480      	push	{r7}
 8005302:	b0a7      	sub	sp, #156	@ 0x9c
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	b29b      	uxth	r3, r3
 800531e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005326:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	78db      	ldrb	r3, [r3, #3]
 800532e:	2b03      	cmp	r3, #3
 8005330:	d81f      	bhi.n	8005372 <USB_ActivateEndpoint+0x72>
 8005332:	a201      	add	r2, pc, #4	@ (adr r2, 8005338 <USB_ActivateEndpoint+0x38>)
 8005334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005338:	08005349 	.word	0x08005349
 800533c:	08005365 	.word	0x08005365
 8005340:	0800537b 	.word	0x0800537b
 8005344:	08005357 	.word	0x08005357
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005348:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800534c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005350:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005354:	e012      	b.n	800537c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005356:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800535a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800535e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005362:	e00b      	b.n	800537c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005364:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005368:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800536c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005370:	e004      	b.n	800537c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8005378:	e000      	b.n	800537c <USB_ActivateEndpoint+0x7c>
      break;
 800537a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	441a      	add	r2, r3
 8005386:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800538a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800538e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005392:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800539a:	b29b      	uxth	r3, r3
 800539c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	b21b      	sxth	r3, r3
 80053ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053b6:	b21a      	sxth	r2, r3
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	b21b      	sxth	r3, r3
 80053be:	4313      	orrs	r3, r2
 80053c0:	b21b      	sxth	r3, r3
 80053c2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	441a      	add	r2, r3
 80053d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80053d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	7b1b      	ldrb	r3, [r3, #12]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f040 8180 	bne.w	80056f2 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	785b      	ldrb	r3, [r3, #1]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 8084 	beq.w	8005504 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	61bb      	str	r3, [r7, #24]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005406:	b29b      	uxth	r3, r3
 8005408:	461a      	mov	r2, r3
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	4413      	add	r3, r2
 800540e:	61bb      	str	r3, [r7, #24]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	00da      	lsls	r2, r3, #3
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	88db      	ldrh	r3, [r3, #6]
 8005424:	085b      	lsrs	r3, r3, #1
 8005426:	b29b      	uxth	r3, r3
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	b29a      	uxth	r2, r3
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	827b      	strh	r3, [r7, #18]
 800543e:	8a7b      	ldrh	r3, [r7, #18]
 8005440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005444:	2b00      	cmp	r3, #0
 8005446:	d01b      	beq.n	8005480 <USB_ActivateEndpoint+0x180>
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	b29b      	uxth	r3, r3
 8005456:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800545a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800545e:	823b      	strh	r3, [r7, #16]
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	441a      	add	r2, r3
 800546a:	8a3b      	ldrh	r3, [r7, #16]
 800546c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005470:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005474:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005478:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800547c:	b29b      	uxth	r3, r3
 800547e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	78db      	ldrb	r3, [r3, #3]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d020      	beq.n	80054ca <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	b29b      	uxth	r3, r3
 8005496:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800549a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800549e:	81bb      	strh	r3, [r7, #12]
 80054a0:	89bb      	ldrh	r3, [r7, #12]
 80054a2:	f083 0320 	eor.w	r3, r3, #32
 80054a6:	81bb      	strh	r3, [r7, #12]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	441a      	add	r2, r3
 80054b2:	89bb      	ldrh	r3, [r7, #12]
 80054b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	8013      	strh	r3, [r2, #0]
 80054c8:	e3f9      	b.n	8005cbe <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054e0:	81fb      	strh	r3, [r7, #14]
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	441a      	add	r2, r3
 80054ec:	89fb      	ldrh	r3, [r7, #14]
 80054ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054fe:	b29b      	uxth	r3, r3
 8005500:	8013      	strh	r3, [r2, #0]
 8005502:	e3dc      	b.n	8005cbe <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	633b      	str	r3, [r7, #48]	@ 0x30
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800550e:	b29b      	uxth	r3, r3
 8005510:	461a      	mov	r2, r3
 8005512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005514:	4413      	add	r3, r2
 8005516:	633b      	str	r3, [r7, #48]	@ 0x30
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	00da      	lsls	r2, r3, #3
 800551e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005520:	4413      	add	r3, r2
 8005522:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005526:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	88db      	ldrh	r3, [r3, #6]
 800552c:	085b      	lsrs	r3, r3, #1
 800552e:	b29b      	uxth	r3, r3
 8005530:	005b      	lsls	r3, r3, #1
 8005532:	b29a      	uxth	r2, r3
 8005534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005536:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005542:	b29b      	uxth	r3, r3
 8005544:	461a      	mov	r2, r3
 8005546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005548:	4413      	add	r3, r2
 800554a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	00da      	lsls	r2, r3, #3
 8005552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005554:	4413      	add	r3, r2
 8005556:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800555a:	627b      	str	r3, [r7, #36]	@ 0x24
 800555c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	b29b      	uxth	r3, r3
 8005562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005566:	b29a      	uxth	r2, r3
 8005568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556a:	801a      	strh	r2, [r3, #0]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10a      	bne.n	800558a <USB_ActivateEndpoint+0x28a>
 8005574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	b29b      	uxth	r3, r3
 800557a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800557e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005582:	b29a      	uxth	r2, r3
 8005584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005586:	801a      	strh	r2, [r3, #0]
 8005588:	e041      	b.n	800560e <USB_ActivateEndpoint+0x30e>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005590:	d81c      	bhi.n	80055cc <USB_ActivateEndpoint+0x2cc>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	085b      	lsrs	r3, r3, #1
 8005598:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d004      	beq.n	80055b2 <USB_ActivateEndpoint+0x2b2>
 80055a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80055ac:	3301      	adds	r3, #1
 80055ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80055bc:	b29b      	uxth	r3, r3
 80055be:	029b      	lsls	r3, r3, #10
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	4313      	orrs	r3, r2
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	801a      	strh	r2, [r3, #0]
 80055ca:	e020      	b.n	800560e <USB_ActivateEndpoint+0x30e>
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	095b      	lsrs	r3, r3, #5
 80055d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 031f 	and.w	r3, r3, #31
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d104      	bne.n	80055ec <USB_ActivateEndpoint+0x2ec>
 80055e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80055e6:	3b01      	subs	r3, #1
 80055e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	029b      	lsls	r3, r3, #10
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	4313      	orrs	r3, r2
 80055fe:	b29b      	uxth	r3, r3
 8005600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005608:	b29a      	uxth	r2, r3
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800561c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800561e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d01b      	beq.n	800565e <USB_ActivateEndpoint+0x35e>
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	b29b      	uxth	r3, r3
 8005634:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005638:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800563c:	843b      	strh	r3, [r7, #32]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	441a      	add	r2, r3
 8005648:	8c3b      	ldrh	r3, [r7, #32]
 800564a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800564e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005652:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005656:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800565a:	b29b      	uxth	r3, r3
 800565c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d124      	bne.n	80056b0 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	b29b      	uxth	r3, r3
 8005674:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800567c:	83bb      	strh	r3, [r7, #28]
 800567e:	8bbb      	ldrh	r3, [r7, #28]
 8005680:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005684:	83bb      	strh	r3, [r7, #28]
 8005686:	8bbb      	ldrh	r3, [r7, #28]
 8005688:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800568c:	83bb      	strh	r3, [r7, #28]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	441a      	add	r2, r3
 8005698:	8bbb      	ldrh	r3, [r7, #28]
 800569a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800569e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	8013      	strh	r3, [r2, #0]
 80056ae:	e306      	b.n	8005cbe <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	881b      	ldrh	r3, [r3, #0]
 80056bc:	b29b      	uxth	r3, r3
 80056be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056c6:	83fb      	strh	r3, [r7, #30]
 80056c8:	8bfb      	ldrh	r3, [r7, #30]
 80056ca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80056ce:	83fb      	strh	r3, [r7, #30]
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	441a      	add	r2, r3
 80056da:	8bfb      	ldrh	r3, [r7, #30]
 80056dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	8013      	strh	r3, [r2, #0]
 80056f0:	e2e5      	b.n	8005cbe <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	78db      	ldrb	r3, [r3, #3]
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d11e      	bne.n	8005738 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	b29b      	uxth	r3, r3
 8005708:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800570c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005710:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	441a      	add	r2, r3
 800571e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8005722:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005726:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800572a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800572e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005732:	b29b      	uxth	r3, r3
 8005734:	8013      	strh	r3, [r2, #0]
 8005736:	e01d      	b.n	8005774 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	881b      	ldrh	r3, [r3, #0]
 8005744:	b29b      	uxth	r3, r3
 8005746:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800574a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800574e:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	441a      	add	r2, r3
 800575c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8005760:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005764:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005768:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800576c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005770:	b29b      	uxth	r3, r3
 8005772:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800577e:	b29b      	uxth	r3, r3
 8005780:	461a      	mov	r2, r3
 8005782:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005784:	4413      	add	r3, r2
 8005786:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	00da      	lsls	r2, r3, #3
 800578e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005790:	4413      	add	r3, r2
 8005792:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005796:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	891b      	ldrh	r3, [r3, #8]
 800579c:	085b      	lsrs	r3, r3, #1
 800579e:	b29b      	uxth	r3, r3
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057a6:	801a      	strh	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	461a      	mov	r2, r3
 80057b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057b8:	4413      	add	r3, r2
 80057ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	00da      	lsls	r2, r3, #3
 80057c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057c4:	4413      	add	r3, r2
 80057c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80057ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	895b      	ldrh	r3, [r3, #10]
 80057d0:	085b      	lsrs	r3, r3, #1
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057da:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	785b      	ldrb	r3, [r3, #1]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f040 81af 	bne.w	8005b44 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80057f6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80057fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d01d      	beq.n	800583e <USB_ActivateEndpoint+0x53e>
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	b29b      	uxth	r3, r3
 8005810:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005814:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005818:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	441a      	add	r2, r3
 8005826:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800582a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800582e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005832:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800583a:	b29b      	uxth	r3, r3
 800583c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800584e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8005852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005856:	2b00      	cmp	r3, #0
 8005858:	d01d      	beq.n	8005896 <USB_ActivateEndpoint+0x596>
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	b29b      	uxth	r3, r3
 8005868:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800586c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005870:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	441a      	add	r2, r3
 800587e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8005882:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005886:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800588a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800588e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005892:	b29b      	uxth	r3, r3
 8005894:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	785b      	ldrb	r3, [r3, #1]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d16b      	bne.n	8005976 <USB_ActivateEndpoint+0x676>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	461a      	mov	r2, r3
 80058ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058ae:	4413      	add	r3, r2
 80058b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	00da      	lsls	r2, r3, #3
 80058b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058ba:	4413      	add	r3, r2
 80058bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80058c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058d0:	801a      	strh	r2, [r3, #0]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10a      	bne.n	80058f0 <USB_ActivateEndpoint+0x5f0>
 80058da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058ec:	801a      	strh	r2, [r3, #0]
 80058ee:	e05d      	b.n	80059ac <USB_ActivateEndpoint+0x6ac>
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80058f6:	d81c      	bhi.n	8005932 <USB_ActivateEndpoint+0x632>
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	085b      	lsrs	r3, r3, #1
 80058fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d004      	beq.n	8005918 <USB_ActivateEndpoint+0x618>
 800590e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005912:	3301      	adds	r3, #1
 8005914:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005918:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	b29a      	uxth	r2, r3
 800591e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005922:	b29b      	uxth	r3, r3
 8005924:	029b      	lsls	r3, r3, #10
 8005926:	b29b      	uxth	r3, r3
 8005928:	4313      	orrs	r3, r2
 800592a:	b29a      	uxth	r2, r3
 800592c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800592e:	801a      	strh	r2, [r3, #0]
 8005930:	e03c      	b.n	80059ac <USB_ActivateEndpoint+0x6ac>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	095b      	lsrs	r3, r3, #5
 8005938:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f003 031f 	and.w	r3, r3, #31
 8005944:	2b00      	cmp	r3, #0
 8005946:	d104      	bne.n	8005952 <USB_ActivateEndpoint+0x652>
 8005948:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800594c:	3b01      	subs	r3, #1
 800594e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005952:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005954:	881b      	ldrh	r3, [r3, #0]
 8005956:	b29a      	uxth	r2, r3
 8005958:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800595c:	b29b      	uxth	r3, r3
 800595e:	029b      	lsls	r3, r3, #10
 8005960:	b29b      	uxth	r3, r3
 8005962:	4313      	orrs	r3, r2
 8005964:	b29b      	uxth	r3, r3
 8005966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800596a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800596e:	b29a      	uxth	r2, r3
 8005970:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005972:	801a      	strh	r2, [r3, #0]
 8005974:	e01a      	b.n	80059ac <USB_ActivateEndpoint+0x6ac>
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	785b      	ldrb	r3, [r3, #1]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d116      	bne.n	80059ac <USB_ActivateEndpoint+0x6ac>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	657b      	str	r3, [r7, #84]	@ 0x54
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005988:	b29b      	uxth	r3, r3
 800598a:	461a      	mov	r2, r3
 800598c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800598e:	4413      	add	r3, r2
 8005990:	657b      	str	r3, [r7, #84]	@ 0x54
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	00da      	lsls	r2, r3, #3
 8005998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800599a:	4413      	add	r3, r2
 800599c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80059a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059aa:	801a      	strh	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	785b      	ldrb	r3, [r3, #1]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d16b      	bne.n	8005a90 <USB_ActivateEndpoint+0x790>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	461a      	mov	r2, r3
 80059c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059c8:	4413      	add	r3, r2
 80059ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	00da      	lsls	r2, r3, #3
 80059d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059d4:	4413      	add	r3, r2
 80059d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80059da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ea:	801a      	strh	r2, [r3, #0]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10a      	bne.n	8005a0a <USB_ActivateEndpoint+0x70a>
 80059f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a06:	801a      	strh	r2, [r3, #0]
 8005a08:	e05b      	b.n	8005ac2 <USB_ActivateEndpoint+0x7c2>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a10:	d81c      	bhi.n	8005a4c <USB_ActivateEndpoint+0x74c>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	085b      	lsrs	r3, r3, #1
 8005a18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d004      	beq.n	8005a32 <USB_ActivateEndpoint+0x732>
 8005a28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	029b      	lsls	r3, r3, #10
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	4313      	orrs	r3, r2
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a48:	801a      	strh	r2, [r3, #0]
 8005a4a:	e03a      	b.n	8005ac2 <USB_ActivateEndpoint+0x7c2>
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	095b      	lsrs	r3, r3, #5
 8005a52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	f003 031f 	and.w	r3, r3, #31
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d104      	bne.n	8005a6c <USB_ActivateEndpoint+0x76c>
 8005a62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a66:	3b01      	subs	r3, #1
 8005a68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	029b      	lsls	r3, r3, #10
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a8c:	801a      	strh	r2, [r3, #0]
 8005a8e:	e018      	b.n	8005ac2 <USB_ActivateEndpoint+0x7c2>
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	785b      	ldrb	r3, [r3, #1]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d114      	bne.n	8005ac2 <USB_ActivateEndpoint+0x7c2>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005aa4:	4413      	add	r3, r2
 8005aa6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	00da      	lsls	r2, r3, #3
 8005aae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005ab6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ac0:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ad4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ad8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005ada:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005adc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005ae0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005ae2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005ae4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005ae8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	441a      	add	r2, r3
 8005af4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005af6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005afa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005afe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b20:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	441a      	add	r2, r3
 8005b2c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005b2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	8013      	strh	r3, [r2, #0]
 8005b42:	e0bc      	b.n	8005cbe <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	881b      	ldrh	r3, [r3, #0]
 8005b50:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8005b54:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005b58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d01d      	beq.n	8005b9c <USB_ActivateEndpoint+0x89c>
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b76:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	441a      	add	r2, r3
 8005b84:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005b88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8005bac:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8005bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d01d      	beq.n	8005bf4 <USB_ActivateEndpoint+0x8f4>
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	881b      	ldrh	r3, [r3, #0]
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bce:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	441a      	add	r2, r3
 8005bdc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8005be0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005be4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005be8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	78db      	ldrb	r3, [r3, #3]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d024      	beq.n	8005c46 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c12:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005c16:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005c1a:	f083 0320 	eor.w	r3, r3, #32
 8005c1e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	441a      	add	r2, r3
 8005c2c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005c30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	8013      	strh	r3, [r2, #0]
 8005c44:	e01d      	b.n	8005c82 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	881b      	ldrh	r3, [r3, #0]
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c5c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	441a      	add	r2, r3
 8005c6a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005c6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c98:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	441a      	add	r2, r3
 8005ca6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005caa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005cbe:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	379c      	adds	r7, #156	@ 0x9c
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop

08005cd0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b08d      	sub	sp, #52	@ 0x34
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	7b1b      	ldrb	r3, [r3, #12]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f040 808e 	bne.w	8005e00 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	785b      	ldrb	r3, [r3, #1]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d044      	beq.n	8005d76 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	81bb      	strh	r3, [r7, #12]
 8005cfa:	89bb      	ldrh	r3, [r7, #12]
 8005cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d01b      	beq.n	8005d3c <USB_DeactivateEndpoint+0x6c>
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d1a:	817b      	strh	r3, [r7, #10]
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	441a      	add	r2, r3
 8005d26:	897b      	ldrh	r3, [r7, #10]
 8005d28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d34:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4413      	add	r3, r2
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d52:	813b      	strh	r3, [r7, #8]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	441a      	add	r2, r3
 8005d5e:	893b      	ldrh	r3, [r7, #8]
 8005d60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	8013      	strh	r3, [r2, #0]
 8005d74:	e192      	b.n	800609c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	827b      	strh	r3, [r7, #18]
 8005d84:	8a7b      	ldrh	r3, [r7, #18]
 8005d86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d01b      	beq.n	8005dc6 <USB_DeactivateEndpoint+0xf6>
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005da0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005da4:	823b      	strh	r3, [r7, #16]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	441a      	add	r2, r3
 8005db0:	8a3b      	ldrh	r3, [r7, #16]
 8005db2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005db6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005dbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	881b      	ldrh	r3, [r3, #0]
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ddc:	81fb      	strh	r3, [r7, #14]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	441a      	add	r2, r3
 8005de8:	89fb      	ldrh	r3, [r7, #14]
 8005dea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005df2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005df6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	8013      	strh	r3, [r2, #0]
 8005dfe:	e14d      	b.n	800609c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	785b      	ldrb	r3, [r3, #1]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f040 80a5 	bne.w	8005f54 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	843b      	strh	r3, [r7, #32]
 8005e18:	8c3b      	ldrh	r3, [r7, #32]
 8005e1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d01b      	beq.n	8005e5a <USB_DeactivateEndpoint+0x18a>
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e38:	83fb      	strh	r3, [r7, #30]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	441a      	add	r2, r3
 8005e44:	8bfb      	ldrh	r3, [r7, #30]
 8005e46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e4e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	881b      	ldrh	r3, [r3, #0]
 8005e66:	83bb      	strh	r3, [r7, #28]
 8005e68:	8bbb      	ldrh	r3, [r7, #28]
 8005e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d01b      	beq.n	8005eaa <USB_DeactivateEndpoint+0x1da>
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	881b      	ldrh	r3, [r3, #0]
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e88:	837b      	strh	r3, [r7, #26]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	441a      	add	r2, r3
 8005e94:	8b7b      	ldrh	r3, [r7, #26]
 8005e96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ea2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ebc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ec0:	833b      	strh	r3, [r7, #24]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	441a      	add	r2, r3
 8005ecc:	8b3b      	ldrh	r3, [r7, #24]
 8005ece:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ed2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eda:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	881b      	ldrh	r3, [r3, #0]
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ef4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ef8:	82fb      	strh	r3, [r7, #22]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	441a      	add	r2, r3
 8005f04:	8afb      	ldrh	r3, [r7, #22]
 8005f06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f30:	82bb      	strh	r3, [r7, #20]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	441a      	add	r2, r3
 8005f3c:	8abb      	ldrh	r3, [r7, #20]
 8005f3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	8013      	strh	r3, [r2, #0]
 8005f52:	e0a3      	b.n	800609c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005f62:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005f64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01b      	beq.n	8005fa4 <USB_DeactivateEndpoint+0x2d4>
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f82:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	441a      	add	r2, r3
 8005f8e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005f90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005fb2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d01b      	beq.n	8005ff4 <USB_DeactivateEndpoint+0x324>
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fd2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	441a      	add	r2, r3
 8005fde:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005fe0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fe4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fe8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	b29b      	uxth	r3, r3
 8006002:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800600a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	441a      	add	r2, r3
 8006016:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006018:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800601c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006020:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006024:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006028:	b29b      	uxth	r3, r3
 800602a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	881b      	ldrh	r3, [r3, #0]
 8006038:	b29b      	uxth	r3, r3
 800603a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800603e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006042:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	441a      	add	r2, r3
 800604e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006050:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006054:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006058:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800605c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006060:	b29b      	uxth	r3, r3
 8006062:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	b29b      	uxth	r3, r3
 8006072:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800607a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	441a      	add	r2, r3
 8006086:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006088:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800608c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006090:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006098:	b29b      	uxth	r3, r3
 800609a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3734      	adds	r7, #52	@ 0x34
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b0ac      	sub	sp, #176	@ 0xb0
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	785b      	ldrb	r3, [r3, #1]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	f040 84ca 	bne.w	8006a52 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	699a      	ldr	r2, [r3, #24]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d904      	bls.n	80060d4 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060d2:	e003      	b.n	80060dc <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	7b1b      	ldrb	r3, [r3, #12]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d122      	bne.n	800612a <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	6959      	ldr	r1, [r3, #20]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	88da      	ldrh	r2, [r3, #6]
 80060ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 febd 	bl	8006e72 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	613b      	str	r3, [r7, #16]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006102:	b29b      	uxth	r3, r3
 8006104:	461a      	mov	r2, r3
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	4413      	add	r3, r2
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	00da      	lsls	r2, r3, #3
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	4413      	add	r3, r2
 8006116:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	801a      	strh	r2, [r3, #0]
 8006126:	f000 bc6f 	b.w	8006a08 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	78db      	ldrb	r3, [r3, #3]
 800612e:	2b02      	cmp	r3, #2
 8006130:	f040 831e 	bne.w	8006770 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	6a1a      	ldr	r2, [r3, #32]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	429a      	cmp	r2, r3
 800613e:	f240 82cf 	bls.w	80066e0 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	881b      	ldrh	r3, [r3, #0]
 800614e:	b29b      	uxth	r3, r3
 8006150:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006154:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006158:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	441a      	add	r2, r3
 8006166:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800616a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800616e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006172:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800617a:	b29b      	uxth	r3, r3
 800617c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	6a1a      	ldr	r2, [r3, #32]
 8006182:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006186:	1ad2      	subs	r2, r2, r3
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	b29b      	uxth	r3, r3
 800619a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f000 814f 	beq.w	8006442 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	785b      	ldrb	r3, [r3, #1]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d16b      	bne.n	8006288 <USB_EPStartXfer+0x1de>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	461a      	mov	r2, r3
 80061be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c0:	4413      	add	r3, r2
 80061c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	00da      	lsls	r2, r3, #3
 80061ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061cc:	4413      	add	r3, r2
 80061ce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80061d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80061d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	b29b      	uxth	r3, r3
 80061da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061de:	b29a      	uxth	r2, r3
 80061e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e2:	801a      	strh	r2, [r3, #0]
 80061e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10a      	bne.n	8006202 <USB_EPStartXfer+0x158>
 80061ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ee:	881b      	ldrh	r3, [r3, #0]
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fe:	801a      	strh	r2, [r3, #0]
 8006200:	e05b      	b.n	80062ba <USB_EPStartXfer+0x210>
 8006202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006206:	2b3e      	cmp	r3, #62	@ 0x3e
 8006208:	d81c      	bhi.n	8006244 <USB_EPStartXfer+0x19a>
 800620a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800620e:	085b      	lsrs	r3, r3, #1
 8006210:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006214:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b00      	cmp	r3, #0
 800621e:	d004      	beq.n	800622a <USB_EPStartXfer+0x180>
 8006220:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006224:	3301      	adds	r3, #1
 8006226:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800622a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	b29a      	uxth	r2, r3
 8006230:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006234:	b29b      	uxth	r3, r3
 8006236:	029b      	lsls	r3, r3, #10
 8006238:	b29b      	uxth	r3, r3
 800623a:	4313      	orrs	r3, r2
 800623c:	b29a      	uxth	r2, r3
 800623e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006240:	801a      	strh	r2, [r3, #0]
 8006242:	e03a      	b.n	80062ba <USB_EPStartXfer+0x210>
 8006244:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006248:	095b      	lsrs	r3, r3, #5
 800624a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800624e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006252:	f003 031f 	and.w	r3, r3, #31
 8006256:	2b00      	cmp	r3, #0
 8006258:	d104      	bne.n	8006264 <USB_EPStartXfer+0x1ba>
 800625a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800625e:	3b01      	subs	r3, #1
 8006260:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	b29a      	uxth	r2, r3
 800626a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800626e:	b29b      	uxth	r3, r3
 8006270:	029b      	lsls	r3, r3, #10
 8006272:	b29b      	uxth	r3, r3
 8006274:	4313      	orrs	r3, r2
 8006276:	b29b      	uxth	r3, r3
 8006278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800627c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006280:	b29a      	uxth	r2, r3
 8006282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006284:	801a      	strh	r2, [r3, #0]
 8006286:	e018      	b.n	80062ba <USB_EPStartXfer+0x210>
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	785b      	ldrb	r3, [r3, #1]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d114      	bne.n	80062ba <USB_EPStartXfer+0x210>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006296:	b29b      	uxth	r3, r3
 8006298:	461a      	mov	r2, r3
 800629a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629c:	4413      	add	r3, r2
 800629e:	633b      	str	r3, [r7, #48]	@ 0x30
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	00da      	lsls	r2, r3, #3
 80062a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a8:	4413      	add	r3, r2
 80062aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80062ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	895b      	ldrh	r3, [r3, #10]
 80062be:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	6959      	ldr	r1, [r3, #20]
 80062c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fdce 	bl	8006e72 <USB_WritePMA>
            ep->xfer_buff += len;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	695a      	ldr	r2, [r3, #20]
 80062da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062de:	441a      	add	r2, r3
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	6a1a      	ldr	r2, [r3, #32]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d907      	bls.n	8006300 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	6a1a      	ldr	r2, [r3, #32]
 80062f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062f8:	1ad2      	subs	r2, r2, r3
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	621a      	str	r2, [r3, #32]
 80062fe:	e006      	b.n	800630e <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	6a1b      	ldr	r3, [r3, #32]
 8006304:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	2200      	movs	r2, #0
 800630c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	785b      	ldrb	r3, [r3, #1]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d16b      	bne.n	80063ee <USB_EPStartXfer+0x344>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	61bb      	str	r3, [r7, #24]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006320:	b29b      	uxth	r3, r3
 8006322:	461a      	mov	r2, r3
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	4413      	add	r3, r2
 8006328:	61bb      	str	r3, [r7, #24]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	00da      	lsls	r2, r3, #3
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	4413      	add	r3, r2
 8006334:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006338:	617b      	str	r3, [r7, #20]
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	b29b      	uxth	r3, r3
 8006340:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006344:	b29a      	uxth	r2, r3
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	801a      	strh	r2, [r3, #0]
 800634a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10a      	bne.n	8006368 <USB_EPStartXfer+0x2be>
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	b29b      	uxth	r3, r3
 8006358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800635c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006360:	b29a      	uxth	r2, r3
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	801a      	strh	r2, [r3, #0]
 8006366:	e05d      	b.n	8006424 <USB_EPStartXfer+0x37a>
 8006368:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800636c:	2b3e      	cmp	r3, #62	@ 0x3e
 800636e:	d81c      	bhi.n	80063aa <USB_EPStartXfer+0x300>
 8006370:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006374:	085b      	lsrs	r3, r3, #1
 8006376:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800637a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	d004      	beq.n	8006390 <USB_EPStartXfer+0x2e6>
 8006386:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800638a:	3301      	adds	r3, #1
 800638c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	b29a      	uxth	r2, r3
 8006396:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800639a:	b29b      	uxth	r3, r3
 800639c:	029b      	lsls	r3, r3, #10
 800639e:	b29b      	uxth	r3, r3
 80063a0:	4313      	orrs	r3, r2
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	801a      	strh	r2, [r3, #0]
 80063a8:	e03c      	b.n	8006424 <USB_EPStartXfer+0x37a>
 80063aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80063b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063b8:	f003 031f 	and.w	r3, r3, #31
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d104      	bne.n	80063ca <USB_EPStartXfer+0x320>
 80063c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80063c4:	3b01      	subs	r3, #1
 80063c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	029b      	lsls	r3, r3, #10
 80063d8:	b29b      	uxth	r3, r3
 80063da:	4313      	orrs	r3, r2
 80063dc:	b29b      	uxth	r3, r3
 80063de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	801a      	strh	r2, [r3, #0]
 80063ec:	e01a      	b.n	8006424 <USB_EPStartXfer+0x37a>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	785b      	ldrb	r3, [r3, #1]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d116      	bne.n	8006424 <USB_EPStartXfer+0x37a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	623b      	str	r3, [r7, #32]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006400:	b29b      	uxth	r3, r3
 8006402:	461a      	mov	r2, r3
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	4413      	add	r3, r2
 8006408:	623b      	str	r3, [r7, #32]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	00da      	lsls	r2, r3, #3
 8006410:	6a3b      	ldr	r3, [r7, #32]
 8006412:	4413      	add	r3, r2
 8006414:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006418:	61fb      	str	r3, [r7, #28]
 800641a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800641e:	b29a      	uxth	r2, r3
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	891b      	ldrh	r3, [r3, #8]
 8006428:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	6959      	ldr	r1, [r3, #20]
 8006430:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006434:	b29b      	uxth	r3, r3
 8006436:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fd19 	bl	8006e72 <USB_WritePMA>
 8006440:	e2e2      	b.n	8006a08 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	785b      	ldrb	r3, [r3, #1]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d16b      	bne.n	8006522 <USB_EPStartXfer+0x478>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006454:	b29b      	uxth	r3, r3
 8006456:	461a      	mov	r2, r3
 8006458:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800645a:	4413      	add	r3, r2
 800645c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	00da      	lsls	r2, r3, #3
 8006464:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006466:	4413      	add	r3, r2
 8006468:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800646c:	647b      	str	r3, [r7, #68]	@ 0x44
 800646e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	b29b      	uxth	r3, r3
 8006474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006478:	b29a      	uxth	r2, r3
 800647a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800647c:	801a      	strh	r2, [r3, #0]
 800647e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10a      	bne.n	800649c <USB_EPStartXfer+0x3f2>
 8006486:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006488:	881b      	ldrh	r3, [r3, #0]
 800648a:	b29b      	uxth	r3, r3
 800648c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006494:	b29a      	uxth	r2, r3
 8006496:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006498:	801a      	strh	r2, [r3, #0]
 800649a:	e05d      	b.n	8006558 <USB_EPStartXfer+0x4ae>
 800649c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80064a2:	d81c      	bhi.n	80064de <USB_EPStartXfer+0x434>
 80064a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064a8:	085b      	lsrs	r3, r3, #1
 80064aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80064ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d004      	beq.n	80064c4 <USB_EPStartXfer+0x41a>
 80064ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064be:	3301      	adds	r3, #1
 80064c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80064c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	029b      	lsls	r3, r3, #10
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	4313      	orrs	r3, r2
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064da:	801a      	strh	r2, [r3, #0]
 80064dc:	e03c      	b.n	8006558 <USB_EPStartXfer+0x4ae>
 80064de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064e2:	095b      	lsrs	r3, r3, #5
 80064e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80064e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064ec:	f003 031f 	and.w	r3, r3, #31
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d104      	bne.n	80064fe <USB_EPStartXfer+0x454>
 80064f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064f8:	3b01      	subs	r3, #1
 80064fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80064fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006500:	881b      	ldrh	r3, [r3, #0]
 8006502:	b29a      	uxth	r2, r3
 8006504:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006508:	b29b      	uxth	r3, r3
 800650a:	029b      	lsls	r3, r3, #10
 800650c:	b29b      	uxth	r3, r3
 800650e:	4313      	orrs	r3, r2
 8006510:	b29b      	uxth	r3, r3
 8006512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800651a:	b29a      	uxth	r2, r3
 800651c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800651e:	801a      	strh	r2, [r3, #0]
 8006520:	e01a      	b.n	8006558 <USB_EPStartXfer+0x4ae>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	785b      	ldrb	r3, [r3, #1]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d116      	bne.n	8006558 <USB_EPStartXfer+0x4ae>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	653b      	str	r3, [r7, #80]	@ 0x50
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006534:	b29b      	uxth	r3, r3
 8006536:	461a      	mov	r2, r3
 8006538:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800653a:	4413      	add	r3, r2
 800653c:	653b      	str	r3, [r7, #80]	@ 0x50
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	00da      	lsls	r2, r3, #3
 8006544:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006546:	4413      	add	r3, r2
 8006548:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800654c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800654e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006552:	b29a      	uxth	r2, r3
 8006554:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006556:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	891b      	ldrh	r3, [r3, #8]
 800655c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	6959      	ldr	r1, [r3, #20]
 8006564:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006568:	b29b      	uxth	r3, r3
 800656a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fc7f 	bl	8006e72 <USB_WritePMA>
            ep->xfer_buff += len;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	695a      	ldr	r2, [r3, #20]
 8006578:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800657c:	441a      	add	r2, r3
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	6a1a      	ldr	r2, [r3, #32]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	429a      	cmp	r2, r3
 800658c:	d907      	bls.n	800659e <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	6a1a      	ldr	r2, [r3, #32]
 8006592:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006596:	1ad2      	subs	r2, r2, r3
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	621a      	str	r2, [r3, #32]
 800659c:	e006      	b.n	80065ac <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2200      	movs	r2, #0
 80065aa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	785b      	ldrb	r3, [r3, #1]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d16b      	bne.n	8006690 <USB_EPStartXfer+0x5e6>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	461a      	mov	r2, r3
 80065c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c8:	4413      	add	r3, r2
 80065ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	00da      	lsls	r2, r3, #3
 80065d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d4:	4413      	add	r3, r2
 80065d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80065da:	637b      	str	r3, [r7, #52]	@ 0x34
 80065dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ea:	801a      	strh	r2, [r3, #0]
 80065ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10a      	bne.n	800660a <USB_EPStartXfer+0x560>
 80065f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006602:	b29a      	uxth	r2, r3
 8006604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006606:	801a      	strh	r2, [r3, #0]
 8006608:	e05b      	b.n	80066c2 <USB_EPStartXfer+0x618>
 800660a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800660e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006610:	d81c      	bhi.n	800664c <USB_EPStartXfer+0x5a2>
 8006612:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006616:	085b      	lsrs	r3, r3, #1
 8006618:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800661c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b00      	cmp	r3, #0
 8006626:	d004      	beq.n	8006632 <USB_EPStartXfer+0x588>
 8006628:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800662c:	3301      	adds	r3, #1
 800662e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	b29a      	uxth	r2, r3
 8006638:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800663c:	b29b      	uxth	r3, r3
 800663e:	029b      	lsls	r3, r3, #10
 8006640:	b29b      	uxth	r3, r3
 8006642:	4313      	orrs	r3, r2
 8006644:	b29a      	uxth	r2, r3
 8006646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006648:	801a      	strh	r2, [r3, #0]
 800664a:	e03a      	b.n	80066c2 <USB_EPStartXfer+0x618>
 800664c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006650:	095b      	lsrs	r3, r3, #5
 8006652:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006656:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800665a:	f003 031f 	and.w	r3, r3, #31
 800665e:	2b00      	cmp	r3, #0
 8006660:	d104      	bne.n	800666c <USB_EPStartXfer+0x5c2>
 8006662:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006666:	3b01      	subs	r3, #1
 8006668:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800666c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	b29a      	uxth	r2, r3
 8006672:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006676:	b29b      	uxth	r3, r3
 8006678:	029b      	lsls	r3, r3, #10
 800667a:	b29b      	uxth	r3, r3
 800667c:	4313      	orrs	r3, r2
 800667e:	b29b      	uxth	r3, r3
 8006680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006688:	b29a      	uxth	r2, r3
 800668a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800668c:	801a      	strh	r2, [r3, #0]
 800668e:	e018      	b.n	80066c2 <USB_EPStartXfer+0x618>
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	785b      	ldrb	r3, [r3, #1]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d114      	bne.n	80066c2 <USB_EPStartXfer+0x618>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800669e:	b29b      	uxth	r3, r3
 80066a0:	461a      	mov	r2, r3
 80066a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066a4:	4413      	add	r3, r2
 80066a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	00da      	lsls	r2, r3, #3
 80066ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066b0:	4413      	add	r3, r2
 80066b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80066b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80066bc:	b29a      	uxth	r2, r3
 80066be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	895b      	ldrh	r3, [r3, #10]
 80066c6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	6959      	ldr	r1, [r3, #20]
 80066ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fbca 	bl	8006e72 <USB_WritePMA>
 80066de:	e193      	b.n	8006a08 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80066fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066fe:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	441a      	add	r2, r3
 800670c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006710:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006714:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006718:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800671c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006720:	b29b      	uxth	r3, r3
 8006722:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800672e:	b29b      	uxth	r3, r3
 8006730:	461a      	mov	r2, r3
 8006732:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006734:	4413      	add	r3, r2
 8006736:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	00da      	lsls	r2, r3, #3
 800673e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006740:	4413      	add	r3, r2
 8006742:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006746:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006748:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800674c:	b29a      	uxth	r2, r3
 800674e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006750:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	891b      	ldrh	r3, [r3, #8]
 8006756:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	6959      	ldr	r1, [r3, #20]
 800675e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006762:	b29b      	uxth	r3, r3
 8006764:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fb82 	bl	8006e72 <USB_WritePMA>
 800676e:	e14b      	b.n	8006a08 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	6a1a      	ldr	r2, [r3, #32]
 8006774:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006778:	1ad2      	subs	r2, r2, r3
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	b29b      	uxth	r3, r3
 800678c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 809a 	beq.w	80068ca <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	673b      	str	r3, [r7, #112]	@ 0x70
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	785b      	ldrb	r3, [r3, #1]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d16b      	bne.n	800687a <USB_EPStartXfer+0x7d0>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	461a      	mov	r2, r3
 80067b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067b2:	4413      	add	r3, r2
 80067b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	00da      	lsls	r2, r3, #3
 80067bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067be:	4413      	add	r3, r2
 80067c0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80067c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80067c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067d4:	801a      	strh	r2, [r3, #0]
 80067d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10a      	bne.n	80067f4 <USB_EPStartXfer+0x74a>
 80067de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067f0:	801a      	strh	r2, [r3, #0]
 80067f2:	e05b      	b.n	80068ac <USB_EPStartXfer+0x802>
 80067f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80067fa:	d81c      	bhi.n	8006836 <USB_EPStartXfer+0x78c>
 80067fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006800:	085b      	lsrs	r3, r3, #1
 8006802:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	d004      	beq.n	800681c <USB_EPStartXfer+0x772>
 8006812:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006816:	3301      	adds	r3, #1
 8006818:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800681c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800681e:	881b      	ldrh	r3, [r3, #0]
 8006820:	b29a      	uxth	r2, r3
 8006822:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006826:	b29b      	uxth	r3, r3
 8006828:	029b      	lsls	r3, r3, #10
 800682a:	b29b      	uxth	r3, r3
 800682c:	4313      	orrs	r3, r2
 800682e:	b29a      	uxth	r2, r3
 8006830:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006832:	801a      	strh	r2, [r3, #0]
 8006834:	e03a      	b.n	80068ac <USB_EPStartXfer+0x802>
 8006836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800683a:	095b      	lsrs	r3, r3, #5
 800683c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006840:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006844:	f003 031f 	and.w	r3, r3, #31
 8006848:	2b00      	cmp	r3, #0
 800684a:	d104      	bne.n	8006856 <USB_EPStartXfer+0x7ac>
 800684c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006850:	3b01      	subs	r3, #1
 8006852:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006856:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006858:	881b      	ldrh	r3, [r3, #0]
 800685a:	b29a      	uxth	r2, r3
 800685c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006860:	b29b      	uxth	r3, r3
 8006862:	029b      	lsls	r3, r3, #10
 8006864:	b29b      	uxth	r3, r3
 8006866:	4313      	orrs	r3, r2
 8006868:	b29b      	uxth	r3, r3
 800686a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800686e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006872:	b29a      	uxth	r2, r3
 8006874:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006876:	801a      	strh	r2, [r3, #0]
 8006878:	e018      	b.n	80068ac <USB_EPStartXfer+0x802>
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	785b      	ldrb	r3, [r3, #1]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d114      	bne.n	80068ac <USB_EPStartXfer+0x802>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006888:	b29b      	uxth	r3, r3
 800688a:	461a      	mov	r2, r3
 800688c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800688e:	4413      	add	r3, r2
 8006890:	673b      	str	r3, [r7, #112]	@ 0x70
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	00da      	lsls	r2, r3, #3
 8006898:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800689a:	4413      	add	r3, r2
 800689c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80068a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80068a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068aa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	895b      	ldrh	r3, [r3, #10]
 80068b0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	6959      	ldr	r1, [r3, #20]
 80068b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068bc:	b29b      	uxth	r3, r3
 80068be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fad5 	bl	8006e72 <USB_WritePMA>
 80068c8:	e09e      	b.n	8006a08 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	785b      	ldrb	r3, [r3, #1]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d16b      	bne.n	80069aa <USB_EPStartXfer+0x900>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068dc:	b29b      	uxth	r3, r3
 80068de:	461a      	mov	r2, r3
 80068e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80068e2:	4413      	add	r3, r2
 80068e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	00da      	lsls	r2, r3, #3
 80068ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80068ee:	4413      	add	r3, r2
 80068f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80068f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80068f8:	881b      	ldrh	r3, [r3, #0]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006900:	b29a      	uxth	r2, r3
 8006902:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006904:	801a      	strh	r2, [r3, #0]
 8006906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10a      	bne.n	8006924 <USB_EPStartXfer+0x87a>
 800690e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	b29b      	uxth	r3, r3
 8006914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800691c:	b29a      	uxth	r2, r3
 800691e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006920:	801a      	strh	r2, [r3, #0]
 8006922:	e063      	b.n	80069ec <USB_EPStartXfer+0x942>
 8006924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006928:	2b3e      	cmp	r3, #62	@ 0x3e
 800692a:	d81c      	bhi.n	8006966 <USB_EPStartXfer+0x8bc>
 800692c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006930:	085b      	lsrs	r3, r3, #1
 8006932:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d004      	beq.n	800694c <USB_EPStartXfer+0x8a2>
 8006942:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006946:	3301      	adds	r3, #1
 8006948:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800694c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800694e:	881b      	ldrh	r3, [r3, #0]
 8006950:	b29a      	uxth	r2, r3
 8006952:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006956:	b29b      	uxth	r3, r3
 8006958:	029b      	lsls	r3, r3, #10
 800695a:	b29b      	uxth	r3, r3
 800695c:	4313      	orrs	r3, r2
 800695e:	b29a      	uxth	r2, r3
 8006960:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006962:	801a      	strh	r2, [r3, #0]
 8006964:	e042      	b.n	80069ec <USB_EPStartXfer+0x942>
 8006966:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800696a:	095b      	lsrs	r3, r3, #5
 800696c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006970:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006974:	f003 031f 	and.w	r3, r3, #31
 8006978:	2b00      	cmp	r3, #0
 800697a:	d104      	bne.n	8006986 <USB_EPStartXfer+0x8dc>
 800697c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006980:	3b01      	subs	r3, #1
 8006982:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006986:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	b29a      	uxth	r2, r3
 800698c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006990:	b29b      	uxth	r3, r3
 8006992:	029b      	lsls	r3, r3, #10
 8006994:	b29b      	uxth	r3, r3
 8006996:	4313      	orrs	r3, r2
 8006998:	b29b      	uxth	r3, r3
 800699a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800699e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069a6:	801a      	strh	r2, [r3, #0]
 80069a8:	e020      	b.n	80069ec <USB_EPStartXfer+0x942>
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	785b      	ldrb	r3, [r3, #1]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d11c      	bne.n	80069ec <USB_EPStartXfer+0x942>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069be:	b29b      	uxth	r3, r3
 80069c0:	461a      	mov	r2, r3
 80069c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069c6:	4413      	add	r3, r2
 80069c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	00da      	lsls	r2, r3, #3
 80069d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069d6:	4413      	add	r3, r2
 80069d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80069dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80069ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	891b      	ldrh	r3, [r3, #8]
 80069f0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	6959      	ldr	r1, [r3, #20]
 80069f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fa35 	bl	8006e72 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4413      	add	r3, r2
 8006a12:	881b      	ldrh	r3, [r3, #0]
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a1e:	817b      	strh	r3, [r7, #10]
 8006a20:	897b      	ldrh	r3, [r7, #10]
 8006a22:	f083 0310 	eor.w	r3, r3, #16
 8006a26:	817b      	strh	r3, [r7, #10]
 8006a28:	897b      	ldrh	r3, [r7, #10]
 8006a2a:	f083 0320 	eor.w	r3, r3, #32
 8006a2e:	817b      	strh	r3, [r7, #10]
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	441a      	add	r2, r3
 8006a3a:	897b      	ldrh	r3, [r7, #10]
 8006a3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	8013      	strh	r3, [r2, #0]
 8006a50:	e0d5      	b.n	8006bfe <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	7b1b      	ldrb	r3, [r3, #12]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d156      	bne.n	8006b08 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d122      	bne.n	8006aa8 <USB_EPStartXfer+0x9fe>
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	78db      	ldrb	r3, [r3, #3]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d11e      	bne.n	8006aa8 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a80:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	441a      	add	r2, r3
 8006a8e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006a92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a9a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006a9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	8013      	strh	r3, [r2, #0]
 8006aa6:	e01d      	b.n	8006ae4 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006abe:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	441a      	add	r2, r3
 8006acc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8006ad0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ad4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ad8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	699a      	ldr	r2, [r3, #24]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d907      	bls.n	8006b00 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	699a      	ldr	r2, [r3, #24]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	1ad2      	subs	r2, r2, r3
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	619a      	str	r2, [r3, #24]
 8006afe:	e054      	b.n	8006baa <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2200      	movs	r2, #0
 8006b04:	619a      	str	r2, [r3, #24]
 8006b06:	e050      	b.n	8006baa <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	78db      	ldrb	r3, [r3, #3]
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d142      	bne.n	8006b96 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	69db      	ldr	r3, [r3, #28]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d048      	beq.n	8006baa <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b28:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006b2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d005      	beq.n	8006b40 <USB_EPStartXfer+0xa96>
 8006b34:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10b      	bne.n	8006b58 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b40:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006b44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d12e      	bne.n	8006baa <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b4c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d128      	bne.n	8006baa <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	881b      	ldrh	r3, [r3, #0]
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b6e:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	441a      	add	r2, r3
 8006b7c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8006b80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b8c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	8013      	strh	r3, [r2, #0]
 8006b94:	e009      	b.n	8006baa <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	78db      	ldrb	r3, [r3, #3]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d103      	bne.n	8006ba6 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	619a      	str	r2, [r3, #24]
 8006ba4:	e001      	b.n	8006baa <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e02a      	b.n	8006c00 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bc0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006bc4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006bc8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006bcc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006bd0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006bd4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006bd8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	441a      	add	r2, r3
 8006be6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006bea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	37b0      	adds	r7, #176	@ 0xb0
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	785b      	ldrb	r3, [r3, #1]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d020      	beq.n	8006c5c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	4413      	add	r3, r2
 8006c24:	881b      	ldrh	r3, [r3, #0]
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c30:	81bb      	strh	r3, [r7, #12]
 8006c32:	89bb      	ldrh	r3, [r7, #12]
 8006c34:	f083 0310 	eor.w	r3, r3, #16
 8006c38:	81bb      	strh	r3, [r7, #12]
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	441a      	add	r2, r3
 8006c44:	89bb      	ldrh	r3, [r7, #12]
 8006c46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	8013      	strh	r3, [r2, #0]
 8006c5a:	e01f      	b.n	8006c9c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c72:	81fb      	strh	r3, [r7, #14]
 8006c74:	89fb      	ldrh	r3, [r7, #14]
 8006c76:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006c7a:	81fb      	strh	r3, [r7, #14]
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	441a      	add	r2, r3
 8006c86:	89fb      	ldrh	r3, [r7, #14]
 8006c88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b087      	sub	sp, #28
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	785b      	ldrb	r3, [r3, #1]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d04c      	beq.n	8006d56 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	881b      	ldrh	r3, [r3, #0]
 8006cc8:	823b      	strh	r3, [r7, #16]
 8006cca:	8a3b      	ldrh	r3, [r7, #16]
 8006ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d01b      	beq.n	8006d0c <USB_EPClearStall+0x62>
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cea:	81fb      	strh	r3, [r7, #14]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	441a      	add	r2, r3
 8006cf6:	89fb      	ldrh	r3, [r7, #14]
 8006cf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d04:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	78db      	ldrb	r3, [r3, #3]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d06c      	beq.n	8006dee <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d2a:	81bb      	strh	r3, [r7, #12]
 8006d2c:	89bb      	ldrh	r3, [r7, #12]
 8006d2e:	f083 0320 	eor.w	r3, r3, #32
 8006d32:	81bb      	strh	r3, [r7, #12]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	441a      	add	r2, r3
 8006d3e:	89bb      	ldrh	r3, [r7, #12]
 8006d40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	8013      	strh	r3, [r2, #0]
 8006d54:	e04b      	b.n	8006dee <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	82fb      	strh	r3, [r7, #22]
 8006d64:	8afb      	ldrh	r3, [r7, #22]
 8006d66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d01b      	beq.n	8006da6 <USB_EPClearStall+0xfc>
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d84:	82bb      	strh	r3, [r7, #20]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	441a      	add	r2, r3
 8006d90:	8abb      	ldrh	r3, [r7, #20]
 8006d92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4413      	add	r3, r2
 8006db0:	881b      	ldrh	r3, [r3, #0]
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006db8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dbc:	827b      	strh	r3, [r7, #18]
 8006dbe:	8a7b      	ldrh	r3, [r7, #18]
 8006dc0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006dc4:	827b      	strh	r3, [r7, #18]
 8006dc6:	8a7b      	ldrh	r3, [r7, #18]
 8006dc8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006dcc:	827b      	strh	r3, [r7, #18]
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	441a      	add	r2, r3
 8006dd8:	8a7b      	ldrh	r3, [r7, #18]
 8006dda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006de2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006de6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	371c      	adds	r7, #28
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	460b      	mov	r3, r1
 8006e06:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006e08:	78fb      	ldrb	r3, [r7, #3]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d103      	bne.n	8006e16 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2280      	movs	r2, #128	@ 0x80
 8006e12:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr

08006e52 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006e52:	b480      	push	{r7}
 8006e54:	b085      	sub	sp, #20
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006e64:	68fb      	ldr	r3, [r7, #12]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b08b      	sub	sp, #44	@ 0x2c
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	60f8      	str	r0, [r7, #12]
 8006e7a:	60b9      	str	r1, [r7, #8]
 8006e7c:	4611      	mov	r1, r2
 8006e7e:	461a      	mov	r2, r3
 8006e80:	460b      	mov	r3, r1
 8006e82:	80fb      	strh	r3, [r7, #6]
 8006e84:	4613      	mov	r3, r2
 8006e86:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006e88:	88bb      	ldrh	r3, [r7, #4]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	085b      	lsrs	r3, r3, #1
 8006e8e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006e98:	88fa      	ldrh	r2, [r7, #6]
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ea2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ea8:	e01c      	b.n	8006ee4 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	b21b      	sxth	r3, r3
 8006eb8:	021b      	lsls	r3, r3, #8
 8006eba:	b21a      	sxth	r2, r3
 8006ebc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	b21b      	sxth	r3, r3
 8006ec4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	8a7a      	ldrh	r2, [r7, #18]
 8006eca:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006ecc:	6a3b      	ldr	r3, [r7, #32]
 8006ece:	3302      	adds	r3, #2
 8006ed0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	3301      	adds	r3, #1
 8006edc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1df      	bne.n	8006eaa <USB_WritePMA+0x38>
  }
}
 8006eea:	bf00      	nop
 8006eec:	bf00      	nop
 8006eee:	372c      	adds	r7, #44	@ 0x2c
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b08b      	sub	sp, #44	@ 0x2c
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	4611      	mov	r1, r2
 8006f04:	461a      	mov	r2, r3
 8006f06:	460b      	mov	r3, r1
 8006f08:	80fb      	strh	r3, [r7, #6]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006f0e:	88bb      	ldrh	r3, [r7, #4]
 8006f10:	085b      	lsrs	r3, r3, #1
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f1e:	88fa      	ldrh	r2, [r7, #6]
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f28:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f2e:	e018      	b.n	8006f62 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006f30:	6a3b      	ldr	r3, [r7, #32]
 8006f32:	881b      	ldrh	r3, [r3, #0]
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	3302      	adds	r3, #2
 8006f3c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	0a1b      	lsrs	r3, r3, #8
 8006f50:	b2da      	uxtb	r2, r3
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1e3      	bne.n	8006f30 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006f68:	88bb      	ldrh	r3, [r7, #4]
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d007      	beq.n	8006f84 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8006f74:	6a3b      	ldr	r3, [r7, #32]
 8006f76:	881b      	ldrh	r3, [r3, #0]
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	701a      	strb	r2, [r3, #0]
  }
}
 8006f84:	bf00      	nop
 8006f86:	372c      	adds	r7, #44	@ 0x2c
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006f9c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006fa0:	f002 f8c0 	bl	8009124 <USBD_static_malloc>
 8006fa4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d105      	bne.n	8006fb8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	e066      	b.n	8007086 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	7c1b      	ldrb	r3, [r3, #16]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d119      	bne.n	8006ffc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006fc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006fcc:	2202      	movs	r2, #2
 8006fce:	2181      	movs	r1, #129	@ 0x81
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f001 ff4e 	bl	8008e72 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006fdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	2101      	movs	r1, #1
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f001 ff44 	bl	8008e72 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2210      	movs	r2, #16
 8006ff6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8006ffa:	e016      	b.n	800702a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006ffc:	2340      	movs	r3, #64	@ 0x40
 8006ffe:	2202      	movs	r2, #2
 8007000:	2181      	movs	r1, #129	@ 0x81
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f001 ff35 	bl	8008e72 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800700e:	2340      	movs	r3, #64	@ 0x40
 8007010:	2202      	movs	r2, #2
 8007012:	2101      	movs	r1, #1
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f001 ff2c 	bl	8008e72 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2201      	movs	r2, #1
 800701e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2210      	movs	r2, #16
 8007026:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800702a:	2308      	movs	r3, #8
 800702c:	2203      	movs	r2, #3
 800702e:	2182      	movs	r1, #130	@ 0x82
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f001 ff1e 	bl	8008e72 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2200      	movs	r2, #0
 8007054:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	7c1b      	ldrb	r3, [r3, #16]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d109      	bne.n	8007074 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007066:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800706a:	2101      	movs	r1, #1
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f001 ffef 	bl	8009050 <USBD_LL_PrepareReceive>
 8007072:	e007      	b.n	8007084 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800707a:	2340      	movs	r3, #64	@ 0x40
 800707c:	2101      	movs	r1, #1
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f001 ffe6 	bl	8009050 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b082      	sub	sp, #8
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
 8007096:	460b      	mov	r3, r1
 8007098:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800709a:	2181      	movs	r1, #129	@ 0x81
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 ff0e 	bl	8008ebe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80070a8:	2101      	movs	r1, #1
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f001 ff07 	bl	8008ebe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80070b8:	2182      	movs	r1, #130	@ 0x82
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f001 feff 	bl	8008ebe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00e      	beq.n	80070f8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80070ea:	4618      	mov	r0, r3
 80070ec:	f002 f828 	bl	8009140 <USBD_static_free>
    pdev->pClassData = NULL;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
	...

08007104 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007114:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007116:	2300      	movs	r3, #0
 8007118:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800711a:	2300      	movs	r3, #0
 800711c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d101      	bne.n	800712c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007128:	2303      	movs	r3, #3
 800712a:	e0af      	b.n	800728c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007134:	2b00      	cmp	r3, #0
 8007136:	d03f      	beq.n	80071b8 <USBD_CDC_Setup+0xb4>
 8007138:	2b20      	cmp	r3, #32
 800713a:	f040 809f 	bne.w	800727c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	88db      	ldrh	r3, [r3, #6]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d02e      	beq.n	80071a4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	b25b      	sxtb	r3, r3
 800714c:	2b00      	cmp	r3, #0
 800714e:	da16      	bge.n	800717e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800715c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	88d2      	ldrh	r2, [r2, #6]
 8007162:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	88db      	ldrh	r3, [r3, #6]
 8007168:	2b07      	cmp	r3, #7
 800716a:	bf28      	it	cs
 800716c:	2307      	movcs	r3, #7
 800716e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	89fa      	ldrh	r2, [r7, #14]
 8007174:	4619      	mov	r1, r3
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f001 fab9 	bl	80086ee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800717c:	e085      	b.n	800728a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	785a      	ldrb	r2, [r3, #1]
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	88db      	ldrh	r3, [r3, #6]
 800718c:	b2da      	uxtb	r2, r3
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007194:	6939      	ldr	r1, [r7, #16]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	88db      	ldrh	r3, [r3, #6]
 800719a:	461a      	mov	r2, r3
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f001 fad2 	bl	8008746 <USBD_CtlPrepareRx>
      break;
 80071a2:	e072      	b.n	800728a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	7850      	ldrb	r0, [r2, #1]
 80071b0:	2200      	movs	r2, #0
 80071b2:	6839      	ldr	r1, [r7, #0]
 80071b4:	4798      	blx	r3
      break;
 80071b6:	e068      	b.n	800728a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	785b      	ldrb	r3, [r3, #1]
 80071bc:	2b0b      	cmp	r3, #11
 80071be:	d852      	bhi.n	8007266 <USBD_CDC_Setup+0x162>
 80071c0:	a201      	add	r2, pc, #4	@ (adr r2, 80071c8 <USBD_CDC_Setup+0xc4>)
 80071c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c6:	bf00      	nop
 80071c8:	080071f9 	.word	0x080071f9
 80071cc:	08007275 	.word	0x08007275
 80071d0:	08007267 	.word	0x08007267
 80071d4:	08007267 	.word	0x08007267
 80071d8:	08007267 	.word	0x08007267
 80071dc:	08007267 	.word	0x08007267
 80071e0:	08007267 	.word	0x08007267
 80071e4:	08007267 	.word	0x08007267
 80071e8:	08007267 	.word	0x08007267
 80071ec:	08007267 	.word	0x08007267
 80071f0:	08007223 	.word	0x08007223
 80071f4:	0800724d 	.word	0x0800724d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	2b03      	cmp	r3, #3
 8007202:	d107      	bne.n	8007214 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007204:	f107 030a 	add.w	r3, r7, #10
 8007208:	2202      	movs	r2, #2
 800720a:	4619      	mov	r1, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f001 fa6e 	bl	80086ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007212:	e032      	b.n	800727a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f001 f9f8 	bl	800860c <USBD_CtlError>
            ret = USBD_FAIL;
 800721c:	2303      	movs	r3, #3
 800721e:	75fb      	strb	r3, [r7, #23]
          break;
 8007220:	e02b      	b.n	800727a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b03      	cmp	r3, #3
 800722c:	d107      	bne.n	800723e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800722e:	f107 030d 	add.w	r3, r7, #13
 8007232:	2201      	movs	r2, #1
 8007234:	4619      	mov	r1, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f001 fa59 	bl	80086ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800723c:	e01d      	b.n	800727a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f001 f9e3 	bl	800860c <USBD_CtlError>
            ret = USBD_FAIL;
 8007246:	2303      	movs	r3, #3
 8007248:	75fb      	strb	r3, [r7, #23]
          break;
 800724a:	e016      	b.n	800727a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007252:	b2db      	uxtb	r3, r3
 8007254:	2b03      	cmp	r3, #3
 8007256:	d00f      	beq.n	8007278 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f001 f9d6 	bl	800860c <USBD_CtlError>
            ret = USBD_FAIL;
 8007260:	2303      	movs	r3, #3
 8007262:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007264:	e008      	b.n	8007278 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007266:	6839      	ldr	r1, [r7, #0]
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f001 f9cf 	bl	800860c <USBD_CtlError>
          ret = USBD_FAIL;
 800726e:	2303      	movs	r3, #3
 8007270:	75fb      	strb	r3, [r7, #23]
          break;
 8007272:	e002      	b.n	800727a <USBD_CDC_Setup+0x176>
          break;
 8007274:	bf00      	nop
 8007276:	e008      	b.n	800728a <USBD_CDC_Setup+0x186>
          break;
 8007278:	bf00      	nop
      }
      break;
 800727a:	e006      	b.n	800728a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800727c:	6839      	ldr	r1, [r7, #0]
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f001 f9c4 	bl	800860c <USBD_CtlError>
      ret = USBD_FAIL;
 8007284:	2303      	movs	r3, #3
 8007286:	75fb      	strb	r3, [r7, #23]
      break;
 8007288:	bf00      	nop
  }

  return (uint8_t)ret;
 800728a:	7dfb      	ldrb	r3, [r7, #23]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	460b      	mov	r3, r1
 800729e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80072a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e04f      	b.n	8007356 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80072bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80072be:	78fa      	ldrb	r2, [r7, #3]
 80072c0:	6879      	ldr	r1, [r7, #4]
 80072c2:	4613      	mov	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4413      	add	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	440b      	add	r3, r1
 80072cc:	3318      	adds	r3, #24
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d029      	beq.n	8007328 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80072d4:	78fa      	ldrb	r2, [r7, #3]
 80072d6:	6879      	ldr	r1, [r7, #4]
 80072d8:	4613      	mov	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4413      	add	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	440b      	add	r3, r1
 80072e2:	3318      	adds	r3, #24
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	78f9      	ldrb	r1, [r7, #3]
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	460b      	mov	r3, r1
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	440b      	add	r3, r1
 80072f0:	00db      	lsls	r3, r3, #3
 80072f2:	4403      	add	r3, r0
 80072f4:	3320      	adds	r3, #32
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80072fc:	fb01 f303 	mul.w	r3, r1, r3
 8007300:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007302:	2b00      	cmp	r3, #0
 8007304:	d110      	bne.n	8007328 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007306:	78fa      	ldrb	r2, [r7, #3]
 8007308:	6879      	ldr	r1, [r7, #4]
 800730a:	4613      	mov	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	440b      	add	r3, r1
 8007314:	3318      	adds	r3, #24
 8007316:	2200      	movs	r2, #0
 8007318:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800731a:	78f9      	ldrb	r1, [r7, #3]
 800731c:	2300      	movs	r3, #0
 800731e:	2200      	movs	r2, #0
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f001 fe74 	bl	800900e <USBD_LL_Transmit>
 8007326:	e015      	b.n	8007354 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2200      	movs	r2, #0
 800732c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00b      	beq.n	8007354 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007350:	78fa      	ldrb	r2, [r7, #3]
 8007352:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b084      	sub	sp, #16
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	460b      	mov	r3, r1
 8007368:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007370:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007378:	2b00      	cmp	r3, #0
 800737a:	d101      	bne.n	8007380 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800737c:	2303      	movs	r3, #3
 800737e:	e015      	b.n	80073ac <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007380:	78fb      	ldrb	r3, [r7, #3]
 8007382:	4619      	mov	r1, r3
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f001 fe84 	bl	8009092 <USBD_LL_GetRxDataSize>
 800738a:	4602      	mov	r2, r0
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80073a6:	4611      	mov	r1, r2
 80073a8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80073c2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80073ca:	2303      	movs	r3, #3
 80073cc:	e01a      	b.n	8007404 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d014      	beq.n	8007402 <USBD_CDC_EP0_RxReady+0x4e>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80073de:	2bff      	cmp	r3, #255	@ 0xff
 80073e0:	d00f      	beq.n	8007402 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 80073f0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80073f8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	22ff      	movs	r2, #255	@ 0xff
 80073fe:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2243      	movs	r2, #67	@ 0x43
 8007418:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800741a:	4b03      	ldr	r3, [pc, #12]	@ (8007428 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800741c:	4618      	mov	r0, r3
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
 8007428:	20000094 	.word	0x20000094

0800742c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2243      	movs	r2, #67	@ 0x43
 8007438:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800743a:	4b03      	ldr	r3, [pc, #12]	@ (8007448 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800743c:	4618      	mov	r0, r3
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	20000050 	.word	0x20000050

0800744c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2243      	movs	r2, #67	@ 0x43
 8007458:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800745a:	4b03      	ldr	r3, [pc, #12]	@ (8007468 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800745c:	4618      	mov	r0, r3
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr
 8007468:	200000d8 	.word	0x200000d8

0800746c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	220a      	movs	r2, #10
 8007478:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800747a:	4b03      	ldr	r3, [pc, #12]	@ (8007488 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800747c:	4618      	mov	r0, r3
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr
 8007488:	2000000c 	.word	0x2000000c

0800748c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800749c:	2303      	movs	r3, #3
 800749e:	e004      	b.n	80074aa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	683a      	ldr	r2, [r7, #0]
 80074a4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	370c      	adds	r7, #12
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b087      	sub	sp, #28
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	60f8      	str	r0, [r7, #12]
 80074be:	60b9      	str	r1, [r7, #8]
 80074c0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80074c8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d101      	bne.n	80074d4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e008      	b.n	80074e6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	371c      	adds	r7, #28
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b085      	sub	sp, #20
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007502:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800750a:	2303      	movs	r3, #3
 800750c:	e004      	b.n	8007518 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	683a      	ldr	r2, [r7, #0]
 8007512:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3714      	adds	r7, #20
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007532:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800753a:	2b00      	cmp	r3, #0
 800753c:	d101      	bne.n	8007542 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800753e:	2303      	movs	r3, #3
 8007540:	e016      	b.n	8007570 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	7c1b      	ldrb	r3, [r3, #16]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d109      	bne.n	800755e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007550:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007554:	2101      	movs	r1, #1
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f001 fd7a 	bl	8009050 <USBD_LL_PrepareReceive>
 800755c:	e007      	b.n	800756e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007564:	2340      	movs	r3, #64	@ 0x40
 8007566:	2101      	movs	r1, #1
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f001 fd71 	bl	8009050 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	4613      	mov	r3, r2
 8007584:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10a      	bne.n	80075a2 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800758c:	4817      	ldr	r0, [pc, #92]	@ (80075ec <USBD_Init+0x74>)
 800758e:	f001 fed5 	bl	800933c <iprintf>
 8007592:	4817      	ldr	r0, [pc, #92]	@ (80075f0 <USBD_Init+0x78>)
 8007594:	f001 fed2 	bl	800933c <iprintf>
 8007598:	200a      	movs	r0, #10
 800759a:	f001 fee1 	bl	8009360 <putchar>
#endif
    return USBD_FAIL;
 800759e:	2303      	movs	r3, #3
 80075a0:	e01f      	b.n	80075e2 <USBD_Init+0x6a>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d003      	beq.n	80075c8 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	79fa      	ldrb	r2, [r7, #7]
 80075d4:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f001 fbd0 	bl	8008d7c <USBD_LL_Init>
 80075dc:	4603      	mov	r3, r0
 80075de:	75fb      	strb	r3, [r7, #23]

  return ret;
 80075e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3718      	adds	r7, #24
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	0800a0a4 	.word	0x0800a0a4
 80075f0:	0800a0ac 	.word	0x0800a0ac

080075f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075fe:	2300      	movs	r3, #0
 8007600:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10a      	bne.n	800761e <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8007608:	4812      	ldr	r0, [pc, #72]	@ (8007654 <USBD_RegisterClass+0x60>)
 800760a:	f001 fe97 	bl	800933c <iprintf>
 800760e:	4812      	ldr	r0, [pc, #72]	@ (8007658 <USBD_RegisterClass+0x64>)
 8007610:	f001 fe94 	bl	800933c <iprintf>
 8007614:	200a      	movs	r0, #10
 8007616:	f001 fea3 	bl	8009360 <putchar>
#endif
    return USBD_FAIL;
 800761a:	2303      	movs	r3, #3
 800761c:	e016      	b.n	800764c <USBD_RegisterClass+0x58>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	683a      	ldr	r2, [r7, #0]
 8007622:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800762c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00b      	beq.n	800764a <USBD_RegisterClass+0x56>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800763a:	f107 020e 	add.w	r2, r7, #14
 800763e:	4610      	mov	r0, r2
 8007640:	4798      	blx	r3
 8007642:	4602      	mov	r2, r0
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	0800a0a4 	.word	0x0800a0a4
 8007658:	0800a0c4 	.word	0x0800a0c4

0800765c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 fbe9 	bl	8008e3c <USBD_LL_Start>
 800766a:	4603      	mov	r3, r0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b084      	sub	sp, #16
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	460b      	mov	r3, r1
 8007694:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007696:	2303      	movs	r3, #3
 8007698:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d009      	beq.n	80076b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	78fa      	ldrb	r2, [r7, #3]
 80076ae:	4611      	mov	r1, r2
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	4798      	blx	r3
 80076b4:	4603      	mov	r3, r0
 80076b6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80076b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b082      	sub	sp, #8
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
 80076ca:	460b      	mov	r3, r1
 80076cc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d007      	beq.n	80076e8 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	78fa      	ldrb	r2, [r7, #3]
 80076e2:	4611      	mov	r1, r2
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	4798      	blx	r3
  }

  return USBD_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b084      	sub	sp, #16
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
 80076fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	4618      	mov	r0, r3
 8007706:	f000 ff47 	bl	8008598 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007718:	461a      	mov	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007726:	f003 031f 	and.w	r3, r3, #31
 800772a:	2b02      	cmp	r3, #2
 800772c:	d01a      	beq.n	8007764 <USBD_LL_SetupStage+0x72>
 800772e:	2b02      	cmp	r3, #2
 8007730:	d822      	bhi.n	8007778 <USBD_LL_SetupStage+0x86>
 8007732:	2b00      	cmp	r3, #0
 8007734:	d002      	beq.n	800773c <USBD_LL_SetupStage+0x4a>
 8007736:	2b01      	cmp	r3, #1
 8007738:	d00a      	beq.n	8007750 <USBD_LL_SetupStage+0x5e>
 800773a:	e01d      	b.n	8007778 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007742:	4619      	mov	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f9ef 	bl	8007b28 <USBD_StdDevReq>
 800774a:	4603      	mov	r3, r0
 800774c:	73fb      	strb	r3, [r7, #15]
      break;
 800774e:	e020      	b.n	8007792 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007756:	4619      	mov	r1, r3
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fa53 	bl	8007c04 <USBD_StdItfReq>
 800775e:	4603      	mov	r3, r0
 8007760:	73fb      	strb	r3, [r7, #15]
      break;
 8007762:	e016      	b.n	8007792 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800776a:	4619      	mov	r1, r3
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fa92 	bl	8007c96 <USBD_StdEPReq>
 8007772:	4603      	mov	r3, r0
 8007774:	73fb      	strb	r3, [r7, #15]
      break;
 8007776:	e00c      	b.n	8007792 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800777e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007782:	b2db      	uxtb	r3, r3
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f001 fbb8 	bl	8008efc <USBD_LL_StallEP>
 800778c:	4603      	mov	r3, r0
 800778e:	73fb      	strb	r3, [r7, #15]
      break;
 8007790:	bf00      	nop
  }

  return ret;
 8007792:	7bfb      	ldrb	r3, [r7, #15]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	460b      	mov	r3, r1
 80077a6:	607a      	str	r2, [r7, #4]
 80077a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80077aa:	7afb      	ldrb	r3, [r7, #11]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d138      	bne.n	8007822 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80077b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d14a      	bne.n	8007858 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	689a      	ldr	r2, [r3, #8]
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d913      	bls.n	80077f6 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	689a      	ldr	r2, [r3, #8]
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	1ad2      	subs	r2, r2, r3
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	68da      	ldr	r2, [r3, #12]
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	4293      	cmp	r3, r2
 80077e6:	bf28      	it	cs
 80077e8:	4613      	movcs	r3, r2
 80077ea:	461a      	mov	r2, r3
 80077ec:	6879      	ldr	r1, [r7, #4]
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f000 ffc6 	bl	8008780 <USBD_CtlContinueRx>
 80077f4:	e030      	b.n	8007858 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b03      	cmp	r3, #3
 8007800:	d10b      	bne.n	800781a <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d005      	beq.n	800781a <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f000 ffc1 	bl	80087a2 <USBD_CtlSendStatus>
 8007820:	e01a      	b.n	8007858 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007828:	b2db      	uxtb	r3, r3
 800782a:	2b03      	cmp	r3, #3
 800782c:	d114      	bne.n	8007858 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00e      	beq.n	8007858 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	7afa      	ldrb	r2, [r7, #11]
 8007844:	4611      	mov	r1, r2
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	4798      	blx	r3
 800784a:	4603      	mov	r3, r0
 800784c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800784e:	7dfb      	ldrb	r3, [r7, #23]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007854:	7dfb      	ldrb	r3, [r7, #23]
 8007856:	e000      	b.n	800785a <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3718      	adds	r7, #24
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b086      	sub	sp, #24
 8007866:	af00      	add	r7, sp, #0
 8007868:	60f8      	str	r0, [r7, #12]
 800786a:	460b      	mov	r3, r1
 800786c:	607a      	str	r2, [r7, #4]
 800786e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007870:	7afb      	ldrb	r3, [r7, #11]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d16b      	bne.n	800794e <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	3314      	adds	r3, #20
 800787a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007882:	2b02      	cmp	r3, #2
 8007884:	d156      	bne.n	8007934 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	689a      	ldr	r2, [r3, #8]
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	429a      	cmp	r2, r3
 8007890:	d914      	bls.n	80078bc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	689a      	ldr	r2, [r3, #8]
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	1ad2      	subs	r2, r2, r3
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	461a      	mov	r2, r3
 80078a6:	6879      	ldr	r1, [r7, #4]
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f000 ff3b 	bl	8008724 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078ae:	2300      	movs	r3, #0
 80078b0:	2200      	movs	r2, #0
 80078b2:	2100      	movs	r1, #0
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f001 fbcb 	bl	8009050 <USBD_LL_PrepareReceive>
 80078ba:	e03b      	b.n	8007934 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	68da      	ldr	r2, [r3, #12]
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d11c      	bne.n	8007902 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d316      	bcc.n	8007902 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80078de:	429a      	cmp	r2, r3
 80078e0:	d20f      	bcs.n	8007902 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80078e2:	2200      	movs	r2, #0
 80078e4:	2100      	movs	r1, #0
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f000 ff1c 	bl	8008724 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078f4:	2300      	movs	r3, #0
 80078f6:	2200      	movs	r2, #0
 80078f8:	2100      	movs	r1, #0
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f001 fba8 	bl	8009050 <USBD_LL_PrepareReceive>
 8007900:	e018      	b.n	8007934 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b03      	cmp	r3, #3
 800790c:	d10b      	bne.n	8007926 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d005      	beq.n	8007926 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007926:	2180      	movs	r1, #128	@ 0x80
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f001 fae7 	bl	8008efc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	f000 ff4a 	bl	80087c8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800793a:	2b01      	cmp	r3, #1
 800793c:	d122      	bne.n	8007984 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f7ff fe98 	bl	8007674 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800794c:	e01a      	b.n	8007984 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b03      	cmp	r3, #3
 8007958:	d114      	bne.n	8007984 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00e      	beq.n	8007984 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	7afa      	ldrb	r2, [r7, #11]
 8007970:	4611      	mov	r1, r2
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	4798      	blx	r3
 8007976:	4603      	mov	r3, r0
 8007978:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800797a:	7dfb      	ldrb	r3, [r7, #23]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007980:	7dfb      	ldrb	r3, [r7, #23]
 8007982:	e000      	b.n	8007986 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3718      	adds	r7, #24
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b082      	sub	sp, #8
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d101      	bne.n	80079c2 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80079be:	2303      	movs	r3, #3
 80079c0:	e02f      	b.n	8007a22 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00f      	beq.n	80079ec <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d009      	beq.n	80079ec <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	6852      	ldr	r2, [r2, #4]
 80079e4:	b2d2      	uxtb	r2, r2
 80079e6:	4611      	mov	r1, r2
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079ec:	2340      	movs	r3, #64	@ 0x40
 80079ee:	2200      	movs	r2, #0
 80079f0:	2100      	movs	r1, #0
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f001 fa3d 	bl	8008e72 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2240      	movs	r2, #64	@ 0x40
 8007a04:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a08:	2340      	movs	r3, #64	@ 0x40
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	2180      	movs	r1, #128	@ 0x80
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f001 fa2f 	bl	8008e72 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2240      	movs	r2, #64	@ 0x40
 8007a1e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b083      	sub	sp, #12
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	460b      	mov	r3, r1
 8007a34:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	78fa      	ldrb	r2, [r7, #3]
 8007a3a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	370c      	adds	r7, #12
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b083      	sub	sp, #12
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a58:	b2da      	uxtb	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2204      	movs	r2, #4
 8007a64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	370c      	adds	r7, #12
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b083      	sub	sp, #12
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b04      	cmp	r3, #4
 8007a88:	d106      	bne.n	8007a98 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007a90:	b2da      	uxtb	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b082      	sub	sp, #8
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d101      	bne.n	8007abc <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e012      	b.n	8007ae2 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	2b03      	cmp	r3, #3
 8007ac6:	d10b      	bne.n	8007ae0 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d005      	beq.n	8007ae0 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ada:	69db      	ldr	r3, [r3, #28]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b087      	sub	sp, #28
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	3301      	adds	r3, #1
 8007b00:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007b08:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007b0c:	021b      	lsls	r3, r3, #8
 8007b0e:	b21a      	sxth	r2, r3
 8007b10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	b21b      	sxth	r3, r3
 8007b18:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007b1a:	89fb      	ldrh	r3, [r7, #14]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	371c      	adds	r7, #28
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b32:	2300      	movs	r3, #0
 8007b34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b3e:	2b40      	cmp	r3, #64	@ 0x40
 8007b40:	d005      	beq.n	8007b4e <USBD_StdDevReq+0x26>
 8007b42:	2b40      	cmp	r3, #64	@ 0x40
 8007b44:	d853      	bhi.n	8007bee <USBD_StdDevReq+0xc6>
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00b      	beq.n	8007b62 <USBD_StdDevReq+0x3a>
 8007b4a:	2b20      	cmp	r3, #32
 8007b4c:	d14f      	bne.n	8007bee <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	4798      	blx	r3
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b60:	e04a      	b.n	8007bf8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	785b      	ldrb	r3, [r3, #1]
 8007b66:	2b09      	cmp	r3, #9
 8007b68:	d83b      	bhi.n	8007be2 <USBD_StdDevReq+0xba>
 8007b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b70 <USBD_StdDevReq+0x48>)
 8007b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b70:	08007bc5 	.word	0x08007bc5
 8007b74:	08007bd9 	.word	0x08007bd9
 8007b78:	08007be3 	.word	0x08007be3
 8007b7c:	08007bcf 	.word	0x08007bcf
 8007b80:	08007be3 	.word	0x08007be3
 8007b84:	08007ba3 	.word	0x08007ba3
 8007b88:	08007b99 	.word	0x08007b99
 8007b8c:	08007be3 	.word	0x08007be3
 8007b90:	08007bbb 	.word	0x08007bbb
 8007b94:	08007bad 	.word	0x08007bad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b98:	6839      	ldr	r1, [r7, #0]
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f9de 	bl	8007f5c <USBD_GetDescriptor>
          break;
 8007ba0:	e024      	b.n	8007bec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007ba2:	6839      	ldr	r1, [r7, #0]
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 fb6d 	bl	8008284 <USBD_SetAddress>
          break;
 8007baa:	e01f      	b.n	8007bec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fbac 	bl	800830c <USBD_SetConfig>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	73fb      	strb	r3, [r7, #15]
          break;
 8007bb8:	e018      	b.n	8007bec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fc4b 	bl	8008458 <USBD_GetConfig>
          break;
 8007bc2:	e013      	b.n	8007bec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fc7c 	bl	80084c4 <USBD_GetStatus>
          break;
 8007bcc:	e00e      	b.n	8007bec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007bce:	6839      	ldr	r1, [r7, #0]
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fcab 	bl	800852c <USBD_SetFeature>
          break;
 8007bd6:	e009      	b.n	8007bec <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007bd8:	6839      	ldr	r1, [r7, #0]
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fcba 	bl	8008554 <USBD_ClrFeature>
          break;
 8007be0:	e004      	b.n	8007bec <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007be2:	6839      	ldr	r1, [r7, #0]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 fd11 	bl	800860c <USBD_CtlError>
          break;
 8007bea:	bf00      	nop
      }
      break;
 8007bec:	e004      	b.n	8007bf8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fd0b 	bl	800860c <USBD_CtlError>
      break;
 8007bf6:	bf00      	nop
  }

  return ret;
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop

08007c04 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c1a:	2b40      	cmp	r3, #64	@ 0x40
 8007c1c:	d005      	beq.n	8007c2a <USBD_StdItfReq+0x26>
 8007c1e:	2b40      	cmp	r3, #64	@ 0x40
 8007c20:	d82f      	bhi.n	8007c82 <USBD_StdItfReq+0x7e>
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d001      	beq.n	8007c2a <USBD_StdItfReq+0x26>
 8007c26:	2b20      	cmp	r3, #32
 8007c28:	d12b      	bne.n	8007c82 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	3b01      	subs	r3, #1
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d81d      	bhi.n	8007c74 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	889b      	ldrh	r3, [r3, #4]
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d813      	bhi.n	8007c6a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	6839      	ldr	r1, [r7, #0]
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	4798      	blx	r3
 8007c50:	4603      	mov	r3, r0
 8007c52:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	88db      	ldrh	r3, [r3, #6]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d110      	bne.n	8007c7e <USBD_StdItfReq+0x7a>
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10d      	bne.n	8007c7e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fd9d 	bl	80087a2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c68:	e009      	b.n	8007c7e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007c6a:	6839      	ldr	r1, [r7, #0]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fccd 	bl	800860c <USBD_CtlError>
          break;
 8007c72:	e004      	b.n	8007c7e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fcc8 	bl	800860c <USBD_CtlError>
          break;
 8007c7c:	e000      	b.n	8007c80 <USBD_StdItfReq+0x7c>
          break;
 8007c7e:	bf00      	nop
      }
      break;
 8007c80:	e004      	b.n	8007c8c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007c82:	6839      	ldr	r1, [r7, #0]
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fcc1 	bl	800860c <USBD_CtlError>
      break;
 8007c8a:	bf00      	nop
  }

  return ret;
 8007c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b084      	sub	sp, #16
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
 8007c9e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	889b      	ldrh	r3, [r3, #4]
 8007ca8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007cb2:	2b40      	cmp	r3, #64	@ 0x40
 8007cb4:	d007      	beq.n	8007cc6 <USBD_StdEPReq+0x30>
 8007cb6:	2b40      	cmp	r3, #64	@ 0x40
 8007cb8:	f200 8145 	bhi.w	8007f46 <USBD_StdEPReq+0x2b0>
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00c      	beq.n	8007cda <USBD_StdEPReq+0x44>
 8007cc0:	2b20      	cmp	r3, #32
 8007cc2:	f040 8140 	bne.w	8007f46 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	6839      	ldr	r1, [r7, #0]
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	4798      	blx	r3
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd8:	e13a      	b.n	8007f50 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	785b      	ldrb	r3, [r3, #1]
 8007cde:	2b03      	cmp	r3, #3
 8007ce0:	d007      	beq.n	8007cf2 <USBD_StdEPReq+0x5c>
 8007ce2:	2b03      	cmp	r3, #3
 8007ce4:	f300 8129 	bgt.w	8007f3a <USBD_StdEPReq+0x2a4>
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d07f      	beq.n	8007dec <USBD_StdEPReq+0x156>
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d03c      	beq.n	8007d6a <USBD_StdEPReq+0xd4>
 8007cf0:	e123      	b.n	8007f3a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d002      	beq.n	8007d04 <USBD_StdEPReq+0x6e>
 8007cfe:	2b03      	cmp	r3, #3
 8007d00:	d016      	beq.n	8007d30 <USBD_StdEPReq+0x9a>
 8007d02:	e02c      	b.n	8007d5e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d04:	7bbb      	ldrb	r3, [r7, #14]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00d      	beq.n	8007d26 <USBD_StdEPReq+0x90>
 8007d0a:	7bbb      	ldrb	r3, [r7, #14]
 8007d0c:	2b80      	cmp	r3, #128	@ 0x80
 8007d0e:	d00a      	beq.n	8007d26 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d10:	7bbb      	ldrb	r3, [r7, #14]
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f001 f8f1 	bl	8008efc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d1a:	2180      	movs	r1, #128	@ 0x80
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f001 f8ed 	bl	8008efc <USBD_LL_StallEP>
 8007d22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d24:	e020      	b.n	8007d68 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007d26:	6839      	ldr	r1, [r7, #0]
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fc6f 	bl	800860c <USBD_CtlError>
              break;
 8007d2e:	e01b      	b.n	8007d68 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	885b      	ldrh	r3, [r3, #2]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d10e      	bne.n	8007d56 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007d38:	7bbb      	ldrb	r3, [r7, #14]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00b      	beq.n	8007d56 <USBD_StdEPReq+0xc0>
 8007d3e:	7bbb      	ldrb	r3, [r7, #14]
 8007d40:	2b80      	cmp	r3, #128	@ 0x80
 8007d42:	d008      	beq.n	8007d56 <USBD_StdEPReq+0xc0>
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	88db      	ldrh	r3, [r3, #6]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d104      	bne.n	8007d56 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d4c:	7bbb      	ldrb	r3, [r7, #14]
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f001 f8d3 	bl	8008efc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fd23 	bl	80087a2 <USBD_CtlSendStatus>

              break;
 8007d5c:	e004      	b.n	8007d68 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fc53 	bl	800860c <USBD_CtlError>
              break;
 8007d66:	bf00      	nop
          }
          break;
 8007d68:	e0ec      	b.n	8007f44 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d002      	beq.n	8007d7c <USBD_StdEPReq+0xe6>
 8007d76:	2b03      	cmp	r3, #3
 8007d78:	d016      	beq.n	8007da8 <USBD_StdEPReq+0x112>
 8007d7a:	e030      	b.n	8007dde <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d7c:	7bbb      	ldrb	r3, [r7, #14]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00d      	beq.n	8007d9e <USBD_StdEPReq+0x108>
 8007d82:	7bbb      	ldrb	r3, [r7, #14]
 8007d84:	2b80      	cmp	r3, #128	@ 0x80
 8007d86:	d00a      	beq.n	8007d9e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d88:	7bbb      	ldrb	r3, [r7, #14]
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f001 f8b5 	bl	8008efc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d92:	2180      	movs	r1, #128	@ 0x80
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f001 f8b1 	bl	8008efc <USBD_LL_StallEP>
 8007d9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d9c:	e025      	b.n	8007dea <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007d9e:	6839      	ldr	r1, [r7, #0]
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fc33 	bl	800860c <USBD_CtlError>
              break;
 8007da6:	e020      	b.n	8007dea <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	885b      	ldrh	r3, [r3, #2]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d11b      	bne.n	8007de8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007db0:	7bbb      	ldrb	r3, [r7, #14]
 8007db2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d004      	beq.n	8007dc4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007dba:	7bbb      	ldrb	r3, [r7, #14]
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f001 f8bb 	bl	8008f3a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fcec 	bl	80087a2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	6839      	ldr	r1, [r7, #0]
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	4798      	blx	r3
 8007dd8:	4603      	mov	r3, r0
 8007dda:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007ddc:	e004      	b.n	8007de8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007dde:	6839      	ldr	r1, [r7, #0]
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 fc13 	bl	800860c <USBD_CtlError>
              break;
 8007de6:	e000      	b.n	8007dea <USBD_StdEPReq+0x154>
              break;
 8007de8:	bf00      	nop
          }
          break;
 8007dea:	e0ab      	b.n	8007f44 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d002      	beq.n	8007dfe <USBD_StdEPReq+0x168>
 8007df8:	2b03      	cmp	r3, #3
 8007dfa:	d032      	beq.n	8007e62 <USBD_StdEPReq+0x1cc>
 8007dfc:	e097      	b.n	8007f2e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007dfe:	7bbb      	ldrb	r3, [r7, #14]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d007      	beq.n	8007e14 <USBD_StdEPReq+0x17e>
 8007e04:	7bbb      	ldrb	r3, [r7, #14]
 8007e06:	2b80      	cmp	r3, #128	@ 0x80
 8007e08:	d004      	beq.n	8007e14 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007e0a:	6839      	ldr	r1, [r7, #0]
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fbfd 	bl	800860c <USBD_CtlError>
                break;
 8007e12:	e091      	b.n	8007f38 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	da0b      	bge.n	8007e34 <USBD_StdEPReq+0x19e>
 8007e1c:	7bbb      	ldrb	r3, [r7, #14]
 8007e1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e22:	4613      	mov	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	3310      	adds	r3, #16
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	4413      	add	r3, r2
 8007e30:	3304      	adds	r3, #4
 8007e32:	e00b      	b.n	8007e4c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e34:	7bbb      	ldrb	r3, [r7, #14]
 8007e36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4413      	add	r3, r2
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	4413      	add	r3, r2
 8007e4a:	3304      	adds	r3, #4
 8007e4c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	2200      	movs	r2, #0
 8007e52:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	2202      	movs	r2, #2
 8007e58:	4619      	mov	r1, r3
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fc47 	bl	80086ee <USBD_CtlSendData>
              break;
 8007e60:	e06a      	b.n	8007f38 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007e62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	da11      	bge.n	8007e8e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007e6a:	7bbb      	ldrb	r3, [r7, #14]
 8007e6c:	f003 020f 	and.w	r2, r3, #15
 8007e70:	6879      	ldr	r1, [r7, #4]
 8007e72:	4613      	mov	r3, r2
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	4413      	add	r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	440b      	add	r3, r1
 8007e7c:	3324      	adds	r3, #36	@ 0x24
 8007e7e:	881b      	ldrh	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d117      	bne.n	8007eb4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fbc0 	bl	800860c <USBD_CtlError>
                  break;
 8007e8c:	e054      	b.n	8007f38 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e8e:	7bbb      	ldrb	r3, [r7, #14]
 8007e90:	f003 020f 	and.w	r2, r3, #15
 8007e94:	6879      	ldr	r1, [r7, #4]
 8007e96:	4613      	mov	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	4413      	add	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	440b      	add	r3, r1
 8007ea0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007ea4:	881b      	ldrh	r3, [r3, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d104      	bne.n	8007eb4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007eaa:	6839      	ldr	r1, [r7, #0]
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 fbad 	bl	800860c <USBD_CtlError>
                  break;
 8007eb2:	e041      	b.n	8007f38 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007eb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	da0b      	bge.n	8007ed4 <USBD_StdEPReq+0x23e>
 8007ebc:	7bbb      	ldrb	r3, [r7, #14]
 8007ebe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4413      	add	r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	3310      	adds	r3, #16
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	4413      	add	r3, r2
 8007ed0:	3304      	adds	r3, #4
 8007ed2:	e00b      	b.n	8007eec <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ed4:	7bbb      	ldrb	r3, [r7, #14]
 8007ed6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007eda:	4613      	mov	r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	4413      	add	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	4413      	add	r3, r2
 8007eea:	3304      	adds	r3, #4
 8007eec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007eee:	7bbb      	ldrb	r3, [r7, #14]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d002      	beq.n	8007efa <USBD_StdEPReq+0x264>
 8007ef4:	7bbb      	ldrb	r3, [r7, #14]
 8007ef6:	2b80      	cmp	r3, #128	@ 0x80
 8007ef8:	d103      	bne.n	8007f02 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	2200      	movs	r2, #0
 8007efe:	601a      	str	r2, [r3, #0]
 8007f00:	e00e      	b.n	8007f20 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007f02:	7bbb      	ldrb	r3, [r7, #14]
 8007f04:	4619      	mov	r1, r3
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f001 f836 	bl	8008f78 <USBD_LL_IsStallEP>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d003      	beq.n	8007f1a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	2201      	movs	r2, #1
 8007f16:	601a      	str	r2, [r3, #0]
 8007f18:	e002      	b.n	8007f20 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	2202      	movs	r2, #2
 8007f24:	4619      	mov	r1, r3
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fbe1 	bl	80086ee <USBD_CtlSendData>
              break;
 8007f2c:	e004      	b.n	8007f38 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007f2e:	6839      	ldr	r1, [r7, #0]
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fb6b 	bl	800860c <USBD_CtlError>
              break;
 8007f36:	bf00      	nop
          }
          break;
 8007f38:	e004      	b.n	8007f44 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fb65 	bl	800860c <USBD_CtlError>
          break;
 8007f42:	bf00      	nop
      }
      break;
 8007f44:	e004      	b.n	8007f50 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fb5f 	bl	800860c <USBD_CtlError>
      break;
 8007f4e:	bf00      	nop
  }

  return ret;
 8007f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
	...

08007f5c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f66:	2300      	movs	r3, #0
 8007f68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	885b      	ldrh	r3, [r3, #2]
 8007f76:	0a1b      	lsrs	r3, r3, #8
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	2b0e      	cmp	r3, #14
 8007f7e:	f200 8152 	bhi.w	8008226 <USBD_GetDescriptor+0x2ca>
 8007f82:	a201      	add	r2, pc, #4	@ (adr r2, 8007f88 <USBD_GetDescriptor+0x2c>)
 8007f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f88:	08007ff9 	.word	0x08007ff9
 8007f8c:	08008011 	.word	0x08008011
 8007f90:	08008051 	.word	0x08008051
 8007f94:	08008227 	.word	0x08008227
 8007f98:	08008227 	.word	0x08008227
 8007f9c:	080081c7 	.word	0x080081c7
 8007fa0:	080081f3 	.word	0x080081f3
 8007fa4:	08008227 	.word	0x08008227
 8007fa8:	08008227 	.word	0x08008227
 8007fac:	08008227 	.word	0x08008227
 8007fb0:	08008227 	.word	0x08008227
 8007fb4:	08008227 	.word	0x08008227
 8007fb8:	08008227 	.word	0x08008227
 8007fbc:	08008227 	.word	0x08008227
 8007fc0:	08007fc5 	.word	0x08007fc5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fca:	69db      	ldr	r3, [r3, #28]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00b      	beq.n	8007fe8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fd6:	69db      	ldr	r3, [r3, #28]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	7c12      	ldrb	r2, [r2, #16]
 8007fdc:	f107 0108 	add.w	r1, r7, #8
 8007fe0:	4610      	mov	r0, r2
 8007fe2:	4798      	blx	r3
 8007fe4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fe6:	e126      	b.n	8008236 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fb0e 	bl	800860c <USBD_CtlError>
        err++;
 8007ff0:	7afb      	ldrb	r3, [r7, #11]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	72fb      	strb	r3, [r7, #11]
      break;
 8007ff6:	e11e      	b.n	8008236 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	7c12      	ldrb	r2, [r2, #16]
 8008004:	f107 0108 	add.w	r1, r7, #8
 8008008:	4610      	mov	r0, r2
 800800a:	4798      	blx	r3
 800800c:	60f8      	str	r0, [r7, #12]
      break;
 800800e:	e112      	b.n	8008236 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	7c1b      	ldrb	r3, [r3, #16]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d10d      	bne.n	8008034 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800801e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008020:	f107 0208 	add.w	r2, r7, #8
 8008024:	4610      	mov	r0, r2
 8008026:	4798      	blx	r3
 8008028:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	3301      	adds	r3, #1
 800802e:	2202      	movs	r2, #2
 8008030:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008032:	e100      	b.n	8008236 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800803a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800803c:	f107 0208 	add.w	r2, r7, #8
 8008040:	4610      	mov	r0, r2
 8008042:	4798      	blx	r3
 8008044:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	3301      	adds	r3, #1
 800804a:	2202      	movs	r2, #2
 800804c:	701a      	strb	r2, [r3, #0]
      break;
 800804e:	e0f2      	b.n	8008236 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	885b      	ldrh	r3, [r3, #2]
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b05      	cmp	r3, #5
 8008058:	f200 80ac 	bhi.w	80081b4 <USBD_GetDescriptor+0x258>
 800805c:	a201      	add	r2, pc, #4	@ (adr r2, 8008064 <USBD_GetDescriptor+0x108>)
 800805e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008062:	bf00      	nop
 8008064:	0800807d 	.word	0x0800807d
 8008068:	080080b1 	.word	0x080080b1
 800806c:	080080e5 	.word	0x080080e5
 8008070:	08008119 	.word	0x08008119
 8008074:	0800814d 	.word	0x0800814d
 8008078:	08008181 	.word	0x08008181
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00b      	beq.n	80080a0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	7c12      	ldrb	r2, [r2, #16]
 8008094:	f107 0108 	add.w	r1, r7, #8
 8008098:	4610      	mov	r0, r2
 800809a:	4798      	blx	r3
 800809c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800809e:	e091      	b.n	80081c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80080a0:	6839      	ldr	r1, [r7, #0]
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fab2 	bl	800860c <USBD_CtlError>
            err++;
 80080a8:	7afb      	ldrb	r3, [r7, #11]
 80080aa:	3301      	adds	r3, #1
 80080ac:	72fb      	strb	r3, [r7, #11]
          break;
 80080ae:	e089      	b.n	80081c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00b      	beq.n	80080d4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	7c12      	ldrb	r2, [r2, #16]
 80080c8:	f107 0108 	add.w	r1, r7, #8
 80080cc:	4610      	mov	r0, r2
 80080ce:	4798      	blx	r3
 80080d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080d2:	e077      	b.n	80081c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80080d4:	6839      	ldr	r1, [r7, #0]
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fa98 	bl	800860c <USBD_CtlError>
            err++;
 80080dc:	7afb      	ldrb	r3, [r7, #11]
 80080de:	3301      	adds	r3, #1
 80080e0:	72fb      	strb	r3, [r7, #11]
          break;
 80080e2:	e06f      	b.n	80081c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00b      	beq.n	8008108 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	7c12      	ldrb	r2, [r2, #16]
 80080fc:	f107 0108 	add.w	r1, r7, #8
 8008100:	4610      	mov	r0, r2
 8008102:	4798      	blx	r3
 8008104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008106:	e05d      	b.n	80081c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008108:	6839      	ldr	r1, [r7, #0]
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fa7e 	bl	800860c <USBD_CtlError>
            err++;
 8008110:	7afb      	ldrb	r3, [r7, #11]
 8008112:	3301      	adds	r3, #1
 8008114:	72fb      	strb	r3, [r7, #11]
          break;
 8008116:	e055      	b.n	80081c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00b      	beq.n	800813c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	7c12      	ldrb	r2, [r2, #16]
 8008130:	f107 0108 	add.w	r1, r7, #8
 8008134:	4610      	mov	r0, r2
 8008136:	4798      	blx	r3
 8008138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800813a:	e043      	b.n	80081c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fa64 	bl	800860c <USBD_CtlError>
            err++;
 8008144:	7afb      	ldrb	r3, [r7, #11]
 8008146:	3301      	adds	r3, #1
 8008148:	72fb      	strb	r3, [r7, #11]
          break;
 800814a:	e03b      	b.n	80081c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008152:	695b      	ldr	r3, [r3, #20]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00b      	beq.n	8008170 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800815e:	695b      	ldr	r3, [r3, #20]
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	7c12      	ldrb	r2, [r2, #16]
 8008164:	f107 0108 	add.w	r1, r7, #8
 8008168:	4610      	mov	r0, r2
 800816a:	4798      	blx	r3
 800816c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800816e:	e029      	b.n	80081c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fa4a 	bl	800860c <USBD_CtlError>
            err++;
 8008178:	7afb      	ldrb	r3, [r7, #11]
 800817a:	3301      	adds	r3, #1
 800817c:	72fb      	strb	r3, [r7, #11]
          break;
 800817e:	e021      	b.n	80081c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00b      	beq.n	80081a4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	7c12      	ldrb	r2, [r2, #16]
 8008198:	f107 0108 	add.w	r1, r7, #8
 800819c:	4610      	mov	r0, r2
 800819e:	4798      	blx	r3
 80081a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081a2:	e00f      	b.n	80081c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80081a4:	6839      	ldr	r1, [r7, #0]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fa30 	bl	800860c <USBD_CtlError>
            err++;
 80081ac:	7afb      	ldrb	r3, [r7, #11]
 80081ae:	3301      	adds	r3, #1
 80081b0:	72fb      	strb	r3, [r7, #11]
          break;
 80081b2:	e007      	b.n	80081c4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fa28 	bl	800860c <USBD_CtlError>
          err++;
 80081bc:	7afb      	ldrb	r3, [r7, #11]
 80081be:	3301      	adds	r3, #1
 80081c0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80081c2:	bf00      	nop
      }
      break;
 80081c4:	e037      	b.n	8008236 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	7c1b      	ldrb	r3, [r3, #16]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d109      	bne.n	80081e2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081d6:	f107 0208 	add.w	r2, r7, #8
 80081da:	4610      	mov	r0, r2
 80081dc:	4798      	blx	r3
 80081de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081e0:	e029      	b.n	8008236 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80081e2:	6839      	ldr	r1, [r7, #0]
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fa11 	bl	800860c <USBD_CtlError>
        err++;
 80081ea:	7afb      	ldrb	r3, [r7, #11]
 80081ec:	3301      	adds	r3, #1
 80081ee:	72fb      	strb	r3, [r7, #11]
      break;
 80081f0:	e021      	b.n	8008236 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	7c1b      	ldrb	r3, [r3, #16]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10d      	bne.n	8008216 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008202:	f107 0208 	add.w	r2, r7, #8
 8008206:	4610      	mov	r0, r2
 8008208:	4798      	blx	r3
 800820a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	3301      	adds	r3, #1
 8008210:	2207      	movs	r2, #7
 8008212:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008214:	e00f      	b.n	8008236 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 f9f7 	bl	800860c <USBD_CtlError>
        err++;
 800821e:	7afb      	ldrb	r3, [r7, #11]
 8008220:	3301      	adds	r3, #1
 8008222:	72fb      	strb	r3, [r7, #11]
      break;
 8008224:	e007      	b.n	8008236 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008226:	6839      	ldr	r1, [r7, #0]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 f9ef 	bl	800860c <USBD_CtlError>
      err++;
 800822e:	7afb      	ldrb	r3, [r7, #11]
 8008230:	3301      	adds	r3, #1
 8008232:	72fb      	strb	r3, [r7, #11]
      break;
 8008234:	bf00      	nop
  }

  if (err != 0U)
 8008236:	7afb      	ldrb	r3, [r7, #11]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d11e      	bne.n	800827a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	88db      	ldrh	r3, [r3, #6]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d016      	beq.n	8008272 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008244:	893b      	ldrh	r3, [r7, #8]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00e      	beq.n	8008268 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	88da      	ldrh	r2, [r3, #6]
 800824e:	893b      	ldrh	r3, [r7, #8]
 8008250:	4293      	cmp	r3, r2
 8008252:	bf28      	it	cs
 8008254:	4613      	movcs	r3, r2
 8008256:	b29b      	uxth	r3, r3
 8008258:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800825a:	893b      	ldrh	r3, [r7, #8]
 800825c:	461a      	mov	r2, r3
 800825e:	68f9      	ldr	r1, [r7, #12]
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fa44 	bl	80086ee <USBD_CtlSendData>
 8008266:	e009      	b.n	800827c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008268:	6839      	ldr	r1, [r7, #0]
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f9ce 	bl	800860c <USBD_CtlError>
 8008270:	e004      	b.n	800827c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fa95 	bl	80087a2 <USBD_CtlSendStatus>
 8008278:	e000      	b.n	800827c <USBD_GetDescriptor+0x320>
    return;
 800827a:	bf00      	nop
  }
}
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop

08008284 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	889b      	ldrh	r3, [r3, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d131      	bne.n	80082fa <USBD_SetAddress+0x76>
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	88db      	ldrh	r3, [r3, #6]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d12d      	bne.n	80082fa <USBD_SetAddress+0x76>
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	885b      	ldrh	r3, [r3, #2]
 80082a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80082a4:	d829      	bhi.n	80082fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	885b      	ldrh	r3, [r3, #2]
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d104      	bne.n	80082c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f9a3 	bl	800860c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082c6:	e01d      	b.n	8008304 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	7bfa      	ldrb	r2, [r7, #15]
 80082cc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
 80082d2:	4619      	mov	r1, r3
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 fe7b 	bl	8008fd0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 fa61 	bl	80087a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d004      	beq.n	80082f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2202      	movs	r2, #2
 80082ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082ee:	e009      	b.n	8008304 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082f8:	e004      	b.n	8008304 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f985 	bl	800860c <USBD_CtlError>
  }
}
 8008302:	bf00      	nop
 8008304:	bf00      	nop
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	885b      	ldrh	r3, [r3, #2]
 800831e:	b2da      	uxtb	r2, r3
 8008320:	4b4c      	ldr	r3, [pc, #304]	@ (8008454 <USBD_SetConfig+0x148>)
 8008322:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008324:	4b4b      	ldr	r3, [pc, #300]	@ (8008454 <USBD_SetConfig+0x148>)
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d905      	bls.n	8008338 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f96c 	bl	800860c <USBD_CtlError>
    return USBD_FAIL;
 8008334:	2303      	movs	r3, #3
 8008336:	e088      	b.n	800844a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800833e:	b2db      	uxtb	r3, r3
 8008340:	2b02      	cmp	r3, #2
 8008342:	d002      	beq.n	800834a <USBD_SetConfig+0x3e>
 8008344:	2b03      	cmp	r3, #3
 8008346:	d025      	beq.n	8008394 <USBD_SetConfig+0x88>
 8008348:	e071      	b.n	800842e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800834a:	4b42      	ldr	r3, [pc, #264]	@ (8008454 <USBD_SetConfig+0x148>)
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d01c      	beq.n	800838c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008352:	4b40      	ldr	r3, [pc, #256]	@ (8008454 <USBD_SetConfig+0x148>)
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	461a      	mov	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800835c:	4b3d      	ldr	r3, [pc, #244]	@ (8008454 <USBD_SetConfig+0x148>)
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	4619      	mov	r1, r3
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7ff f991 	bl	800768a <USBD_SetClassConfig>
 8008368:	4603      	mov	r3, r0
 800836a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800836c:	7bfb      	ldrb	r3, [r7, #15]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d004      	beq.n	800837c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008372:	6839      	ldr	r1, [r7, #0]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 f949 	bl	800860c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800837a:	e065      	b.n	8008448 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fa10 	bl	80087a2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2203      	movs	r2, #3
 8008386:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800838a:	e05d      	b.n	8008448 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fa08 	bl	80087a2 <USBD_CtlSendStatus>
      break;
 8008392:	e059      	b.n	8008448 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008394:	4b2f      	ldr	r3, [pc, #188]	@ (8008454 <USBD_SetConfig+0x148>)
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d112      	bne.n	80083c2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2202      	movs	r2, #2
 80083a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80083a4:	4b2b      	ldr	r3, [pc, #172]	@ (8008454 <USBD_SetConfig+0x148>)
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	461a      	mov	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80083ae:	4b29      	ldr	r3, [pc, #164]	@ (8008454 <USBD_SetConfig+0x148>)
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	4619      	mov	r1, r3
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f7ff f984 	bl	80076c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f9f1 	bl	80087a2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80083c0:	e042      	b.n	8008448 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80083c2:	4b24      	ldr	r3, [pc, #144]	@ (8008454 <USBD_SetConfig+0x148>)
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	461a      	mov	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d02a      	beq.n	8008426 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	4619      	mov	r1, r3
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f7ff f972 	bl	80076c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80083de:	4b1d      	ldr	r3, [pc, #116]	@ (8008454 <USBD_SetConfig+0x148>)
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	461a      	mov	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80083e8:	4b1a      	ldr	r3, [pc, #104]	@ (8008454 <USBD_SetConfig+0x148>)
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	4619      	mov	r1, r3
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7ff f94b 	bl	800768a <USBD_SetClassConfig>
 80083f4:	4603      	mov	r3, r0
 80083f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00f      	beq.n	800841e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80083fe:	6839      	ldr	r1, [r7, #0]
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 f903 	bl	800860c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	b2db      	uxtb	r3, r3
 800840c:	4619      	mov	r1, r3
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f7ff f957 	bl	80076c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2202      	movs	r2, #2
 8008418:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800841c:	e014      	b.n	8008448 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f9bf 	bl	80087a2 <USBD_CtlSendStatus>
      break;
 8008424:	e010      	b.n	8008448 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f9bb 	bl	80087a2 <USBD_CtlSendStatus>
      break;
 800842c:	e00c      	b.n	8008448 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800842e:	6839      	ldr	r1, [r7, #0]
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f8eb 	bl	800860c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008436:	4b07      	ldr	r3, [pc, #28]	@ (8008454 <USBD_SetConfig+0x148>)
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	4619      	mov	r1, r3
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f7ff f940 	bl	80076c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008442:	2303      	movs	r3, #3
 8008444:	73fb      	strb	r3, [r7, #15]
      break;
 8008446:	bf00      	nop
  }

  return ret;
 8008448:	7bfb      	ldrb	r3, [r7, #15]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	2000029c 	.word	0x2000029c

08008458 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	88db      	ldrh	r3, [r3, #6]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d004      	beq.n	8008474 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800846a:	6839      	ldr	r1, [r7, #0]
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 f8cd 	bl	800860c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008472:	e023      	b.n	80084bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b02      	cmp	r3, #2
 800847e:	dc02      	bgt.n	8008486 <USBD_GetConfig+0x2e>
 8008480:	2b00      	cmp	r3, #0
 8008482:	dc03      	bgt.n	800848c <USBD_GetConfig+0x34>
 8008484:	e015      	b.n	80084b2 <USBD_GetConfig+0x5a>
 8008486:	2b03      	cmp	r3, #3
 8008488:	d00b      	beq.n	80084a2 <USBD_GetConfig+0x4a>
 800848a:	e012      	b.n	80084b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	3308      	adds	r3, #8
 8008496:	2201      	movs	r2, #1
 8008498:	4619      	mov	r1, r3
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f927 	bl	80086ee <USBD_CtlSendData>
        break;
 80084a0:	e00c      	b.n	80084bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	3304      	adds	r3, #4
 80084a6:	2201      	movs	r2, #1
 80084a8:	4619      	mov	r1, r3
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f91f 	bl	80086ee <USBD_CtlSendData>
        break;
 80084b0:	e004      	b.n	80084bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80084b2:	6839      	ldr	r1, [r7, #0]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f8a9 	bl	800860c <USBD_CtlError>
        break;
 80084ba:	bf00      	nop
}
 80084bc:	bf00      	nop
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	3b01      	subs	r3, #1
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d81e      	bhi.n	800851a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	88db      	ldrh	r3, [r3, #6]
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d004      	beq.n	80084ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f890 	bl	800860c <USBD_CtlError>
        break;
 80084ec:	e01a      	b.n	8008524 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2201      	movs	r2, #1
 80084f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d005      	beq.n	800850a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	f043 0202 	orr.w	r2, r3, #2
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	330c      	adds	r3, #12
 800850e:	2202      	movs	r2, #2
 8008510:	4619      	mov	r1, r3
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f8eb 	bl	80086ee <USBD_CtlSendData>
      break;
 8008518:	e004      	b.n	8008524 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800851a:	6839      	ldr	r1, [r7, #0]
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 f875 	bl	800860c <USBD_CtlError>
      break;
 8008522:	bf00      	nop
  }
}
 8008524:	bf00      	nop
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	885b      	ldrh	r3, [r3, #2]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d106      	bne.n	800854c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2201      	movs	r2, #1
 8008542:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f92b 	bl	80087a2 <USBD_CtlSendStatus>
  }
}
 800854c:	bf00      	nop
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008564:	b2db      	uxtb	r3, r3
 8008566:	3b01      	subs	r3, #1
 8008568:	2b02      	cmp	r3, #2
 800856a:	d80b      	bhi.n	8008584 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	885b      	ldrh	r3, [r3, #2]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d10c      	bne.n	800858e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 f910 	bl	80087a2 <USBD_CtlSendStatus>
      }
      break;
 8008582:	e004      	b.n	800858e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008584:	6839      	ldr	r1, [r7, #0]
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f840 	bl	800860c <USBD_CtlError>
      break;
 800858c:	e000      	b.n	8008590 <USBD_ClrFeature+0x3c>
      break;
 800858e:	bf00      	nop
  }
}
 8008590:	bf00      	nop
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	781a      	ldrb	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	3301      	adds	r3, #1
 80085b2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	781a      	ldrb	r2, [r3, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	3301      	adds	r3, #1
 80085c0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f7ff fa91 	bl	8007aea <SWAPBYTE>
 80085c8:	4603      	mov	r3, r0
 80085ca:	461a      	mov	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	3301      	adds	r3, #1
 80085d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	3301      	adds	r3, #1
 80085da:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f7ff fa84 	bl	8007aea <SWAPBYTE>
 80085e2:	4603      	mov	r3, r0
 80085e4:	461a      	mov	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	3301      	adds	r3, #1
 80085ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	3301      	adds	r3, #1
 80085f4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f7ff fa77 	bl	8007aea <SWAPBYTE>
 80085fc:	4603      	mov	r3, r0
 80085fe:	461a      	mov	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	80da      	strh	r2, [r3, #6]
}
 8008604:	bf00      	nop
 8008606:	3710      	adds	r7, #16
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008616:	2180      	movs	r1, #128	@ 0x80
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fc6f 	bl	8008efc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800861e:	2100      	movs	r1, #0
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fc6b 	bl	8008efc <USBD_LL_StallEP>
}
 8008626:	bf00      	nop
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b086      	sub	sp, #24
 8008632:	af00      	add	r7, sp, #0
 8008634:	60f8      	str	r0, [r7, #12]
 8008636:	60b9      	str	r1, [r7, #8]
 8008638:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800863a:	2300      	movs	r3, #0
 800863c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d036      	beq.n	80086b2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008648:	6938      	ldr	r0, [r7, #16]
 800864a:	f000 f836 	bl	80086ba <USBD_GetLen>
 800864e:	4603      	mov	r3, r0
 8008650:	3301      	adds	r3, #1
 8008652:	b29b      	uxth	r3, r3
 8008654:	005b      	lsls	r3, r3, #1
 8008656:	b29a      	uxth	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800865c:	7dfb      	ldrb	r3, [r7, #23]
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	4413      	add	r3, r2
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	7812      	ldrb	r2, [r2, #0]
 8008666:	701a      	strb	r2, [r3, #0]
  idx++;
 8008668:	7dfb      	ldrb	r3, [r7, #23]
 800866a:	3301      	adds	r3, #1
 800866c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800866e:	7dfb      	ldrb	r3, [r7, #23]
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	4413      	add	r3, r2
 8008674:	2203      	movs	r2, #3
 8008676:	701a      	strb	r2, [r3, #0]
  idx++;
 8008678:	7dfb      	ldrb	r3, [r7, #23]
 800867a:	3301      	adds	r3, #1
 800867c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800867e:	e013      	b.n	80086a8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008680:	7dfb      	ldrb	r3, [r7, #23]
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	4413      	add	r3, r2
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	7812      	ldrb	r2, [r2, #0]
 800868a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	3301      	adds	r3, #1
 8008690:	613b      	str	r3, [r7, #16]
    idx++;
 8008692:	7dfb      	ldrb	r3, [r7, #23]
 8008694:	3301      	adds	r3, #1
 8008696:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008698:	7dfb      	ldrb	r3, [r7, #23]
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	4413      	add	r3, r2
 800869e:	2200      	movs	r2, #0
 80086a0:	701a      	strb	r2, [r3, #0]
    idx++;
 80086a2:	7dfb      	ldrb	r3, [r7, #23]
 80086a4:	3301      	adds	r3, #1
 80086a6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d1e7      	bne.n	8008680 <USBD_GetString+0x52>
 80086b0:	e000      	b.n	80086b4 <USBD_GetString+0x86>
    return;
 80086b2:	bf00      	nop
  }
}
 80086b4:	3718      	adds	r7, #24
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b085      	sub	sp, #20
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80086c2:	2300      	movs	r3, #0
 80086c4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80086ca:	e005      	b.n	80086d8 <USBD_GetLen+0x1e>
  {
    len++;
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
 80086ce:	3301      	adds	r3, #1
 80086d0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	3301      	adds	r3, #1
 80086d6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1f5      	bne.n	80086cc <USBD_GetLen+0x12>
  }

  return len;
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b084      	sub	sp, #16
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	60f8      	str	r0, [r7, #12]
 80086f6:	60b9      	str	r1, [r7, #8]
 80086f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2202      	movs	r2, #2
 80086fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	68ba      	ldr	r2, [r7, #8]
 8008712:	2100      	movs	r1, #0
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f000 fc7a 	bl	800900e <USBD_LL_Transmit>

  return USBD_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	2100      	movs	r1, #0
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f000 fc69 	bl	800900e <USBD_LL_Transmit>

  return USBD_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b084      	sub	sp, #16
 800874a:	af00      	add	r7, sp, #0
 800874c:	60f8      	str	r0, [r7, #12]
 800874e:	60b9      	str	r1, [r7, #8]
 8008750:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2203      	movs	r2, #3
 8008756:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	2100      	movs	r1, #0
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f000 fc6d 	bl	8009050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	2100      	movs	r1, #0
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f000 fc5c 	bl	8009050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b082      	sub	sp, #8
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2204      	movs	r2, #4
 80087ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80087b2:	2300      	movs	r3, #0
 80087b4:	2200      	movs	r2, #0
 80087b6:	2100      	movs	r1, #0
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 fc28 	bl	800900e <USBD_LL_Transmit>

  return USBD_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2205      	movs	r2, #5
 80087d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087d8:	2300      	movs	r3, #0
 80087da:	2200      	movs	r2, #0
 80087dc:	2100      	movs	r1, #0
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 fc36 	bl	8009050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
	...

080087f0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80087f4:	2200      	movs	r2, #0
 80087f6:	4912      	ldr	r1, [pc, #72]	@ (8008840 <MX_USB_Device_Init+0x50>)
 80087f8:	4812      	ldr	r0, [pc, #72]	@ (8008844 <MX_USB_Device_Init+0x54>)
 80087fa:	f7fe febd 	bl	8007578 <USBD_Init>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008804:	f7f7 fe33 	bl	800046e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008808:	490f      	ldr	r1, [pc, #60]	@ (8008848 <MX_USB_Device_Init+0x58>)
 800880a:	480e      	ldr	r0, [pc, #56]	@ (8008844 <MX_USB_Device_Init+0x54>)
 800880c:	f7fe fef2 	bl	80075f4 <USBD_RegisterClass>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008816:	f7f7 fe2a 	bl	800046e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800881a:	490c      	ldr	r1, [pc, #48]	@ (800884c <MX_USB_Device_Init+0x5c>)
 800881c:	4809      	ldr	r0, [pc, #36]	@ (8008844 <MX_USB_Device_Init+0x54>)
 800881e:	f7fe fe35 	bl	800748c <USBD_CDC_RegisterInterface>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d001      	beq.n	800882c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008828:	f7f7 fe21 	bl	800046e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800882c:	4805      	ldr	r0, [pc, #20]	@ (8008844 <MX_USB_Device_Init+0x54>)
 800882e:	f7fe ff15 	bl	800765c <USBD_Start>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d001      	beq.n	800883c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008838:	f7f7 fe19 	bl	800046e <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800883c:	bf00      	nop
 800883e:	bd80      	pop	{r7, pc}
 8008840:	20000130 	.word	0x20000130
 8008844:	200002a0 	.word	0x200002a0
 8008848:	20000018 	.word	0x20000018
 800884c:	2000011c 	.word	0x2000011c

08008850 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008854:	2200      	movs	r2, #0
 8008856:	4905      	ldr	r1, [pc, #20]	@ (800886c <CDC_Init_FS+0x1c>)
 8008858:	4805      	ldr	r0, [pc, #20]	@ (8008870 <CDC_Init_FS+0x20>)
 800885a:	f7fe fe2c 	bl	80074b6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800885e:	4905      	ldr	r1, [pc, #20]	@ (8008874 <CDC_Init_FS+0x24>)
 8008860:	4803      	ldr	r0, [pc, #12]	@ (8008870 <CDC_Init_FS+0x20>)
 8008862:	f7fe fe46 	bl	80074f2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008866:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008868:	4618      	mov	r0, r3
 800886a:	bd80      	pop	{r7, pc}
 800886c:	20000d70 	.word	0x20000d70
 8008870:	200002a0 	.word	0x200002a0
 8008874:	20000570 	.word	0x20000570

08008878 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008878:	b480      	push	{r7}
 800887a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800887c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800887e:	4618      	mov	r0, r3
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	4603      	mov	r3, r0
 8008890:	6039      	str	r1, [r7, #0]
 8008892:	71fb      	strb	r3, [r7, #7]
 8008894:	4613      	mov	r3, r2
 8008896:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008898:	79fb      	ldrb	r3, [r7, #7]
 800889a:	2b23      	cmp	r3, #35	@ 0x23
 800889c:	d84a      	bhi.n	8008934 <CDC_Control_FS+0xac>
 800889e:	a201      	add	r2, pc, #4	@ (adr r2, 80088a4 <CDC_Control_FS+0x1c>)
 80088a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a4:	08008935 	.word	0x08008935
 80088a8:	08008935 	.word	0x08008935
 80088ac:	08008935 	.word	0x08008935
 80088b0:	08008935 	.word	0x08008935
 80088b4:	08008935 	.word	0x08008935
 80088b8:	08008935 	.word	0x08008935
 80088bc:	08008935 	.word	0x08008935
 80088c0:	08008935 	.word	0x08008935
 80088c4:	08008935 	.word	0x08008935
 80088c8:	08008935 	.word	0x08008935
 80088cc:	08008935 	.word	0x08008935
 80088d0:	08008935 	.word	0x08008935
 80088d4:	08008935 	.word	0x08008935
 80088d8:	08008935 	.word	0x08008935
 80088dc:	08008935 	.word	0x08008935
 80088e0:	08008935 	.word	0x08008935
 80088e4:	08008935 	.word	0x08008935
 80088e8:	08008935 	.word	0x08008935
 80088ec:	08008935 	.word	0x08008935
 80088f0:	08008935 	.word	0x08008935
 80088f4:	08008935 	.word	0x08008935
 80088f8:	08008935 	.word	0x08008935
 80088fc:	08008935 	.word	0x08008935
 8008900:	08008935 	.word	0x08008935
 8008904:	08008935 	.word	0x08008935
 8008908:	08008935 	.word	0x08008935
 800890c:	08008935 	.word	0x08008935
 8008910:	08008935 	.word	0x08008935
 8008914:	08008935 	.word	0x08008935
 8008918:	08008935 	.word	0x08008935
 800891c:	08008935 	.word	0x08008935
 8008920:	08008935 	.word	0x08008935
 8008924:	08008935 	.word	0x08008935
 8008928:	08008935 	.word	0x08008935
 800892c:	08008935 	.word	0x08008935
 8008930:	08008935 	.word	0x08008935
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008934:	bf00      	nop
  }

  return (USBD_OK);
 8008936:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008938:	4618      	mov	r0, r3
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800894e:	6879      	ldr	r1, [r7, #4]
 8008950:	4805      	ldr	r0, [pc, #20]	@ (8008968 <CDC_Receive_FS+0x24>)
 8008952:	f7fe fdce 	bl	80074f2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008956:	4804      	ldr	r0, [pc, #16]	@ (8008968 <CDC_Receive_FS+0x24>)
 8008958:	f7fe fde4 	bl	8007524 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800895c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800895e:	4618      	mov	r0, r3
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	200002a0 	.word	0x200002a0

0800896c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800896c:	b480      	push	{r7}
 800896e:	b087      	sub	sp, #28
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	4613      	mov	r3, r2
 8008978:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800897e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008982:	4618      	mov	r0, r3
 8008984:	371c      	adds	r7, #28
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
	...

08008990 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	4603      	mov	r3, r0
 8008998:	6039      	str	r1, [r7, #0]
 800899a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	2212      	movs	r2, #18
 80089a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80089a2:	4b03      	ldr	r3, [pc, #12]	@ (80089b0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr
 80089b0:	20000150 	.word	0x20000150

080089b4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	4603      	mov	r3, r0
 80089bc:	6039      	str	r1, [r7, #0]
 80089be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	2204      	movs	r2, #4
 80089c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80089c6:	4b03      	ldr	r3, [pc, #12]	@ (80089d4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr
 80089d4:	20000164 	.word	0x20000164

080089d8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	4603      	mov	r3, r0
 80089e0:	6039      	str	r1, [r7, #0]
 80089e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80089e4:	79fb      	ldrb	r3, [r7, #7]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d105      	bne.n	80089f6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80089ea:	683a      	ldr	r2, [r7, #0]
 80089ec:	4907      	ldr	r1, [pc, #28]	@ (8008a0c <USBD_CDC_ProductStrDescriptor+0x34>)
 80089ee:	4808      	ldr	r0, [pc, #32]	@ (8008a10 <USBD_CDC_ProductStrDescriptor+0x38>)
 80089f0:	f7ff fe1d 	bl	800862e <USBD_GetString>
 80089f4:	e004      	b.n	8008a00 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80089f6:	683a      	ldr	r2, [r7, #0]
 80089f8:	4904      	ldr	r1, [pc, #16]	@ (8008a0c <USBD_CDC_ProductStrDescriptor+0x34>)
 80089fa:	4805      	ldr	r0, [pc, #20]	@ (8008a10 <USBD_CDC_ProductStrDescriptor+0x38>)
 80089fc:	f7ff fe17 	bl	800862e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a00:	4b02      	ldr	r3, [pc, #8]	@ (8008a0c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	20001570 	.word	0x20001570
 8008a10:	0800a0dc 	.word	0x0800a0dc

08008a14 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	6039      	str	r1, [r7, #0]
 8008a1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008a20:	683a      	ldr	r2, [r7, #0]
 8008a22:	4904      	ldr	r1, [pc, #16]	@ (8008a34 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8008a24:	4804      	ldr	r0, [pc, #16]	@ (8008a38 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8008a26:	f7ff fe02 	bl	800862e <USBD_GetString>
  return USBD_StrDesc;
 8008a2a:	4b02      	ldr	r3, [pc, #8]	@ (8008a34 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	20001570 	.word	0x20001570
 8008a38:	0800a0f4 	.word	0x0800a0f4

08008a3c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	4603      	mov	r3, r0
 8008a44:	6039      	str	r1, [r7, #0]
 8008a46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	221a      	movs	r2, #26
 8008a4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008a4e:	f000 f843 	bl	8008ad8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008a52:	4b02      	ldr	r3, [pc, #8]	@ (8008a5c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	20000168 	.word	0x20000168

08008a60 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	4603      	mov	r3, r0
 8008a68:	6039      	str	r1, [r7, #0]
 8008a6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008a6c:	79fb      	ldrb	r3, [r7, #7]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d105      	bne.n	8008a7e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	4907      	ldr	r1, [pc, #28]	@ (8008a94 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008a76:	4808      	ldr	r0, [pc, #32]	@ (8008a98 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008a78:	f7ff fdd9 	bl	800862e <USBD_GetString>
 8008a7c:	e004      	b.n	8008a88 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008a7e:	683a      	ldr	r2, [r7, #0]
 8008a80:	4904      	ldr	r1, [pc, #16]	@ (8008a94 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008a82:	4805      	ldr	r0, [pc, #20]	@ (8008a98 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008a84:	f7ff fdd3 	bl	800862e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a88:	4b02      	ldr	r3, [pc, #8]	@ (8008a94 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	20001570 	.word	0x20001570
 8008a98:	0800a108 	.word	0x0800a108

08008a9c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	6039      	str	r1, [r7, #0]
 8008aa6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008aa8:	79fb      	ldrb	r3, [r7, #7]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d105      	bne.n	8008aba <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008aae:	683a      	ldr	r2, [r7, #0]
 8008ab0:	4907      	ldr	r1, [pc, #28]	@ (8008ad0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008ab2:	4808      	ldr	r0, [pc, #32]	@ (8008ad4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008ab4:	f7ff fdbb 	bl	800862e <USBD_GetString>
 8008ab8:	e004      	b.n	8008ac4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008aba:	683a      	ldr	r2, [r7, #0]
 8008abc:	4904      	ldr	r1, [pc, #16]	@ (8008ad0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008abe:	4805      	ldr	r0, [pc, #20]	@ (8008ad4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008ac0:	f7ff fdb5 	bl	800862e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ac4:	4b02      	ldr	r3, [pc, #8]	@ (8008ad0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	20001570 	.word	0x20001570
 8008ad4:	0800a114 	.word	0x0800a114

08008ad8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ade:	4b0f      	ldr	r3, [pc, #60]	@ (8008b1c <Get_SerialNum+0x44>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8008b20 <Get_SerialNum+0x48>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008aea:	4b0e      	ldr	r3, [pc, #56]	@ (8008b24 <Get_SerialNum+0x4c>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4413      	add	r3, r2
 8008af6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d009      	beq.n	8008b12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008afe:	2208      	movs	r2, #8
 8008b00:	4909      	ldr	r1, [pc, #36]	@ (8008b28 <Get_SerialNum+0x50>)
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f000 f814 	bl	8008b30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008b08:	2204      	movs	r2, #4
 8008b0a:	4908      	ldr	r1, [pc, #32]	@ (8008b2c <Get_SerialNum+0x54>)
 8008b0c:	68b8      	ldr	r0, [r7, #8]
 8008b0e:	f000 f80f 	bl	8008b30 <IntToUnicode>
  }
}
 8008b12:	bf00      	nop
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	1fff7590 	.word	0x1fff7590
 8008b20:	1fff7594 	.word	0x1fff7594
 8008b24:	1fff7598 	.word	0x1fff7598
 8008b28:	2000016a 	.word	0x2000016a
 8008b2c:	2000017a 	.word	0x2000017a

08008b30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b087      	sub	sp, #28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008b42:	2300      	movs	r3, #0
 8008b44:	75fb      	strb	r3, [r7, #23]
 8008b46:	e027      	b.n	8008b98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	0f1b      	lsrs	r3, r3, #28
 8008b4c:	2b09      	cmp	r3, #9
 8008b4e:	d80b      	bhi.n	8008b68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	0f1b      	lsrs	r3, r3, #28
 8008b54:	b2da      	uxtb	r2, r3
 8008b56:	7dfb      	ldrb	r3, [r7, #23]
 8008b58:	005b      	lsls	r3, r3, #1
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	440b      	add	r3, r1
 8008b60:	3230      	adds	r2, #48	@ 0x30
 8008b62:	b2d2      	uxtb	r2, r2
 8008b64:	701a      	strb	r2, [r3, #0]
 8008b66:	e00a      	b.n	8008b7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	0f1b      	lsrs	r3, r3, #28
 8008b6c:	b2da      	uxtb	r2, r3
 8008b6e:	7dfb      	ldrb	r3, [r7, #23]
 8008b70:	005b      	lsls	r3, r3, #1
 8008b72:	4619      	mov	r1, r3
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	440b      	add	r3, r1
 8008b78:	3237      	adds	r2, #55	@ 0x37
 8008b7a:	b2d2      	uxtb	r2, r2
 8008b7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	011b      	lsls	r3, r3, #4
 8008b82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008b84:	7dfb      	ldrb	r3, [r7, #23]
 8008b86:	005b      	lsls	r3, r3, #1
 8008b88:	3301      	adds	r3, #1
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	2200      	movs	r2, #0
 8008b90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008b92:	7dfb      	ldrb	r3, [r7, #23]
 8008b94:	3301      	adds	r3, #1
 8008b96:	75fb      	strb	r3, [r7, #23]
 8008b98:	7dfa      	ldrb	r2, [r7, #23]
 8008b9a:	79fb      	ldrb	r3, [r7, #7]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d3d3      	bcc.n	8008b48 <IntToUnicode+0x18>
  }
}
 8008ba0:	bf00      	nop
 8008ba2:	bf00      	nop
 8008ba4:	371c      	adds	r7, #28
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
	...

08008bb0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b098      	sub	sp, #96	@ 0x60
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008bb8:	f107 030c 	add.w	r3, r7, #12
 8008bbc:	2254      	movs	r2, #84	@ 0x54
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 fc18 	bl	80093f6 <memset>
  if(pcdHandle->Instance==USB)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a15      	ldr	r2, [pc, #84]	@ (8008c20 <HAL_PCD_MspInit+0x70>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d122      	bne.n	8008c16 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008bd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008bd4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008bda:	f107 030c 	add.w	r3, r7, #12
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fa fd7e 	bl	80036e0 <HAL_RCCEx_PeriphCLKConfig>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d001      	beq.n	8008bee <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8008bea:	f7f7 fc40 	bl	800046e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008bee:	4b0d      	ldr	r3, [pc, #52]	@ (8008c24 <HAL_PCD_MspInit+0x74>)
 8008bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8008c24 <HAL_PCD_MspInit+0x74>)
 8008bf4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008bf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8008c24 <HAL_PCD_MspInit+0x74>)
 8008bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c02:	60bb      	str	r3, [r7, #8]
 8008c04:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8008c06:	2200      	movs	r2, #0
 8008c08:	2100      	movs	r1, #0
 8008c0a:	2014      	movs	r0, #20
 8008c0c:	f7f8 f8ed 	bl	8000dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008c10:	2014      	movs	r0, #20
 8008c12:	f7f8 f904 	bl	8000e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008c16:	bf00      	nop
 8008c18:	3760      	adds	r7, #96	@ 0x60
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	40005c00 	.word	0x40005c00
 8008c24:	40021000 	.word	0x40021000

08008c28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	4610      	mov	r0, r2
 8008c40:	f7fe fd57 	bl	80076f2 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8008c44:	bf00      	nop
 8008c46:	3708      	adds	r7, #8
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	460b      	mov	r3, r1
 8008c56:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8008c5e:	78fa      	ldrb	r2, [r7, #3]
 8008c60:	6879      	ldr	r1, [r7, #4]
 8008c62:	4613      	mov	r3, r2
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	4413      	add	r3, r2
 8008c68:	00db      	lsls	r3, r3, #3
 8008c6a:	440b      	add	r3, r1
 8008c6c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	78fb      	ldrb	r3, [r7, #3]
 8008c74:	4619      	mov	r1, r3
 8008c76:	f7fe fd91 	bl	800779c <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8008c7a:	bf00      	nop
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b082      	sub	sp, #8
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8008c94:	78fa      	ldrb	r2, [r7, #3]
 8008c96:	6879      	ldr	r1, [r7, #4]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	00db      	lsls	r3, r3, #3
 8008ca0:	440b      	add	r3, r1
 8008ca2:	3324      	adds	r3, #36	@ 0x24
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	78fb      	ldrb	r3, [r7, #3]
 8008ca8:	4619      	mov	r1, r3
 8008caa:	f7fe fdda 	bl	8007862 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8008cae:	bf00      	nop
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b082      	sub	sp, #8
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7fe feee 	bl	8007aa6 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8008cca:	bf00      	nop
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b084      	sub	sp, #16
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	795b      	ldrb	r3, [r3, #5]
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d001      	beq.n	8008cea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008ce6:	f7f7 fbc2 	bl	800046e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008cf0:	7bfa      	ldrb	r2, [r7, #15]
 8008cf2:	4611      	mov	r1, r2
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7fe fe98 	bl	8007a2a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7fe fe44 	bl	800798e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8008d06:	bf00      	nop
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
	...

08008d10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fe fe93 	bl	8007a4a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	7a5b      	ldrb	r3, [r3, #9]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d005      	beq.n	8008d38 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d2c:	4b04      	ldr	r3, [pc, #16]	@ (8008d40 <HAL_PCD_SuspendCallback+0x30>)
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	4a03      	ldr	r2, [pc, #12]	@ (8008d40 <HAL_PCD_SuspendCallback+0x30>)
 8008d32:	f043 0306 	orr.w	r3, r3, #6
 8008d36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8008d38:	bf00      	nop
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	e000ed00 	.word	0xe000ed00

08008d44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	7a5b      	ldrb	r3, [r3, #9]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d007      	beq.n	8008d64 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d54:	4b08      	ldr	r3, [pc, #32]	@ (8008d78 <HAL_PCD_ResumeCallback+0x34>)
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	4a07      	ldr	r2, [pc, #28]	@ (8008d78 <HAL_PCD_ResumeCallback+0x34>)
 8008d5a:	f023 0306 	bic.w	r3, r3, #6
 8008d5e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008d60:	f000 f9f8 	bl	8009154 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7fe fe83 	bl	8007a76 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8008d70:	bf00      	nop
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	e000ed00 	.word	0xe000ed00

08008d7c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8008d84:	4a2b      	ldr	r2, [pc, #172]	@ (8008e34 <USBD_LL_Init+0xb8>)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4a29      	ldr	r2, [pc, #164]	@ (8008e34 <USBD_LL_Init+0xb8>)
 8008d90:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8008d94:	4b27      	ldr	r3, [pc, #156]	@ (8008e34 <USBD_LL_Init+0xb8>)
 8008d96:	4a28      	ldr	r2, [pc, #160]	@ (8008e38 <USBD_LL_Init+0xbc>)
 8008d98:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008d9a:	4b26      	ldr	r3, [pc, #152]	@ (8008e34 <USBD_LL_Init+0xb8>)
 8008d9c:	2208      	movs	r2, #8
 8008d9e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008da0:	4b24      	ldr	r3, [pc, #144]	@ (8008e34 <USBD_LL_Init+0xb8>)
 8008da2:	2202      	movs	r2, #2
 8008da4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008da6:	4b23      	ldr	r3, [pc, #140]	@ (8008e34 <USBD_LL_Init+0xb8>)
 8008da8:	2202      	movs	r2, #2
 8008daa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008dac:	4b21      	ldr	r3, [pc, #132]	@ (8008e34 <USBD_LL_Init+0xb8>)
 8008dae:	2200      	movs	r2, #0
 8008db0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008db2:	4b20      	ldr	r3, [pc, #128]	@ (8008e34 <USBD_LL_Init+0xb8>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008db8:	4b1e      	ldr	r3, [pc, #120]	@ (8008e34 <USBD_LL_Init+0xb8>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8008e34 <USBD_LL_Init+0xb8>)
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008dc4:	481b      	ldr	r0, [pc, #108]	@ (8008e34 <USBD_LL_Init+0xb8>)
 8008dc6:	f7f8 f9df 	bl	8001188 <HAL_PCD_Init>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8008dd0:	f7f7 fb4d 	bl	800046e <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008dda:	2318      	movs	r3, #24
 8008ddc:	2200      	movs	r2, #0
 8008dde:	2100      	movs	r1, #0
 8008de0:	f7f9 fe66 	bl	8002ab0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008dea:	2358      	movs	r3, #88	@ 0x58
 8008dec:	2200      	movs	r2, #0
 8008dee:	2180      	movs	r1, #128	@ 0x80
 8008df0:	f7f9 fe5e 	bl	8002ab0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008dfa:	23c0      	movs	r3, #192	@ 0xc0
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	2181      	movs	r1, #129	@ 0x81
 8008e00:	f7f9 fe56 	bl	8002ab0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008e0a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008e0e:	2200      	movs	r2, #0
 8008e10:	2101      	movs	r1, #1
 8008e12:	f7f9 fe4d 	bl	8002ab0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008e1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008e20:	2200      	movs	r2, #0
 8008e22:	2182      	movs	r1, #130	@ 0x82
 8008e24:	f7f9 fe44 	bl	8002ab0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	20001770 	.word	0x20001770
 8008e38:	40005c00 	.word	0x40005c00

08008e3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7f8 fa66 	bl	8001324 <HAL_PCD_Start>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 f97e 	bl	8009160 <USBD_Get_USB_Status>
 8008e64:	4603      	mov	r3, r0
 8008e66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e68:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b084      	sub	sp, #16
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	4608      	mov	r0, r1
 8008e7c:	4611      	mov	r1, r2
 8008e7e:	461a      	mov	r2, r3
 8008e80:	4603      	mov	r3, r0
 8008e82:	70fb      	strb	r3, [r7, #3]
 8008e84:	460b      	mov	r3, r1
 8008e86:	70bb      	strb	r3, [r7, #2]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e90:	2300      	movs	r3, #0
 8008e92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008e9a:	78bb      	ldrb	r3, [r7, #2]
 8008e9c:	883a      	ldrh	r2, [r7, #0]
 8008e9e:	78f9      	ldrb	r1, [r7, #3]
 8008ea0:	f7f8 fbad 	bl	80015fe <HAL_PCD_EP_Open>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ea8:	7bfb      	ldrb	r3, [r7, #15]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 f958 	bl	8009160 <USBD_Get_USB_Status>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008eb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b084      	sub	sp, #16
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008ed8:	78fa      	ldrb	r2, [r7, #3]
 8008eda:	4611      	mov	r1, r2
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7f8 fbed 	bl	80016bc <HAL_PCD_EP_Close>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f000 f939 	bl	8009160 <USBD_Get_USB_Status>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ef2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	460b      	mov	r3, r1
 8008f06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008f16:	78fa      	ldrb	r2, [r7, #3]
 8008f18:	4611      	mov	r1, r2
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7f8 fc96 	bl	800184c <HAL_PCD_EP_SetStall>
 8008f20:	4603      	mov	r3, r0
 8008f22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f24:	7bfb      	ldrb	r3, [r7, #15]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 f91a 	bl	8009160 <USBD_Get_USB_Status>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f30:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b084      	sub	sp, #16
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	460b      	mov	r3, r1
 8008f44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008f54:	78fa      	ldrb	r2, [r7, #3]
 8008f56:	4611      	mov	r1, r2
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7f8 fcc9 	bl	80018f0 <HAL_PCD_EP_ClrStall>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f62:	7bfb      	ldrb	r3, [r7, #15]
 8008f64:	4618      	mov	r0, r3
 8008f66:	f000 f8fb 	bl	8009160 <USBD_Get_USB_Status>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	460b      	mov	r3, r1
 8008f82:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008f8a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008f8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	da0b      	bge.n	8008fac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008f94:	78fb      	ldrb	r3, [r7, #3]
 8008f96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f9a:	68f9      	ldr	r1, [r7, #12]
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	00db      	lsls	r3, r3, #3
 8008fa4:	440b      	add	r3, r1
 8008fa6:	3312      	adds	r3, #18
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	e00b      	b.n	8008fc4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008fac:	78fb      	ldrb	r3, [r7, #3]
 8008fae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008fb2:	68f9      	ldr	r1, [r7, #12]
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	4413      	add	r3, r2
 8008fba:	00db      	lsls	r3, r3, #3
 8008fbc:	440b      	add	r3, r1
 8008fbe:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008fc2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3714      	adds	r7, #20
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	460b      	mov	r3, r1
 8008fda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008fea:	78fa      	ldrb	r2, [r7, #3]
 8008fec:	4611      	mov	r1, r2
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7f8 fae1 	bl	80015b6 <HAL_PCD_SetAddress>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ff8:	7bfb      	ldrb	r3, [r7, #15]
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f000 f8b0 	bl	8009160 <USBD_Get_USB_Status>
 8009000:	4603      	mov	r3, r0
 8009002:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009004:	7bbb      	ldrb	r3, [r7, #14]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b086      	sub	sp, #24
 8009012:	af00      	add	r7, sp, #0
 8009014:	60f8      	str	r0, [r7, #12]
 8009016:	607a      	str	r2, [r7, #4]
 8009018:	603b      	str	r3, [r7, #0]
 800901a:	460b      	mov	r3, r1
 800901c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800901e:	2300      	movs	r3, #0
 8009020:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009022:	2300      	movs	r3, #0
 8009024:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800902c:	7af9      	ldrb	r1, [r7, #11]
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	f7f8 fbd4 	bl	80017de <HAL_PCD_EP_Transmit>
 8009036:	4603      	mov	r3, r0
 8009038:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800903a:	7dfb      	ldrb	r3, [r7, #23]
 800903c:	4618      	mov	r0, r3
 800903e:	f000 f88f 	bl	8009160 <USBD_Get_USB_Status>
 8009042:	4603      	mov	r3, r0
 8009044:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009046:	7dbb      	ldrb	r3, [r7, #22]
}
 8009048:	4618      	mov	r0, r3
 800904a:	3718      	adds	r7, #24
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	607a      	str	r2, [r7, #4]
 800905a:	603b      	str	r3, [r7, #0]
 800905c:	460b      	mov	r3, r1
 800905e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009060:	2300      	movs	r3, #0
 8009062:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009064:	2300      	movs	r3, #0
 8009066:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800906e:	7af9      	ldrb	r1, [r7, #11]
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	f7f8 fb6a 	bl	800174c <HAL_PCD_EP_Receive>
 8009078:	4603      	mov	r3, r0
 800907a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800907c:	7dfb      	ldrb	r3, [r7, #23]
 800907e:	4618      	mov	r0, r3
 8009080:	f000 f86e 	bl	8009160 <USBD_Get_USB_Status>
 8009084:	4603      	mov	r3, r0
 8009086:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009088:	7dbb      	ldrb	r3, [r7, #22]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3718      	adds	r7, #24
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b082      	sub	sp, #8
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
 800909a:	460b      	mov	r3, r1
 800909c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80090a4:	78fa      	ldrb	r2, [r7, #3]
 80090a6:	4611      	mov	r1, r2
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7f8 fb80 	bl	80017ae <HAL_PCD_EP_GetRxCount>
 80090ae:	4603      	mov	r3, r0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3708      	adds	r7, #8
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	460b      	mov	r3, r1
 80090c2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80090c4:	78fb      	ldrb	r3, [r7, #3]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d002      	beq.n	80090d0 <HAL_PCDEx_LPM_Callback+0x18>
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d013      	beq.n	80090f6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80090ce:	e023      	b.n	8009118 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	7a5b      	ldrb	r3, [r3, #9]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d007      	beq.n	80090e8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80090d8:	f000 f83c 	bl	8009154 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090dc:	4b10      	ldr	r3, [pc, #64]	@ (8009120 <HAL_PCDEx_LPM_Callback+0x68>)
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	4a0f      	ldr	r2, [pc, #60]	@ (8009120 <HAL_PCDEx_LPM_Callback+0x68>)
 80090e2:	f023 0306 	bic.w	r3, r3, #6
 80090e6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fe fcc1 	bl	8007a76 <USBD_LL_Resume>
    break;
 80090f4:	e010      	b.n	8009118 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7fe fca4 	bl	8007a4a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	7a5b      	ldrb	r3, [r3, #9]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d005      	beq.n	8009116 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800910a:	4b05      	ldr	r3, [pc, #20]	@ (8009120 <HAL_PCDEx_LPM_Callback+0x68>)
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	4a04      	ldr	r2, [pc, #16]	@ (8009120 <HAL_PCDEx_LPM_Callback+0x68>)
 8009110:	f043 0306 	orr.w	r3, r3, #6
 8009114:	6113      	str	r3, [r2, #16]
    break;
 8009116:	bf00      	nop
}
 8009118:	bf00      	nop
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	e000ed00 	.word	0xe000ed00

08009124 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800912c:	4b03      	ldr	r3, [pc, #12]	@ (800913c <USBD_static_malloc+0x18>)
}
 800912e:	4618      	mov	r0, r3
 8009130:	370c      	adds	r7, #12
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	20001a4c 	.word	0x20001a4c

08009140 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]

}
 8009148:	bf00      	nop
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009158:	f7f7 f93e 	bl	80003d8 <SystemClock_Config>
}
 800915c:	bf00      	nop
 800915e:	bd80      	pop	{r7, pc}

08009160 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009160:	b480      	push	{r7}
 8009162:	b085      	sub	sp, #20
 8009164:	af00      	add	r7, sp, #0
 8009166:	4603      	mov	r3, r0
 8009168:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800916e:	79fb      	ldrb	r3, [r7, #7]
 8009170:	2b03      	cmp	r3, #3
 8009172:	d817      	bhi.n	80091a4 <USBD_Get_USB_Status+0x44>
 8009174:	a201      	add	r2, pc, #4	@ (adr r2, 800917c <USBD_Get_USB_Status+0x1c>)
 8009176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917a:	bf00      	nop
 800917c:	0800918d 	.word	0x0800918d
 8009180:	08009193 	.word	0x08009193
 8009184:	08009199 	.word	0x08009199
 8009188:	0800919f 	.word	0x0800919f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800918c:	2300      	movs	r3, #0
 800918e:	73fb      	strb	r3, [r7, #15]
    break;
 8009190:	e00b      	b.n	80091aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009192:	2303      	movs	r3, #3
 8009194:	73fb      	strb	r3, [r7, #15]
    break;
 8009196:	e008      	b.n	80091aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009198:	2301      	movs	r3, #1
 800919a:	73fb      	strb	r3, [r7, #15]
    break;
 800919c:	e005      	b.n	80091aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800919e:	2303      	movs	r3, #3
 80091a0:	73fb      	strb	r3, [r7, #15]
    break;
 80091a2:	e002      	b.n	80091aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80091a4:	2303      	movs	r3, #3
 80091a6:	73fb      	strb	r3, [r7, #15]
    break;
 80091a8:	bf00      	nop
  }
  return usb_status;
 80091aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3714      	adds	r7, #20
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <std>:
 80091b8:	2300      	movs	r3, #0
 80091ba:	b510      	push	{r4, lr}
 80091bc:	4604      	mov	r4, r0
 80091be:	e9c0 3300 	strd	r3, r3, [r0]
 80091c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091c6:	6083      	str	r3, [r0, #8]
 80091c8:	8181      	strh	r1, [r0, #12]
 80091ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80091cc:	81c2      	strh	r2, [r0, #14]
 80091ce:	6183      	str	r3, [r0, #24]
 80091d0:	4619      	mov	r1, r3
 80091d2:	2208      	movs	r2, #8
 80091d4:	305c      	adds	r0, #92	@ 0x5c
 80091d6:	f000 f90e 	bl	80093f6 <memset>
 80091da:	4b0d      	ldr	r3, [pc, #52]	@ (8009210 <std+0x58>)
 80091dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80091de:	4b0d      	ldr	r3, [pc, #52]	@ (8009214 <std+0x5c>)
 80091e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80091e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009218 <std+0x60>)
 80091e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80091e6:	4b0d      	ldr	r3, [pc, #52]	@ (800921c <std+0x64>)
 80091e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80091ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009220 <std+0x68>)
 80091ec:	6224      	str	r4, [r4, #32]
 80091ee:	429c      	cmp	r4, r3
 80091f0:	d006      	beq.n	8009200 <std+0x48>
 80091f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80091f6:	4294      	cmp	r4, r2
 80091f8:	d002      	beq.n	8009200 <std+0x48>
 80091fa:	33d0      	adds	r3, #208	@ 0xd0
 80091fc:	429c      	cmp	r4, r3
 80091fe:	d105      	bne.n	800920c <std+0x54>
 8009200:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009208:	f000 b96e 	b.w	80094e8 <__retarget_lock_init_recursive>
 800920c:	bd10      	pop	{r4, pc}
 800920e:	bf00      	nop
 8009210:	08009371 	.word	0x08009371
 8009214:	08009393 	.word	0x08009393
 8009218:	080093cb 	.word	0x080093cb
 800921c:	080093ef 	.word	0x080093ef
 8009220:	20001c6c 	.word	0x20001c6c

08009224 <stdio_exit_handler>:
 8009224:	4a02      	ldr	r2, [pc, #8]	@ (8009230 <stdio_exit_handler+0xc>)
 8009226:	4903      	ldr	r1, [pc, #12]	@ (8009234 <stdio_exit_handler+0x10>)
 8009228:	4803      	ldr	r0, [pc, #12]	@ (8009238 <stdio_exit_handler+0x14>)
 800922a:	f000 b869 	b.w	8009300 <_fwalk_sglue>
 800922e:	bf00      	nop
 8009230:	20000184 	.word	0x20000184
 8009234:	08009d85 	.word	0x08009d85
 8009238:	20000194 	.word	0x20000194

0800923c <cleanup_stdio>:
 800923c:	6841      	ldr	r1, [r0, #4]
 800923e:	4b0c      	ldr	r3, [pc, #48]	@ (8009270 <cleanup_stdio+0x34>)
 8009240:	4299      	cmp	r1, r3
 8009242:	b510      	push	{r4, lr}
 8009244:	4604      	mov	r4, r0
 8009246:	d001      	beq.n	800924c <cleanup_stdio+0x10>
 8009248:	f000 fd9c 	bl	8009d84 <_fflush_r>
 800924c:	68a1      	ldr	r1, [r4, #8]
 800924e:	4b09      	ldr	r3, [pc, #36]	@ (8009274 <cleanup_stdio+0x38>)
 8009250:	4299      	cmp	r1, r3
 8009252:	d002      	beq.n	800925a <cleanup_stdio+0x1e>
 8009254:	4620      	mov	r0, r4
 8009256:	f000 fd95 	bl	8009d84 <_fflush_r>
 800925a:	68e1      	ldr	r1, [r4, #12]
 800925c:	4b06      	ldr	r3, [pc, #24]	@ (8009278 <cleanup_stdio+0x3c>)
 800925e:	4299      	cmp	r1, r3
 8009260:	d004      	beq.n	800926c <cleanup_stdio+0x30>
 8009262:	4620      	mov	r0, r4
 8009264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009268:	f000 bd8c 	b.w	8009d84 <_fflush_r>
 800926c:	bd10      	pop	{r4, pc}
 800926e:	bf00      	nop
 8009270:	20001c6c 	.word	0x20001c6c
 8009274:	20001cd4 	.word	0x20001cd4
 8009278:	20001d3c 	.word	0x20001d3c

0800927c <global_stdio_init.part.0>:
 800927c:	b510      	push	{r4, lr}
 800927e:	4b0b      	ldr	r3, [pc, #44]	@ (80092ac <global_stdio_init.part.0+0x30>)
 8009280:	4c0b      	ldr	r4, [pc, #44]	@ (80092b0 <global_stdio_init.part.0+0x34>)
 8009282:	4a0c      	ldr	r2, [pc, #48]	@ (80092b4 <global_stdio_init.part.0+0x38>)
 8009284:	601a      	str	r2, [r3, #0]
 8009286:	4620      	mov	r0, r4
 8009288:	2200      	movs	r2, #0
 800928a:	2104      	movs	r1, #4
 800928c:	f7ff ff94 	bl	80091b8 <std>
 8009290:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009294:	2201      	movs	r2, #1
 8009296:	2109      	movs	r1, #9
 8009298:	f7ff ff8e 	bl	80091b8 <std>
 800929c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80092a0:	2202      	movs	r2, #2
 80092a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092a6:	2112      	movs	r1, #18
 80092a8:	f7ff bf86 	b.w	80091b8 <std>
 80092ac:	20001da4 	.word	0x20001da4
 80092b0:	20001c6c 	.word	0x20001c6c
 80092b4:	08009225 	.word	0x08009225

080092b8 <__sfp_lock_acquire>:
 80092b8:	4801      	ldr	r0, [pc, #4]	@ (80092c0 <__sfp_lock_acquire+0x8>)
 80092ba:	f000 b916 	b.w	80094ea <__retarget_lock_acquire_recursive>
 80092be:	bf00      	nop
 80092c0:	20001dad 	.word	0x20001dad

080092c4 <__sfp_lock_release>:
 80092c4:	4801      	ldr	r0, [pc, #4]	@ (80092cc <__sfp_lock_release+0x8>)
 80092c6:	f000 b911 	b.w	80094ec <__retarget_lock_release_recursive>
 80092ca:	bf00      	nop
 80092cc:	20001dad 	.word	0x20001dad

080092d0 <__sinit>:
 80092d0:	b510      	push	{r4, lr}
 80092d2:	4604      	mov	r4, r0
 80092d4:	f7ff fff0 	bl	80092b8 <__sfp_lock_acquire>
 80092d8:	6a23      	ldr	r3, [r4, #32]
 80092da:	b11b      	cbz	r3, 80092e4 <__sinit+0x14>
 80092dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092e0:	f7ff bff0 	b.w	80092c4 <__sfp_lock_release>
 80092e4:	4b04      	ldr	r3, [pc, #16]	@ (80092f8 <__sinit+0x28>)
 80092e6:	6223      	str	r3, [r4, #32]
 80092e8:	4b04      	ldr	r3, [pc, #16]	@ (80092fc <__sinit+0x2c>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d1f5      	bne.n	80092dc <__sinit+0xc>
 80092f0:	f7ff ffc4 	bl	800927c <global_stdio_init.part.0>
 80092f4:	e7f2      	b.n	80092dc <__sinit+0xc>
 80092f6:	bf00      	nop
 80092f8:	0800923d 	.word	0x0800923d
 80092fc:	20001da4 	.word	0x20001da4

08009300 <_fwalk_sglue>:
 8009300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009304:	4607      	mov	r7, r0
 8009306:	4688      	mov	r8, r1
 8009308:	4614      	mov	r4, r2
 800930a:	2600      	movs	r6, #0
 800930c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009310:	f1b9 0901 	subs.w	r9, r9, #1
 8009314:	d505      	bpl.n	8009322 <_fwalk_sglue+0x22>
 8009316:	6824      	ldr	r4, [r4, #0]
 8009318:	2c00      	cmp	r4, #0
 800931a:	d1f7      	bne.n	800930c <_fwalk_sglue+0xc>
 800931c:	4630      	mov	r0, r6
 800931e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009322:	89ab      	ldrh	r3, [r5, #12]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d907      	bls.n	8009338 <_fwalk_sglue+0x38>
 8009328:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800932c:	3301      	adds	r3, #1
 800932e:	d003      	beq.n	8009338 <_fwalk_sglue+0x38>
 8009330:	4629      	mov	r1, r5
 8009332:	4638      	mov	r0, r7
 8009334:	47c0      	blx	r8
 8009336:	4306      	orrs	r6, r0
 8009338:	3568      	adds	r5, #104	@ 0x68
 800933a:	e7e9      	b.n	8009310 <_fwalk_sglue+0x10>

0800933c <iprintf>:
 800933c:	b40f      	push	{r0, r1, r2, r3}
 800933e:	b507      	push	{r0, r1, r2, lr}
 8009340:	4906      	ldr	r1, [pc, #24]	@ (800935c <iprintf+0x20>)
 8009342:	ab04      	add	r3, sp, #16
 8009344:	6808      	ldr	r0, [r1, #0]
 8009346:	f853 2b04 	ldr.w	r2, [r3], #4
 800934a:	6881      	ldr	r1, [r0, #8]
 800934c:	9301      	str	r3, [sp, #4]
 800934e:	f000 f9f1 	bl	8009734 <_vfiprintf_r>
 8009352:	b003      	add	sp, #12
 8009354:	f85d eb04 	ldr.w	lr, [sp], #4
 8009358:	b004      	add	sp, #16
 800935a:	4770      	bx	lr
 800935c:	20000190 	.word	0x20000190

08009360 <putchar>:
 8009360:	4b02      	ldr	r3, [pc, #8]	@ (800936c <putchar+0xc>)
 8009362:	4601      	mov	r1, r0
 8009364:	6818      	ldr	r0, [r3, #0]
 8009366:	6882      	ldr	r2, [r0, #8]
 8009368:	f000 bd34 	b.w	8009dd4 <_putc_r>
 800936c:	20000190 	.word	0x20000190

08009370 <__sread>:
 8009370:	b510      	push	{r4, lr}
 8009372:	460c      	mov	r4, r1
 8009374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009378:	f000 f868 	bl	800944c <_read_r>
 800937c:	2800      	cmp	r0, #0
 800937e:	bfab      	itete	ge
 8009380:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009382:	89a3      	ldrhlt	r3, [r4, #12]
 8009384:	181b      	addge	r3, r3, r0
 8009386:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800938a:	bfac      	ite	ge
 800938c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800938e:	81a3      	strhlt	r3, [r4, #12]
 8009390:	bd10      	pop	{r4, pc}

08009392 <__swrite>:
 8009392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009396:	461f      	mov	r7, r3
 8009398:	898b      	ldrh	r3, [r1, #12]
 800939a:	05db      	lsls	r3, r3, #23
 800939c:	4605      	mov	r5, r0
 800939e:	460c      	mov	r4, r1
 80093a0:	4616      	mov	r6, r2
 80093a2:	d505      	bpl.n	80093b0 <__swrite+0x1e>
 80093a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093a8:	2302      	movs	r3, #2
 80093aa:	2200      	movs	r2, #0
 80093ac:	f000 f83c 	bl	8009428 <_lseek_r>
 80093b0:	89a3      	ldrh	r3, [r4, #12]
 80093b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093ba:	81a3      	strh	r3, [r4, #12]
 80093bc:	4632      	mov	r2, r6
 80093be:	463b      	mov	r3, r7
 80093c0:	4628      	mov	r0, r5
 80093c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093c6:	f000 b853 	b.w	8009470 <_write_r>

080093ca <__sseek>:
 80093ca:	b510      	push	{r4, lr}
 80093cc:	460c      	mov	r4, r1
 80093ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093d2:	f000 f829 	bl	8009428 <_lseek_r>
 80093d6:	1c43      	adds	r3, r0, #1
 80093d8:	89a3      	ldrh	r3, [r4, #12]
 80093da:	bf15      	itete	ne
 80093dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80093de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80093e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80093e6:	81a3      	strheq	r3, [r4, #12]
 80093e8:	bf18      	it	ne
 80093ea:	81a3      	strhne	r3, [r4, #12]
 80093ec:	bd10      	pop	{r4, pc}

080093ee <__sclose>:
 80093ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093f2:	f000 b809 	b.w	8009408 <_close_r>

080093f6 <memset>:
 80093f6:	4402      	add	r2, r0
 80093f8:	4603      	mov	r3, r0
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d100      	bne.n	8009400 <memset+0xa>
 80093fe:	4770      	bx	lr
 8009400:	f803 1b01 	strb.w	r1, [r3], #1
 8009404:	e7f9      	b.n	80093fa <memset+0x4>
	...

08009408 <_close_r>:
 8009408:	b538      	push	{r3, r4, r5, lr}
 800940a:	4d06      	ldr	r5, [pc, #24]	@ (8009424 <_close_r+0x1c>)
 800940c:	2300      	movs	r3, #0
 800940e:	4604      	mov	r4, r0
 8009410:	4608      	mov	r0, r1
 8009412:	602b      	str	r3, [r5, #0]
 8009414:	f7f7 f8dd 	bl	80005d2 <_close>
 8009418:	1c43      	adds	r3, r0, #1
 800941a:	d102      	bne.n	8009422 <_close_r+0x1a>
 800941c:	682b      	ldr	r3, [r5, #0]
 800941e:	b103      	cbz	r3, 8009422 <_close_r+0x1a>
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	bd38      	pop	{r3, r4, r5, pc}
 8009424:	20001da8 	.word	0x20001da8

08009428 <_lseek_r>:
 8009428:	b538      	push	{r3, r4, r5, lr}
 800942a:	4d07      	ldr	r5, [pc, #28]	@ (8009448 <_lseek_r+0x20>)
 800942c:	4604      	mov	r4, r0
 800942e:	4608      	mov	r0, r1
 8009430:	4611      	mov	r1, r2
 8009432:	2200      	movs	r2, #0
 8009434:	602a      	str	r2, [r5, #0]
 8009436:	461a      	mov	r2, r3
 8009438:	f7f7 f8f2 	bl	8000620 <_lseek>
 800943c:	1c43      	adds	r3, r0, #1
 800943e:	d102      	bne.n	8009446 <_lseek_r+0x1e>
 8009440:	682b      	ldr	r3, [r5, #0]
 8009442:	b103      	cbz	r3, 8009446 <_lseek_r+0x1e>
 8009444:	6023      	str	r3, [r4, #0]
 8009446:	bd38      	pop	{r3, r4, r5, pc}
 8009448:	20001da8 	.word	0x20001da8

0800944c <_read_r>:
 800944c:	b538      	push	{r3, r4, r5, lr}
 800944e:	4d07      	ldr	r5, [pc, #28]	@ (800946c <_read_r+0x20>)
 8009450:	4604      	mov	r4, r0
 8009452:	4608      	mov	r0, r1
 8009454:	4611      	mov	r1, r2
 8009456:	2200      	movs	r2, #0
 8009458:	602a      	str	r2, [r5, #0]
 800945a:	461a      	mov	r2, r3
 800945c:	f7f7 f880 	bl	8000560 <_read>
 8009460:	1c43      	adds	r3, r0, #1
 8009462:	d102      	bne.n	800946a <_read_r+0x1e>
 8009464:	682b      	ldr	r3, [r5, #0]
 8009466:	b103      	cbz	r3, 800946a <_read_r+0x1e>
 8009468:	6023      	str	r3, [r4, #0]
 800946a:	bd38      	pop	{r3, r4, r5, pc}
 800946c:	20001da8 	.word	0x20001da8

08009470 <_write_r>:
 8009470:	b538      	push	{r3, r4, r5, lr}
 8009472:	4d07      	ldr	r5, [pc, #28]	@ (8009490 <_write_r+0x20>)
 8009474:	4604      	mov	r4, r0
 8009476:	4608      	mov	r0, r1
 8009478:	4611      	mov	r1, r2
 800947a:	2200      	movs	r2, #0
 800947c:	602a      	str	r2, [r5, #0]
 800947e:	461a      	mov	r2, r3
 8009480:	f7f7 f88b 	bl	800059a <_write>
 8009484:	1c43      	adds	r3, r0, #1
 8009486:	d102      	bne.n	800948e <_write_r+0x1e>
 8009488:	682b      	ldr	r3, [r5, #0]
 800948a:	b103      	cbz	r3, 800948e <_write_r+0x1e>
 800948c:	6023      	str	r3, [r4, #0]
 800948e:	bd38      	pop	{r3, r4, r5, pc}
 8009490:	20001da8 	.word	0x20001da8

08009494 <__errno>:
 8009494:	4b01      	ldr	r3, [pc, #4]	@ (800949c <__errno+0x8>)
 8009496:	6818      	ldr	r0, [r3, #0]
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	20000190 	.word	0x20000190

080094a0 <__libc_init_array>:
 80094a0:	b570      	push	{r4, r5, r6, lr}
 80094a2:	4d0d      	ldr	r5, [pc, #52]	@ (80094d8 <__libc_init_array+0x38>)
 80094a4:	4c0d      	ldr	r4, [pc, #52]	@ (80094dc <__libc_init_array+0x3c>)
 80094a6:	1b64      	subs	r4, r4, r5
 80094a8:	10a4      	asrs	r4, r4, #2
 80094aa:	2600      	movs	r6, #0
 80094ac:	42a6      	cmp	r6, r4
 80094ae:	d109      	bne.n	80094c4 <__libc_init_array+0x24>
 80094b0:	4d0b      	ldr	r5, [pc, #44]	@ (80094e0 <__libc_init_array+0x40>)
 80094b2:	4c0c      	ldr	r4, [pc, #48]	@ (80094e4 <__libc_init_array+0x44>)
 80094b4:	f000 fdea 	bl	800a08c <_init>
 80094b8:	1b64      	subs	r4, r4, r5
 80094ba:	10a4      	asrs	r4, r4, #2
 80094bc:	2600      	movs	r6, #0
 80094be:	42a6      	cmp	r6, r4
 80094c0:	d105      	bne.n	80094ce <__libc_init_array+0x2e>
 80094c2:	bd70      	pop	{r4, r5, r6, pc}
 80094c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80094c8:	4798      	blx	r3
 80094ca:	3601      	adds	r6, #1
 80094cc:	e7ee      	b.n	80094ac <__libc_init_array+0xc>
 80094ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80094d2:	4798      	blx	r3
 80094d4:	3601      	adds	r6, #1
 80094d6:	e7f2      	b.n	80094be <__libc_init_array+0x1e>
 80094d8:	0800a170 	.word	0x0800a170
 80094dc:	0800a170 	.word	0x0800a170
 80094e0:	0800a170 	.word	0x0800a170
 80094e4:	0800a174 	.word	0x0800a174

080094e8 <__retarget_lock_init_recursive>:
 80094e8:	4770      	bx	lr

080094ea <__retarget_lock_acquire_recursive>:
 80094ea:	4770      	bx	lr

080094ec <__retarget_lock_release_recursive>:
 80094ec:	4770      	bx	lr
	...

080094f0 <_free_r>:
 80094f0:	b538      	push	{r3, r4, r5, lr}
 80094f2:	4605      	mov	r5, r0
 80094f4:	2900      	cmp	r1, #0
 80094f6:	d041      	beq.n	800957c <_free_r+0x8c>
 80094f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094fc:	1f0c      	subs	r4, r1, #4
 80094fe:	2b00      	cmp	r3, #0
 8009500:	bfb8      	it	lt
 8009502:	18e4      	addlt	r4, r4, r3
 8009504:	f000 f8e0 	bl	80096c8 <__malloc_lock>
 8009508:	4a1d      	ldr	r2, [pc, #116]	@ (8009580 <_free_r+0x90>)
 800950a:	6813      	ldr	r3, [r2, #0]
 800950c:	b933      	cbnz	r3, 800951c <_free_r+0x2c>
 800950e:	6063      	str	r3, [r4, #4]
 8009510:	6014      	str	r4, [r2, #0]
 8009512:	4628      	mov	r0, r5
 8009514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009518:	f000 b8dc 	b.w	80096d4 <__malloc_unlock>
 800951c:	42a3      	cmp	r3, r4
 800951e:	d908      	bls.n	8009532 <_free_r+0x42>
 8009520:	6820      	ldr	r0, [r4, #0]
 8009522:	1821      	adds	r1, r4, r0
 8009524:	428b      	cmp	r3, r1
 8009526:	bf01      	itttt	eq
 8009528:	6819      	ldreq	r1, [r3, #0]
 800952a:	685b      	ldreq	r3, [r3, #4]
 800952c:	1809      	addeq	r1, r1, r0
 800952e:	6021      	streq	r1, [r4, #0]
 8009530:	e7ed      	b.n	800950e <_free_r+0x1e>
 8009532:	461a      	mov	r2, r3
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	b10b      	cbz	r3, 800953c <_free_r+0x4c>
 8009538:	42a3      	cmp	r3, r4
 800953a:	d9fa      	bls.n	8009532 <_free_r+0x42>
 800953c:	6811      	ldr	r1, [r2, #0]
 800953e:	1850      	adds	r0, r2, r1
 8009540:	42a0      	cmp	r0, r4
 8009542:	d10b      	bne.n	800955c <_free_r+0x6c>
 8009544:	6820      	ldr	r0, [r4, #0]
 8009546:	4401      	add	r1, r0
 8009548:	1850      	adds	r0, r2, r1
 800954a:	4283      	cmp	r3, r0
 800954c:	6011      	str	r1, [r2, #0]
 800954e:	d1e0      	bne.n	8009512 <_free_r+0x22>
 8009550:	6818      	ldr	r0, [r3, #0]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	6053      	str	r3, [r2, #4]
 8009556:	4408      	add	r0, r1
 8009558:	6010      	str	r0, [r2, #0]
 800955a:	e7da      	b.n	8009512 <_free_r+0x22>
 800955c:	d902      	bls.n	8009564 <_free_r+0x74>
 800955e:	230c      	movs	r3, #12
 8009560:	602b      	str	r3, [r5, #0]
 8009562:	e7d6      	b.n	8009512 <_free_r+0x22>
 8009564:	6820      	ldr	r0, [r4, #0]
 8009566:	1821      	adds	r1, r4, r0
 8009568:	428b      	cmp	r3, r1
 800956a:	bf04      	itt	eq
 800956c:	6819      	ldreq	r1, [r3, #0]
 800956e:	685b      	ldreq	r3, [r3, #4]
 8009570:	6063      	str	r3, [r4, #4]
 8009572:	bf04      	itt	eq
 8009574:	1809      	addeq	r1, r1, r0
 8009576:	6021      	streq	r1, [r4, #0]
 8009578:	6054      	str	r4, [r2, #4]
 800957a:	e7ca      	b.n	8009512 <_free_r+0x22>
 800957c:	bd38      	pop	{r3, r4, r5, pc}
 800957e:	bf00      	nop
 8009580:	20001db4 	.word	0x20001db4

08009584 <sbrk_aligned>:
 8009584:	b570      	push	{r4, r5, r6, lr}
 8009586:	4e0f      	ldr	r6, [pc, #60]	@ (80095c4 <sbrk_aligned+0x40>)
 8009588:	460c      	mov	r4, r1
 800958a:	6831      	ldr	r1, [r6, #0]
 800958c:	4605      	mov	r5, r0
 800958e:	b911      	cbnz	r1, 8009596 <sbrk_aligned+0x12>
 8009590:	f000 fce8 	bl	8009f64 <_sbrk_r>
 8009594:	6030      	str	r0, [r6, #0]
 8009596:	4621      	mov	r1, r4
 8009598:	4628      	mov	r0, r5
 800959a:	f000 fce3 	bl	8009f64 <_sbrk_r>
 800959e:	1c43      	adds	r3, r0, #1
 80095a0:	d103      	bne.n	80095aa <sbrk_aligned+0x26>
 80095a2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80095a6:	4620      	mov	r0, r4
 80095a8:	bd70      	pop	{r4, r5, r6, pc}
 80095aa:	1cc4      	adds	r4, r0, #3
 80095ac:	f024 0403 	bic.w	r4, r4, #3
 80095b0:	42a0      	cmp	r0, r4
 80095b2:	d0f8      	beq.n	80095a6 <sbrk_aligned+0x22>
 80095b4:	1a21      	subs	r1, r4, r0
 80095b6:	4628      	mov	r0, r5
 80095b8:	f000 fcd4 	bl	8009f64 <_sbrk_r>
 80095bc:	3001      	adds	r0, #1
 80095be:	d1f2      	bne.n	80095a6 <sbrk_aligned+0x22>
 80095c0:	e7ef      	b.n	80095a2 <sbrk_aligned+0x1e>
 80095c2:	bf00      	nop
 80095c4:	20001db0 	.word	0x20001db0

080095c8 <_malloc_r>:
 80095c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095cc:	1ccd      	adds	r5, r1, #3
 80095ce:	f025 0503 	bic.w	r5, r5, #3
 80095d2:	3508      	adds	r5, #8
 80095d4:	2d0c      	cmp	r5, #12
 80095d6:	bf38      	it	cc
 80095d8:	250c      	movcc	r5, #12
 80095da:	2d00      	cmp	r5, #0
 80095dc:	4606      	mov	r6, r0
 80095de:	db01      	blt.n	80095e4 <_malloc_r+0x1c>
 80095e0:	42a9      	cmp	r1, r5
 80095e2:	d904      	bls.n	80095ee <_malloc_r+0x26>
 80095e4:	230c      	movs	r3, #12
 80095e6:	6033      	str	r3, [r6, #0]
 80095e8:	2000      	movs	r0, #0
 80095ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80096c4 <_malloc_r+0xfc>
 80095f2:	f000 f869 	bl	80096c8 <__malloc_lock>
 80095f6:	f8d8 3000 	ldr.w	r3, [r8]
 80095fa:	461c      	mov	r4, r3
 80095fc:	bb44      	cbnz	r4, 8009650 <_malloc_r+0x88>
 80095fe:	4629      	mov	r1, r5
 8009600:	4630      	mov	r0, r6
 8009602:	f7ff ffbf 	bl	8009584 <sbrk_aligned>
 8009606:	1c43      	adds	r3, r0, #1
 8009608:	4604      	mov	r4, r0
 800960a:	d158      	bne.n	80096be <_malloc_r+0xf6>
 800960c:	f8d8 4000 	ldr.w	r4, [r8]
 8009610:	4627      	mov	r7, r4
 8009612:	2f00      	cmp	r7, #0
 8009614:	d143      	bne.n	800969e <_malloc_r+0xd6>
 8009616:	2c00      	cmp	r4, #0
 8009618:	d04b      	beq.n	80096b2 <_malloc_r+0xea>
 800961a:	6823      	ldr	r3, [r4, #0]
 800961c:	4639      	mov	r1, r7
 800961e:	4630      	mov	r0, r6
 8009620:	eb04 0903 	add.w	r9, r4, r3
 8009624:	f000 fc9e 	bl	8009f64 <_sbrk_r>
 8009628:	4581      	cmp	r9, r0
 800962a:	d142      	bne.n	80096b2 <_malloc_r+0xea>
 800962c:	6821      	ldr	r1, [r4, #0]
 800962e:	1a6d      	subs	r5, r5, r1
 8009630:	4629      	mov	r1, r5
 8009632:	4630      	mov	r0, r6
 8009634:	f7ff ffa6 	bl	8009584 <sbrk_aligned>
 8009638:	3001      	adds	r0, #1
 800963a:	d03a      	beq.n	80096b2 <_malloc_r+0xea>
 800963c:	6823      	ldr	r3, [r4, #0]
 800963e:	442b      	add	r3, r5
 8009640:	6023      	str	r3, [r4, #0]
 8009642:	f8d8 3000 	ldr.w	r3, [r8]
 8009646:	685a      	ldr	r2, [r3, #4]
 8009648:	bb62      	cbnz	r2, 80096a4 <_malloc_r+0xdc>
 800964a:	f8c8 7000 	str.w	r7, [r8]
 800964e:	e00f      	b.n	8009670 <_malloc_r+0xa8>
 8009650:	6822      	ldr	r2, [r4, #0]
 8009652:	1b52      	subs	r2, r2, r5
 8009654:	d420      	bmi.n	8009698 <_malloc_r+0xd0>
 8009656:	2a0b      	cmp	r2, #11
 8009658:	d917      	bls.n	800968a <_malloc_r+0xc2>
 800965a:	1961      	adds	r1, r4, r5
 800965c:	42a3      	cmp	r3, r4
 800965e:	6025      	str	r5, [r4, #0]
 8009660:	bf18      	it	ne
 8009662:	6059      	strne	r1, [r3, #4]
 8009664:	6863      	ldr	r3, [r4, #4]
 8009666:	bf08      	it	eq
 8009668:	f8c8 1000 	streq.w	r1, [r8]
 800966c:	5162      	str	r2, [r4, r5]
 800966e:	604b      	str	r3, [r1, #4]
 8009670:	4630      	mov	r0, r6
 8009672:	f000 f82f 	bl	80096d4 <__malloc_unlock>
 8009676:	f104 000b 	add.w	r0, r4, #11
 800967a:	1d23      	adds	r3, r4, #4
 800967c:	f020 0007 	bic.w	r0, r0, #7
 8009680:	1ac2      	subs	r2, r0, r3
 8009682:	bf1c      	itt	ne
 8009684:	1a1b      	subne	r3, r3, r0
 8009686:	50a3      	strne	r3, [r4, r2]
 8009688:	e7af      	b.n	80095ea <_malloc_r+0x22>
 800968a:	6862      	ldr	r2, [r4, #4]
 800968c:	42a3      	cmp	r3, r4
 800968e:	bf0c      	ite	eq
 8009690:	f8c8 2000 	streq.w	r2, [r8]
 8009694:	605a      	strne	r2, [r3, #4]
 8009696:	e7eb      	b.n	8009670 <_malloc_r+0xa8>
 8009698:	4623      	mov	r3, r4
 800969a:	6864      	ldr	r4, [r4, #4]
 800969c:	e7ae      	b.n	80095fc <_malloc_r+0x34>
 800969e:	463c      	mov	r4, r7
 80096a0:	687f      	ldr	r7, [r7, #4]
 80096a2:	e7b6      	b.n	8009612 <_malloc_r+0x4a>
 80096a4:	461a      	mov	r2, r3
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	42a3      	cmp	r3, r4
 80096aa:	d1fb      	bne.n	80096a4 <_malloc_r+0xdc>
 80096ac:	2300      	movs	r3, #0
 80096ae:	6053      	str	r3, [r2, #4]
 80096b0:	e7de      	b.n	8009670 <_malloc_r+0xa8>
 80096b2:	230c      	movs	r3, #12
 80096b4:	6033      	str	r3, [r6, #0]
 80096b6:	4630      	mov	r0, r6
 80096b8:	f000 f80c 	bl	80096d4 <__malloc_unlock>
 80096bc:	e794      	b.n	80095e8 <_malloc_r+0x20>
 80096be:	6005      	str	r5, [r0, #0]
 80096c0:	e7d6      	b.n	8009670 <_malloc_r+0xa8>
 80096c2:	bf00      	nop
 80096c4:	20001db4 	.word	0x20001db4

080096c8 <__malloc_lock>:
 80096c8:	4801      	ldr	r0, [pc, #4]	@ (80096d0 <__malloc_lock+0x8>)
 80096ca:	f7ff bf0e 	b.w	80094ea <__retarget_lock_acquire_recursive>
 80096ce:	bf00      	nop
 80096d0:	20001dac 	.word	0x20001dac

080096d4 <__malloc_unlock>:
 80096d4:	4801      	ldr	r0, [pc, #4]	@ (80096dc <__malloc_unlock+0x8>)
 80096d6:	f7ff bf09 	b.w	80094ec <__retarget_lock_release_recursive>
 80096da:	bf00      	nop
 80096dc:	20001dac 	.word	0x20001dac

080096e0 <__sfputc_r>:
 80096e0:	6893      	ldr	r3, [r2, #8]
 80096e2:	3b01      	subs	r3, #1
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	b410      	push	{r4}
 80096e8:	6093      	str	r3, [r2, #8]
 80096ea:	da08      	bge.n	80096fe <__sfputc_r+0x1e>
 80096ec:	6994      	ldr	r4, [r2, #24]
 80096ee:	42a3      	cmp	r3, r4
 80096f0:	db01      	blt.n	80096f6 <__sfputc_r+0x16>
 80096f2:	290a      	cmp	r1, #10
 80096f4:	d103      	bne.n	80096fe <__sfputc_r+0x1e>
 80096f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096fa:	f000 bb9f 	b.w	8009e3c <__swbuf_r>
 80096fe:	6813      	ldr	r3, [r2, #0]
 8009700:	1c58      	adds	r0, r3, #1
 8009702:	6010      	str	r0, [r2, #0]
 8009704:	7019      	strb	r1, [r3, #0]
 8009706:	4608      	mov	r0, r1
 8009708:	f85d 4b04 	ldr.w	r4, [sp], #4
 800970c:	4770      	bx	lr

0800970e <__sfputs_r>:
 800970e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009710:	4606      	mov	r6, r0
 8009712:	460f      	mov	r7, r1
 8009714:	4614      	mov	r4, r2
 8009716:	18d5      	adds	r5, r2, r3
 8009718:	42ac      	cmp	r4, r5
 800971a:	d101      	bne.n	8009720 <__sfputs_r+0x12>
 800971c:	2000      	movs	r0, #0
 800971e:	e007      	b.n	8009730 <__sfputs_r+0x22>
 8009720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009724:	463a      	mov	r2, r7
 8009726:	4630      	mov	r0, r6
 8009728:	f7ff ffda 	bl	80096e0 <__sfputc_r>
 800972c:	1c43      	adds	r3, r0, #1
 800972e:	d1f3      	bne.n	8009718 <__sfputs_r+0xa>
 8009730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009734 <_vfiprintf_r>:
 8009734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009738:	460d      	mov	r5, r1
 800973a:	b09d      	sub	sp, #116	@ 0x74
 800973c:	4614      	mov	r4, r2
 800973e:	4698      	mov	r8, r3
 8009740:	4606      	mov	r6, r0
 8009742:	b118      	cbz	r0, 800974c <_vfiprintf_r+0x18>
 8009744:	6a03      	ldr	r3, [r0, #32]
 8009746:	b90b      	cbnz	r3, 800974c <_vfiprintf_r+0x18>
 8009748:	f7ff fdc2 	bl	80092d0 <__sinit>
 800974c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800974e:	07d9      	lsls	r1, r3, #31
 8009750:	d405      	bmi.n	800975e <_vfiprintf_r+0x2a>
 8009752:	89ab      	ldrh	r3, [r5, #12]
 8009754:	059a      	lsls	r2, r3, #22
 8009756:	d402      	bmi.n	800975e <_vfiprintf_r+0x2a>
 8009758:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800975a:	f7ff fec6 	bl	80094ea <__retarget_lock_acquire_recursive>
 800975e:	89ab      	ldrh	r3, [r5, #12]
 8009760:	071b      	lsls	r3, r3, #28
 8009762:	d501      	bpl.n	8009768 <_vfiprintf_r+0x34>
 8009764:	692b      	ldr	r3, [r5, #16]
 8009766:	b99b      	cbnz	r3, 8009790 <_vfiprintf_r+0x5c>
 8009768:	4629      	mov	r1, r5
 800976a:	4630      	mov	r0, r6
 800976c:	f000 fba4 	bl	8009eb8 <__swsetup_r>
 8009770:	b170      	cbz	r0, 8009790 <_vfiprintf_r+0x5c>
 8009772:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009774:	07dc      	lsls	r4, r3, #31
 8009776:	d504      	bpl.n	8009782 <_vfiprintf_r+0x4e>
 8009778:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800977c:	b01d      	add	sp, #116	@ 0x74
 800977e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009782:	89ab      	ldrh	r3, [r5, #12]
 8009784:	0598      	lsls	r0, r3, #22
 8009786:	d4f7      	bmi.n	8009778 <_vfiprintf_r+0x44>
 8009788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800978a:	f7ff feaf 	bl	80094ec <__retarget_lock_release_recursive>
 800978e:	e7f3      	b.n	8009778 <_vfiprintf_r+0x44>
 8009790:	2300      	movs	r3, #0
 8009792:	9309      	str	r3, [sp, #36]	@ 0x24
 8009794:	2320      	movs	r3, #32
 8009796:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800979a:	f8cd 800c 	str.w	r8, [sp, #12]
 800979e:	2330      	movs	r3, #48	@ 0x30
 80097a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009950 <_vfiprintf_r+0x21c>
 80097a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80097a8:	f04f 0901 	mov.w	r9, #1
 80097ac:	4623      	mov	r3, r4
 80097ae:	469a      	mov	sl, r3
 80097b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097b4:	b10a      	cbz	r2, 80097ba <_vfiprintf_r+0x86>
 80097b6:	2a25      	cmp	r2, #37	@ 0x25
 80097b8:	d1f9      	bne.n	80097ae <_vfiprintf_r+0x7a>
 80097ba:	ebba 0b04 	subs.w	fp, sl, r4
 80097be:	d00b      	beq.n	80097d8 <_vfiprintf_r+0xa4>
 80097c0:	465b      	mov	r3, fp
 80097c2:	4622      	mov	r2, r4
 80097c4:	4629      	mov	r1, r5
 80097c6:	4630      	mov	r0, r6
 80097c8:	f7ff ffa1 	bl	800970e <__sfputs_r>
 80097cc:	3001      	adds	r0, #1
 80097ce:	f000 80a7 	beq.w	8009920 <_vfiprintf_r+0x1ec>
 80097d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097d4:	445a      	add	r2, fp
 80097d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80097d8:	f89a 3000 	ldrb.w	r3, [sl]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f000 809f 	beq.w	8009920 <_vfiprintf_r+0x1ec>
 80097e2:	2300      	movs	r3, #0
 80097e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80097e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097ec:	f10a 0a01 	add.w	sl, sl, #1
 80097f0:	9304      	str	r3, [sp, #16]
 80097f2:	9307      	str	r3, [sp, #28]
 80097f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80097f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80097fa:	4654      	mov	r4, sl
 80097fc:	2205      	movs	r2, #5
 80097fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009802:	4853      	ldr	r0, [pc, #332]	@ (8009950 <_vfiprintf_r+0x21c>)
 8009804:	f7f6 fd0c 	bl	8000220 <memchr>
 8009808:	9a04      	ldr	r2, [sp, #16]
 800980a:	b9d8      	cbnz	r0, 8009844 <_vfiprintf_r+0x110>
 800980c:	06d1      	lsls	r1, r2, #27
 800980e:	bf44      	itt	mi
 8009810:	2320      	movmi	r3, #32
 8009812:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009816:	0713      	lsls	r3, r2, #28
 8009818:	bf44      	itt	mi
 800981a:	232b      	movmi	r3, #43	@ 0x2b
 800981c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009820:	f89a 3000 	ldrb.w	r3, [sl]
 8009824:	2b2a      	cmp	r3, #42	@ 0x2a
 8009826:	d015      	beq.n	8009854 <_vfiprintf_r+0x120>
 8009828:	9a07      	ldr	r2, [sp, #28]
 800982a:	4654      	mov	r4, sl
 800982c:	2000      	movs	r0, #0
 800982e:	f04f 0c0a 	mov.w	ip, #10
 8009832:	4621      	mov	r1, r4
 8009834:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009838:	3b30      	subs	r3, #48	@ 0x30
 800983a:	2b09      	cmp	r3, #9
 800983c:	d94b      	bls.n	80098d6 <_vfiprintf_r+0x1a2>
 800983e:	b1b0      	cbz	r0, 800986e <_vfiprintf_r+0x13a>
 8009840:	9207      	str	r2, [sp, #28]
 8009842:	e014      	b.n	800986e <_vfiprintf_r+0x13a>
 8009844:	eba0 0308 	sub.w	r3, r0, r8
 8009848:	fa09 f303 	lsl.w	r3, r9, r3
 800984c:	4313      	orrs	r3, r2
 800984e:	9304      	str	r3, [sp, #16]
 8009850:	46a2      	mov	sl, r4
 8009852:	e7d2      	b.n	80097fa <_vfiprintf_r+0xc6>
 8009854:	9b03      	ldr	r3, [sp, #12]
 8009856:	1d19      	adds	r1, r3, #4
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	9103      	str	r1, [sp, #12]
 800985c:	2b00      	cmp	r3, #0
 800985e:	bfbb      	ittet	lt
 8009860:	425b      	neglt	r3, r3
 8009862:	f042 0202 	orrlt.w	r2, r2, #2
 8009866:	9307      	strge	r3, [sp, #28]
 8009868:	9307      	strlt	r3, [sp, #28]
 800986a:	bfb8      	it	lt
 800986c:	9204      	strlt	r2, [sp, #16]
 800986e:	7823      	ldrb	r3, [r4, #0]
 8009870:	2b2e      	cmp	r3, #46	@ 0x2e
 8009872:	d10a      	bne.n	800988a <_vfiprintf_r+0x156>
 8009874:	7863      	ldrb	r3, [r4, #1]
 8009876:	2b2a      	cmp	r3, #42	@ 0x2a
 8009878:	d132      	bne.n	80098e0 <_vfiprintf_r+0x1ac>
 800987a:	9b03      	ldr	r3, [sp, #12]
 800987c:	1d1a      	adds	r2, r3, #4
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	9203      	str	r2, [sp, #12]
 8009882:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009886:	3402      	adds	r4, #2
 8009888:	9305      	str	r3, [sp, #20]
 800988a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009960 <_vfiprintf_r+0x22c>
 800988e:	7821      	ldrb	r1, [r4, #0]
 8009890:	2203      	movs	r2, #3
 8009892:	4650      	mov	r0, sl
 8009894:	f7f6 fcc4 	bl	8000220 <memchr>
 8009898:	b138      	cbz	r0, 80098aa <_vfiprintf_r+0x176>
 800989a:	9b04      	ldr	r3, [sp, #16]
 800989c:	eba0 000a 	sub.w	r0, r0, sl
 80098a0:	2240      	movs	r2, #64	@ 0x40
 80098a2:	4082      	lsls	r2, r0
 80098a4:	4313      	orrs	r3, r2
 80098a6:	3401      	adds	r4, #1
 80098a8:	9304      	str	r3, [sp, #16]
 80098aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098ae:	4829      	ldr	r0, [pc, #164]	@ (8009954 <_vfiprintf_r+0x220>)
 80098b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80098b4:	2206      	movs	r2, #6
 80098b6:	f7f6 fcb3 	bl	8000220 <memchr>
 80098ba:	2800      	cmp	r0, #0
 80098bc:	d03f      	beq.n	800993e <_vfiprintf_r+0x20a>
 80098be:	4b26      	ldr	r3, [pc, #152]	@ (8009958 <_vfiprintf_r+0x224>)
 80098c0:	bb1b      	cbnz	r3, 800990a <_vfiprintf_r+0x1d6>
 80098c2:	9b03      	ldr	r3, [sp, #12]
 80098c4:	3307      	adds	r3, #7
 80098c6:	f023 0307 	bic.w	r3, r3, #7
 80098ca:	3308      	adds	r3, #8
 80098cc:	9303      	str	r3, [sp, #12]
 80098ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098d0:	443b      	add	r3, r7
 80098d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80098d4:	e76a      	b.n	80097ac <_vfiprintf_r+0x78>
 80098d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80098da:	460c      	mov	r4, r1
 80098dc:	2001      	movs	r0, #1
 80098de:	e7a8      	b.n	8009832 <_vfiprintf_r+0xfe>
 80098e0:	2300      	movs	r3, #0
 80098e2:	3401      	adds	r4, #1
 80098e4:	9305      	str	r3, [sp, #20]
 80098e6:	4619      	mov	r1, r3
 80098e8:	f04f 0c0a 	mov.w	ip, #10
 80098ec:	4620      	mov	r0, r4
 80098ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098f2:	3a30      	subs	r2, #48	@ 0x30
 80098f4:	2a09      	cmp	r2, #9
 80098f6:	d903      	bls.n	8009900 <_vfiprintf_r+0x1cc>
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d0c6      	beq.n	800988a <_vfiprintf_r+0x156>
 80098fc:	9105      	str	r1, [sp, #20]
 80098fe:	e7c4      	b.n	800988a <_vfiprintf_r+0x156>
 8009900:	fb0c 2101 	mla	r1, ip, r1, r2
 8009904:	4604      	mov	r4, r0
 8009906:	2301      	movs	r3, #1
 8009908:	e7f0      	b.n	80098ec <_vfiprintf_r+0x1b8>
 800990a:	ab03      	add	r3, sp, #12
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	462a      	mov	r2, r5
 8009910:	4b12      	ldr	r3, [pc, #72]	@ (800995c <_vfiprintf_r+0x228>)
 8009912:	a904      	add	r1, sp, #16
 8009914:	4630      	mov	r0, r6
 8009916:	f3af 8000 	nop.w
 800991a:	4607      	mov	r7, r0
 800991c:	1c78      	adds	r0, r7, #1
 800991e:	d1d6      	bne.n	80098ce <_vfiprintf_r+0x19a>
 8009920:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009922:	07d9      	lsls	r1, r3, #31
 8009924:	d405      	bmi.n	8009932 <_vfiprintf_r+0x1fe>
 8009926:	89ab      	ldrh	r3, [r5, #12]
 8009928:	059a      	lsls	r2, r3, #22
 800992a:	d402      	bmi.n	8009932 <_vfiprintf_r+0x1fe>
 800992c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800992e:	f7ff fddd 	bl	80094ec <__retarget_lock_release_recursive>
 8009932:	89ab      	ldrh	r3, [r5, #12]
 8009934:	065b      	lsls	r3, r3, #25
 8009936:	f53f af1f 	bmi.w	8009778 <_vfiprintf_r+0x44>
 800993a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800993c:	e71e      	b.n	800977c <_vfiprintf_r+0x48>
 800993e:	ab03      	add	r3, sp, #12
 8009940:	9300      	str	r3, [sp, #0]
 8009942:	462a      	mov	r2, r5
 8009944:	4b05      	ldr	r3, [pc, #20]	@ (800995c <_vfiprintf_r+0x228>)
 8009946:	a904      	add	r1, sp, #16
 8009948:	4630      	mov	r0, r6
 800994a:	f000 f879 	bl	8009a40 <_printf_i>
 800994e:	e7e4      	b.n	800991a <_vfiprintf_r+0x1e6>
 8009950:	0800a134 	.word	0x0800a134
 8009954:	0800a13e 	.word	0x0800a13e
 8009958:	00000000 	.word	0x00000000
 800995c:	0800970f 	.word	0x0800970f
 8009960:	0800a13a 	.word	0x0800a13a

08009964 <_printf_common>:
 8009964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009968:	4616      	mov	r6, r2
 800996a:	4698      	mov	r8, r3
 800996c:	688a      	ldr	r2, [r1, #8]
 800996e:	690b      	ldr	r3, [r1, #16]
 8009970:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009974:	4293      	cmp	r3, r2
 8009976:	bfb8      	it	lt
 8009978:	4613      	movlt	r3, r2
 800997a:	6033      	str	r3, [r6, #0]
 800997c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009980:	4607      	mov	r7, r0
 8009982:	460c      	mov	r4, r1
 8009984:	b10a      	cbz	r2, 800998a <_printf_common+0x26>
 8009986:	3301      	adds	r3, #1
 8009988:	6033      	str	r3, [r6, #0]
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	0699      	lsls	r1, r3, #26
 800998e:	bf42      	ittt	mi
 8009990:	6833      	ldrmi	r3, [r6, #0]
 8009992:	3302      	addmi	r3, #2
 8009994:	6033      	strmi	r3, [r6, #0]
 8009996:	6825      	ldr	r5, [r4, #0]
 8009998:	f015 0506 	ands.w	r5, r5, #6
 800999c:	d106      	bne.n	80099ac <_printf_common+0x48>
 800999e:	f104 0a19 	add.w	sl, r4, #25
 80099a2:	68e3      	ldr	r3, [r4, #12]
 80099a4:	6832      	ldr	r2, [r6, #0]
 80099a6:	1a9b      	subs	r3, r3, r2
 80099a8:	42ab      	cmp	r3, r5
 80099aa:	dc26      	bgt.n	80099fa <_printf_common+0x96>
 80099ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80099b0:	6822      	ldr	r2, [r4, #0]
 80099b2:	3b00      	subs	r3, #0
 80099b4:	bf18      	it	ne
 80099b6:	2301      	movne	r3, #1
 80099b8:	0692      	lsls	r2, r2, #26
 80099ba:	d42b      	bmi.n	8009a14 <_printf_common+0xb0>
 80099bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80099c0:	4641      	mov	r1, r8
 80099c2:	4638      	mov	r0, r7
 80099c4:	47c8      	blx	r9
 80099c6:	3001      	adds	r0, #1
 80099c8:	d01e      	beq.n	8009a08 <_printf_common+0xa4>
 80099ca:	6823      	ldr	r3, [r4, #0]
 80099cc:	6922      	ldr	r2, [r4, #16]
 80099ce:	f003 0306 	and.w	r3, r3, #6
 80099d2:	2b04      	cmp	r3, #4
 80099d4:	bf02      	ittt	eq
 80099d6:	68e5      	ldreq	r5, [r4, #12]
 80099d8:	6833      	ldreq	r3, [r6, #0]
 80099da:	1aed      	subeq	r5, r5, r3
 80099dc:	68a3      	ldr	r3, [r4, #8]
 80099de:	bf0c      	ite	eq
 80099e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099e4:	2500      	movne	r5, #0
 80099e6:	4293      	cmp	r3, r2
 80099e8:	bfc4      	itt	gt
 80099ea:	1a9b      	subgt	r3, r3, r2
 80099ec:	18ed      	addgt	r5, r5, r3
 80099ee:	2600      	movs	r6, #0
 80099f0:	341a      	adds	r4, #26
 80099f2:	42b5      	cmp	r5, r6
 80099f4:	d11a      	bne.n	8009a2c <_printf_common+0xc8>
 80099f6:	2000      	movs	r0, #0
 80099f8:	e008      	b.n	8009a0c <_printf_common+0xa8>
 80099fa:	2301      	movs	r3, #1
 80099fc:	4652      	mov	r2, sl
 80099fe:	4641      	mov	r1, r8
 8009a00:	4638      	mov	r0, r7
 8009a02:	47c8      	blx	r9
 8009a04:	3001      	adds	r0, #1
 8009a06:	d103      	bne.n	8009a10 <_printf_common+0xac>
 8009a08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a10:	3501      	adds	r5, #1
 8009a12:	e7c6      	b.n	80099a2 <_printf_common+0x3e>
 8009a14:	18e1      	adds	r1, r4, r3
 8009a16:	1c5a      	adds	r2, r3, #1
 8009a18:	2030      	movs	r0, #48	@ 0x30
 8009a1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009a1e:	4422      	add	r2, r4
 8009a20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009a24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009a28:	3302      	adds	r3, #2
 8009a2a:	e7c7      	b.n	80099bc <_printf_common+0x58>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	4622      	mov	r2, r4
 8009a30:	4641      	mov	r1, r8
 8009a32:	4638      	mov	r0, r7
 8009a34:	47c8      	blx	r9
 8009a36:	3001      	adds	r0, #1
 8009a38:	d0e6      	beq.n	8009a08 <_printf_common+0xa4>
 8009a3a:	3601      	adds	r6, #1
 8009a3c:	e7d9      	b.n	80099f2 <_printf_common+0x8e>
	...

08009a40 <_printf_i>:
 8009a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a44:	7e0f      	ldrb	r7, [r1, #24]
 8009a46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009a48:	2f78      	cmp	r7, #120	@ 0x78
 8009a4a:	4691      	mov	r9, r2
 8009a4c:	4680      	mov	r8, r0
 8009a4e:	460c      	mov	r4, r1
 8009a50:	469a      	mov	sl, r3
 8009a52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009a56:	d807      	bhi.n	8009a68 <_printf_i+0x28>
 8009a58:	2f62      	cmp	r7, #98	@ 0x62
 8009a5a:	d80a      	bhi.n	8009a72 <_printf_i+0x32>
 8009a5c:	2f00      	cmp	r7, #0
 8009a5e:	f000 80d1 	beq.w	8009c04 <_printf_i+0x1c4>
 8009a62:	2f58      	cmp	r7, #88	@ 0x58
 8009a64:	f000 80b8 	beq.w	8009bd8 <_printf_i+0x198>
 8009a68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009a70:	e03a      	b.n	8009ae8 <_printf_i+0xa8>
 8009a72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009a76:	2b15      	cmp	r3, #21
 8009a78:	d8f6      	bhi.n	8009a68 <_printf_i+0x28>
 8009a7a:	a101      	add	r1, pc, #4	@ (adr r1, 8009a80 <_printf_i+0x40>)
 8009a7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a80:	08009ad9 	.word	0x08009ad9
 8009a84:	08009aed 	.word	0x08009aed
 8009a88:	08009a69 	.word	0x08009a69
 8009a8c:	08009a69 	.word	0x08009a69
 8009a90:	08009a69 	.word	0x08009a69
 8009a94:	08009a69 	.word	0x08009a69
 8009a98:	08009aed 	.word	0x08009aed
 8009a9c:	08009a69 	.word	0x08009a69
 8009aa0:	08009a69 	.word	0x08009a69
 8009aa4:	08009a69 	.word	0x08009a69
 8009aa8:	08009a69 	.word	0x08009a69
 8009aac:	08009beb 	.word	0x08009beb
 8009ab0:	08009b17 	.word	0x08009b17
 8009ab4:	08009ba5 	.word	0x08009ba5
 8009ab8:	08009a69 	.word	0x08009a69
 8009abc:	08009a69 	.word	0x08009a69
 8009ac0:	08009c0d 	.word	0x08009c0d
 8009ac4:	08009a69 	.word	0x08009a69
 8009ac8:	08009b17 	.word	0x08009b17
 8009acc:	08009a69 	.word	0x08009a69
 8009ad0:	08009a69 	.word	0x08009a69
 8009ad4:	08009bad 	.word	0x08009bad
 8009ad8:	6833      	ldr	r3, [r6, #0]
 8009ada:	1d1a      	adds	r2, r3, #4
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	6032      	str	r2, [r6, #0]
 8009ae0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ae4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e09c      	b.n	8009c26 <_printf_i+0x1e6>
 8009aec:	6833      	ldr	r3, [r6, #0]
 8009aee:	6820      	ldr	r0, [r4, #0]
 8009af0:	1d19      	adds	r1, r3, #4
 8009af2:	6031      	str	r1, [r6, #0]
 8009af4:	0606      	lsls	r6, r0, #24
 8009af6:	d501      	bpl.n	8009afc <_printf_i+0xbc>
 8009af8:	681d      	ldr	r5, [r3, #0]
 8009afa:	e003      	b.n	8009b04 <_printf_i+0xc4>
 8009afc:	0645      	lsls	r5, r0, #25
 8009afe:	d5fb      	bpl.n	8009af8 <_printf_i+0xb8>
 8009b00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009b04:	2d00      	cmp	r5, #0
 8009b06:	da03      	bge.n	8009b10 <_printf_i+0xd0>
 8009b08:	232d      	movs	r3, #45	@ 0x2d
 8009b0a:	426d      	negs	r5, r5
 8009b0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b10:	4858      	ldr	r0, [pc, #352]	@ (8009c74 <_printf_i+0x234>)
 8009b12:	230a      	movs	r3, #10
 8009b14:	e011      	b.n	8009b3a <_printf_i+0xfa>
 8009b16:	6821      	ldr	r1, [r4, #0]
 8009b18:	6833      	ldr	r3, [r6, #0]
 8009b1a:	0608      	lsls	r0, r1, #24
 8009b1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009b20:	d402      	bmi.n	8009b28 <_printf_i+0xe8>
 8009b22:	0649      	lsls	r1, r1, #25
 8009b24:	bf48      	it	mi
 8009b26:	b2ad      	uxthmi	r5, r5
 8009b28:	2f6f      	cmp	r7, #111	@ 0x6f
 8009b2a:	4852      	ldr	r0, [pc, #328]	@ (8009c74 <_printf_i+0x234>)
 8009b2c:	6033      	str	r3, [r6, #0]
 8009b2e:	bf14      	ite	ne
 8009b30:	230a      	movne	r3, #10
 8009b32:	2308      	moveq	r3, #8
 8009b34:	2100      	movs	r1, #0
 8009b36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009b3a:	6866      	ldr	r6, [r4, #4]
 8009b3c:	60a6      	str	r6, [r4, #8]
 8009b3e:	2e00      	cmp	r6, #0
 8009b40:	db05      	blt.n	8009b4e <_printf_i+0x10e>
 8009b42:	6821      	ldr	r1, [r4, #0]
 8009b44:	432e      	orrs	r6, r5
 8009b46:	f021 0104 	bic.w	r1, r1, #4
 8009b4a:	6021      	str	r1, [r4, #0]
 8009b4c:	d04b      	beq.n	8009be6 <_printf_i+0x1a6>
 8009b4e:	4616      	mov	r6, r2
 8009b50:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b54:	fb03 5711 	mls	r7, r3, r1, r5
 8009b58:	5dc7      	ldrb	r7, [r0, r7]
 8009b5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b5e:	462f      	mov	r7, r5
 8009b60:	42bb      	cmp	r3, r7
 8009b62:	460d      	mov	r5, r1
 8009b64:	d9f4      	bls.n	8009b50 <_printf_i+0x110>
 8009b66:	2b08      	cmp	r3, #8
 8009b68:	d10b      	bne.n	8009b82 <_printf_i+0x142>
 8009b6a:	6823      	ldr	r3, [r4, #0]
 8009b6c:	07df      	lsls	r7, r3, #31
 8009b6e:	d508      	bpl.n	8009b82 <_printf_i+0x142>
 8009b70:	6923      	ldr	r3, [r4, #16]
 8009b72:	6861      	ldr	r1, [r4, #4]
 8009b74:	4299      	cmp	r1, r3
 8009b76:	bfde      	ittt	le
 8009b78:	2330      	movle	r3, #48	@ 0x30
 8009b7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b7e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009b82:	1b92      	subs	r2, r2, r6
 8009b84:	6122      	str	r2, [r4, #16]
 8009b86:	f8cd a000 	str.w	sl, [sp]
 8009b8a:	464b      	mov	r3, r9
 8009b8c:	aa03      	add	r2, sp, #12
 8009b8e:	4621      	mov	r1, r4
 8009b90:	4640      	mov	r0, r8
 8009b92:	f7ff fee7 	bl	8009964 <_printf_common>
 8009b96:	3001      	adds	r0, #1
 8009b98:	d14a      	bne.n	8009c30 <_printf_i+0x1f0>
 8009b9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b9e:	b004      	add	sp, #16
 8009ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ba4:	6823      	ldr	r3, [r4, #0]
 8009ba6:	f043 0320 	orr.w	r3, r3, #32
 8009baa:	6023      	str	r3, [r4, #0]
 8009bac:	4832      	ldr	r0, [pc, #200]	@ (8009c78 <_printf_i+0x238>)
 8009bae:	2778      	movs	r7, #120	@ 0x78
 8009bb0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009bb4:	6823      	ldr	r3, [r4, #0]
 8009bb6:	6831      	ldr	r1, [r6, #0]
 8009bb8:	061f      	lsls	r7, r3, #24
 8009bba:	f851 5b04 	ldr.w	r5, [r1], #4
 8009bbe:	d402      	bmi.n	8009bc6 <_printf_i+0x186>
 8009bc0:	065f      	lsls	r7, r3, #25
 8009bc2:	bf48      	it	mi
 8009bc4:	b2ad      	uxthmi	r5, r5
 8009bc6:	6031      	str	r1, [r6, #0]
 8009bc8:	07d9      	lsls	r1, r3, #31
 8009bca:	bf44      	itt	mi
 8009bcc:	f043 0320 	orrmi.w	r3, r3, #32
 8009bd0:	6023      	strmi	r3, [r4, #0]
 8009bd2:	b11d      	cbz	r5, 8009bdc <_printf_i+0x19c>
 8009bd4:	2310      	movs	r3, #16
 8009bd6:	e7ad      	b.n	8009b34 <_printf_i+0xf4>
 8009bd8:	4826      	ldr	r0, [pc, #152]	@ (8009c74 <_printf_i+0x234>)
 8009bda:	e7e9      	b.n	8009bb0 <_printf_i+0x170>
 8009bdc:	6823      	ldr	r3, [r4, #0]
 8009bde:	f023 0320 	bic.w	r3, r3, #32
 8009be2:	6023      	str	r3, [r4, #0]
 8009be4:	e7f6      	b.n	8009bd4 <_printf_i+0x194>
 8009be6:	4616      	mov	r6, r2
 8009be8:	e7bd      	b.n	8009b66 <_printf_i+0x126>
 8009bea:	6833      	ldr	r3, [r6, #0]
 8009bec:	6825      	ldr	r5, [r4, #0]
 8009bee:	6961      	ldr	r1, [r4, #20]
 8009bf0:	1d18      	adds	r0, r3, #4
 8009bf2:	6030      	str	r0, [r6, #0]
 8009bf4:	062e      	lsls	r6, r5, #24
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	d501      	bpl.n	8009bfe <_printf_i+0x1be>
 8009bfa:	6019      	str	r1, [r3, #0]
 8009bfc:	e002      	b.n	8009c04 <_printf_i+0x1c4>
 8009bfe:	0668      	lsls	r0, r5, #25
 8009c00:	d5fb      	bpl.n	8009bfa <_printf_i+0x1ba>
 8009c02:	8019      	strh	r1, [r3, #0]
 8009c04:	2300      	movs	r3, #0
 8009c06:	6123      	str	r3, [r4, #16]
 8009c08:	4616      	mov	r6, r2
 8009c0a:	e7bc      	b.n	8009b86 <_printf_i+0x146>
 8009c0c:	6833      	ldr	r3, [r6, #0]
 8009c0e:	1d1a      	adds	r2, r3, #4
 8009c10:	6032      	str	r2, [r6, #0]
 8009c12:	681e      	ldr	r6, [r3, #0]
 8009c14:	6862      	ldr	r2, [r4, #4]
 8009c16:	2100      	movs	r1, #0
 8009c18:	4630      	mov	r0, r6
 8009c1a:	f7f6 fb01 	bl	8000220 <memchr>
 8009c1e:	b108      	cbz	r0, 8009c24 <_printf_i+0x1e4>
 8009c20:	1b80      	subs	r0, r0, r6
 8009c22:	6060      	str	r0, [r4, #4]
 8009c24:	6863      	ldr	r3, [r4, #4]
 8009c26:	6123      	str	r3, [r4, #16]
 8009c28:	2300      	movs	r3, #0
 8009c2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c2e:	e7aa      	b.n	8009b86 <_printf_i+0x146>
 8009c30:	6923      	ldr	r3, [r4, #16]
 8009c32:	4632      	mov	r2, r6
 8009c34:	4649      	mov	r1, r9
 8009c36:	4640      	mov	r0, r8
 8009c38:	47d0      	blx	sl
 8009c3a:	3001      	adds	r0, #1
 8009c3c:	d0ad      	beq.n	8009b9a <_printf_i+0x15a>
 8009c3e:	6823      	ldr	r3, [r4, #0]
 8009c40:	079b      	lsls	r3, r3, #30
 8009c42:	d413      	bmi.n	8009c6c <_printf_i+0x22c>
 8009c44:	68e0      	ldr	r0, [r4, #12]
 8009c46:	9b03      	ldr	r3, [sp, #12]
 8009c48:	4298      	cmp	r0, r3
 8009c4a:	bfb8      	it	lt
 8009c4c:	4618      	movlt	r0, r3
 8009c4e:	e7a6      	b.n	8009b9e <_printf_i+0x15e>
 8009c50:	2301      	movs	r3, #1
 8009c52:	4632      	mov	r2, r6
 8009c54:	4649      	mov	r1, r9
 8009c56:	4640      	mov	r0, r8
 8009c58:	47d0      	blx	sl
 8009c5a:	3001      	adds	r0, #1
 8009c5c:	d09d      	beq.n	8009b9a <_printf_i+0x15a>
 8009c5e:	3501      	adds	r5, #1
 8009c60:	68e3      	ldr	r3, [r4, #12]
 8009c62:	9903      	ldr	r1, [sp, #12]
 8009c64:	1a5b      	subs	r3, r3, r1
 8009c66:	42ab      	cmp	r3, r5
 8009c68:	dcf2      	bgt.n	8009c50 <_printf_i+0x210>
 8009c6a:	e7eb      	b.n	8009c44 <_printf_i+0x204>
 8009c6c:	2500      	movs	r5, #0
 8009c6e:	f104 0619 	add.w	r6, r4, #25
 8009c72:	e7f5      	b.n	8009c60 <_printf_i+0x220>
 8009c74:	0800a145 	.word	0x0800a145
 8009c78:	0800a156 	.word	0x0800a156

08009c7c <__sflush_r>:
 8009c7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c84:	0716      	lsls	r6, r2, #28
 8009c86:	4605      	mov	r5, r0
 8009c88:	460c      	mov	r4, r1
 8009c8a:	d454      	bmi.n	8009d36 <__sflush_r+0xba>
 8009c8c:	684b      	ldr	r3, [r1, #4]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	dc02      	bgt.n	8009c98 <__sflush_r+0x1c>
 8009c92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	dd48      	ble.n	8009d2a <__sflush_r+0xae>
 8009c98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c9a:	2e00      	cmp	r6, #0
 8009c9c:	d045      	beq.n	8009d2a <__sflush_r+0xae>
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009ca4:	682f      	ldr	r7, [r5, #0]
 8009ca6:	6a21      	ldr	r1, [r4, #32]
 8009ca8:	602b      	str	r3, [r5, #0]
 8009caa:	d030      	beq.n	8009d0e <__sflush_r+0x92>
 8009cac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009cae:	89a3      	ldrh	r3, [r4, #12]
 8009cb0:	0759      	lsls	r1, r3, #29
 8009cb2:	d505      	bpl.n	8009cc0 <__sflush_r+0x44>
 8009cb4:	6863      	ldr	r3, [r4, #4]
 8009cb6:	1ad2      	subs	r2, r2, r3
 8009cb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009cba:	b10b      	cbz	r3, 8009cc0 <__sflush_r+0x44>
 8009cbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009cbe:	1ad2      	subs	r2, r2, r3
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009cc4:	6a21      	ldr	r1, [r4, #32]
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	47b0      	blx	r6
 8009cca:	1c43      	adds	r3, r0, #1
 8009ccc:	89a3      	ldrh	r3, [r4, #12]
 8009cce:	d106      	bne.n	8009cde <__sflush_r+0x62>
 8009cd0:	6829      	ldr	r1, [r5, #0]
 8009cd2:	291d      	cmp	r1, #29
 8009cd4:	d82b      	bhi.n	8009d2e <__sflush_r+0xb2>
 8009cd6:	4a2a      	ldr	r2, [pc, #168]	@ (8009d80 <__sflush_r+0x104>)
 8009cd8:	40ca      	lsrs	r2, r1
 8009cda:	07d6      	lsls	r6, r2, #31
 8009cdc:	d527      	bpl.n	8009d2e <__sflush_r+0xb2>
 8009cde:	2200      	movs	r2, #0
 8009ce0:	6062      	str	r2, [r4, #4]
 8009ce2:	04d9      	lsls	r1, r3, #19
 8009ce4:	6922      	ldr	r2, [r4, #16]
 8009ce6:	6022      	str	r2, [r4, #0]
 8009ce8:	d504      	bpl.n	8009cf4 <__sflush_r+0x78>
 8009cea:	1c42      	adds	r2, r0, #1
 8009cec:	d101      	bne.n	8009cf2 <__sflush_r+0x76>
 8009cee:	682b      	ldr	r3, [r5, #0]
 8009cf0:	b903      	cbnz	r3, 8009cf4 <__sflush_r+0x78>
 8009cf2:	6560      	str	r0, [r4, #84]	@ 0x54
 8009cf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009cf6:	602f      	str	r7, [r5, #0]
 8009cf8:	b1b9      	cbz	r1, 8009d2a <__sflush_r+0xae>
 8009cfa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009cfe:	4299      	cmp	r1, r3
 8009d00:	d002      	beq.n	8009d08 <__sflush_r+0x8c>
 8009d02:	4628      	mov	r0, r5
 8009d04:	f7ff fbf4 	bl	80094f0 <_free_r>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d0c:	e00d      	b.n	8009d2a <__sflush_r+0xae>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	4628      	mov	r0, r5
 8009d12:	47b0      	blx	r6
 8009d14:	4602      	mov	r2, r0
 8009d16:	1c50      	adds	r0, r2, #1
 8009d18:	d1c9      	bne.n	8009cae <__sflush_r+0x32>
 8009d1a:	682b      	ldr	r3, [r5, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d0c6      	beq.n	8009cae <__sflush_r+0x32>
 8009d20:	2b1d      	cmp	r3, #29
 8009d22:	d001      	beq.n	8009d28 <__sflush_r+0xac>
 8009d24:	2b16      	cmp	r3, #22
 8009d26:	d11e      	bne.n	8009d66 <__sflush_r+0xea>
 8009d28:	602f      	str	r7, [r5, #0]
 8009d2a:	2000      	movs	r0, #0
 8009d2c:	e022      	b.n	8009d74 <__sflush_r+0xf8>
 8009d2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d32:	b21b      	sxth	r3, r3
 8009d34:	e01b      	b.n	8009d6e <__sflush_r+0xf2>
 8009d36:	690f      	ldr	r7, [r1, #16]
 8009d38:	2f00      	cmp	r7, #0
 8009d3a:	d0f6      	beq.n	8009d2a <__sflush_r+0xae>
 8009d3c:	0793      	lsls	r3, r2, #30
 8009d3e:	680e      	ldr	r6, [r1, #0]
 8009d40:	bf08      	it	eq
 8009d42:	694b      	ldreq	r3, [r1, #20]
 8009d44:	600f      	str	r7, [r1, #0]
 8009d46:	bf18      	it	ne
 8009d48:	2300      	movne	r3, #0
 8009d4a:	eba6 0807 	sub.w	r8, r6, r7
 8009d4e:	608b      	str	r3, [r1, #8]
 8009d50:	f1b8 0f00 	cmp.w	r8, #0
 8009d54:	dde9      	ble.n	8009d2a <__sflush_r+0xae>
 8009d56:	6a21      	ldr	r1, [r4, #32]
 8009d58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009d5a:	4643      	mov	r3, r8
 8009d5c:	463a      	mov	r2, r7
 8009d5e:	4628      	mov	r0, r5
 8009d60:	47b0      	blx	r6
 8009d62:	2800      	cmp	r0, #0
 8009d64:	dc08      	bgt.n	8009d78 <__sflush_r+0xfc>
 8009d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d6e:	81a3      	strh	r3, [r4, #12]
 8009d70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d78:	4407      	add	r7, r0
 8009d7a:	eba8 0800 	sub.w	r8, r8, r0
 8009d7e:	e7e7      	b.n	8009d50 <__sflush_r+0xd4>
 8009d80:	20400001 	.word	0x20400001

08009d84 <_fflush_r>:
 8009d84:	b538      	push	{r3, r4, r5, lr}
 8009d86:	690b      	ldr	r3, [r1, #16]
 8009d88:	4605      	mov	r5, r0
 8009d8a:	460c      	mov	r4, r1
 8009d8c:	b913      	cbnz	r3, 8009d94 <_fflush_r+0x10>
 8009d8e:	2500      	movs	r5, #0
 8009d90:	4628      	mov	r0, r5
 8009d92:	bd38      	pop	{r3, r4, r5, pc}
 8009d94:	b118      	cbz	r0, 8009d9e <_fflush_r+0x1a>
 8009d96:	6a03      	ldr	r3, [r0, #32]
 8009d98:	b90b      	cbnz	r3, 8009d9e <_fflush_r+0x1a>
 8009d9a:	f7ff fa99 	bl	80092d0 <__sinit>
 8009d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d0f3      	beq.n	8009d8e <_fflush_r+0xa>
 8009da6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009da8:	07d0      	lsls	r0, r2, #31
 8009daa:	d404      	bmi.n	8009db6 <_fflush_r+0x32>
 8009dac:	0599      	lsls	r1, r3, #22
 8009dae:	d402      	bmi.n	8009db6 <_fflush_r+0x32>
 8009db0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009db2:	f7ff fb9a 	bl	80094ea <__retarget_lock_acquire_recursive>
 8009db6:	4628      	mov	r0, r5
 8009db8:	4621      	mov	r1, r4
 8009dba:	f7ff ff5f 	bl	8009c7c <__sflush_r>
 8009dbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009dc0:	07da      	lsls	r2, r3, #31
 8009dc2:	4605      	mov	r5, r0
 8009dc4:	d4e4      	bmi.n	8009d90 <_fflush_r+0xc>
 8009dc6:	89a3      	ldrh	r3, [r4, #12]
 8009dc8:	059b      	lsls	r3, r3, #22
 8009dca:	d4e1      	bmi.n	8009d90 <_fflush_r+0xc>
 8009dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009dce:	f7ff fb8d 	bl	80094ec <__retarget_lock_release_recursive>
 8009dd2:	e7dd      	b.n	8009d90 <_fflush_r+0xc>

08009dd4 <_putc_r>:
 8009dd4:	b570      	push	{r4, r5, r6, lr}
 8009dd6:	460d      	mov	r5, r1
 8009dd8:	4614      	mov	r4, r2
 8009dda:	4606      	mov	r6, r0
 8009ddc:	b118      	cbz	r0, 8009de6 <_putc_r+0x12>
 8009dde:	6a03      	ldr	r3, [r0, #32]
 8009de0:	b90b      	cbnz	r3, 8009de6 <_putc_r+0x12>
 8009de2:	f7ff fa75 	bl	80092d0 <__sinit>
 8009de6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009de8:	07d8      	lsls	r0, r3, #31
 8009dea:	d405      	bmi.n	8009df8 <_putc_r+0x24>
 8009dec:	89a3      	ldrh	r3, [r4, #12]
 8009dee:	0599      	lsls	r1, r3, #22
 8009df0:	d402      	bmi.n	8009df8 <_putc_r+0x24>
 8009df2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009df4:	f7ff fb79 	bl	80094ea <__retarget_lock_acquire_recursive>
 8009df8:	68a3      	ldr	r3, [r4, #8]
 8009dfa:	3b01      	subs	r3, #1
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	60a3      	str	r3, [r4, #8]
 8009e00:	da05      	bge.n	8009e0e <_putc_r+0x3a>
 8009e02:	69a2      	ldr	r2, [r4, #24]
 8009e04:	4293      	cmp	r3, r2
 8009e06:	db12      	blt.n	8009e2e <_putc_r+0x5a>
 8009e08:	b2eb      	uxtb	r3, r5
 8009e0a:	2b0a      	cmp	r3, #10
 8009e0c:	d00f      	beq.n	8009e2e <_putc_r+0x5a>
 8009e0e:	6823      	ldr	r3, [r4, #0]
 8009e10:	1c5a      	adds	r2, r3, #1
 8009e12:	6022      	str	r2, [r4, #0]
 8009e14:	701d      	strb	r5, [r3, #0]
 8009e16:	b2ed      	uxtb	r5, r5
 8009e18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e1a:	07da      	lsls	r2, r3, #31
 8009e1c:	d405      	bmi.n	8009e2a <_putc_r+0x56>
 8009e1e:	89a3      	ldrh	r3, [r4, #12]
 8009e20:	059b      	lsls	r3, r3, #22
 8009e22:	d402      	bmi.n	8009e2a <_putc_r+0x56>
 8009e24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e26:	f7ff fb61 	bl	80094ec <__retarget_lock_release_recursive>
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	bd70      	pop	{r4, r5, r6, pc}
 8009e2e:	4629      	mov	r1, r5
 8009e30:	4622      	mov	r2, r4
 8009e32:	4630      	mov	r0, r6
 8009e34:	f000 f802 	bl	8009e3c <__swbuf_r>
 8009e38:	4605      	mov	r5, r0
 8009e3a:	e7ed      	b.n	8009e18 <_putc_r+0x44>

08009e3c <__swbuf_r>:
 8009e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e3e:	460e      	mov	r6, r1
 8009e40:	4614      	mov	r4, r2
 8009e42:	4605      	mov	r5, r0
 8009e44:	b118      	cbz	r0, 8009e4e <__swbuf_r+0x12>
 8009e46:	6a03      	ldr	r3, [r0, #32]
 8009e48:	b90b      	cbnz	r3, 8009e4e <__swbuf_r+0x12>
 8009e4a:	f7ff fa41 	bl	80092d0 <__sinit>
 8009e4e:	69a3      	ldr	r3, [r4, #24]
 8009e50:	60a3      	str	r3, [r4, #8]
 8009e52:	89a3      	ldrh	r3, [r4, #12]
 8009e54:	071a      	lsls	r2, r3, #28
 8009e56:	d501      	bpl.n	8009e5c <__swbuf_r+0x20>
 8009e58:	6923      	ldr	r3, [r4, #16]
 8009e5a:	b943      	cbnz	r3, 8009e6e <__swbuf_r+0x32>
 8009e5c:	4621      	mov	r1, r4
 8009e5e:	4628      	mov	r0, r5
 8009e60:	f000 f82a 	bl	8009eb8 <__swsetup_r>
 8009e64:	b118      	cbz	r0, 8009e6e <__swbuf_r+0x32>
 8009e66:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009e6a:	4638      	mov	r0, r7
 8009e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e6e:	6823      	ldr	r3, [r4, #0]
 8009e70:	6922      	ldr	r2, [r4, #16]
 8009e72:	1a98      	subs	r0, r3, r2
 8009e74:	6963      	ldr	r3, [r4, #20]
 8009e76:	b2f6      	uxtb	r6, r6
 8009e78:	4283      	cmp	r3, r0
 8009e7a:	4637      	mov	r7, r6
 8009e7c:	dc05      	bgt.n	8009e8a <__swbuf_r+0x4e>
 8009e7e:	4621      	mov	r1, r4
 8009e80:	4628      	mov	r0, r5
 8009e82:	f7ff ff7f 	bl	8009d84 <_fflush_r>
 8009e86:	2800      	cmp	r0, #0
 8009e88:	d1ed      	bne.n	8009e66 <__swbuf_r+0x2a>
 8009e8a:	68a3      	ldr	r3, [r4, #8]
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	60a3      	str	r3, [r4, #8]
 8009e90:	6823      	ldr	r3, [r4, #0]
 8009e92:	1c5a      	adds	r2, r3, #1
 8009e94:	6022      	str	r2, [r4, #0]
 8009e96:	701e      	strb	r6, [r3, #0]
 8009e98:	6962      	ldr	r2, [r4, #20]
 8009e9a:	1c43      	adds	r3, r0, #1
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d004      	beq.n	8009eaa <__swbuf_r+0x6e>
 8009ea0:	89a3      	ldrh	r3, [r4, #12]
 8009ea2:	07db      	lsls	r3, r3, #31
 8009ea4:	d5e1      	bpl.n	8009e6a <__swbuf_r+0x2e>
 8009ea6:	2e0a      	cmp	r6, #10
 8009ea8:	d1df      	bne.n	8009e6a <__swbuf_r+0x2e>
 8009eaa:	4621      	mov	r1, r4
 8009eac:	4628      	mov	r0, r5
 8009eae:	f7ff ff69 	bl	8009d84 <_fflush_r>
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	d0d9      	beq.n	8009e6a <__swbuf_r+0x2e>
 8009eb6:	e7d6      	b.n	8009e66 <__swbuf_r+0x2a>

08009eb8 <__swsetup_r>:
 8009eb8:	b538      	push	{r3, r4, r5, lr}
 8009eba:	4b29      	ldr	r3, [pc, #164]	@ (8009f60 <__swsetup_r+0xa8>)
 8009ebc:	4605      	mov	r5, r0
 8009ebe:	6818      	ldr	r0, [r3, #0]
 8009ec0:	460c      	mov	r4, r1
 8009ec2:	b118      	cbz	r0, 8009ecc <__swsetup_r+0x14>
 8009ec4:	6a03      	ldr	r3, [r0, #32]
 8009ec6:	b90b      	cbnz	r3, 8009ecc <__swsetup_r+0x14>
 8009ec8:	f7ff fa02 	bl	80092d0 <__sinit>
 8009ecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ed0:	0719      	lsls	r1, r3, #28
 8009ed2:	d422      	bmi.n	8009f1a <__swsetup_r+0x62>
 8009ed4:	06da      	lsls	r2, r3, #27
 8009ed6:	d407      	bmi.n	8009ee8 <__swsetup_r+0x30>
 8009ed8:	2209      	movs	r2, #9
 8009eda:	602a      	str	r2, [r5, #0]
 8009edc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ee0:	81a3      	strh	r3, [r4, #12]
 8009ee2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ee6:	e033      	b.n	8009f50 <__swsetup_r+0x98>
 8009ee8:	0758      	lsls	r0, r3, #29
 8009eea:	d512      	bpl.n	8009f12 <__swsetup_r+0x5a>
 8009eec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009eee:	b141      	cbz	r1, 8009f02 <__swsetup_r+0x4a>
 8009ef0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ef4:	4299      	cmp	r1, r3
 8009ef6:	d002      	beq.n	8009efe <__swsetup_r+0x46>
 8009ef8:	4628      	mov	r0, r5
 8009efa:	f7ff faf9 	bl	80094f0 <_free_r>
 8009efe:	2300      	movs	r3, #0
 8009f00:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f02:	89a3      	ldrh	r3, [r4, #12]
 8009f04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f08:	81a3      	strh	r3, [r4, #12]
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	6063      	str	r3, [r4, #4]
 8009f0e:	6923      	ldr	r3, [r4, #16]
 8009f10:	6023      	str	r3, [r4, #0]
 8009f12:	89a3      	ldrh	r3, [r4, #12]
 8009f14:	f043 0308 	orr.w	r3, r3, #8
 8009f18:	81a3      	strh	r3, [r4, #12]
 8009f1a:	6923      	ldr	r3, [r4, #16]
 8009f1c:	b94b      	cbnz	r3, 8009f32 <__swsetup_r+0x7a>
 8009f1e:	89a3      	ldrh	r3, [r4, #12]
 8009f20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f28:	d003      	beq.n	8009f32 <__swsetup_r+0x7a>
 8009f2a:	4621      	mov	r1, r4
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	f000 f84f 	bl	8009fd0 <__smakebuf_r>
 8009f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f36:	f013 0201 	ands.w	r2, r3, #1
 8009f3a:	d00a      	beq.n	8009f52 <__swsetup_r+0x9a>
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	60a2      	str	r2, [r4, #8]
 8009f40:	6962      	ldr	r2, [r4, #20]
 8009f42:	4252      	negs	r2, r2
 8009f44:	61a2      	str	r2, [r4, #24]
 8009f46:	6922      	ldr	r2, [r4, #16]
 8009f48:	b942      	cbnz	r2, 8009f5c <__swsetup_r+0xa4>
 8009f4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009f4e:	d1c5      	bne.n	8009edc <__swsetup_r+0x24>
 8009f50:	bd38      	pop	{r3, r4, r5, pc}
 8009f52:	0799      	lsls	r1, r3, #30
 8009f54:	bf58      	it	pl
 8009f56:	6962      	ldrpl	r2, [r4, #20]
 8009f58:	60a2      	str	r2, [r4, #8]
 8009f5a:	e7f4      	b.n	8009f46 <__swsetup_r+0x8e>
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	e7f7      	b.n	8009f50 <__swsetup_r+0x98>
 8009f60:	20000190 	.word	0x20000190

08009f64 <_sbrk_r>:
 8009f64:	b538      	push	{r3, r4, r5, lr}
 8009f66:	4d06      	ldr	r5, [pc, #24]	@ (8009f80 <_sbrk_r+0x1c>)
 8009f68:	2300      	movs	r3, #0
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	4608      	mov	r0, r1
 8009f6e:	602b      	str	r3, [r5, #0]
 8009f70:	f7f6 fb64 	bl	800063c <_sbrk>
 8009f74:	1c43      	adds	r3, r0, #1
 8009f76:	d102      	bne.n	8009f7e <_sbrk_r+0x1a>
 8009f78:	682b      	ldr	r3, [r5, #0]
 8009f7a:	b103      	cbz	r3, 8009f7e <_sbrk_r+0x1a>
 8009f7c:	6023      	str	r3, [r4, #0]
 8009f7e:	bd38      	pop	{r3, r4, r5, pc}
 8009f80:	20001da8 	.word	0x20001da8

08009f84 <__swhatbuf_r>:
 8009f84:	b570      	push	{r4, r5, r6, lr}
 8009f86:	460c      	mov	r4, r1
 8009f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f8c:	2900      	cmp	r1, #0
 8009f8e:	b096      	sub	sp, #88	@ 0x58
 8009f90:	4615      	mov	r5, r2
 8009f92:	461e      	mov	r6, r3
 8009f94:	da0d      	bge.n	8009fb2 <__swhatbuf_r+0x2e>
 8009f96:	89a3      	ldrh	r3, [r4, #12]
 8009f98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f9c:	f04f 0100 	mov.w	r1, #0
 8009fa0:	bf14      	ite	ne
 8009fa2:	2340      	movne	r3, #64	@ 0x40
 8009fa4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009fa8:	2000      	movs	r0, #0
 8009faa:	6031      	str	r1, [r6, #0]
 8009fac:	602b      	str	r3, [r5, #0]
 8009fae:	b016      	add	sp, #88	@ 0x58
 8009fb0:	bd70      	pop	{r4, r5, r6, pc}
 8009fb2:	466a      	mov	r2, sp
 8009fb4:	f000 f848 	bl	800a048 <_fstat_r>
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	dbec      	blt.n	8009f96 <__swhatbuf_r+0x12>
 8009fbc:	9901      	ldr	r1, [sp, #4]
 8009fbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009fc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009fc6:	4259      	negs	r1, r3
 8009fc8:	4159      	adcs	r1, r3
 8009fca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009fce:	e7eb      	b.n	8009fa8 <__swhatbuf_r+0x24>

08009fd0 <__smakebuf_r>:
 8009fd0:	898b      	ldrh	r3, [r1, #12]
 8009fd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fd4:	079d      	lsls	r5, r3, #30
 8009fd6:	4606      	mov	r6, r0
 8009fd8:	460c      	mov	r4, r1
 8009fda:	d507      	bpl.n	8009fec <__smakebuf_r+0x1c>
 8009fdc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009fe0:	6023      	str	r3, [r4, #0]
 8009fe2:	6123      	str	r3, [r4, #16]
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	6163      	str	r3, [r4, #20]
 8009fe8:	b003      	add	sp, #12
 8009fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fec:	ab01      	add	r3, sp, #4
 8009fee:	466a      	mov	r2, sp
 8009ff0:	f7ff ffc8 	bl	8009f84 <__swhatbuf_r>
 8009ff4:	9f00      	ldr	r7, [sp, #0]
 8009ff6:	4605      	mov	r5, r0
 8009ff8:	4639      	mov	r1, r7
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	f7ff fae4 	bl	80095c8 <_malloc_r>
 800a000:	b948      	cbnz	r0, 800a016 <__smakebuf_r+0x46>
 800a002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a006:	059a      	lsls	r2, r3, #22
 800a008:	d4ee      	bmi.n	8009fe8 <__smakebuf_r+0x18>
 800a00a:	f023 0303 	bic.w	r3, r3, #3
 800a00e:	f043 0302 	orr.w	r3, r3, #2
 800a012:	81a3      	strh	r3, [r4, #12]
 800a014:	e7e2      	b.n	8009fdc <__smakebuf_r+0xc>
 800a016:	89a3      	ldrh	r3, [r4, #12]
 800a018:	6020      	str	r0, [r4, #0]
 800a01a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a01e:	81a3      	strh	r3, [r4, #12]
 800a020:	9b01      	ldr	r3, [sp, #4]
 800a022:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a026:	b15b      	cbz	r3, 800a040 <__smakebuf_r+0x70>
 800a028:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a02c:	4630      	mov	r0, r6
 800a02e:	f000 f81d 	bl	800a06c <_isatty_r>
 800a032:	b128      	cbz	r0, 800a040 <__smakebuf_r+0x70>
 800a034:	89a3      	ldrh	r3, [r4, #12]
 800a036:	f023 0303 	bic.w	r3, r3, #3
 800a03a:	f043 0301 	orr.w	r3, r3, #1
 800a03e:	81a3      	strh	r3, [r4, #12]
 800a040:	89a3      	ldrh	r3, [r4, #12]
 800a042:	431d      	orrs	r5, r3
 800a044:	81a5      	strh	r5, [r4, #12]
 800a046:	e7cf      	b.n	8009fe8 <__smakebuf_r+0x18>

0800a048 <_fstat_r>:
 800a048:	b538      	push	{r3, r4, r5, lr}
 800a04a:	4d07      	ldr	r5, [pc, #28]	@ (800a068 <_fstat_r+0x20>)
 800a04c:	2300      	movs	r3, #0
 800a04e:	4604      	mov	r4, r0
 800a050:	4608      	mov	r0, r1
 800a052:	4611      	mov	r1, r2
 800a054:	602b      	str	r3, [r5, #0]
 800a056:	f7f6 fac8 	bl	80005ea <_fstat>
 800a05a:	1c43      	adds	r3, r0, #1
 800a05c:	d102      	bne.n	800a064 <_fstat_r+0x1c>
 800a05e:	682b      	ldr	r3, [r5, #0]
 800a060:	b103      	cbz	r3, 800a064 <_fstat_r+0x1c>
 800a062:	6023      	str	r3, [r4, #0]
 800a064:	bd38      	pop	{r3, r4, r5, pc}
 800a066:	bf00      	nop
 800a068:	20001da8 	.word	0x20001da8

0800a06c <_isatty_r>:
 800a06c:	b538      	push	{r3, r4, r5, lr}
 800a06e:	4d06      	ldr	r5, [pc, #24]	@ (800a088 <_isatty_r+0x1c>)
 800a070:	2300      	movs	r3, #0
 800a072:	4604      	mov	r4, r0
 800a074:	4608      	mov	r0, r1
 800a076:	602b      	str	r3, [r5, #0]
 800a078:	f7f6 fac7 	bl	800060a <_isatty>
 800a07c:	1c43      	adds	r3, r0, #1
 800a07e:	d102      	bne.n	800a086 <_isatty_r+0x1a>
 800a080:	682b      	ldr	r3, [r5, #0]
 800a082:	b103      	cbz	r3, 800a086 <_isatty_r+0x1a>
 800a084:	6023      	str	r3, [r4, #0]
 800a086:	bd38      	pop	{r3, r4, r5, pc}
 800a088:	20001da8 	.word	0x20001da8

0800a08c <_init>:
 800a08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a08e:	bf00      	nop
 800a090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a092:	bc08      	pop	{r3}
 800a094:	469e      	mov	lr, r3
 800a096:	4770      	bx	lr

0800a098 <_fini>:
 800a098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09a:	bf00      	nop
 800a09c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a09e:	bc08      	pop	{r3}
 800a0a0:	469e      	mov	lr, r3
 800a0a2:	4770      	bx	lr
