
kinematech-torq-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045d8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  080047b0  080047b0  000057b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c28  08004c28  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004c28  08004c28  0000606c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004c28  08004c28  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004c28  08004c28  00005c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08004c30  08004c30  00005c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004c38  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000006c  08004ca4  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08004ca4  00006278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd76  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023e7  00000000  00000000  00013e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00016200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a6c  00000000  00000000  00016fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229b7  00000000  00000000  00017a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d824  00000000  00000000  0003a3c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d550b  00000000  00000000  00047be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d0f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e34  00000000  00000000  0011d138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00120f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000006c 	.word	0x2000006c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004798 	.word	0x08004798

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000070 	.word	0x20000070
 8000214:	08004798 	.word	0x08004798

08000218 <_ZN10kinematech6Driver11attachMotorEPNS_5MotorE>:
class Driver {
public:
	virtual ~Driver() = default;

	// Wiring
	virtual void attachMotor(Motor *m) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
		motor_ = m;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	683a      	ldr	r2, [r7, #0]
 8000226:	605a      	str	r2, [r3, #4]
	}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr

08000234 <_ZN10kinematech6Driver12attachSensorEPNS_6SensorE>:
	virtual void attachSensor(Sensor *s) {
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
		sensor_ = s;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr

08000250 <_ZN10kinematech6Driver9setLimitsERKNS_9LimitsCfgE>:

	// Config
	virtual int init(float vbus, float loop_hz) = 0;
	virtual void setLimits(const LimitsCfg &lim) {
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
 8000258:	6039      	str	r1, [r7, #0]
		limits_ = lim;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	683a      	ldr	r2, [r7, #0]
 800025e:	330c      	adds	r3, #12
 8000260:	ca07      	ldmia	r2, {r0, r1, r2}
 8000262:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}
 8000266:	bf00      	nop
 8000268:	370c      	adds	r7, #12
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <_ZN10kinematech6Driver13setControllerERKNS_13ControllerCfgE>:
	virtual void setController(const ControllerCfg &cc) {
 8000272:	b480      	push	{r7}
 8000274:	b083      	sub	sp, #12
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
		ctrl_ = cc;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	683a      	ldr	r2, [r7, #0]
 8000280:	3318      	adds	r3, #24
 8000282:	8812      	ldrh	r2, [r2, #0]
 8000284:	801a      	strh	r2, [r3, #0]
	}
 8000286:	bf00      	nop
 8000288:	370c      	adds	r7, #12
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr

08000292 <_ZN10kinematech6Driver9setTargetEf>:

	// Command
	virtual void setTarget(float target) {
 8000292:	b480      	push	{r7}
 8000294:	b083      	sub	sp, #12
 8000296:	af00      	add	r7, sp, #0
 8000298:	6078      	str	r0, [r7, #4]
 800029a:	ed87 0a00 	vstr	s0, [r7]
		target_ = target;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	683a      	ldr	r2, [r7, #0]
 80002a2:	61da      	str	r2, [r3, #28]
	}
 80002a4:	bf00      	nop
 80002a6:	370c      	adds	r7, #12
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr

080002b0 <_ZN10kinematech6DriverC1Ev>:
class Driver {
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	4a16      	ldr	r2, [pc, #88]	@ (8000314 <_ZN10kinematech6DriverC1Ev+0x64>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2200      	movs	r2, #0
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	f04f 0200 	mov.w	r2, #0
 80002d0:	60da      	str	r2, [r3, #12]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	f04f 0200 	mov.w	r2, #0
 80002d8:	611a      	str	r2, [r3, #16]
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	f04f 0200 	mov.w	r2, #0
 80002e0:	615a      	str	r2, [r3, #20]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2200      	movs	r2, #0
 80002e6:	761a      	strb	r2, [r3, #24]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2200      	movs	r2, #0
 80002ec:	765a      	strb	r2, [r3, #25]
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	f04f 0200 	mov.w	r2, #0
 80002f4:	61da      	str	r2, [r3, #28]
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f04f 0200 	mov.w	r2, #0
 80002fc:	621a      	str	r2, [r3, #32]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f04f 0200 	mov.w	r2, #0
 8000304:	625a      	str	r2, [r3, #36]	@ 0x24
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4618      	mov	r0, r3
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	080047e4 	.word	0x080047e4

08000318 <_ZN10kinematech6DriverD1Ev>:
	virtual ~Driver() = default;
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	4a04      	ldr	r2, [pc, #16]	@ (8000334 <_ZN10kinematech6DriverD1Ev+0x1c>)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4618      	mov	r0, r3
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr
 8000334:	080047e4 	.word	0x080047e4

08000338 <_ZN10kinematech6DriverD0Ev>:
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	6878      	ldr	r0, [r7, #4]
 8000342:	f7ff ffe9 	bl	8000318 <_ZN10kinematech6DriverD1Ev>
 8000346:	2128      	movs	r1, #40	@ 0x28
 8000348:	6878      	ldr	r0, [r7, #4]
 800034a:	f003 fbca 	bl	8003ae2 <_ZdlPvj>
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4618      	mov	r0, r3
 8000352:	3708      	adds	r7, #8
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <_ZN10kinematech14OpenLoopDriverC1EP17TIM_HandleTypeDef>:

#include <cmath>

namespace kinematech {

OpenLoopDriver::OpenLoopDriver(TIM_HandleTypeDef* tim)
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
: htim_(tim) {}
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4618      	mov	r0, r3
 8000366:	f7ff ffa3 	bl	80002b0 <_ZN10kinematech6DriverC1Ev>
 800036a:	4a0f      	ldr	r2, [pc, #60]	@ (80003a8 <_ZN10kinematech14OpenLoopDriverC1EP17TIM_HandleTypeDef+0x50>)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	601a      	str	r2, [r3, #0]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	683a      	ldr	r2, [r7, #0]
 8000374:	629a      	str	r2, [r3, #40]	@ 0x28
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	2200      	movs	r2, #0
 800037a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	f04f 0200 	mov.w	r2, #0
 8000382:	631a      	str	r2, [r3, #48]	@ 0x30
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	f04f 0200 	mov.w	r2, #0
 800038a:	635a      	str	r2, [r3, #52]	@ 0x34
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	f04f 0200 	mov.w	r2, #0
 8000392:	639a      	str	r2, [r3, #56]	@ 0x38
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	f04f 0200 	mov.w	r2, #0
 800039a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4618      	mov	r0, r3
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	080047b8 	.word	0x080047b8

080003ac <_ZN10kinematech14OpenLoopDriver4initEff>:

int OpenLoopDriver::init(float vbus, float loop_hz) {
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	60f8      	str	r0, [r7, #12]
 80003b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80003b8:	edc7 0a01 	vstr	s1, [r7, #4]
    vbus_       = vbus;
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	68ba      	ldr	r2, [r7, #8]
 80003c0:	621a      	str	r2, [r3, #32]
    dt_         = 1.0f / loop_hz;
 80003c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80003c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80003ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

#if defined(__HAL_TIM_GET_AUTORELOAD)
    period_     = __HAL_TIM_GET_AUTORELOAD(htim_);   // PWM period from timer ARR
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
    period_     = (htim_ ? htim_->Init.Period : 0);  // fallback
#endif

    theta_elec_ = 0.f;                               // initial angle
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	f04f 0200 	mov.w	r2, #0
 80003e6:	631a      	str	r2, [r3, #48]	@ 0x30
    w_elec_     = TWO_PI * OL_FREQ_ELEC_HZ;          // default electrical speed
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	4a0d      	ldr	r2, [pc, #52]	@ (8000420 <_ZN10kinematech14OpenLoopDriver4initEff+0x74>)
 80003ec:	635a      	str	r2, [r3, #52]	@ 0x34
    uq_set_     = OL_UQ_V;                           // default Vq command
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000424 <_ZN10kinematech14OpenLoopDriver4initEff+0x78>)
 80003f2:	639a      	str	r2, [r3, #56]	@ 0x38

    limits_.voltage_limit = SVPWM_LIMIT_K * vbus_;   // max usable voltage
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	edd3 7a08 	vldr	s15, [r3, #32]
 80003fa:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8000428 <_ZN10kinematech14OpenLoopDriver4initEff+0x7c>
 80003fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	edc3 7a03 	vstr	s15, [r3, #12]
    v_limit_cache_        = limits_.voltage_limit;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	68da      	ldr	r2, [r3, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	63da      	str	r2, [r3, #60]	@ 0x3c
    return 0;
 8000410:	2300      	movs	r3, #0
}
 8000412:	4618      	mov	r0, r3
 8000414:	3714      	adds	r7, #20
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	446b9e95 	.word	0x446b9e95
 8000424:	41200000 	.word	0x41200000
 8000428:	3f5db22d 	.word	0x3f5db22d

0800042c <_ZN10kinematech14OpenLoopDriver9setLimitsERKNS_9LimitsCfgE>:

void OpenLoopDriver::setLimits(const LimitsCfg& lim) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	6039      	str	r1, [r7, #0]
    Driver::setLimits(lim);
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	6839      	ldr	r1, [r7, #0]
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff ff08 	bl	8000250 <_ZN10kinematech6Driver9setLimitsERKNS_9LimitsCfgE>
    v_limit_cache_ = limits_.voltage_limit;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	68da      	ldr	r2, [r3, #12]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000448:	bf00      	nop
 800044a:	3708      	adds	r7, #8
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}

08000450 <_ZN10kinematech14OpenLoopDriver13setControllerERKNS_13ControllerCfgE>:

void OpenLoopDriver::setController(const ControllerCfg& cc) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	6039      	str	r1, [r7, #0]
    Driver::setController(cc);
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	6839      	ldr	r1, [r7, #0]
 800045e:	4618      	mov	r0, r3
 8000460:	f7ff ff07 	bl	8000272 <_ZN10kinematech6Driver13setControllerERKNS_13ControllerCfgE>
}
 8000464:	bf00      	nop
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <_ZN10kinematech14OpenLoopDriver9setTargetEf>:

void OpenLoopDriver::setTarget(float target) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	ed87 0a00 	vstr	s0, [r7]
    Driver::setTarget(target);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	ed97 0a00 	vldr	s0, [r7]
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff07 	bl	8000292 <_ZN10kinematech6Driver9setTargetEf>
}
 8000484:	bf00      	nop
 8000486:	3708      	adds	r7, #8
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <_ZN10kinematech14OpenLoopDriver4stepEv>:
 * - Wraps θ into [0, 2π)
 * - Uses target as Vq (q-axis voltage command)
 * - Clamps Vq to [0, voltage_limit]
 * - Calls SVPWM to convert (Ud=0, Uq, θ) into duty cycles
 */
void OpenLoopDriver::step() {
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
    // θ(k+1) = θ(k) + ω * Δt
    theta_elec_ += w_elec_ * dt_;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80004a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80004aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

    // wrap into [0, 2π)
    if (theta_elec_ > TWO_PI)  theta_elec_ -= TWO_PI;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80004ba:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8000578 <_ZN10kinematech14OpenLoopDriver4stepEv+0xec>
 80004be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80004c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004c6:	dd09      	ble.n	80004dc <_ZN10kinematech14OpenLoopDriver4stepEv+0x50>
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80004ce:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8000578 <_ZN10kinematech14OpenLoopDriver4stepEv+0xec>
 80004d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    if (theta_elec_ < 0.f)     theta_elec_ += TWO_PI;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80004e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80004e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004ea:	d509      	bpl.n	8000500 <_ZN10kinematech14OpenLoopDriver4stepEv+0x74>
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80004f2:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8000578 <_ZN10kinematech14OpenLoopDriver4stepEv+0xec>
 80004f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

    const float Ud = 0.f;      // no d-axis voltage
 8000500:	f04f 0300 	mov.w	r3, #0
 8000504:	60bb      	str	r3, [r7, #8]
    float Uq = target_;        // commanded Vq
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	60fb      	str	r3, [r7, #12]

    // clamp Vq into valid range
    if (Uq < 0.f)            Uq = 0.f;
 800050c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000510:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000518:	d502      	bpl.n	8000520 <_ZN10kinematech14OpenLoopDriver4stepEv+0x94>
 800051a:	f04f 0300 	mov.w	r3, #0
 800051e:	60fb      	str	r3, [r7, #12]
    if (Uq > v_limit_cache_) Uq = v_limit_cache_;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8000526:	ed97 7a03 	vldr	s14, [r7, #12]
 800052a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800052e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000532:	dd02      	ble.n	800053a <_ZN10kinematech14OpenLoopDriver4stepEv+0xae>
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000538:	60fb      	str	r3, [r7, #12]

    // update PWM outputs
    svpwm(Ud, Uq, theta_elec_, v_limit_cache_, vbus_, period_, htim_);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	edd3 6a08 	vldr	s13, [r3, #32]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000554:	4619      	mov	r1, r3
 8000556:	4610      	mov	r0, r2
 8000558:	eeb0 2a66 	vmov.f32	s4, s13
 800055c:	eef0 1a47 	vmov.f32	s3, s14
 8000560:	eeb0 1a67 	vmov.f32	s2, s15
 8000564:	edd7 0a03 	vldr	s1, [r7, #12]
 8000568:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 800057c <_ZN10kinematech14OpenLoopDriver4stepEv+0xf0>
 800056c:	f000 fc30 	bl	8000dd0 <svpwm>
}
 8000570:	bf00      	nop
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40c90fdb 	.word	0x40c90fdb
 800057c:	00000000 	.word	0x00000000

08000580 <_ZN10kinematech14OpenLoopDriverD1Ev>:
 * Responsibilities:
 * - Drive the motor with a fixed electrical frequency and Vq command.
 * - Convert angle + (Ud=0, Uq) into duty cycles using SVPWM.
 * - Provide simple setters for electrical speed and q-axis voltage.
 */
class OpenLoopDriver final : public Driver {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	4a05      	ldr	r2, [pc, #20]	@ (80005a0 <_ZN10kinematech14OpenLoopDriverD1Ev+0x20>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff fec1 	bl	8000318 <_ZN10kinematech6DriverD1Ev>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4618      	mov	r0, r3
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	080047b8 	.word	0x080047b8

080005a4 <_ZN10kinematech14OpenLoopDriverD0Ev>:
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f7ff ffe7 	bl	8000580 <_ZN10kinematech14OpenLoopDriverD1Ev>
 80005b2:	2140      	movs	r1, #64	@ 0x40
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f003 fa94 	bl	8003ae2 <_ZdlPvj>
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4618      	mov	r0, r3
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <_ZN10kinematech5MotorC1ERKNS_8MotorCfgE>:
	float kt_Nm_per_A { 0.f };
};

class Motor {
public:
	explicit Motor(const MotorCfg &cfg) :
 80005c4:	b4b0      	push	{r4, r5, r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
			cfg_(cfg) {
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	f04f 0200 	mov.w	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f04f 0200 	mov.w	r2, #0
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f04f 0200 	mov.w	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	683a      	ldr	r2, [r7, #0]
 80005ea:	f103 040c 	add.w	r4, r3, #12
 80005ee:	4615      	mov	r5, r2
 80005f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f4:	682b      	ldr	r3, [r5, #0]
 80005f6:	6023      	str	r3, [r4, #0]
	}
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	bcb0      	pop	{r4, r5, r7}
 8000602:	4770      	bx	lr

08000604 <_ZN10kinematech10NullSensor4initEf>:
namespace kinematech {

// "Null" sensor: returns cached values you set externally (for open-loop)
class NullSensor final : public Sensor {
public:
  int init(float) override { return 0; }
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	ed87 0a00 	vstr	s0, [r7]
 8000610:	2300      	movs	r3, #0
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <_ZN10kinematech10NullSensor6updateEv>:
  int update() override { return 0; }
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
 8000626:	2300      	movs	r3, #0
 8000628:	4618      	mov	r0, r3
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <_ZN10kinematech10NullSensor8getAngleERf>:
  int getAngle(float& th) override { th = angle_mech; return 0; }
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	685a      	ldr	r2, [r3, #4]
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	2300      	movs	r3, #0
 8000648:	4618      	mov	r0, r3
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <_ZN10kinematech10NullSensor11getVelocityERf>:
  int getVelocity(float& w) override { w = vel_mech;  return 0; }
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	6039      	str	r1, [r7, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	689a      	ldr	r2, [r3, #8]
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	2300      	movs	r3, #0
 8000668:	4618      	mov	r0, r3
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <_ZN10kinematech6SensorD1Ev>:
namespace kinematech {

// Abstract interface for sensors
class Sensor {
public:
  virtual ~Sensor() = default;
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	4a04      	ldr	r2, [pc, #16]	@ (8000690 <_ZN10kinematech6SensorD1Ev+0x1c>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4618      	mov	r0, r3
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	08004830 	.word	0x08004830

08000694 <_ZN10kinematech6SensorD0Ev>:
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f7ff ffe9 	bl	8000674 <_ZN10kinematech6SensorD1Ev>
 80006a2:	2104      	movs	r1, #4
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f003 fa1c 	bl	8003ae2 <_ZdlPvj>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4618      	mov	r0, r3
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <ESC_Main_Init>:
static OpenLoopDriver g_driver(&htim1);

// Expose pointer for ISR
static Driver *g_drv_ptr = &g_driver;

extern "C" void ESC_Main_Init(void) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
	// Start PWM channels + complementary outputs
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006ba:	2100      	movs	r1, #0
 80006bc:	4840      	ldr	r0, [pc, #256]	@ (80007c0 <ESC_Main_Init+0x10c>)
 80006be:	f001 fe6f 	bl	80023a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80006c2:	2104      	movs	r1, #4
 80006c4:	483e      	ldr	r0, [pc, #248]	@ (80007c0 <ESC_Main_Init+0x10c>)
 80006c6:	f001 fe6b 	bl	80023a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80006ca:	2108      	movs	r1, #8
 80006cc:	483c      	ldr	r0, [pc, #240]	@ (80007c0 <ESC_Main_Init+0x10c>)
 80006ce:	f001 fe67 	bl	80023a0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80006d2:	2100      	movs	r1, #0
 80006d4:	483a      	ldr	r0, [pc, #232]	@ (80007c0 <ESC_Main_Init+0x10c>)
 80006d6:	f002 ffad 	bl	8003634 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80006da:	2104      	movs	r1, #4
 80006dc:	4838      	ldr	r0, [pc, #224]	@ (80007c0 <ESC_Main_Init+0x10c>)
 80006de:	f002 ffa9 	bl	8003634 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80006e2:	2108      	movs	r1, #8
 80006e4:	4836      	ldr	r0, [pc, #216]	@ (80007c0 <ESC_Main_Init+0x10c>)
 80006e6:	f002 ffa5 	bl	8003634 <HAL_TIMEx_PWMN_Start>

	// Wire components
	g_drv_ptr->attachMotor(&g_motor);
 80006ea:	4b36      	ldr	r3, [pc, #216]	@ (80007c4 <ESC_Main_Init+0x110>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	4b35      	ldr	r3, [pc, #212]	@ (80007c4 <ESC_Main_Init+0x110>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	3308      	adds	r3, #8
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4933      	ldr	r1, [pc, #204]	@ (80007c8 <ESC_Main_Init+0x114>)
 80006fa:	4610      	mov	r0, r2
 80006fc:	4798      	blx	r3
	g_drv_ptr->attachSensor(&g_sensor);
 80006fe:	4b31      	ldr	r3, [pc, #196]	@ (80007c4 <ESC_Main_Init+0x110>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	4b30      	ldr	r3, [pc, #192]	@ (80007c4 <ESC_Main_Init+0x110>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	330c      	adds	r3, #12
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	492f      	ldr	r1, [pc, #188]	@ (80007cc <ESC_Main_Init+0x118>)
 800070e:	4610      	mov	r0, r2
 8000710:	4798      	blx	r3

	// Init
	g_drv_ptr->init(VBUS_V, PWM_FREQ_HZ);
 8000712:	4b2c      	ldr	r3, [pc, #176]	@ (80007c4 <ESC_Main_Init+0x110>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	4b2b      	ldr	r3, [pc, #172]	@ (80007c4 <ESC_Main_Init+0x110>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	3310      	adds	r3, #16
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 80007d0 <ESC_Main_Init+0x11c>
 8000724:	eeb3 0a0f 	vmov.f32	s0, #63	@ 0x41f80000  31.0
 8000728:	4610      	mov	r0, r2
 800072a:	4798      	blx	r3

	// Limits + controller (SimpleFOC-like)
	LimitsCfg lim;
 800072c:	f04f 0300 	mov.w	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	f04f 0300 	mov.w	r3, #0
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	f04f 0300 	mov.w	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
	lim.voltage_limit = SVPWM_LIMIT_K * VBUS_V;
 800073e:	4b25      	ldr	r3, [pc, #148]	@ (80007d4 <ESC_Main_Init+0x120>)
 8000740:	607b      	str	r3, [r7, #4]
	lim.current_limit = 0.f;
 8000742:	f04f 0300 	mov.w	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
	lim.velocity_limit = 0.f;
 8000748:	f04f 0300 	mov.w	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
	g_drv_ptr->setLimits(lim);
 800074e:	4b1d      	ldr	r3, [pc, #116]	@ (80007c4 <ESC_Main_Init+0x110>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	4b1c      	ldr	r3, [pc, #112]	@ (80007c4 <ESC_Main_Init+0x110>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	3314      	adds	r3, #20
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	1d39      	adds	r1, r7, #4
 800075e:	4610      	mov	r0, r2
 8000760:	4798      	blx	r3

	ControllerCfg cc;
 8000762:	2300      	movs	r3, #0
 8000764:	703b      	strb	r3, [r7, #0]
 8000766:	2300      	movs	r3, #0
 8000768:	707b      	strb	r3, [r7, #1]
	cc.motion_ctrl = MotionControlType::Torque;
 800076a:	2300      	movs	r3, #0
 800076c:	703b      	strb	r3, [r7, #0]
	cc.torque_ctrl = TorqueControlType::Voltage;
 800076e:	2300      	movs	r3, #0
 8000770:	707b      	strb	r3, [r7, #1]
	g_drv_ptr->setController(cc);
 8000772:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <ESC_Main_Init+0x110>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <ESC_Main_Init+0x110>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	3318      	adds	r3, #24
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4639      	mov	r1, r7
 8000782:	4610      	mov	r0, r2
 8000784:	4798      	blx	r3

	// Initial target (Vq)
	g_drv_ptr->setTarget(OL_UQ_V);
 8000786:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <ESC_Main_Init+0x110>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <ESC_Main_Init+0x110>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	331c      	adds	r3, #28
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8000798:	4610      	mov	r0, r2
 800079a:	4798      	blx	r3

	// Enable TIM1 update interrupt
	__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_UPDATE);
 800079c:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <ESC_Main_Init+0x10c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f06f 0201 	mvn.w	r2, #1
 80007a4:	611a      	str	r2, [r3, #16]
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 80007a6:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <ESC_Main_Init+0x10c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	68da      	ldr	r2, [r3, #12]
 80007ac:	4b04      	ldr	r3, [pc, #16]	@ (80007c0 <ESC_Main_Init+0x10c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f042 0201 	orr.w	r2, r2, #1
 80007b4:	60da      	str	r2, [r3, #12]
}
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000e8 	.word	0x200000e8
 80007c4:	2000000c 	.word	0x2000000c
 80007c8:	20000088 	.word	0x20000088
 80007cc:	20000000 	.word	0x20000000
 80007d0:	469c4000 	.word	0x469c4000
 80007d4:	41d6c49c 	.word	0x41d6c49c

080007d8 <ESC_Main_Loop>:

extern "C" void ESC_Main_Loop(void) {
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
	// You can change targets here (e.g., ramp Vq, CLI, UART, etc.)
	// g_drv_ptr->setTarget(new_vq);
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
	...

080007e8 <HAL_TIM_PeriodElapsedCallback>:

// HAL ISR glue (C linkage)
extern "C" void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1 && g_drv_ptr) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a09      	ldr	r2, [pc, #36]	@ (800081c <HAL_TIM_PeriodElapsedCallback+0x34>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d10c      	bne.n	8000814 <HAL_TIM_PeriodElapsedCallback+0x2c>
 80007fa:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d008      	beq.n	8000814 <HAL_TIM_PeriodElapsedCallback+0x2c>
		g_drv_ptr->step();
 8000802:	4b07      	ldr	r3, [pc, #28]	@ (8000820 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	3320      	adds	r3, #32
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4610      	mov	r0, r2
 8000812:	4798      	blx	r3
	}
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40012c00 	.word	0x40012c00
 8000820:	2000000c 	.word	0x2000000c

08000824 <_ZN10kinematech10NullSensorD1Ev>:
class NullSensor final : public Sensor {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	4a05      	ldr	r2, [pc, #20]	@ (8000844 <_ZN10kinematech10NullSensorD1Ev+0x20>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ff1d 	bl	8000674 <_ZN10kinematech6SensorD1Ev>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4618      	mov	r0, r3
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	08004810 	.word	0x08004810

08000848 <_ZN10kinematech10NullSensorD0Ev>:
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff ffe7 	bl	8000824 <_ZN10kinematech10NullSensorD1Ev>
 8000856:	210c      	movs	r1, #12
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f003 f942 	bl	8003ae2 <_ZdlPvj>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <_Z41__static_initialization_and_destruction_0v>:

}
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
static Motor g_motor( { POLE_PAIRS, 0.f, 0.f, 0.f, 0.f });
 800086e:	230f      	movs	r3, #15
 8000870:	713b      	strb	r3, [r7, #4]
 8000872:	f04f 0300 	mov.w	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	f04f 0300 	mov.w	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	f04f 0300 	mov.w	r3, #0
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	f04f 0300 	mov.w	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	4619      	mov	r1, r3
 800088e:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 8000890:	f7ff fe98 	bl	80005c4 <_ZN10kinematech5MotorC1ERKNS_8MotorCfgE>
static OpenLoopDriver g_driver(&htim1);
 8000894:	4904      	ldr	r1, [pc, #16]	@ (80008a8 <_Z41__static_initialization_and_destruction_0v+0x40>)
 8000896:	4805      	ldr	r0, [pc, #20]	@ (80008ac <_Z41__static_initialization_and_destruction_0v+0x44>)
 8000898:	f7ff fd5e 	bl	8000358 <_ZN10kinematech14OpenLoopDriverC1EP17TIM_HandleTypeDef>
}
 800089c:	bf00      	nop
 800089e:	3718      	adds	r7, #24
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000088 	.word	0x20000088
 80008a8:	200000e8 	.word	0x200000e8
 80008ac:	200000a8 	.word	0x200000a8

080008b0 <_Z41__static_initialization_and_destruction_1v>:
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
static OpenLoopDriver g_driver(&htim1);
 80008b4:	4803      	ldr	r0, [pc, #12]	@ (80008c4 <_Z41__static_initialization_and_destruction_1v+0x14>)
 80008b6:	f7ff fe63 	bl	8000580 <_ZN10kinematech14OpenLoopDriverD1Ev>
static NullSensor g_sensor;
 80008ba:	4803      	ldr	r0, [pc, #12]	@ (80008c8 <_Z41__static_initialization_and_destruction_1v+0x18>)
 80008bc:	f7ff ffb2 	bl	8000824 <_ZN10kinematech10NullSensorD1Ev>
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	200000a8 	.word	0x200000a8
 80008c8:	20000000 	.word	0x20000000

080008cc <_GLOBAL__sub_I_ESC_Main_Init>:
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	f7ff ffca 	bl	8000868 <_Z41__static_initialization_and_destruction_0v>
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <_GLOBAL__sub_D_ESC_Main_Init>:
 80008d6:	b580      	push	{r7, lr}
 80008d8:	af00      	add	r7, sp, #0
 80008da:	f7ff ffe9 	bl	80008b0 <_Z41__static_initialization_and_destruction_1v>
 80008de:	bd80      	pop	{r7, pc}

080008e0 <main>:
 * @retval int
 */

extern TIM_HandleTypeDef htim1;

int main(void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0

	HAL_Init();
 80008e4:	f000 fbc5 	bl	8001072 <HAL_Init>
	SystemClock_Config();
 80008e8:	f000 f812 	bl	8000910 <SystemClock_Config>
	MX_GPIO_Init();
 80008ec:	f000 f8fc 	bl	8000ae8 <MX_GPIO_Init>
	MX_TIM1_Init_20kHz();
 80008f0:	f000 f84e 	bl	8000990 <MX_TIM1_Init_20kHz>

	HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80008f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008f8:	4804      	ldr	r0, [pc, #16]	@ (800090c <main+0x2c>)
 80008fa:	f000 fed5 	bl	80016a8 <HAL_GPIO_TogglePin>

	ESC_Main_Init();
 80008fe:	f7ff fed9 	bl	80006b4 <ESC_Main_Init>

	while (1) {
		/* USER CODE END WHILE */

		ESC_Main_Loop();
 8000902:	f7ff ff69 	bl	80007d8 <ESC_Main_Loop>
		__WFI();
 8000906:	bf30      	wfi
		ESC_Main_Loop();
 8000908:	bf00      	nop
 800090a:	e7fa      	b.n	8000902 <main+0x22>
 800090c:	48000800 	.word	0x48000800

08000910 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b094      	sub	sp, #80	@ 0x50
 8000914:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000916:	f107 0318 	add.w	r3, r7, #24
 800091a:	2238      	movs	r2, #56	@ 0x38
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f003 fec2 	bl	80046a8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000932:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000936:	f000 fed1 	bl	80016dc <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800093a:	2302      	movs	r3, #2
 800093c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800093e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000944:	2340      	movs	r3, #64	@ 0x40
 8000946:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000948:	2300      	movs	r3, #0
 800094a:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800094c:	f107 0318 	add.w	r3, r7, #24
 8000950:	4618      	mov	r0, r3
 8000952:	f000 ff77 	bl	8001844 <HAL_RCC_OscConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0x50>
		Error_Handler();
 800095c:	f000 f91a 	bl	8000b94 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000960:	230f      	movs	r3, #15
 8000962:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000964:	2301      	movs	r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f001 fa75 	bl	8001e68 <HAL_RCC_ClockConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0x78>
		Error_Handler();
 8000984:	f000 f906 	bl	8000b94 <Error_Handler>
	}
}
 8000988:	bf00      	nop
 800098a:	3750      	adds	r7, #80	@ 0x50
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <MX_TIM1_Init_20kHz>:

static void MX_TIM1_Init_20kHz(void) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b09c      	sub	sp, #112	@ 0x70
 8000994:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM1_CLK_ENABLE();
 8000996:	4b51      	ldr	r3, [pc, #324]	@ (8000adc <MX_TIM1_Init_20kHz+0x14c>)
 8000998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800099a:	4a50      	ldr	r2, [pc, #320]	@ (8000adc <MX_TIM1_Init_20kHz+0x14c>)
 800099c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80009a2:	4b4e      	ldr	r3, [pc, #312]	@ (8000adc <MX_TIM1_Init_20kHz+0x14c>)
 80009a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

	// Com 170 MHz e center-aligned: f_pwm = f_tim / (2*(ARR+1))
	// Para ~20 kHz -> ARR ≈ 4249
	htim1.Instance = TIM1;
 80009ae:	4b4c      	ldr	r3, [pc, #304]	@ (8000ae0 <MX_TIM1_Init_20kHz+0x150>)
 80009b0:	4a4c      	ldr	r2, [pc, #304]	@ (8000ae4 <MX_TIM1_Init_20kHz+0x154>)
 80009b2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80009b4:	4b4a      	ldr	r3, [pc, #296]	@ (8000ae0 <MX_TIM1_Init_20kHz+0x150>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80009ba:	4b49      	ldr	r3, [pc, #292]	@ (8000ae0 <MX_TIM1_Init_20kHz+0x150>)
 80009bc:	2220      	movs	r2, #32
 80009be:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 4249;
 80009c0:	4b47      	ldr	r3, [pc, #284]	@ (8000ae0 <MX_TIM1_Init_20kHz+0x150>)
 80009c2:	f241 0299 	movw	r2, #4249	@ 0x1099
 80009c6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c8:	4b45      	ldr	r3, [pc, #276]	@ (8000ae0 <MX_TIM1_Init_20kHz+0x150>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80009ce:	4b44      	ldr	r3, [pc, #272]	@ (8000ae0 <MX_TIM1_Init_20kHz+0x150>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009d4:	4b42      	ldr	r3, [pc, #264]	@ (8000ae0 <MX_TIM1_Init_20kHz+0x150>)
 80009d6:	2280      	movs	r2, #128	@ 0x80
 80009d8:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim1);
 80009da:	4841      	ldr	r0, [pc, #260]	@ (8000ae0 <MX_TIM1_Init_20kHz+0x150>)
 80009dc:	f001 fc28 	bl	8002230 <HAL_TIM_Base_Init>

	HAL_TIM_PWM_Init(&htim1);
 80009e0:	483f      	ldr	r0, [pc, #252]	@ (8000ae0 <MX_TIM1_Init_20kHz+0x150>)
 80009e2:	f001 fc7c 	bl	80022de <HAL_TIM_PWM_Init>

	TIM_ClockConfigTypeDef clk = { 0 };
 80009e6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
	clk.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f8:	663b      	str	r3, [r7, #96]	@ 0x60
	HAL_TIM_ConfigClockSource(&htim1, &clk);
 80009fa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80009fe:	4619      	mov	r1, r3
 8000a00:	4837      	ldr	r0, [pc, #220]	@ (8000ae0 <MX_TIM1_Init_20kHz+0x150>)
 8000a02:	f002 f843 	bl	8002a8c <HAL_TIM_ConfigClockSource>

	TIM_MasterConfigTypeDef master = { 0 };
 8000a06:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
	master.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a12:	2300      	movs	r3, #0
 8000a14:	657b      	str	r3, [r7, #84]	@ 0x54
	master.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a16:	2300      	movs	r3, #0
 8000a18:	65bb      	str	r3, [r7, #88]	@ 0x58
	master.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &master);
 8000a1e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a22:	4619      	mov	r1, r3
 8000a24:	482e      	ldr	r0, [pc, #184]	@ (8000ae0 <MX_TIM1_Init_20kHz+0x150>)
 8000a26:	f002 fec7 	bl	80037b8 <HAL_TIMEx_MasterConfigSynchronization>

	TIM_OC_InitTypeDef oc = { 0 };
 8000a2a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]
 8000a3a:	615a      	str	r2, [r3, #20]
 8000a3c:	619a      	str	r2, [r3, #24]
	oc.OCMode = TIM_OCMODE_PWM1;
 8000a3e:	2360      	movs	r3, #96	@ 0x60
 8000a40:	63bb      	str	r3, [r7, #56]	@ 0x38
	oc.Pulse = 0; // duty inicial 0
 8000a42:	2300      	movs	r3, #0
 8000a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
	oc.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a46:	2300      	movs	r3, #0
 8000a48:	643b      	str	r3, [r7, #64]	@ 0x40
	oc.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	647b      	str	r3, [r7, #68]	@ 0x44
	oc.OCFastMode = TIM_OCFAST_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	64bb      	str	r3, [r7, #72]	@ 0x48
	oc.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a52:	2300      	movs	r3, #0
 8000a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
	oc.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a56:	2300      	movs	r3, #0
 8000a58:	653b      	str	r3, [r7, #80]	@ 0x50

	HAL_TIM_PWM_ConfigChannel(&htim1, &oc, TIM_CHANNEL_1);
 8000a5a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a5e:	2200      	movs	r2, #0
 8000a60:	4619      	mov	r1, r3
 8000a62:	481f      	ldr	r0, [pc, #124]	@ (8000ae0 <MX_TIM1_Init_20kHz+0x150>)
 8000a64:	f001 fefe 	bl	8002864 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_ConfigChannel(&htim1, &oc, TIM_CHANNEL_2);
 8000a68:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a6c:	2204      	movs	r2, #4
 8000a6e:	4619      	mov	r1, r3
 8000a70:	481b      	ldr	r0, [pc, #108]	@ (8000ae0 <MX_TIM1_Init_20kHz+0x150>)
 8000a72:	f001 fef7 	bl	8002864 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_ConfigChannel(&htim1, &oc, TIM_CHANNEL_3);
 8000a76:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a7a:	2208      	movs	r2, #8
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4818      	ldr	r0, [pc, #96]	@ (8000ae0 <MX_TIM1_Init_20kHz+0x150>)
 8000a80:	f001 fef0 	bl	8002864 <HAL_TIM_PWM_ConfigChannel>

	// Dead-time / Break
	TIM_BreakDeadTimeConfigTypeDef bd = { 0 };
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2234      	movs	r2, #52	@ 0x34
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f003 fe0c 	bl	80046a8 <memset>
	bd.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a90:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a94:	607b      	str	r3, [r7, #4]
	bd.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000a96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a9a:	60bb      	str	r3, [r7, #8]
	bd.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]

	// deadtime ~250 ns (ajuste conforme driver/MOSFET)
	// Em G4, escala depende de CKD; use HAL_TIMEx_ConfigBreakDeadTime para montar
	bd.DeadTime = DEADTIME_NS; // valor aproximado; calibre depois!
 8000aa0:	2305      	movs	r3, #5
 8000aa2:	613b      	str	r3, [r7, #16]
	bd.BreakState = TIM_BREAK_DISABLE;   // habilite quando ligar a proteção
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
	bd.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aa8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aac:	61bb      	str	r3, [r7, #24]
	bd.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000aae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ab2:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_TIMEx_ConfigBreakDeadTime(&htim1, &bd);
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4809      	ldr	r0, [pc, #36]	@ (8000ae0 <MX_TIM1_Init_20kHz+0x150>)
 8000aba:	f002 ff13 	bl	80038e4 <HAL_TIMEx_ConfigBreakDeadTime>

	HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	2019      	movs	r0, #25
 8000ac4:	f000 fc21 	bl	800130a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ac8:	2019      	movs	r0, #25
 8000aca:	f000 fc38 	bl	800133e <HAL_NVIC_EnableIRQ>

	HAL_TIM_MspPostInit(&htim1);
 8000ace:	4804      	ldr	r0, [pc, #16]	@ (8000ae0 <MX_TIM1_Init_20kHz+0x150>)
 8000ad0:	f000 f8aa 	bl	8000c28 <HAL_TIM_MspPostInit>
}
 8000ad4:	bf00      	nop
 8000ad6:	3770      	adds	r7, #112	@ 0x70
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	200000e8 	.word	0x200000e8
 8000ae4:	40012c00 	.word	0x40012c00

08000ae8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b088      	sub	sp, #32
 8000aec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000afe:	4b1e      	ldr	r3, [pc, #120]	@ (8000b78 <MX_GPIO_Init+0x90>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b02:	4a1d      	ldr	r2, [pc, #116]	@ (8000b78 <MX_GPIO_Init+0x90>)
 8000b04:	f043 0304 	orr.w	r3, r3, #4
 8000b08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000b78 <MX_GPIO_Init+0x90>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	4b18      	ldr	r3, [pc, #96]	@ (8000b78 <MX_GPIO_Init+0x90>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1a:	4a17      	ldr	r2, [pc, #92]	@ (8000b78 <MX_GPIO_Init+0x90>)
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b22:	4b15      	ldr	r3, [pc, #84]	@ (8000b78 <MX_GPIO_Init+0x90>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	4b12      	ldr	r3, [pc, #72]	@ (8000b78 <MX_GPIO_Init+0x90>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b32:	4a11      	ldr	r2, [pc, #68]	@ (8000b78 <MX_GPIO_Init+0x90>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b78 <MX_GPIO_Init+0x90>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8000b46:	2201      	movs	r2, #1
 8000b48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b4c:	480b      	ldr	r0, [pc, #44]	@ (8000b7c <MX_GPIO_Init+0x94>)
 8000b4e:	f000 fd93 	bl	8001678 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_BLUE_Pin */
	GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000b52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b56:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 030c 	add.w	r3, r7, #12
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4804      	ldr	r0, [pc, #16]	@ (8000b7c <MX_GPIO_Init+0x94>)
 8000b6c:	f000 fc02 	bl	8001374 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b70:	bf00      	nop
 8000b72:	3720      	adds	r7, #32
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	48000800 	.word	0x48000800

08000b80 <TIM1_UP_TIM16_IRQHandler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */

void TIM1_UP_TIM16_IRQHandler(void){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim1);
 8000b84:	4802      	ldr	r0, [pc, #8]	@ (8000b90 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b86:	f001 fd1d 	bl	80025c4 <HAL_TIM_IRQHandler>
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200000e8 	.word	0x200000e8

08000b94 <Error_Handler>:

void Error_Handler(void) {
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <Error_Handler+0x8>

08000ba0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8000be4 <HAL_MspInit+0x44>)
 8000ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000baa:	4a0e      	ldr	r2, [pc, #56]	@ (8000be4 <HAL_MspInit+0x44>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000be4 <HAL_MspInit+0x44>)
 8000bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	4b09      	ldr	r3, [pc, #36]	@ (8000be4 <HAL_MspInit+0x44>)
 8000bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bc2:	4a08      	ldr	r2, [pc, #32]	@ (8000be4 <HAL_MspInit+0x44>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bca:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <HAL_MspInit+0x44>)
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bd6:	f000 fe25 	bl	8001824 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40021000 	.word	0x40021000

08000be8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <HAL_TIM_Base_MspInit+0x38>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d10b      	bne.n	8000c12 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <HAL_TIM_Base_MspInit+0x3c>)
 8000bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bfe:	4a09      	ldr	r2, [pc, #36]	@ (8000c24 <HAL_TIM_Base_MspInit+0x3c>)
 8000c00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c04:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c06:	4b07      	ldr	r3, [pc, #28]	@ (8000c24 <HAL_TIM_Base_MspInit+0x3c>)
 8000c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000c12:	bf00      	nop
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40012c00 	.word	0x40012c00
 8000c24:	40021000 	.word	0x40021000

08000c28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	@ 0x28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a29      	ldr	r2, [pc, #164]	@ (8000cec <HAL_TIM_MspPostInit+0xc4>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d14b      	bne.n	8000ce2 <HAL_TIM_MspPostInit+0xba>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	4b29      	ldr	r3, [pc, #164]	@ (8000cf0 <HAL_TIM_MspPostInit+0xc8>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4e:	4a28      	ldr	r2, [pc, #160]	@ (8000cf0 <HAL_TIM_MspPostInit+0xc8>)
 8000c50:	f043 0302 	orr.w	r3, r3, #2
 8000c54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c56:	4b26      	ldr	r3, [pc, #152]	@ (8000cf0 <HAL_TIM_MspPostInit+0xc8>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	4b23      	ldr	r3, [pc, #140]	@ (8000cf0 <HAL_TIM_MspPostInit+0xc8>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c66:	4a22      	ldr	r2, [pc, #136]	@ (8000cf0 <HAL_TIM_MspPostInit+0xc8>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c6e:	4b20      	ldr	r3, [pc, #128]	@ (8000cf0 <HAL_TIM_MspPostInit+0xc8>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PA_LIN_Pin|PB_LIN_Pin;
 8000c7a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000c8c:	2306      	movs	r3, #6
 8000c8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	4817      	ldr	r0, [pc, #92]	@ (8000cf4 <HAL_TIM_MspPostInit+0xcc>)
 8000c98:	f000 fb6c 	bl	8001374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PC_LIN_Pin;
 8000c9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8000cae:	2304      	movs	r3, #4
 8000cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PC_LIN_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480e      	ldr	r0, [pc, #56]	@ (8000cf4 <HAL_TIM_MspPostInit+0xcc>)
 8000cba:	f000 fb5b 	bl	8001374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PA_HIN_Pin|PB_HIN_Pin|PC_HIN_Pin;
 8000cbe:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000cd0:	2306      	movs	r3, #6
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cde:	f000 fb49 	bl	8001374 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3728      	adds	r7, #40	@ 0x28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40012c00 	.word	0x40012c00
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	48000400 	.word	0x48000400

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <NMI_Handler+0x4>

08000d00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <HardFault_Handler+0x4>

08000d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <MemManage_Handler+0x4>

08000d10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <BusFault_Handler+0x4>

08000d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <UsageFault_Handler+0x4>

08000d20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4e:	f000 f9e3 	bl	8001118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <SystemInit+0x20>)
 8000d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d62:	4a05      	ldr	r2, [pc, #20]	@ (8000d78 <SystemInit+0x20>)
 8000d64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <clampf>:
 */

#include "math/svpwm.h"
#include <math.h>   // sinf, cosf, fminf, fmaxf

float clampf(float x, float a, float b) {
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	ed87 0a03 	vstr	s0, [r7, #12]
 8000d86:	edc7 0a02 	vstr	s1, [r7, #8]
 8000d8a:	ed87 1a01 	vstr	s2, [r7, #4]
    return (x < a) ? a : ((x > b) ? b : x);
 8000d8e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d92:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d9e:	d501      	bpl.n	8000da4 <clampf+0x28>
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	e00b      	b.n	8000dbc <clampf+0x40>
 8000da4:	ed97 7a03 	vldr	s14, [r7, #12]
 8000da8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db4:	dd01      	ble.n	8000dba <clampf+0x3e>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	e000      	b.n	8000dbc <clampf+0x40>
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	ee07 3a90 	vmov	s15, r3
}
 8000dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <svpwm>:

void svpwm(float Ud, float Uq, float theta, float v_limit, float vbus,
           uint32_t period, TIM_HandleTypeDef *htim)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b096      	sub	sp, #88	@ 0x58
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	ed87 0a07 	vstr	s0, [r7, #28]
 8000dda:	edc7 0a06 	vstr	s1, [r7, #24]
 8000dde:	ed87 1a05 	vstr	s2, [r7, #20]
 8000de2:	edc7 1a04 	vstr	s3, [r7, #16]
 8000de6:	ed87 2a03 	vstr	s4, [r7, #12]
 8000dea:	60b8      	str	r0, [r7, #8]
 8000dec:	6079      	str	r1, [r7, #4]
     * stator reference voltages in stationary αβ coordinates.
     *
     *  [Uα]   [ cosθ  -sinθ ] [Ud]
     *  [Uβ] = [ sinθ   cosθ ] [Uq]
     * --------------------------------------------------------------- */
    const float s = sinf(theta);
 8000dee:	ed97 0a05 	vldr	s0, [r7, #20]
 8000df2:	f002 febf 	bl	8003b74 <sinf>
 8000df6:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54
    const float c = cosf(theta);
 8000dfa:	ed97 0a05 	vldr	s0, [r7, #20]
 8000dfe:	f002 fe75 	bl	8003aec <cosf>
 8000e02:	ed87 0a14 	vstr	s0, [r7, #80]	@ 0x50
    const float Ualpha = c * Ud - s * Uq;
 8000e06:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8000e0a:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e12:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8000e16:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e22:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    const float Ubeta  = s * Ud + c * Uq;
 8000e26:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8000e2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e32:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8000e36:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e42:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
     *  Ub = -0.5*Uα + (√3/2)*Uβ
     *  Uc = -0.5*Uα - (√3/2)*Uβ
     *
     * Note: sum(Ua+Ub+Uc) = 0 (balanced three-phase system).
     * --------------------------------------------------------------- */
    float Ua = Ualpha;
 8000e46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e48:	647b      	str	r3, [r7, #68]	@ 0x44
    float Ub = -0.5f * Ualpha + _SQRT3_2 * Ubeta;   // √3/2 ≈ 0.8660254
 8000e4a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8000e4e:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8000e52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e56:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8000e5a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8001018 <svpwm+0x248>
 8000e5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000e62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e66:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    float Uc = -0.5f * Ualpha - _SQRT3_2 * Ubeta;
 8000e6a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8000e6e:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8000e72:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e76:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8000e7a:	eddf 6a67 	vldr	s13, [pc, #412]	@ 8001018 <svpwm+0x248>
 8000e7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000e82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e86:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
     * Offset = -0.5*(Umax + Umin).
     *
     * This centers the waveforms so that the max fits at +v_limit
     * and the min fits at 0.
     * --------------------------------------------------------------- */
    const float Umin   = fminf(Ua, fminf(Ub, Uc));
 8000e8a:	edd7 0a0f 	vldr	s1, [r7, #60]	@ 0x3c
 8000e8e:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 8000e92:	f002 fed2 	bl	8003c3a <fminf>
 8000e96:	eef0 7a40 	vmov.f32	s15, s0
 8000e9a:	eef0 0a67 	vmov.f32	s1, s15
 8000e9e:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8000ea2:	f002 feca 	bl	8003c3a <fminf>
 8000ea6:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
    const float Umax   = fmaxf(Ua, fmaxf(Ub, Uc));
 8000eaa:	edd7 0a0f 	vldr	s1, [r7, #60]	@ 0x3c
 8000eae:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 8000eb2:	f002 fea5 	bl	8003c00 <fmaxf>
 8000eb6:	eef0 7a40 	vmov.f32	s15, s0
 8000eba:	eef0 0a67 	vmov.f32	s1, s15
 8000ebe:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8000ec2:	f002 fe9d 	bl	8003c00 <fmaxf>
 8000ec6:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
    const float center = -0.5f * (Umax + Umin);
 8000eca:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000ece:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed6:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8000eda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ede:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    Ua += center;
 8000ee2:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000ee6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eee:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    Ub += center;
 8000ef2:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8000ef6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000efe:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    Uc += center;
 8000f02:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000f06:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f0e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    /* ---------------------------------------------------------------
     * 4) Clamp to voltage range
     * Limit Ua,Ub,Uc between 0 and v_limit (typically v_limit = k * Vbus).
     * Ensures the voltages remain inside the linear modulation region.
     * --------------------------------------------------------------- */
    Ua = clampf(Ua, 0.0f, v_limit);
 8000f12:	ed97 1a04 	vldr	s2, [r7, #16]
 8000f16:	eddf 0a41 	vldr	s1, [pc, #260]	@ 800101c <svpwm+0x24c>
 8000f1a:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8000f1e:	f7ff ff2d 	bl	8000d7c <clampf>
 8000f22:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
    Ub = clampf(Ub, 0.0f, v_limit);
 8000f26:	ed97 1a04 	vldr	s2, [r7, #16]
 8000f2a:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 800101c <svpwm+0x24c>
 8000f2e:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 8000f32:	f7ff ff23 	bl	8000d7c <clampf>
 8000f36:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40
    Uc = clampf(Uc, 0.0f, v_limit);
 8000f3a:	ed97 1a04 	vldr	s2, [r7, #16]
 8000f3e:	eddf 0a37 	vldr	s1, [pc, #220]	@ 800101c <svpwm+0x24c>
 8000f42:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8000f46:	f7ff ff19 	bl	8000d7c <clampf>
 8000f4a:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
    /* ---------------------------------------------------------------
     * 5) Normalize by Vbus -> duty cycle
     * Convert voltages into normalized duty [0..1].
     * da = Ua / Vbus, etc.
     * --------------------------------------------------------------- */
    const float da = clampf(Ua / vbus, 0.0f, 1.0f);
 8000f4e:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000f52:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f56:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f5a:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8000f5e:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 800101c <svpwm+0x24c>
 8000f62:	eeb0 0a66 	vmov.f32	s0, s13
 8000f66:	f7ff ff09 	bl	8000d7c <clampf>
 8000f6a:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
    const float db = clampf(Ub / vbus, 0.0f, 1.0f);
 8000f6e:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8000f72:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f76:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f7a:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8000f7e:	eddf 0a27 	vldr	s1, [pc, #156]	@ 800101c <svpwm+0x24c>
 8000f82:	eeb0 0a66 	vmov.f32	s0, s13
 8000f86:	f7ff fef9 	bl	8000d7c <clampf>
 8000f8a:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    const float dc = clampf(Uc / vbus, 0.0f, 1.0f);
 8000f8e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000f92:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f96:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f9a:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8000f9e:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 800101c <svpwm+0x24c>
 8000fa2:	eeb0 0a66 	vmov.f32	s0, s13
 8000fa6:	f7ff fee9 	bl	8000d7c <clampf>
 8000faa:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    /* ---------------------------------------------------------------
     * 6) Output to hardware timer
     * Scale duties to timer period (ARR) and write CCR registers.
     * This directly updates PWM outputs on TIM channels 1, 2, 3.
     * --------------------------------------------------------------- */
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, (uint32_t)(da * period));
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	ee07 3a90 	vmov	s15, r3
 8000fb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fb8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fc8:	ee17 2a90 	vmov	r2, s15
 8000fcc:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, (uint32_t)(db * period));
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	ee07 3a90 	vmov	s15, r3
 8000fd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fd8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fe8:	ee17 2a90 	vmov	r2, s15
 8000fec:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, (uint32_t)(dc * period));
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	ee07 3a90 	vmov	s15, r3
 8000ff4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ff8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001008:	ee17 2a90 	vmov	r2, s15
 800100c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800100e:	bf00      	nop
 8001010:	3758      	adds	r7, #88	@ 0x58
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	3f5db3d7 	.word	0x3f5db3d7
 800101c:	00000000 	.word	0x00000000

08001020 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001020:	480d      	ldr	r0, [pc, #52]	@ (8001058 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001022:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001024:	f7ff fe98 	bl	8000d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001028:	480c      	ldr	r0, [pc, #48]	@ (800105c <LoopForever+0x6>)
  ldr r1, =_edata
 800102a:	490d      	ldr	r1, [pc, #52]	@ (8001060 <LoopForever+0xa>)
  ldr r2, =_sidata
 800102c:	4a0d      	ldr	r2, [pc, #52]	@ (8001064 <LoopForever+0xe>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a0a      	ldr	r2, [pc, #40]	@ (8001068 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001040:	4c0a      	ldr	r4, [pc, #40]	@ (800106c <LoopForever+0x16>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800104e:	f003 fb33 	bl	80046b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001052:	f7ff fc45 	bl	80008e0 <main>

08001056 <LoopForever>:

LoopForever:
    b LoopForever
 8001056:	e7fe      	b.n	8001056 <LoopForever>
  ldr   r0, =_estack
 8001058:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800105c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001060:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001064:	08004c38 	.word	0x08004c38
  ldr r2, =_sbss
 8001068:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800106c:	20000278 	.word	0x20000278

08001070 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001070:	e7fe      	b.n	8001070 <ADC1_2_IRQHandler>

08001072 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001078:	2300      	movs	r3, #0
 800107a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107c:	2003      	movs	r0, #3
 800107e:	f000 f939 	bl	80012f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001082:	200f      	movs	r0, #15
 8001084:	f000 f80e 	bl	80010a4 <HAL_InitTick>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d002      	beq.n	8001094 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	71fb      	strb	r3, [r7, #7]
 8001092:	e001      	b.n	8001098 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001094:	f7ff fd84 	bl	8000ba0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001098:	79fb      	ldrb	r3, [r7, #7]

}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010b0:	4b16      	ldr	r3, [pc, #88]	@ (800110c <HAL_InitTick+0x68>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d022      	beq.n	80010fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010b8:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <HAL_InitTick+0x6c>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b13      	ldr	r3, [pc, #76]	@ (800110c <HAL_InitTick+0x68>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80010c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80010c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 f944 	bl	800135a <HAL_SYSTICK_Config>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d10f      	bne.n	80010f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b0f      	cmp	r3, #15
 80010dc:	d809      	bhi.n	80010f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010de:	2200      	movs	r2, #0
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010e6:	f000 f910 	bl	800130a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <HAL_InitTick+0x70>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	e007      	b.n	8001102 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	73fb      	strb	r3, [r7, #15]
 80010f6:	e004      	b.n	8001102 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	73fb      	strb	r3, [r7, #15]
 80010fc:	e001      	b.n	8001102 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001102:	7bfb      	ldrb	r3, [r7, #15]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000018 	.word	0x20000018
 8001110:	20000010 	.word	0x20000010
 8001114:	20000014 	.word	0x20000014

08001118 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800111c:	4b05      	ldr	r3, [pc, #20]	@ (8001134 <HAL_IncTick+0x1c>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b05      	ldr	r3, [pc, #20]	@ (8001138 <HAL_IncTick+0x20>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4413      	add	r3, r2
 8001126:	4a03      	ldr	r2, [pc, #12]	@ (8001134 <HAL_IncTick+0x1c>)
 8001128:	6013      	str	r3, [r2, #0]
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	20000134 	.word	0x20000134
 8001138:	20000018 	.word	0x20000018

0800113c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;
 8001140:	4b03      	ldr	r3, [pc, #12]	@ (8001150 <HAL_GetTick+0x14>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000134 	.word	0x20000134

08001154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001164:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001170:	4013      	ands	r3, r2
 8001172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800117c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001180:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001186:	4a04      	ldr	r2, [pc, #16]	@ (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	60d3      	str	r3, [r2, #12]
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a0:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <__NVIC_GetPriorityGrouping+0x18>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	f003 0307 	and.w	r3, r3, #7
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	db0b      	blt.n	80011e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	f003 021f 	and.w	r2, r3, #31
 80011d0:	4907      	ldr	r1, [pc, #28]	@ (80011f0 <__NVIC_EnableIRQ+0x38>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	095b      	lsrs	r3, r3, #5
 80011d8:	2001      	movs	r0, #1
 80011da:	fa00 f202 	lsl.w	r2, r0, r2
 80011de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000e100 	.word	0xe000e100

080011f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	db0a      	blt.n	800121e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	490c      	ldr	r1, [pc, #48]	@ (8001240 <__NVIC_SetPriority+0x4c>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	0112      	lsls	r2, r2, #4
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	440b      	add	r3, r1
 8001218:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800121c:	e00a      	b.n	8001234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4908      	ldr	r1, [pc, #32]	@ (8001244 <__NVIC_SetPriority+0x50>)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	3b04      	subs	r3, #4
 800122c:	0112      	lsls	r2, r2, #4
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	440b      	add	r3, r1
 8001232:	761a      	strb	r2, [r3, #24]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000e100 	.word	0xe000e100
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	@ 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f1c3 0307 	rsb	r3, r3, #7
 8001262:	2b04      	cmp	r3, #4
 8001264:	bf28      	it	cs
 8001266:	2304      	movcs	r3, #4
 8001268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3304      	adds	r3, #4
 800126e:	2b06      	cmp	r3, #6
 8001270:	d902      	bls.n	8001278 <NVIC_EncodePriority+0x30>
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3b03      	subs	r3, #3
 8001276:	e000      	b.n	800127a <NVIC_EncodePriority+0x32>
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43da      	mvns	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	401a      	ands	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001290:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa01 f303 	lsl.w	r3, r1, r3
 800129a:	43d9      	mvns	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	4313      	orrs	r3, r2
         );
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3724      	adds	r7, #36	@ 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012c0:	d301      	bcc.n	80012c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00f      	b.n	80012e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c6:	4a0a      	ldr	r2, [pc, #40]	@ (80012f0 <SysTick_Config+0x40>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ce:	210f      	movs	r1, #15
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012d4:	f7ff ff8e 	bl	80011f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d8:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <SysTick_Config+0x40>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012de:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <SysTick_Config+0x40>)
 80012e0:	2207      	movs	r2, #7
 80012e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	e000e010 	.word	0xe000e010

080012f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff29 	bl	8001154 <__NVIC_SetPriorityGrouping>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001318:	f7ff ff40 	bl	800119c <__NVIC_GetPriorityGrouping>
 800131c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	6978      	ldr	r0, [r7, #20]
 8001324:	f7ff ff90 	bl	8001248 <NVIC_EncodePriority>
 8001328:	4602      	mov	r2, r0
 800132a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff5f 	bl	80011f4 <__NVIC_SetPriority>
}
 8001336:	bf00      	nop
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff33 	bl	80011b8 <__NVIC_EnableIRQ>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ffa4 	bl	80012b0 <SysTick_Config>
 8001368:	4603      	mov	r3, r0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001374:	b480      	push	{r7}
 8001376:	b087      	sub	sp, #28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001382:	e15a      	b.n	800163a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	2101      	movs	r1, #1
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	fa01 f303 	lsl.w	r3, r1, r3
 8001390:	4013      	ands	r3, r2
 8001392:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 814c 	beq.w	8001634 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d005      	beq.n	80013b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d130      	bne.n	8001416 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	2203      	movs	r2, #3
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	68da      	ldr	r2, [r3, #12]
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4313      	orrs	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ea:	2201      	movs	r2, #1
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4013      	ands	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	091b      	lsrs	r3, r3, #4
 8001400:	f003 0201 	and.w	r2, r3, #1
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0303 	and.w	r3, r3, #3
 800141e:	2b03      	cmp	r3, #3
 8001420:	d017      	beq.n	8001452 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	2203      	movs	r2, #3
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d123      	bne.n	80014a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	08da      	lsrs	r2, r3, #3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3208      	adds	r2, #8
 8001466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800146a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	220f      	movs	r2, #15
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	691a      	ldr	r2, [r3, #16]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	08da      	lsrs	r2, r3, #3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3208      	adds	r2, #8
 80014a0:	6939      	ldr	r1, [r7, #16]
 80014a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	2203      	movs	r2, #3
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 0203 	and.w	r2, r3, #3
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 80a6 	beq.w	8001634 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e8:	4b5b      	ldr	r3, [pc, #364]	@ (8001658 <HAL_GPIO_Init+0x2e4>)
 80014ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ec:	4a5a      	ldr	r2, [pc, #360]	@ (8001658 <HAL_GPIO_Init+0x2e4>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80014f4:	4b58      	ldr	r3, [pc, #352]	@ (8001658 <HAL_GPIO_Init+0x2e4>)
 80014f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001500:	4a56      	ldr	r2, [pc, #344]	@ (800165c <HAL_GPIO_Init+0x2e8>)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	089b      	lsrs	r3, r3, #2
 8001506:	3302      	adds	r3, #2
 8001508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	220f      	movs	r2, #15
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800152a:	d01f      	beq.n	800156c <HAL_GPIO_Init+0x1f8>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a4c      	ldr	r2, [pc, #304]	@ (8001660 <HAL_GPIO_Init+0x2ec>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d019      	beq.n	8001568 <HAL_GPIO_Init+0x1f4>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a4b      	ldr	r2, [pc, #300]	@ (8001664 <HAL_GPIO_Init+0x2f0>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d013      	beq.n	8001564 <HAL_GPIO_Init+0x1f0>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a4a      	ldr	r2, [pc, #296]	@ (8001668 <HAL_GPIO_Init+0x2f4>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d00d      	beq.n	8001560 <HAL_GPIO_Init+0x1ec>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a49      	ldr	r2, [pc, #292]	@ (800166c <HAL_GPIO_Init+0x2f8>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d007      	beq.n	800155c <HAL_GPIO_Init+0x1e8>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a48      	ldr	r2, [pc, #288]	@ (8001670 <HAL_GPIO_Init+0x2fc>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d101      	bne.n	8001558 <HAL_GPIO_Init+0x1e4>
 8001554:	2305      	movs	r3, #5
 8001556:	e00a      	b.n	800156e <HAL_GPIO_Init+0x1fa>
 8001558:	2306      	movs	r3, #6
 800155a:	e008      	b.n	800156e <HAL_GPIO_Init+0x1fa>
 800155c:	2304      	movs	r3, #4
 800155e:	e006      	b.n	800156e <HAL_GPIO_Init+0x1fa>
 8001560:	2303      	movs	r3, #3
 8001562:	e004      	b.n	800156e <HAL_GPIO_Init+0x1fa>
 8001564:	2302      	movs	r3, #2
 8001566:	e002      	b.n	800156e <HAL_GPIO_Init+0x1fa>
 8001568:	2301      	movs	r3, #1
 800156a:	e000      	b.n	800156e <HAL_GPIO_Init+0x1fa>
 800156c:	2300      	movs	r3, #0
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	f002 0203 	and.w	r2, r2, #3
 8001574:	0092      	lsls	r2, r2, #2
 8001576:	4093      	lsls	r3, r2
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4313      	orrs	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800157e:	4937      	ldr	r1, [pc, #220]	@ (800165c <HAL_GPIO_Init+0x2e8>)
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	089b      	lsrs	r3, r3, #2
 8001584:	3302      	adds	r3, #2
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800158c:	4b39      	ldr	r3, [pc, #228]	@ (8001674 <HAL_GPIO_Init+0x300>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	43db      	mvns	r3, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015b0:	4a30      	ldr	r2, [pc, #192]	@ (8001674 <HAL_GPIO_Init+0x300>)
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001674 <HAL_GPIO_Init+0x300>)
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	43db      	mvns	r3, r3
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4013      	ands	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015da:	4a26      	ldr	r2, [pc, #152]	@ (8001674 <HAL_GPIO_Init+0x300>)
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80015e0:	4b24      	ldr	r3, [pc, #144]	@ (8001674 <HAL_GPIO_Init+0x300>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001604:	4a1b      	ldr	r2, [pc, #108]	@ (8001674 <HAL_GPIO_Init+0x300>)
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800160a:	4b1a      	ldr	r3, [pc, #104]	@ (8001674 <HAL_GPIO_Init+0x300>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	43db      	mvns	r3, r3
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	4013      	ands	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4313      	orrs	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800162e:	4a11      	ldr	r2, [pc, #68]	@ (8001674 <HAL_GPIO_Init+0x300>)
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	3301      	adds	r3, #1
 8001638:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	fa22 f303 	lsr.w	r3, r2, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	f47f ae9d 	bne.w	8001384 <HAL_GPIO_Init+0x10>
  }
}
 800164a:	bf00      	nop
 800164c:	bf00      	nop
 800164e:	371c      	adds	r7, #28
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	40021000 	.word	0x40021000
 800165c:	40010000 	.word	0x40010000
 8001660:	48000400 	.word	0x48000400
 8001664:	48000800 	.word	0x48000800
 8001668:	48000c00 	.word	0x48000c00
 800166c:	48001000 	.word	0x48001000
 8001670:	48001400 	.word	0x48001400
 8001674:	40010400 	.word	0x40010400

08001678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	807b      	strh	r3, [r7, #2]
 8001684:	4613      	mov	r3, r2
 8001686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001688:	787b      	ldrb	r3, [r7, #1]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800168e:	887a      	ldrh	r2, [r7, #2]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001694:	e002      	b.n	800169c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001696:	887a      	ldrh	r2, [r7, #2]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016ba:	887a      	ldrh	r2, [r7, #2]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4013      	ands	r3, r2
 80016c0:	041a      	lsls	r2, r3, #16
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	43d9      	mvns	r1, r3
 80016c6:	887b      	ldrh	r3, [r7, #2]
 80016c8:	400b      	ands	r3, r1
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	619a      	str	r2, [r3, #24]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d141      	bne.n	800176e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ea:	4b4b      	ldr	r3, [pc, #300]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016f6:	d131      	bne.n	800175c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016f8:	4b47      	ldr	r3, [pc, #284]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016fe:	4a46      	ldr	r2, [pc, #280]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001700:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001704:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001708:	4b43      	ldr	r3, [pc, #268]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001710:	4a41      	ldr	r2, [pc, #260]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001712:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001716:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001718:	4b40      	ldr	r3, [pc, #256]	@ (800181c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2232      	movs	r2, #50	@ 0x32
 800171e:	fb02 f303 	mul.w	r3, r2, r3
 8001722:	4a3f      	ldr	r2, [pc, #252]	@ (8001820 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001724:	fba2 2303 	umull	r2, r3, r2, r3
 8001728:	0c9b      	lsrs	r3, r3, #18
 800172a:	3301      	adds	r3, #1
 800172c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800172e:	e002      	b.n	8001736 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	3b01      	subs	r3, #1
 8001734:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001736:	4b38      	ldr	r3, [pc, #224]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800173e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001742:	d102      	bne.n	800174a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f2      	bne.n	8001730 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800174a:	4b33      	ldr	r3, [pc, #204]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001756:	d158      	bne.n	800180a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e057      	b.n	800180c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800175c:	4b2e      	ldr	r3, [pc, #184]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800175e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001762:	4a2d      	ldr	r2, [pc, #180]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001764:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001768:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800176c:	e04d      	b.n	800180a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001774:	d141      	bne.n	80017fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001776:	4b28      	ldr	r3, [pc, #160]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800177e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001782:	d131      	bne.n	80017e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001784:	4b24      	ldr	r3, [pc, #144]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800178a:	4a23      	ldr	r2, [pc, #140]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800178c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001790:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001794:	4b20      	ldr	r3, [pc, #128]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800179c:	4a1e      	ldr	r2, [pc, #120]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800179e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017a4:	4b1d      	ldr	r3, [pc, #116]	@ (800181c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2232      	movs	r2, #50	@ 0x32
 80017aa:	fb02 f303 	mul.w	r3, r2, r3
 80017ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001820 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017b0:	fba2 2303 	umull	r2, r3, r2, r3
 80017b4:	0c9b      	lsrs	r3, r3, #18
 80017b6:	3301      	adds	r3, #1
 80017b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017ba:	e002      	b.n	80017c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	3b01      	subs	r3, #1
 80017c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017ce:	d102      	bne.n	80017d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f2      	bne.n	80017bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017d6:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017e2:	d112      	bne.n	800180a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e011      	b.n	800180c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80017f8:	e007      	b.n	800180a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017fa:	4b07      	ldr	r3, [pc, #28]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001802:	4a05      	ldr	r2, [pc, #20]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001804:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001808:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	40007000 	.word	0x40007000
 800181c:	20000010 	.word	0x20000010
 8001820:	431bde83 	.word	0x431bde83

08001824 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001828:	4b05      	ldr	r3, [pc, #20]	@ (8001840 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	4a04      	ldr	r2, [pc, #16]	@ (8001840 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800182e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001832:	6093      	str	r3, [r2, #8]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40007000 	.word	0x40007000

08001844 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e2fe      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d075      	beq.n	800194e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001862:	4b97      	ldr	r3, [pc, #604]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800186c:	4b94      	ldr	r3, [pc, #592]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	2b0c      	cmp	r3, #12
 800187a:	d102      	bne.n	8001882 <HAL_RCC_OscConfig+0x3e>
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	2b03      	cmp	r3, #3
 8001880:	d002      	beq.n	8001888 <HAL_RCC_OscConfig+0x44>
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	2b08      	cmp	r3, #8
 8001886:	d10b      	bne.n	80018a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001888:	4b8d      	ldr	r3, [pc, #564]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d05b      	beq.n	800194c <HAL_RCC_OscConfig+0x108>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d157      	bne.n	800194c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e2d9      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018a8:	d106      	bne.n	80018b8 <HAL_RCC_OscConfig+0x74>
 80018aa:	4b85      	ldr	r3, [pc, #532]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a84      	ldr	r2, [pc, #528]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80018b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e01d      	b.n	80018f4 <HAL_RCC_OscConfig+0xb0>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018c0:	d10c      	bne.n	80018dc <HAL_RCC_OscConfig+0x98>
 80018c2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a7e      	ldr	r2, [pc, #504]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80018c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	4b7c      	ldr	r3, [pc, #496]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a7b      	ldr	r2, [pc, #492]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e00b      	b.n	80018f4 <HAL_RCC_OscConfig+0xb0>
 80018dc:	4b78      	ldr	r3, [pc, #480]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a77      	ldr	r2, [pc, #476]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80018e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b75      	ldr	r3, [pc, #468]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a74      	ldr	r2, [pc, #464]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80018ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d013      	beq.n	8001924 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff fc1e 	bl	800113c <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff fc1a 	bl	800113c <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	@ 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e29e      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001916:	4b6a      	ldr	r3, [pc, #424]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0xc0>
 8001922:	e014      	b.n	800194e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001924:	f7ff fc0a 	bl	800113c <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800192c:	f7ff fc06 	bl	800113c <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	@ 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e28a      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800193e:	4b60      	ldr	r3, [pc, #384]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0xe8>
 800194a:	e000      	b.n	800194e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d075      	beq.n	8001a46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800195a:	4b59      	ldr	r3, [pc, #356]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001964:	4b56      	ldr	r3, [pc, #344]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	2b0c      	cmp	r3, #12
 8001972:	d102      	bne.n	800197a <HAL_RCC_OscConfig+0x136>
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d002      	beq.n	8001980 <HAL_RCC_OscConfig+0x13c>
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	2b04      	cmp	r3, #4
 800197e:	d11f      	bne.n	80019c0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001980:	4b4f      	ldr	r3, [pc, #316]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_OscConfig+0x154>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e25d      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001998:	4b49      	ldr	r3, [pc, #292]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	061b      	lsls	r3, r3, #24
 80019a6:	4946      	ldr	r1, [pc, #280]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019ac:	4b45      	ldr	r3, [pc, #276]	@ (8001ac4 <HAL_RCC_OscConfig+0x280>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fb77 	bl	80010a4 <HAL_InitTick>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d043      	beq.n	8001a44 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e249      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d023      	beq.n	8001a10 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a3c      	ldr	r2, [pc, #240]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80019ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff fbb2 	bl	800113c <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019dc:	f7ff fbae 	bl	800113c <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e232      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ee:	4b34      	ldr	r3, [pc, #208]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fa:	4b31      	ldr	r3, [pc, #196]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	061b      	lsls	r3, r3, #24
 8001a08:	492d      	ldr	r1, [pc, #180]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	604b      	str	r3, [r1, #4]
 8001a0e:	e01a      	b.n	8001a46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a10:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a2a      	ldr	r2, [pc, #168]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001a16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fb8e 	bl	800113c <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a24:	f7ff fb8a 	bl	800113c <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e20e      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a36:	4b22      	ldr	r3, [pc, #136]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x1e0>
 8001a42:	e000      	b.n	8001a46 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d041      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d01c      	beq.n	8001a94 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a5a:	4b19      	ldr	r3, [pc, #100]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a60:	4a17      	ldr	r2, [pc, #92]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6a:	f7ff fb67 	bl	800113c <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a72:	f7ff fb63 	bl	800113c <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e1e7      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a84:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0ef      	beq.n	8001a72 <HAL_RCC_OscConfig+0x22e>
 8001a92:	e020      	b.n	8001ad6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a94:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a9a:	4a09      	ldr	r2, [pc, #36]	@ (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001a9c:	f023 0301 	bic.w	r3, r3, #1
 8001aa0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa4:	f7ff fb4a 	bl	800113c <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aaa:	e00d      	b.n	8001ac8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aac:	f7ff fb46 	bl	800113c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d906      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e1ca      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ac8:	4b8c      	ldr	r3, [pc, #560]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1ea      	bne.n	8001aac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 80a6 	beq.w	8001c30 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ae8:	4b84      	ldr	r3, [pc, #528]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_RCC_OscConfig+0x2b4>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <HAL_RCC_OscConfig+0x2b6>
 8001af8:	2300      	movs	r3, #0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00d      	beq.n	8001b1a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afe:	4b7f      	ldr	r3, [pc, #508]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b02:	4a7e      	ldr	r2, [pc, #504]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b08:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b0a:	4b7c      	ldr	r3, [pc, #496]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b16:	2301      	movs	r3, #1
 8001b18:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b1a:	4b79      	ldr	r3, [pc, #484]	@ (8001d00 <HAL_RCC_OscConfig+0x4bc>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d118      	bne.n	8001b58 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b26:	4b76      	ldr	r3, [pc, #472]	@ (8001d00 <HAL_RCC_OscConfig+0x4bc>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a75      	ldr	r2, [pc, #468]	@ (8001d00 <HAL_RCC_OscConfig+0x4bc>)
 8001b2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b32:	f7ff fb03 	bl	800113c <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b3a:	f7ff faff 	bl	800113c <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e183      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b4c:	4b6c      	ldr	r3, [pc, #432]	@ (8001d00 <HAL_RCC_OscConfig+0x4bc>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d108      	bne.n	8001b72 <HAL_RCC_OscConfig+0x32e>
 8001b60:	4b66      	ldr	r3, [pc, #408]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b66:	4a65      	ldr	r2, [pc, #404]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b70:	e024      	b.n	8001bbc <HAL_RCC_OscConfig+0x378>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b05      	cmp	r3, #5
 8001b78:	d110      	bne.n	8001b9c <HAL_RCC_OscConfig+0x358>
 8001b7a:	4b60      	ldr	r3, [pc, #384]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b80:	4a5e      	ldr	r2, [pc, #376]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001b82:	f043 0304 	orr.w	r3, r3, #4
 8001b86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b8a:	4b5c      	ldr	r3, [pc, #368]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b90:	4a5a      	ldr	r2, [pc, #360]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b9a:	e00f      	b.n	8001bbc <HAL_RCC_OscConfig+0x378>
 8001b9c:	4b57      	ldr	r3, [pc, #348]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ba2:	4a56      	ldr	r2, [pc, #344]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bac:	4b53      	ldr	r3, [pc, #332]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bb2:	4a52      	ldr	r2, [pc, #328]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001bb4:	f023 0304 	bic.w	r3, r3, #4
 8001bb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d016      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc4:	f7ff faba 	bl	800113c <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bca:	e00a      	b.n	8001be2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bcc:	f7ff fab6 	bl	800113c <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e138      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001be2:	4b46      	ldr	r3, [pc, #280]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0ed      	beq.n	8001bcc <HAL_RCC_OscConfig+0x388>
 8001bf0:	e015      	b.n	8001c1e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf2:	f7ff faa3 	bl	800113c <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bf8:	e00a      	b.n	8001c10 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfa:	f7ff fa9f 	bl	800113c <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e121      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c10:	4b3a      	ldr	r3, [pc, #232]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1ed      	bne.n	8001bfa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c1e:	7ffb      	ldrb	r3, [r7, #31]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d105      	bne.n	8001c30 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c24:	4b35      	ldr	r3, [pc, #212]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c28:	4a34      	ldr	r2, [pc, #208]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001c2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c2e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0320 	and.w	r3, r3, #32
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d03c      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d01c      	beq.n	8001c7e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c44:	4b2d      	ldr	r3, [pc, #180]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001c46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c4a:	4a2c      	ldr	r2, [pc, #176]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c54:	f7ff fa72 	bl	800113c <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c5c:	f7ff fa6e 	bl	800113c <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e0f2      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c6e:	4b23      	ldr	r3, [pc, #140]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001c70:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0ef      	beq.n	8001c5c <HAL_RCC_OscConfig+0x418>
 8001c7c:	e01b      	b.n	8001cb6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001c80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c84:	4a1d      	ldr	r2, [pc, #116]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001c86:	f023 0301 	bic.w	r3, r3, #1
 8001c8a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8e:	f7ff fa55 	bl	800113c <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c96:	f7ff fa51 	bl	800113c <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e0d5      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ca8:	4b14      	ldr	r3, [pc, #80]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001caa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1ef      	bne.n	8001c96 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 80c9 	beq.w	8001e52 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 030c 	and.w	r3, r3, #12
 8001cc8:	2b0c      	cmp	r3, #12
 8001cca:	f000 8083 	beq.w	8001dd4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d15e      	bne.n	8001d94 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd6:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a08      	ldr	r2, [pc, #32]	@ (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001cdc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce2:	f7ff fa2b 	bl	800113c <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce8:	e00c      	b.n	8001d04 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cea:	f7ff fa27 	bl	800113c <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d905      	bls.n	8001d04 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e0ab      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d04:	4b55      	ldr	r3, [pc, #340]	@ (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1ec      	bne.n	8001cea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d10:	4b52      	ldr	r3, [pc, #328]	@ (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	4b52      	ldr	r3, [pc, #328]	@ (8001e60 <HAL_RCC_OscConfig+0x61c>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6a11      	ldr	r1, [r2, #32]
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d20:	3a01      	subs	r2, #1
 8001d22:	0112      	lsls	r2, r2, #4
 8001d24:	4311      	orrs	r1, r2
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001d2a:	0212      	lsls	r2, r2, #8
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d32:	0852      	lsrs	r2, r2, #1
 8001d34:	3a01      	subs	r2, #1
 8001d36:	0552      	lsls	r2, r2, #21
 8001d38:	4311      	orrs	r1, r2
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d3e:	0852      	lsrs	r2, r2, #1
 8001d40:	3a01      	subs	r2, #1
 8001d42:	0652      	lsls	r2, r2, #25
 8001d44:	4311      	orrs	r1, r2
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001d4a:	06d2      	lsls	r2, r2, #27
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	4943      	ldr	r1, [pc, #268]	@ (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d54:	4b41      	ldr	r3, [pc, #260]	@ (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a40      	ldr	r2, [pc, #256]	@ (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001d5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d60:	4b3e      	ldr	r3, [pc, #248]	@ (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	4a3d      	ldr	r2, [pc, #244]	@ (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001d66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7ff f9e6 	bl	800113c <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d74:	f7ff f9e2 	bl	800113c <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e066      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d86:	4b35      	ldr	r3, [pc, #212]	@ (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0x530>
 8001d92:	e05e      	b.n	8001e52 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d94:	4b31      	ldr	r3, [pc, #196]	@ (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a30      	ldr	r2, [pc, #192]	@ (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001d9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff f9cc 	bl	800113c <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da8:	f7ff f9c8 	bl	800113c <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e04c      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dba:	4b28      	ldr	r3, [pc, #160]	@ (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001dc6:	4b25      	ldr	r3, [pc, #148]	@ (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	4924      	ldr	r1, [pc, #144]	@ (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001dcc:	4b25      	ldr	r3, [pc, #148]	@ (8001e64 <HAL_RCC_OscConfig+0x620>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	60cb      	str	r3, [r1, #12]
 8001dd2:	e03e      	b.n	8001e52 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e039      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001de0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f003 0203 	and.w	r2, r3, #3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d12c      	bne.n	8001e4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d123      	bne.n	8001e4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e10:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d11b      	bne.n	8001e4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e20:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d113      	bne.n	8001e4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e30:	085b      	lsrs	r3, r3, #1
 8001e32:	3b01      	subs	r3, #1
 8001e34:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d109      	bne.n	8001e4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e44:	085b      	lsrs	r3, r3, #1
 8001e46:	3b01      	subs	r3, #1
 8001e48:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d001      	beq.n	8001e52 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3720      	adds	r7, #32
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	019f800c 	.word	0x019f800c
 8001e64:	feeefffc 	.word	0xfeeefffc

08001e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e11e      	b.n	80020be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e80:	4b91      	ldr	r3, [pc, #580]	@ (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d910      	bls.n	8001eb0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8e:	4b8e      	ldr	r3, [pc, #568]	@ (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 020f 	bic.w	r2, r3, #15
 8001e96:	498c      	ldr	r1, [pc, #560]	@ (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9e:	4b8a      	ldr	r3, [pc, #552]	@ (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d001      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e106      	b.n	80020be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d073      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d129      	bne.n	8001f18 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec4:	4b81      	ldr	r3, [pc, #516]	@ (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e0f4      	b.n	80020be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001ed4:	f000 f966 	bl	80021a4 <RCC_GetSysClockFreqFromPLLSource>
 8001ed8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4a7c      	ldr	r2, [pc, #496]	@ (80020d0 <HAL_RCC_ClockConfig+0x268>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d93f      	bls.n	8001f62 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ee2:	4b7a      	ldr	r3, [pc, #488]	@ (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d009      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d033      	beq.n	8001f62 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d12f      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f02:	4b72      	ldr	r3, [pc, #456]	@ (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f0a:	4a70      	ldr	r2, [pc, #448]	@ (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001f0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f10:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f12:	2380      	movs	r3, #128	@ 0x80
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	e024      	b.n	8001f62 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d107      	bne.n	8001f30 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f20:	4b6a      	ldr	r3, [pc, #424]	@ (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d109      	bne.n	8001f40 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0c6      	b.n	80020be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f30:	4b66      	ldr	r3, [pc, #408]	@ (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0be      	b.n	80020be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001f40:	f000 f8ce 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 8001f44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4a61      	ldr	r2, [pc, #388]	@ (80020d0 <HAL_RCC_ClockConfig+0x268>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d909      	bls.n	8001f62 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f4e:	4b5f      	ldr	r3, [pc, #380]	@ (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f56:	4a5d      	ldr	r2, [pc, #372]	@ (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001f58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f5c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001f5e:	2380      	movs	r3, #128	@ 0x80
 8001f60:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f62:	4b5a      	ldr	r3, [pc, #360]	@ (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f023 0203 	bic.w	r2, r3, #3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4957      	ldr	r1, [pc, #348]	@ (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f74:	f7ff f8e2 	bl	800113c <HAL_GetTick>
 8001f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7c:	f7ff f8de 	bl	800113c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e095      	b.n	80020be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	4b4e      	ldr	r3, [pc, #312]	@ (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 020c 	and.w	r2, r3, #12
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d1eb      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d023      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fbc:	4b43      	ldr	r3, [pc, #268]	@ (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	4a42      	ldr	r2, [pc, #264]	@ (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001fc2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001fc6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0308 	and.w	r3, r3, #8
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d007      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001fd4:	4b3d      	ldr	r3, [pc, #244]	@ (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001fdc:	4a3b      	ldr	r2, [pc, #236]	@ (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001fde:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001fe2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe4:	4b39      	ldr	r3, [pc, #228]	@ (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	4936      	ldr	r1, [pc, #216]	@ (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	608b      	str	r3, [r1, #8]
 8001ff6:	e008      	b.n	800200a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	2b80      	cmp	r3, #128	@ 0x80
 8001ffc:	d105      	bne.n	800200a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ffe:	4b33      	ldr	r3, [pc, #204]	@ (80020cc <HAL_RCC_ClockConfig+0x264>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	4a32      	ldr	r2, [pc, #200]	@ (80020cc <HAL_RCC_ClockConfig+0x264>)
 8002004:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002008:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800200a:	4b2f      	ldr	r3, [pc, #188]	@ (80020c8 <HAL_RCC_ClockConfig+0x260>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d21d      	bcs.n	8002054 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002018:	4b2b      	ldr	r3, [pc, #172]	@ (80020c8 <HAL_RCC_ClockConfig+0x260>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f023 020f 	bic.w	r2, r3, #15
 8002020:	4929      	ldr	r1, [pc, #164]	@ (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002028:	f7ff f888 	bl	800113c <HAL_GetTick>
 800202c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800202e:	e00a      	b.n	8002046 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002030:	f7ff f884 	bl	800113c <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800203e:	4293      	cmp	r3, r2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e03b      	b.n	80020be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002046:	4b20      	ldr	r3, [pc, #128]	@ (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	d1ed      	bne.n	8002030 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d008      	beq.n	8002072 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002060:	4b1a      	ldr	r3, [pc, #104]	@ (80020cc <HAL_RCC_ClockConfig+0x264>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4917      	ldr	r1, [pc, #92]	@ (80020cc <HAL_RCC_ClockConfig+0x264>)
 800206e:	4313      	orrs	r3, r2
 8002070:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d009      	beq.n	8002092 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800207e:	4b13      	ldr	r3, [pc, #76]	@ (80020cc <HAL_RCC_ClockConfig+0x264>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	490f      	ldr	r1, [pc, #60]	@ (80020cc <HAL_RCC_ClockConfig+0x264>)
 800208e:	4313      	orrs	r3, r2
 8002090:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002092:	f000 f825 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 8002096:	4602      	mov	r2, r0
 8002098:	4b0c      	ldr	r3, [pc, #48]	@ (80020cc <HAL_RCC_ClockConfig+0x264>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	490c      	ldr	r1, [pc, #48]	@ (80020d4 <HAL_RCC_ClockConfig+0x26c>)
 80020a4:	5ccb      	ldrb	r3, [r1, r3]
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	fa22 f303 	lsr.w	r3, r2, r3
 80020ae:	4a0a      	ldr	r2, [pc, #40]	@ (80020d8 <HAL_RCC_ClockConfig+0x270>)
 80020b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80020b2:	4b0a      	ldr	r3, [pc, #40]	@ (80020dc <HAL_RCC_ClockConfig+0x274>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fff4 	bl	80010a4 <HAL_InitTick>
 80020bc:	4603      	mov	r3, r0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40022000 	.word	0x40022000
 80020cc:	40021000 	.word	0x40021000
 80020d0:	04c4b400 	.word	0x04c4b400
 80020d4:	08004848 	.word	0x08004848
 80020d8:	20000010 	.word	0x20000010
 80020dc:	20000014 	.word	0x20000014

080020e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80020e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002198 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d102      	bne.n	80020f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020f2:	4b2a      	ldr	r3, [pc, #168]	@ (800219c <HAL_RCC_GetSysClockFreq+0xbc>)
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	e047      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80020f8:	4b27      	ldr	r3, [pc, #156]	@ (8002198 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 030c 	and.w	r3, r3, #12
 8002100:	2b08      	cmp	r3, #8
 8002102:	d102      	bne.n	800210a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002104:	4b26      	ldr	r3, [pc, #152]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	e03e      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800210a:	4b23      	ldr	r3, [pc, #140]	@ (8002198 <HAL_RCC_GetSysClockFreq+0xb8>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	2b0c      	cmp	r3, #12
 8002114:	d136      	bne.n	8002184 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002116:	4b20      	ldr	r3, [pc, #128]	@ (8002198 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002120:	4b1d      	ldr	r3, [pc, #116]	@ (8002198 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	3301      	adds	r3, #1
 800212c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2b03      	cmp	r3, #3
 8002132:	d10c      	bne.n	800214e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002134:	4a1a      	ldr	r2, [pc, #104]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	fbb2 f3f3 	udiv	r3, r2, r3
 800213c:	4a16      	ldr	r2, [pc, #88]	@ (8002198 <HAL_RCC_GetSysClockFreq+0xb8>)
 800213e:	68d2      	ldr	r2, [r2, #12]
 8002140:	0a12      	lsrs	r2, r2, #8
 8002142:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	617b      	str	r3, [r7, #20]
      break;
 800214c:	e00c      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800214e:	4a13      	ldr	r2, [pc, #76]	@ (800219c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	fbb2 f3f3 	udiv	r3, r2, r3
 8002156:	4a10      	ldr	r2, [pc, #64]	@ (8002198 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002158:	68d2      	ldr	r2, [r2, #12]
 800215a:	0a12      	lsrs	r2, r2, #8
 800215c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002160:	fb02 f303 	mul.w	r3, r2, r3
 8002164:	617b      	str	r3, [r7, #20]
      break;
 8002166:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002168:	4b0b      	ldr	r3, [pc, #44]	@ (8002198 <HAL_RCC_GetSysClockFreq+0xb8>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	0e5b      	lsrs	r3, r3, #25
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	3301      	adds	r3, #1
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	e001      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002188:	693b      	ldr	r3, [r7, #16]
}
 800218a:	4618      	mov	r0, r3
 800218c:	371c      	adds	r7, #28
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000
 800219c:	00f42400 	.word	0x00f42400
 80021a0:	007a1200 	.word	0x007a1200

080021a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	3301      	adds	r3, #1
 80021c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d10c      	bne.n	80021e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021c8:	4a17      	ldr	r2, [pc, #92]	@ (8002228 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d0:	4a14      	ldr	r2, [pc, #80]	@ (8002224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021d2:	68d2      	ldr	r2, [r2, #12]
 80021d4:	0a12      	lsrs	r2, r2, #8
 80021d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80021da:	fb02 f303 	mul.w	r3, r2, r3
 80021de:	617b      	str	r3, [r7, #20]
    break;
 80021e0:	e00c      	b.n	80021fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021e2:	4a12      	ldr	r2, [pc, #72]	@ (800222c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021ec:	68d2      	ldr	r2, [r2, #12]
 80021ee:	0a12      	lsrs	r2, r2, #8
 80021f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80021f4:	fb02 f303 	mul.w	r3, r2, r3
 80021f8:	617b      	str	r3, [r7, #20]
    break;
 80021fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021fc:	4b09      	ldr	r3, [pc, #36]	@ (8002224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	0e5b      	lsrs	r3, r3, #25
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	3301      	adds	r3, #1
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	fbb2 f3f3 	udiv	r3, r2, r3
 8002214:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002216:	687b      	ldr	r3, [r7, #4]
}
 8002218:	4618      	mov	r0, r3
 800221a:	371c      	adds	r7, #28
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	40021000 	.word	0x40021000
 8002228:	007a1200 	.word	0x007a1200
 800222c:	00f42400 	.word	0x00f42400

08002230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e049      	b.n	80022d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d106      	bne.n	800225c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7fe fcc6 	bl	8000be8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2202      	movs	r2, #2
 8002260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3304      	adds	r3, #4
 800226c:	4619      	mov	r1, r3
 800226e:	4610      	mov	r0, r2
 8002270:	f000 fd40 	bl	8002cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e049      	b.n	8002384 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d106      	bne.n	800230a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f841 	bl	800238c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2202      	movs	r2, #2
 800230e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3304      	adds	r3, #4
 800231a:	4619      	mov	r1, r3
 800231c:	4610      	mov	r0, r2
 800231e:	f000 fce9 	bl	8002cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d109      	bne.n	80023c4 <HAL_TIM_PWM_Start+0x24>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	bf14      	ite	ne
 80023bc:	2301      	movne	r3, #1
 80023be:	2300      	moveq	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	e03c      	b.n	800243e <HAL_TIM_PWM_Start+0x9e>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d109      	bne.n	80023de <HAL_TIM_PWM_Start+0x3e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	bf14      	ite	ne
 80023d6:	2301      	movne	r3, #1
 80023d8:	2300      	moveq	r3, #0
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	e02f      	b.n	800243e <HAL_TIM_PWM_Start+0x9e>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d109      	bne.n	80023f8 <HAL_TIM_PWM_Start+0x58>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	bf14      	ite	ne
 80023f0:	2301      	movne	r3, #1
 80023f2:	2300      	moveq	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	e022      	b.n	800243e <HAL_TIM_PWM_Start+0x9e>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2b0c      	cmp	r3, #12
 80023fc:	d109      	bne.n	8002412 <HAL_TIM_PWM_Start+0x72>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b01      	cmp	r3, #1
 8002408:	bf14      	ite	ne
 800240a:	2301      	movne	r3, #1
 800240c:	2300      	moveq	r3, #0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	e015      	b.n	800243e <HAL_TIM_PWM_Start+0x9e>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2b10      	cmp	r3, #16
 8002416:	d109      	bne.n	800242c <HAL_TIM_PWM_Start+0x8c>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b01      	cmp	r3, #1
 8002422:	bf14      	ite	ne
 8002424:	2301      	movne	r3, #1
 8002426:	2300      	moveq	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	e008      	b.n	800243e <HAL_TIM_PWM_Start+0x9e>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b01      	cmp	r3, #1
 8002436:	bf14      	ite	ne
 8002438:	2301      	movne	r3, #1
 800243a:	2300      	moveq	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e0a6      	b.n	8002594 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d104      	bne.n	8002456 <HAL_TIM_PWM_Start+0xb6>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002454:	e023      	b.n	800249e <HAL_TIM_PWM_Start+0xfe>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b04      	cmp	r3, #4
 800245a:	d104      	bne.n	8002466 <HAL_TIM_PWM_Start+0xc6>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002464:	e01b      	b.n	800249e <HAL_TIM_PWM_Start+0xfe>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2b08      	cmp	r3, #8
 800246a:	d104      	bne.n	8002476 <HAL_TIM_PWM_Start+0xd6>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002474:	e013      	b.n	800249e <HAL_TIM_PWM_Start+0xfe>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2b0c      	cmp	r3, #12
 800247a:	d104      	bne.n	8002486 <HAL_TIM_PWM_Start+0xe6>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002484:	e00b      	b.n	800249e <HAL_TIM_PWM_Start+0xfe>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b10      	cmp	r3, #16
 800248a:	d104      	bne.n	8002496 <HAL_TIM_PWM_Start+0xf6>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002494:	e003      	b.n	800249e <HAL_TIM_PWM_Start+0xfe>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2202      	movs	r2, #2
 800249a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2201      	movs	r2, #1
 80024a4:	6839      	ldr	r1, [r7, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f001 f89e 	bl	80035e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a3a      	ldr	r2, [pc, #232]	@ (800259c <HAL_TIM_PWM_Start+0x1fc>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d018      	beq.n	80024e8 <HAL_TIM_PWM_Start+0x148>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a39      	ldr	r2, [pc, #228]	@ (80025a0 <HAL_TIM_PWM_Start+0x200>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d013      	beq.n	80024e8 <HAL_TIM_PWM_Start+0x148>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a37      	ldr	r2, [pc, #220]	@ (80025a4 <HAL_TIM_PWM_Start+0x204>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d00e      	beq.n	80024e8 <HAL_TIM_PWM_Start+0x148>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a36      	ldr	r2, [pc, #216]	@ (80025a8 <HAL_TIM_PWM_Start+0x208>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d009      	beq.n	80024e8 <HAL_TIM_PWM_Start+0x148>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a34      	ldr	r2, [pc, #208]	@ (80025ac <HAL_TIM_PWM_Start+0x20c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d004      	beq.n	80024e8 <HAL_TIM_PWM_Start+0x148>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a33      	ldr	r2, [pc, #204]	@ (80025b0 <HAL_TIM_PWM_Start+0x210>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d101      	bne.n	80024ec <HAL_TIM_PWM_Start+0x14c>
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <HAL_TIM_PWM_Start+0x14e>
 80024ec:	2300      	movs	r3, #0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d007      	beq.n	8002502 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002500:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a25      	ldr	r2, [pc, #148]	@ (800259c <HAL_TIM_PWM_Start+0x1fc>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d022      	beq.n	8002552 <HAL_TIM_PWM_Start+0x1b2>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002514:	d01d      	beq.n	8002552 <HAL_TIM_PWM_Start+0x1b2>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a26      	ldr	r2, [pc, #152]	@ (80025b4 <HAL_TIM_PWM_Start+0x214>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d018      	beq.n	8002552 <HAL_TIM_PWM_Start+0x1b2>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a24      	ldr	r2, [pc, #144]	@ (80025b8 <HAL_TIM_PWM_Start+0x218>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d013      	beq.n	8002552 <HAL_TIM_PWM_Start+0x1b2>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a23      	ldr	r2, [pc, #140]	@ (80025bc <HAL_TIM_PWM_Start+0x21c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d00e      	beq.n	8002552 <HAL_TIM_PWM_Start+0x1b2>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a19      	ldr	r2, [pc, #100]	@ (80025a0 <HAL_TIM_PWM_Start+0x200>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d009      	beq.n	8002552 <HAL_TIM_PWM_Start+0x1b2>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a18      	ldr	r2, [pc, #96]	@ (80025a4 <HAL_TIM_PWM_Start+0x204>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d004      	beq.n	8002552 <HAL_TIM_PWM_Start+0x1b2>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a18      	ldr	r2, [pc, #96]	@ (80025b0 <HAL_TIM_PWM_Start+0x210>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d115      	bne.n	800257e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	4b19      	ldr	r3, [pc, #100]	@ (80025c0 <HAL_TIM_PWM_Start+0x220>)
 800255a:	4013      	ands	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2b06      	cmp	r3, #6
 8002562:	d015      	beq.n	8002590 <HAL_TIM_PWM_Start+0x1f0>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800256a:	d011      	beq.n	8002590 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800257c:	e008      	b.n	8002590 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0201 	orr.w	r2, r2, #1
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	e000      	b.n	8002592 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002590:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40012c00 	.word	0x40012c00
 80025a0:	40013400 	.word	0x40013400
 80025a4:	40014000 	.word	0x40014000
 80025a8:	40014400 	.word	0x40014400
 80025ac:	40014800 	.word	0x40014800
 80025b0:	40015000 	.word	0x40015000
 80025b4:	40000400 	.word	0x40000400
 80025b8:	40000800 	.word	0x40000800
 80025bc:	40000c00 	.word	0x40000c00
 80025c0:	00010007 	.word	0x00010007

080025c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d020      	beq.n	8002628 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d01b      	beq.n	8002628 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f06f 0202 	mvn.w	r2, #2
 80025f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 fb52 	bl	8002cb8 <HAL_TIM_IC_CaptureCallback>
 8002614:	e005      	b.n	8002622 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fb44 	bl	8002ca4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 fb55 	bl	8002ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	2b00      	cmp	r3, #0
 8002630:	d020      	beq.n	8002674 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d01b      	beq.n	8002674 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f06f 0204 	mvn.w	r2, #4
 8002644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2202      	movs	r2, #2
 800264a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 fb2c 	bl	8002cb8 <HAL_TIM_IC_CaptureCallback>
 8002660:	e005      	b.n	800266e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fb1e 	bl	8002ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 fb2f 	bl	8002ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d020      	beq.n	80026c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d01b      	beq.n	80026c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f06f 0208 	mvn.w	r2, #8
 8002690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2204      	movs	r2, #4
 8002696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fb06 	bl	8002cb8 <HAL_TIM_IC_CaptureCallback>
 80026ac:	e005      	b.n	80026ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 faf8 	bl	8002ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 fb09 	bl	8002ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d020      	beq.n	800270c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f003 0310 	and.w	r3, r3, #16
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01b      	beq.n	800270c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f06f 0210 	mvn.w	r2, #16
 80026dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2208      	movs	r2, #8
 80026e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 fae0 	bl	8002cb8 <HAL_TIM_IC_CaptureCallback>
 80026f8:	e005      	b.n	8002706 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fad2 	bl	8002ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 fae3 	bl	8002ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00c      	beq.n	8002730 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	d007      	beq.n	8002730 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0201 	mvn.w	r2, #1
 8002728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7fe f85c 	bl	80007e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002736:	2b00      	cmp	r3, #0
 8002738:	d104      	bne.n	8002744 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00c      	beq.n	800275e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800274a:	2b00      	cmp	r3, #0
 800274c:	d007      	beq.n	800275e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f001 f961 	bl	8003a20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00c      	beq.n	8002782 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800276e:	2b00      	cmp	r3, #0
 8002770:	d007      	beq.n	8002782 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800277a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f001 f959 	bl	8003a34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00c      	beq.n	80027a6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002792:	2b00      	cmp	r3, #0
 8002794:	d007      	beq.n	80027a6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800279e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 fa9d 	bl	8002ce0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	f003 0320 	and.w	r3, r3, #32
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00c      	beq.n	80027ca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 0320 	and.w	r3, r3, #32
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d007      	beq.n	80027ca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f06f 0220 	mvn.w	r2, #32
 80027c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f001 f921 	bl	8003a0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00c      	beq.n	80027ee <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d007      	beq.n	80027ee <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80027e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f001 f92d 	bl	8003a48 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00c      	beq.n	8002812 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d007      	beq.n	8002812 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800280a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f001 f925 	bl	8003a5c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00c      	beq.n	8002836 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d007      	beq.n	8002836 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800282e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f001 f91d 	bl	8003a70 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00c      	beq.n	800285a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d007      	beq.n	800285a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8002852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f001 f915 	bl	8003a84 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002870:	2300      	movs	r3, #0
 8002872:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800287e:	2302      	movs	r3, #2
 8002880:	e0ff      	b.n	8002a82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b14      	cmp	r3, #20
 800288e:	f200 80f0 	bhi.w	8002a72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002892:	a201      	add	r2, pc, #4	@ (adr r2, 8002898 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002898:	080028ed 	.word	0x080028ed
 800289c:	08002a73 	.word	0x08002a73
 80028a0:	08002a73 	.word	0x08002a73
 80028a4:	08002a73 	.word	0x08002a73
 80028a8:	0800292d 	.word	0x0800292d
 80028ac:	08002a73 	.word	0x08002a73
 80028b0:	08002a73 	.word	0x08002a73
 80028b4:	08002a73 	.word	0x08002a73
 80028b8:	0800296f 	.word	0x0800296f
 80028bc:	08002a73 	.word	0x08002a73
 80028c0:	08002a73 	.word	0x08002a73
 80028c4:	08002a73 	.word	0x08002a73
 80028c8:	080029af 	.word	0x080029af
 80028cc:	08002a73 	.word	0x08002a73
 80028d0:	08002a73 	.word	0x08002a73
 80028d4:	08002a73 	.word	0x08002a73
 80028d8:	080029f1 	.word	0x080029f1
 80028dc:	08002a73 	.word	0x08002a73
 80028e0:	08002a73 	.word	0x08002a73
 80028e4:	08002a73 	.word	0x08002a73
 80028e8:	08002a31 	.word	0x08002a31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68b9      	ldr	r1, [r7, #8]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 fab2 	bl	8002e5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699a      	ldr	r2, [r3, #24]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0208 	orr.w	r2, r2, #8
 8002906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699a      	ldr	r2, [r3, #24]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0204 	bic.w	r2, r2, #4
 8002916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6999      	ldr	r1, [r3, #24]
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	691a      	ldr	r2, [r3, #16]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	619a      	str	r2, [r3, #24]
      break;
 800292a:	e0a5      	b.n	8002a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fb2c 	bl	8002f90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699a      	ldr	r2, [r3, #24]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699a      	ldr	r2, [r3, #24]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6999      	ldr	r1, [r3, #24]
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	021a      	lsls	r2, r3, #8
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	619a      	str	r2, [r3, #24]
      break;
 800296c:	e084      	b.n	8002a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	4618      	mov	r0, r3
 8002976:	f000 fb9f 	bl	80030b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	69da      	ldr	r2, [r3, #28]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0208 	orr.w	r2, r2, #8
 8002988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	69da      	ldr	r2, [r3, #28]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0204 	bic.w	r2, r2, #4
 8002998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	69d9      	ldr	r1, [r3, #28]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	61da      	str	r2, [r3, #28]
      break;
 80029ac:	e064      	b.n	8002a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68b9      	ldr	r1, [r7, #8]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 fc11 	bl	80031dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	69da      	ldr	r2, [r3, #28]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	69da      	ldr	r2, [r3, #28]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	69d9      	ldr	r1, [r3, #28]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	021a      	lsls	r2, r3, #8
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	61da      	str	r2, [r3, #28]
      break;
 80029ee:	e043      	b.n	8002a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68b9      	ldr	r1, [r7, #8]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 fc84 	bl	8003304 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0208 	orr.w	r2, r2, #8
 8002a0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0204 	bic.w	r2, r2, #4
 8002a1a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002a2e:	e023      	b.n	8002a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68b9      	ldr	r1, [r7, #8]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 fcce 	bl	80033d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a4a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a5a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	021a      	lsls	r2, r3, #8
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002a70:	e002      	b.n	8002a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	75fb      	strb	r3, [r7, #23]
      break;
 8002a76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop

08002a8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_TIM_ConfigClockSource+0x1c>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e0ee      	b.n	8002c86 <HAL_TIM_ConfigClockSource+0x1fa>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002ac6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ad2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a6b      	ldr	r2, [pc, #428]	@ (8002c90 <HAL_TIM_ConfigClockSource+0x204>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	f000 80b9 	beq.w	8002c5a <HAL_TIM_ConfigClockSource+0x1ce>
 8002ae8:	4a69      	ldr	r2, [pc, #420]	@ (8002c90 <HAL_TIM_ConfigClockSource+0x204>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	f200 80be 	bhi.w	8002c6c <HAL_TIM_ConfigClockSource+0x1e0>
 8002af0:	4a68      	ldr	r2, [pc, #416]	@ (8002c94 <HAL_TIM_ConfigClockSource+0x208>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	f000 80b1 	beq.w	8002c5a <HAL_TIM_ConfigClockSource+0x1ce>
 8002af8:	4a66      	ldr	r2, [pc, #408]	@ (8002c94 <HAL_TIM_ConfigClockSource+0x208>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	f200 80b6 	bhi.w	8002c6c <HAL_TIM_ConfigClockSource+0x1e0>
 8002b00:	4a65      	ldr	r2, [pc, #404]	@ (8002c98 <HAL_TIM_ConfigClockSource+0x20c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	f000 80a9 	beq.w	8002c5a <HAL_TIM_ConfigClockSource+0x1ce>
 8002b08:	4a63      	ldr	r2, [pc, #396]	@ (8002c98 <HAL_TIM_ConfigClockSource+0x20c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	f200 80ae 	bhi.w	8002c6c <HAL_TIM_ConfigClockSource+0x1e0>
 8002b10:	4a62      	ldr	r2, [pc, #392]	@ (8002c9c <HAL_TIM_ConfigClockSource+0x210>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	f000 80a1 	beq.w	8002c5a <HAL_TIM_ConfigClockSource+0x1ce>
 8002b18:	4a60      	ldr	r2, [pc, #384]	@ (8002c9c <HAL_TIM_ConfigClockSource+0x210>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	f200 80a6 	bhi.w	8002c6c <HAL_TIM_ConfigClockSource+0x1e0>
 8002b20:	4a5f      	ldr	r2, [pc, #380]	@ (8002ca0 <HAL_TIM_ConfigClockSource+0x214>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	f000 8099 	beq.w	8002c5a <HAL_TIM_ConfigClockSource+0x1ce>
 8002b28:	4a5d      	ldr	r2, [pc, #372]	@ (8002ca0 <HAL_TIM_ConfigClockSource+0x214>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	f200 809e 	bhi.w	8002c6c <HAL_TIM_ConfigClockSource+0x1e0>
 8002b30:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002b34:	f000 8091 	beq.w	8002c5a <HAL_TIM_ConfigClockSource+0x1ce>
 8002b38:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002b3c:	f200 8096 	bhi.w	8002c6c <HAL_TIM_ConfigClockSource+0x1e0>
 8002b40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b44:	f000 8089 	beq.w	8002c5a <HAL_TIM_ConfigClockSource+0x1ce>
 8002b48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b4c:	f200 808e 	bhi.w	8002c6c <HAL_TIM_ConfigClockSource+0x1e0>
 8002b50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b54:	d03e      	beq.n	8002bd4 <HAL_TIM_ConfigClockSource+0x148>
 8002b56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b5a:	f200 8087 	bhi.w	8002c6c <HAL_TIM_ConfigClockSource+0x1e0>
 8002b5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b62:	f000 8086 	beq.w	8002c72 <HAL_TIM_ConfigClockSource+0x1e6>
 8002b66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b6a:	d87f      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x1e0>
 8002b6c:	2b70      	cmp	r3, #112	@ 0x70
 8002b6e:	d01a      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0x11a>
 8002b70:	2b70      	cmp	r3, #112	@ 0x70
 8002b72:	d87b      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x1e0>
 8002b74:	2b60      	cmp	r3, #96	@ 0x60
 8002b76:	d050      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0x18e>
 8002b78:	2b60      	cmp	r3, #96	@ 0x60
 8002b7a:	d877      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x1e0>
 8002b7c:	2b50      	cmp	r3, #80	@ 0x50
 8002b7e:	d03c      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0x16e>
 8002b80:	2b50      	cmp	r3, #80	@ 0x50
 8002b82:	d873      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x1e0>
 8002b84:	2b40      	cmp	r3, #64	@ 0x40
 8002b86:	d058      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0x1ae>
 8002b88:	2b40      	cmp	r3, #64	@ 0x40
 8002b8a:	d86f      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x1e0>
 8002b8c:	2b30      	cmp	r3, #48	@ 0x30
 8002b8e:	d064      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x1ce>
 8002b90:	2b30      	cmp	r3, #48	@ 0x30
 8002b92:	d86b      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x1e0>
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d060      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x1ce>
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	d867      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x1e0>
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d05c      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x1ce>
 8002ba0:	2b10      	cmp	r3, #16
 8002ba2:	d05a      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x1ce>
 8002ba4:	e062      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bb6:	f000 fcf7 	bl	80035a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002bc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	609a      	str	r2, [r3, #8]
      break;
 8002bd2:	e04f      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002be4:	f000 fce0 	bl	80035a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bf6:	609a      	str	r2, [r3, #8]
      break;
 8002bf8:	e03c      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c06:	461a      	mov	r2, r3
 8002c08:	f000 fc52 	bl	80034b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2150      	movs	r1, #80	@ 0x50
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fcab 	bl	800356e <TIM_ITRx_SetConfig>
      break;
 8002c18:	e02c      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c26:	461a      	mov	r2, r3
 8002c28:	f000 fc71 	bl	800350e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2160      	movs	r1, #96	@ 0x60
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 fc9b 	bl	800356e <TIM_ITRx_SetConfig>
      break;
 8002c38:	e01c      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c46:	461a      	mov	r2, r3
 8002c48:	f000 fc32 	bl	80034b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2140      	movs	r1, #64	@ 0x40
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fc8b 	bl	800356e <TIM_ITRx_SetConfig>
      break;
 8002c58:	e00c      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4619      	mov	r1, r3
 8002c64:	4610      	mov	r0, r2
 8002c66:	f000 fc82 	bl	800356e <TIM_ITRx_SetConfig>
      break;
 8002c6a:	e003      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c70:	e000      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8002c72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	00100070 	.word	0x00100070
 8002c94:	00100050 	.word	0x00100050
 8002c98:	00100040 	.word	0x00100040
 8002c9c:	00100030 	.word	0x00100030
 8002ca0:	00100020 	.word	0x00100020

08002ca4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a4c      	ldr	r2, [pc, #304]	@ (8002e38 <TIM_Base_SetConfig+0x144>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d017      	beq.n	8002d3c <TIM_Base_SetConfig+0x48>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d12:	d013      	beq.n	8002d3c <TIM_Base_SetConfig+0x48>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a49      	ldr	r2, [pc, #292]	@ (8002e3c <TIM_Base_SetConfig+0x148>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d00f      	beq.n	8002d3c <TIM_Base_SetConfig+0x48>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a48      	ldr	r2, [pc, #288]	@ (8002e40 <TIM_Base_SetConfig+0x14c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d00b      	beq.n	8002d3c <TIM_Base_SetConfig+0x48>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a47      	ldr	r2, [pc, #284]	@ (8002e44 <TIM_Base_SetConfig+0x150>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d007      	beq.n	8002d3c <TIM_Base_SetConfig+0x48>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a46      	ldr	r2, [pc, #280]	@ (8002e48 <TIM_Base_SetConfig+0x154>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d003      	beq.n	8002d3c <TIM_Base_SetConfig+0x48>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a45      	ldr	r2, [pc, #276]	@ (8002e4c <TIM_Base_SetConfig+0x158>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d108      	bne.n	8002d4e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a39      	ldr	r2, [pc, #228]	@ (8002e38 <TIM_Base_SetConfig+0x144>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d023      	beq.n	8002d9e <TIM_Base_SetConfig+0xaa>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d5c:	d01f      	beq.n	8002d9e <TIM_Base_SetConfig+0xaa>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a36      	ldr	r2, [pc, #216]	@ (8002e3c <TIM_Base_SetConfig+0x148>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d01b      	beq.n	8002d9e <TIM_Base_SetConfig+0xaa>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a35      	ldr	r2, [pc, #212]	@ (8002e40 <TIM_Base_SetConfig+0x14c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d017      	beq.n	8002d9e <TIM_Base_SetConfig+0xaa>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a34      	ldr	r2, [pc, #208]	@ (8002e44 <TIM_Base_SetConfig+0x150>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d013      	beq.n	8002d9e <TIM_Base_SetConfig+0xaa>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a33      	ldr	r2, [pc, #204]	@ (8002e48 <TIM_Base_SetConfig+0x154>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00f      	beq.n	8002d9e <TIM_Base_SetConfig+0xaa>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a33      	ldr	r2, [pc, #204]	@ (8002e50 <TIM_Base_SetConfig+0x15c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00b      	beq.n	8002d9e <TIM_Base_SetConfig+0xaa>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a32      	ldr	r2, [pc, #200]	@ (8002e54 <TIM_Base_SetConfig+0x160>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d007      	beq.n	8002d9e <TIM_Base_SetConfig+0xaa>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a31      	ldr	r2, [pc, #196]	@ (8002e58 <TIM_Base_SetConfig+0x164>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d003      	beq.n	8002d9e <TIM_Base_SetConfig+0xaa>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a2c      	ldr	r2, [pc, #176]	@ (8002e4c <TIM_Base_SetConfig+0x158>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d108      	bne.n	8002db0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a18      	ldr	r2, [pc, #96]	@ (8002e38 <TIM_Base_SetConfig+0x144>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d013      	beq.n	8002e04 <TIM_Base_SetConfig+0x110>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a1a      	ldr	r2, [pc, #104]	@ (8002e48 <TIM_Base_SetConfig+0x154>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d00f      	beq.n	8002e04 <TIM_Base_SetConfig+0x110>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a1a      	ldr	r2, [pc, #104]	@ (8002e50 <TIM_Base_SetConfig+0x15c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00b      	beq.n	8002e04 <TIM_Base_SetConfig+0x110>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a19      	ldr	r2, [pc, #100]	@ (8002e54 <TIM_Base_SetConfig+0x160>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d007      	beq.n	8002e04 <TIM_Base_SetConfig+0x110>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a18      	ldr	r2, [pc, #96]	@ (8002e58 <TIM_Base_SetConfig+0x164>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d003      	beq.n	8002e04 <TIM_Base_SetConfig+0x110>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a13      	ldr	r2, [pc, #76]	@ (8002e4c <TIM_Base_SetConfig+0x158>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d103      	bne.n	8002e0c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d105      	bne.n	8002e2a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f023 0201 	bic.w	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	611a      	str	r2, [r3, #16]
  }
}
 8002e2a:	bf00      	nop
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40012c00 	.word	0x40012c00
 8002e3c:	40000400 	.word	0x40000400
 8002e40:	40000800 	.word	0x40000800
 8002e44:	40000c00 	.word	0x40000c00
 8002e48:	40013400 	.word	0x40013400
 8002e4c:	40015000 	.word	0x40015000
 8002e50:	40014000 	.word	0x40014000
 8002e54:	40014400 	.word	0x40014400
 8002e58:	40014800 	.word	0x40014800

08002e5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	f023 0201 	bic.w	r2, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 0303 	bic.w	r3, r3, #3
 8002e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f023 0302 	bic.w	r3, r3, #2
 8002ea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a30      	ldr	r2, [pc, #192]	@ (8002f78 <TIM_OC1_SetConfig+0x11c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d013      	beq.n	8002ee4 <TIM_OC1_SetConfig+0x88>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a2f      	ldr	r2, [pc, #188]	@ (8002f7c <TIM_OC1_SetConfig+0x120>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d00f      	beq.n	8002ee4 <TIM_OC1_SetConfig+0x88>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a2e      	ldr	r2, [pc, #184]	@ (8002f80 <TIM_OC1_SetConfig+0x124>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00b      	beq.n	8002ee4 <TIM_OC1_SetConfig+0x88>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a2d      	ldr	r2, [pc, #180]	@ (8002f84 <TIM_OC1_SetConfig+0x128>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d007      	beq.n	8002ee4 <TIM_OC1_SetConfig+0x88>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a2c      	ldr	r2, [pc, #176]	@ (8002f88 <TIM_OC1_SetConfig+0x12c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d003      	beq.n	8002ee4 <TIM_OC1_SetConfig+0x88>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a2b      	ldr	r2, [pc, #172]	@ (8002f8c <TIM_OC1_SetConfig+0x130>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d10c      	bne.n	8002efe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f023 0308 	bic.w	r3, r3, #8
 8002eea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f023 0304 	bic.w	r3, r3, #4
 8002efc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a1d      	ldr	r2, [pc, #116]	@ (8002f78 <TIM_OC1_SetConfig+0x11c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d013      	beq.n	8002f2e <TIM_OC1_SetConfig+0xd2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a1c      	ldr	r2, [pc, #112]	@ (8002f7c <TIM_OC1_SetConfig+0x120>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00f      	beq.n	8002f2e <TIM_OC1_SetConfig+0xd2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a1b      	ldr	r2, [pc, #108]	@ (8002f80 <TIM_OC1_SetConfig+0x124>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00b      	beq.n	8002f2e <TIM_OC1_SetConfig+0xd2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a1a      	ldr	r2, [pc, #104]	@ (8002f84 <TIM_OC1_SetConfig+0x128>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d007      	beq.n	8002f2e <TIM_OC1_SetConfig+0xd2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a19      	ldr	r2, [pc, #100]	@ (8002f88 <TIM_OC1_SetConfig+0x12c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d003      	beq.n	8002f2e <TIM_OC1_SetConfig+0xd2>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a18      	ldr	r2, [pc, #96]	@ (8002f8c <TIM_OC1_SetConfig+0x130>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d111      	bne.n	8002f52 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	621a      	str	r2, [r3, #32]
}
 8002f6c:	bf00      	nop
 8002f6e:	371c      	adds	r7, #28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	40012c00 	.word	0x40012c00
 8002f7c:	40013400 	.word	0x40013400
 8002f80:	40014000 	.word	0x40014000
 8002f84:	40014400 	.word	0x40014400
 8002f88:	40014800 	.word	0x40014800
 8002f8c:	40015000 	.word	0x40015000

08002f90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	f023 0210 	bic.w	r2, r3, #16
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	021b      	lsls	r3, r3, #8
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f023 0320 	bic.w	r3, r3, #32
 8002fde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a2c      	ldr	r2, [pc, #176]	@ (80030a0 <TIM_OC2_SetConfig+0x110>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d007      	beq.n	8003004 <TIM_OC2_SetConfig+0x74>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a2b      	ldr	r2, [pc, #172]	@ (80030a4 <TIM_OC2_SetConfig+0x114>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d003      	beq.n	8003004 <TIM_OC2_SetConfig+0x74>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a2a      	ldr	r2, [pc, #168]	@ (80030a8 <TIM_OC2_SetConfig+0x118>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d10d      	bne.n	8003020 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800300a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4313      	orrs	r3, r2
 8003016:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800301e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a1f      	ldr	r2, [pc, #124]	@ (80030a0 <TIM_OC2_SetConfig+0x110>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d013      	beq.n	8003050 <TIM_OC2_SetConfig+0xc0>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a1e      	ldr	r2, [pc, #120]	@ (80030a4 <TIM_OC2_SetConfig+0x114>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00f      	beq.n	8003050 <TIM_OC2_SetConfig+0xc0>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a1e      	ldr	r2, [pc, #120]	@ (80030ac <TIM_OC2_SetConfig+0x11c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00b      	beq.n	8003050 <TIM_OC2_SetConfig+0xc0>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a1d      	ldr	r2, [pc, #116]	@ (80030b0 <TIM_OC2_SetConfig+0x120>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d007      	beq.n	8003050 <TIM_OC2_SetConfig+0xc0>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a1c      	ldr	r2, [pc, #112]	@ (80030b4 <TIM_OC2_SetConfig+0x124>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d003      	beq.n	8003050 <TIM_OC2_SetConfig+0xc0>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a17      	ldr	r2, [pc, #92]	@ (80030a8 <TIM_OC2_SetConfig+0x118>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d113      	bne.n	8003078 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003056:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800305e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	621a      	str	r2, [r3, #32]
}
 8003092:	bf00      	nop
 8003094:	371c      	adds	r7, #28
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	40012c00 	.word	0x40012c00
 80030a4:	40013400 	.word	0x40013400
 80030a8:	40015000 	.word	0x40015000
 80030ac:	40014000 	.word	0x40014000
 80030b0:	40014400 	.word	0x40014400
 80030b4:	40014800 	.word	0x40014800

080030b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 0303 	bic.w	r3, r3, #3
 80030f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	4313      	orrs	r3, r2
 8003110:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a2b      	ldr	r2, [pc, #172]	@ (80031c4 <TIM_OC3_SetConfig+0x10c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d007      	beq.n	800312a <TIM_OC3_SetConfig+0x72>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a2a      	ldr	r2, [pc, #168]	@ (80031c8 <TIM_OC3_SetConfig+0x110>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d003      	beq.n	800312a <TIM_OC3_SetConfig+0x72>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a29      	ldr	r2, [pc, #164]	@ (80031cc <TIM_OC3_SetConfig+0x114>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d10d      	bne.n	8003146 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003130:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	021b      	lsls	r3, r3, #8
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	4313      	orrs	r3, r2
 800313c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a1e      	ldr	r2, [pc, #120]	@ (80031c4 <TIM_OC3_SetConfig+0x10c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d013      	beq.n	8003176 <TIM_OC3_SetConfig+0xbe>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a1d      	ldr	r2, [pc, #116]	@ (80031c8 <TIM_OC3_SetConfig+0x110>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00f      	beq.n	8003176 <TIM_OC3_SetConfig+0xbe>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a1d      	ldr	r2, [pc, #116]	@ (80031d0 <TIM_OC3_SetConfig+0x118>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d00b      	beq.n	8003176 <TIM_OC3_SetConfig+0xbe>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a1c      	ldr	r2, [pc, #112]	@ (80031d4 <TIM_OC3_SetConfig+0x11c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d007      	beq.n	8003176 <TIM_OC3_SetConfig+0xbe>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a1b      	ldr	r2, [pc, #108]	@ (80031d8 <TIM_OC3_SetConfig+0x120>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d003      	beq.n	8003176 <TIM_OC3_SetConfig+0xbe>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a16      	ldr	r2, [pc, #88]	@ (80031cc <TIM_OC3_SetConfig+0x114>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d113      	bne.n	800319e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800317c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	621a      	str	r2, [r3, #32]
}
 80031b8:	bf00      	nop
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	40012c00 	.word	0x40012c00
 80031c8:	40013400 	.word	0x40013400
 80031cc:	40015000 	.word	0x40015000
 80031d0:	40014000 	.word	0x40014000
 80031d4:	40014400 	.word	0x40014400
 80031d8:	40014800 	.word	0x40014800

080031dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031dc:	b480      	push	{r7}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800320a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800320e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	021b      	lsls	r3, r3, #8
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4313      	orrs	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800322a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	031b      	lsls	r3, r3, #12
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	4313      	orrs	r3, r2
 8003236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a2c      	ldr	r2, [pc, #176]	@ (80032ec <TIM_OC4_SetConfig+0x110>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d007      	beq.n	8003250 <TIM_OC4_SetConfig+0x74>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a2b      	ldr	r2, [pc, #172]	@ (80032f0 <TIM_OC4_SetConfig+0x114>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d003      	beq.n	8003250 <TIM_OC4_SetConfig+0x74>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a2a      	ldr	r2, [pc, #168]	@ (80032f4 <TIM_OC4_SetConfig+0x118>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d10d      	bne.n	800326c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	031b      	lsls	r3, r3, #12
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	4313      	orrs	r3, r2
 8003262:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800326a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a1f      	ldr	r2, [pc, #124]	@ (80032ec <TIM_OC4_SetConfig+0x110>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d013      	beq.n	800329c <TIM_OC4_SetConfig+0xc0>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a1e      	ldr	r2, [pc, #120]	@ (80032f0 <TIM_OC4_SetConfig+0x114>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d00f      	beq.n	800329c <TIM_OC4_SetConfig+0xc0>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a1e      	ldr	r2, [pc, #120]	@ (80032f8 <TIM_OC4_SetConfig+0x11c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00b      	beq.n	800329c <TIM_OC4_SetConfig+0xc0>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a1d      	ldr	r2, [pc, #116]	@ (80032fc <TIM_OC4_SetConfig+0x120>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d007      	beq.n	800329c <TIM_OC4_SetConfig+0xc0>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a1c      	ldr	r2, [pc, #112]	@ (8003300 <TIM_OC4_SetConfig+0x124>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d003      	beq.n	800329c <TIM_OC4_SetConfig+0xc0>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a17      	ldr	r2, [pc, #92]	@ (80032f4 <TIM_OC4_SetConfig+0x118>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d113      	bne.n	80032c4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032a2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80032aa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	019b      	lsls	r3, r3, #6
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	019b      	lsls	r3, r3, #6
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	621a      	str	r2, [r3, #32]
}
 80032de:	bf00      	nop
 80032e0:	371c      	adds	r7, #28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40012c00 	.word	0x40012c00
 80032f0:	40013400 	.word	0x40013400
 80032f4:	40015000 	.word	0x40015000
 80032f8:	40014000 	.word	0x40014000
 80032fc:	40014400 	.word	0x40014400
 8003300:	40014800 	.word	0x40014800

08003304 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800332a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	4313      	orrs	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003348:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	041b      	lsls	r3, r3, #16
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4313      	orrs	r3, r2
 8003354:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a19      	ldr	r2, [pc, #100]	@ (80033c0 <TIM_OC5_SetConfig+0xbc>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d013      	beq.n	8003386 <TIM_OC5_SetConfig+0x82>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a18      	ldr	r2, [pc, #96]	@ (80033c4 <TIM_OC5_SetConfig+0xc0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00f      	beq.n	8003386 <TIM_OC5_SetConfig+0x82>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a17      	ldr	r2, [pc, #92]	@ (80033c8 <TIM_OC5_SetConfig+0xc4>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d00b      	beq.n	8003386 <TIM_OC5_SetConfig+0x82>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a16      	ldr	r2, [pc, #88]	@ (80033cc <TIM_OC5_SetConfig+0xc8>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d007      	beq.n	8003386 <TIM_OC5_SetConfig+0x82>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a15      	ldr	r2, [pc, #84]	@ (80033d0 <TIM_OC5_SetConfig+0xcc>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d003      	beq.n	8003386 <TIM_OC5_SetConfig+0x82>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a14      	ldr	r2, [pc, #80]	@ (80033d4 <TIM_OC5_SetConfig+0xd0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d109      	bne.n	800339a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800338c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	021b      	lsls	r3, r3, #8
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	4313      	orrs	r3, r2
 8003398:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	621a      	str	r2, [r3, #32]
}
 80033b4:	bf00      	nop
 80033b6:	371c      	adds	r7, #28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	40012c00 	.word	0x40012c00
 80033c4:	40013400 	.word	0x40013400
 80033c8:	40014000 	.word	0x40014000
 80033cc:	40014400 	.word	0x40014400
 80033d0:	40014800 	.word	0x40014800
 80033d4:	40015000 	.word	0x40015000

080033d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003406:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800340a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	021b      	lsls	r3, r3, #8
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800341e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	051b      	lsls	r3, r3, #20
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a1a      	ldr	r2, [pc, #104]	@ (8003498 <TIM_OC6_SetConfig+0xc0>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d013      	beq.n	800345c <TIM_OC6_SetConfig+0x84>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a19      	ldr	r2, [pc, #100]	@ (800349c <TIM_OC6_SetConfig+0xc4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00f      	beq.n	800345c <TIM_OC6_SetConfig+0x84>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a18      	ldr	r2, [pc, #96]	@ (80034a0 <TIM_OC6_SetConfig+0xc8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00b      	beq.n	800345c <TIM_OC6_SetConfig+0x84>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a17      	ldr	r2, [pc, #92]	@ (80034a4 <TIM_OC6_SetConfig+0xcc>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d007      	beq.n	800345c <TIM_OC6_SetConfig+0x84>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a16      	ldr	r2, [pc, #88]	@ (80034a8 <TIM_OC6_SetConfig+0xd0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d003      	beq.n	800345c <TIM_OC6_SetConfig+0x84>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a15      	ldr	r2, [pc, #84]	@ (80034ac <TIM_OC6_SetConfig+0xd4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d109      	bne.n	8003470 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003462:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	029b      	lsls	r3, r3, #10
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	621a      	str	r2, [r3, #32]
}
 800348a:	bf00      	nop
 800348c:	371c      	adds	r7, #28
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40012c00 	.word	0x40012c00
 800349c:	40013400 	.word	0x40013400
 80034a0:	40014000 	.word	0x40014000
 80034a4:	40014400 	.word	0x40014400
 80034a8:	40014800 	.word	0x40014800
 80034ac:	40015000 	.word	0x40015000

080034b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	f023 0201 	bic.w	r2, r3, #1
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f023 030a 	bic.w	r3, r3, #10
 80034ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	621a      	str	r2, [r3, #32]
}
 8003502:	bf00      	nop
 8003504:	371c      	adds	r7, #28
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800350e:	b480      	push	{r7}
 8003510:	b087      	sub	sp, #28
 8003512:	af00      	add	r7, sp, #0
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	f023 0210 	bic.w	r2, r3, #16
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003538:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	031b      	lsls	r3, r3, #12
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800354a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	621a      	str	r2, [r3, #32]
}
 8003562:	bf00      	nop
 8003564:	371c      	adds	r7, #28
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800356e:	b480      	push	{r7}
 8003570:	b085      	sub	sp, #20
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003584:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003588:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4313      	orrs	r3, r2
 8003590:	f043 0307 	orr.w	r3, r3, #7
 8003594:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	609a      	str	r2, [r3, #8]
}
 800359c:	bf00      	nop
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	021a      	lsls	r2, r3, #8
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	431a      	orrs	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	609a      	str	r2, [r3, #8]
}
 80035dc:	bf00      	nop
 80035de:	371c      	adds	r7, #28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f003 031f 	and.w	r3, r3, #31
 80035fa:	2201      	movs	r2, #1
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a1a      	ldr	r2, [r3, #32]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	43db      	mvns	r3, r3
 800360a:	401a      	ands	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a1a      	ldr	r2, [r3, #32]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f003 031f 	and.w	r3, r3, #31
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	fa01 f303 	lsl.w	r3, r1, r3
 8003620:	431a      	orrs	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	621a      	str	r2, [r3, #32]
}
 8003626:	bf00      	nop
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d109      	bne.n	8003658 <HAL_TIMEx_PWMN_Start+0x24>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b01      	cmp	r3, #1
 800364e:	bf14      	ite	ne
 8003650:	2301      	movne	r3, #1
 8003652:	2300      	moveq	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	e022      	b.n	800369e <HAL_TIMEx_PWMN_Start+0x6a>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2b04      	cmp	r3, #4
 800365c:	d109      	bne.n	8003672 <HAL_TIMEx_PWMN_Start+0x3e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b01      	cmp	r3, #1
 8003668:	bf14      	ite	ne
 800366a:	2301      	movne	r3, #1
 800366c:	2300      	moveq	r3, #0
 800366e:	b2db      	uxtb	r3, r3
 8003670:	e015      	b.n	800369e <HAL_TIMEx_PWMN_Start+0x6a>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b08      	cmp	r3, #8
 8003676:	d109      	bne.n	800368c <HAL_TIMEx_PWMN_Start+0x58>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b01      	cmp	r3, #1
 8003682:	bf14      	ite	ne
 8003684:	2301      	movne	r3, #1
 8003686:	2300      	moveq	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	e008      	b.n	800369e <HAL_TIMEx_PWMN_Start+0x6a>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b01      	cmp	r3, #1
 8003696:	bf14      	ite	ne
 8003698:	2301      	movne	r3, #1
 800369a:	2300      	moveq	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e073      	b.n	800378e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d104      	bne.n	80036b6 <HAL_TIMEx_PWMN_Start+0x82>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036b4:	e013      	b.n	80036de <HAL_TIMEx_PWMN_Start+0xaa>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d104      	bne.n	80036c6 <HAL_TIMEx_PWMN_Start+0x92>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036c4:	e00b      	b.n	80036de <HAL_TIMEx_PWMN_Start+0xaa>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d104      	bne.n	80036d6 <HAL_TIMEx_PWMN_Start+0xa2>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80036d4:	e003      	b.n	80036de <HAL_TIMEx_PWMN_Start+0xaa>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2202      	movs	r2, #2
 80036da:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2204      	movs	r2, #4
 80036e4:	6839      	ldr	r1, [r7, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 f9d6 	bl	8003a98 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036fa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a25      	ldr	r2, [pc, #148]	@ (8003798 <HAL_TIMEx_PWMN_Start+0x164>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d022      	beq.n	800374c <HAL_TIMEx_PWMN_Start+0x118>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800370e:	d01d      	beq.n	800374c <HAL_TIMEx_PWMN_Start+0x118>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a21      	ldr	r2, [pc, #132]	@ (800379c <HAL_TIMEx_PWMN_Start+0x168>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d018      	beq.n	800374c <HAL_TIMEx_PWMN_Start+0x118>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a20      	ldr	r2, [pc, #128]	@ (80037a0 <HAL_TIMEx_PWMN_Start+0x16c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d013      	beq.n	800374c <HAL_TIMEx_PWMN_Start+0x118>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1e      	ldr	r2, [pc, #120]	@ (80037a4 <HAL_TIMEx_PWMN_Start+0x170>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d00e      	beq.n	800374c <HAL_TIMEx_PWMN_Start+0x118>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1d      	ldr	r2, [pc, #116]	@ (80037a8 <HAL_TIMEx_PWMN_Start+0x174>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d009      	beq.n	800374c <HAL_TIMEx_PWMN_Start+0x118>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a1b      	ldr	r2, [pc, #108]	@ (80037ac <HAL_TIMEx_PWMN_Start+0x178>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d004      	beq.n	800374c <HAL_TIMEx_PWMN_Start+0x118>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1a      	ldr	r2, [pc, #104]	@ (80037b0 <HAL_TIMEx_PWMN_Start+0x17c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d115      	bne.n	8003778 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	4b18      	ldr	r3, [pc, #96]	@ (80037b4 <HAL_TIMEx_PWMN_Start+0x180>)
 8003754:	4013      	ands	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2b06      	cmp	r3, #6
 800375c:	d015      	beq.n	800378a <HAL_TIMEx_PWMN_Start+0x156>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003764:	d011      	beq.n	800378a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f042 0201 	orr.w	r2, r2, #1
 8003774:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003776:	e008      	b.n	800378a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	e000      	b.n	800378c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800378a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40012c00 	.word	0x40012c00
 800379c:	40000400 	.word	0x40000400
 80037a0:	40000800 	.word	0x40000800
 80037a4:	40000c00 	.word	0x40000c00
 80037a8:	40013400 	.word	0x40013400
 80037ac:	40014000 	.word	0x40014000
 80037b0:	40015000 	.word	0x40015000
 80037b4:	00010007 	.word	0x00010007

080037b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e074      	b.n	80038ba <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a34      	ldr	r2, [pc, #208]	@ (80038c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d009      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a33      	ldr	r2, [pc, #204]	@ (80038cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d004      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a31      	ldr	r2, [pc, #196]	@ (80038d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d108      	bne.n	8003820 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003814:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	4313      	orrs	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800382a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a21      	ldr	r2, [pc, #132]	@ (80038c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d022      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003850:	d01d      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1f      	ldr	r2, [pc, #124]	@ (80038d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d018      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1d      	ldr	r2, [pc, #116]	@ (80038d8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d013      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a1c      	ldr	r2, [pc, #112]	@ (80038dc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d00e      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a15      	ldr	r2, [pc, #84]	@ (80038cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d009      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a18      	ldr	r2, [pc, #96]	@ (80038e0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d004      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a11      	ldr	r2, [pc, #68]	@ (80038d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d10c      	bne.n	80038a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003894:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	4313      	orrs	r3, r2
 800389e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40012c00 	.word	0x40012c00
 80038cc:	40013400 	.word	0x40013400
 80038d0:	40015000 	.word	0x40015000
 80038d4:	40000400 	.word	0x40000400
 80038d8:	40000800 	.word	0x40000800
 80038dc:	40000c00 	.word	0x40000c00
 80038e0:	40014000 	.word	0x40014000

080038e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e078      	b.n	80039f2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	4313      	orrs	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4313      	orrs	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	4313      	orrs	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	041b      	lsls	r3, r3, #16
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	4313      	orrs	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a1c      	ldr	r2, [pc, #112]	@ (8003a00 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d009      	beq.n	80039a6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a1b      	ldr	r2, [pc, #108]	@ (8003a04 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d004      	beq.n	80039a6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a19      	ldr	r2, [pc, #100]	@ (8003a08 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d11c      	bne.n	80039e0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b0:	051b      	lsls	r3, r3, #20
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039dc:	4313      	orrs	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40012c00 	.word	0x40012c00
 8003a04:	40013400 	.word	0x40013400
 8003a08:	40015000 	.word	0x40015000

08003a0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	2204      	movs	r2, #4
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6a1a      	ldr	r2, [r3, #32]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	401a      	ands	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6a1a      	ldr	r2, [r3, #32]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	621a      	str	r2, [r3, #32]
}
 8003ad6:	bf00      	nop
 8003ad8:	371c      	adds	r7, #28
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <_ZdlPvj>:
 8003ae2:	f000 b800 	b.w	8003ae6 <_ZdlPv>

08003ae6 <_ZdlPv>:
 8003ae6:	f000 bdcb 	b.w	8004680 <free>
	...

08003aec <cosf>:
 8003aec:	ee10 3a10 	vmov	r3, s0
 8003af0:	b507      	push	{r0, r1, r2, lr}
 8003af2:	4a1e      	ldr	r2, [pc, #120]	@ (8003b6c <cosf+0x80>)
 8003af4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d806      	bhi.n	8003b0a <cosf+0x1e>
 8003afc:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8003b70 <cosf+0x84>
 8003b00:	b003      	add	sp, #12
 8003b02:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b06:	f000 b8d1 	b.w	8003cac <__kernel_cosf>
 8003b0a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8003b0e:	d304      	bcc.n	8003b1a <cosf+0x2e>
 8003b10:	ee30 0a40 	vsub.f32	s0, s0, s0
 8003b14:	b003      	add	sp, #12
 8003b16:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b1a:	4668      	mov	r0, sp
 8003b1c:	f000 f966 	bl	8003dec <__ieee754_rem_pio2f>
 8003b20:	f000 0003 	and.w	r0, r0, #3
 8003b24:	2801      	cmp	r0, #1
 8003b26:	d009      	beq.n	8003b3c <cosf+0x50>
 8003b28:	2802      	cmp	r0, #2
 8003b2a:	d010      	beq.n	8003b4e <cosf+0x62>
 8003b2c:	b9b0      	cbnz	r0, 8003b5c <cosf+0x70>
 8003b2e:	eddd 0a01 	vldr	s1, [sp, #4]
 8003b32:	ed9d 0a00 	vldr	s0, [sp]
 8003b36:	f000 f8b9 	bl	8003cac <__kernel_cosf>
 8003b3a:	e7eb      	b.n	8003b14 <cosf+0x28>
 8003b3c:	eddd 0a01 	vldr	s1, [sp, #4]
 8003b40:	ed9d 0a00 	vldr	s0, [sp]
 8003b44:	f000 f90a 	bl	8003d5c <__kernel_sinf>
 8003b48:	eeb1 0a40 	vneg.f32	s0, s0
 8003b4c:	e7e2      	b.n	8003b14 <cosf+0x28>
 8003b4e:	eddd 0a01 	vldr	s1, [sp, #4]
 8003b52:	ed9d 0a00 	vldr	s0, [sp]
 8003b56:	f000 f8a9 	bl	8003cac <__kernel_cosf>
 8003b5a:	e7f5      	b.n	8003b48 <cosf+0x5c>
 8003b5c:	eddd 0a01 	vldr	s1, [sp, #4]
 8003b60:	ed9d 0a00 	vldr	s0, [sp]
 8003b64:	2001      	movs	r0, #1
 8003b66:	f000 f8f9 	bl	8003d5c <__kernel_sinf>
 8003b6a:	e7d3      	b.n	8003b14 <cosf+0x28>
 8003b6c:	3f490fd8 	.word	0x3f490fd8
 8003b70:	00000000 	.word	0x00000000

08003b74 <sinf>:
 8003b74:	ee10 3a10 	vmov	r3, s0
 8003b78:	b507      	push	{r0, r1, r2, lr}
 8003b7a:	4a1f      	ldr	r2, [pc, #124]	@ (8003bf8 <sinf+0x84>)
 8003b7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d807      	bhi.n	8003b94 <sinf+0x20>
 8003b84:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8003bfc <sinf+0x88>
 8003b88:	2000      	movs	r0, #0
 8003b8a:	b003      	add	sp, #12
 8003b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b90:	f000 b8e4 	b.w	8003d5c <__kernel_sinf>
 8003b94:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8003b98:	d304      	bcc.n	8003ba4 <sinf+0x30>
 8003b9a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8003b9e:	b003      	add	sp, #12
 8003ba0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ba4:	4668      	mov	r0, sp
 8003ba6:	f000 f921 	bl	8003dec <__ieee754_rem_pio2f>
 8003baa:	f000 0003 	and.w	r0, r0, #3
 8003bae:	2801      	cmp	r0, #1
 8003bb0:	d00a      	beq.n	8003bc8 <sinf+0x54>
 8003bb2:	2802      	cmp	r0, #2
 8003bb4:	d00f      	beq.n	8003bd6 <sinf+0x62>
 8003bb6:	b9c0      	cbnz	r0, 8003bea <sinf+0x76>
 8003bb8:	eddd 0a01 	vldr	s1, [sp, #4]
 8003bbc:	ed9d 0a00 	vldr	s0, [sp]
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	f000 f8cb 	bl	8003d5c <__kernel_sinf>
 8003bc6:	e7ea      	b.n	8003b9e <sinf+0x2a>
 8003bc8:	eddd 0a01 	vldr	s1, [sp, #4]
 8003bcc:	ed9d 0a00 	vldr	s0, [sp]
 8003bd0:	f000 f86c 	bl	8003cac <__kernel_cosf>
 8003bd4:	e7e3      	b.n	8003b9e <sinf+0x2a>
 8003bd6:	eddd 0a01 	vldr	s1, [sp, #4]
 8003bda:	ed9d 0a00 	vldr	s0, [sp]
 8003bde:	2001      	movs	r0, #1
 8003be0:	f000 f8bc 	bl	8003d5c <__kernel_sinf>
 8003be4:	eeb1 0a40 	vneg.f32	s0, s0
 8003be8:	e7d9      	b.n	8003b9e <sinf+0x2a>
 8003bea:	eddd 0a01 	vldr	s1, [sp, #4]
 8003bee:	ed9d 0a00 	vldr	s0, [sp]
 8003bf2:	f000 f85b 	bl	8003cac <__kernel_cosf>
 8003bf6:	e7f5      	b.n	8003be4 <sinf+0x70>
 8003bf8:	3f490fd8 	.word	0x3f490fd8
 8003bfc:	00000000 	.word	0x00000000

08003c00 <fmaxf>:
 8003c00:	b508      	push	{r3, lr}
 8003c02:	ed2d 8b02 	vpush	{d8}
 8003c06:	eeb0 8a40 	vmov.f32	s16, s0
 8003c0a:	eef0 8a60 	vmov.f32	s17, s1
 8003c0e:	f000 f831 	bl	8003c74 <__fpclassifyf>
 8003c12:	b930      	cbnz	r0, 8003c22 <fmaxf+0x22>
 8003c14:	eeb0 8a68 	vmov.f32	s16, s17
 8003c18:	eeb0 0a48 	vmov.f32	s0, s16
 8003c1c:	ecbd 8b02 	vpop	{d8}
 8003c20:	bd08      	pop	{r3, pc}
 8003c22:	eeb0 0a68 	vmov.f32	s0, s17
 8003c26:	f000 f825 	bl	8003c74 <__fpclassifyf>
 8003c2a:	2800      	cmp	r0, #0
 8003c2c:	d0f4      	beq.n	8003c18 <fmaxf+0x18>
 8003c2e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8003c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c36:	dded      	ble.n	8003c14 <fmaxf+0x14>
 8003c38:	e7ee      	b.n	8003c18 <fmaxf+0x18>

08003c3a <fminf>:
 8003c3a:	b508      	push	{r3, lr}
 8003c3c:	ed2d 8b02 	vpush	{d8}
 8003c40:	eeb0 8a40 	vmov.f32	s16, s0
 8003c44:	eef0 8a60 	vmov.f32	s17, s1
 8003c48:	f000 f814 	bl	8003c74 <__fpclassifyf>
 8003c4c:	b930      	cbnz	r0, 8003c5c <fminf+0x22>
 8003c4e:	eeb0 8a68 	vmov.f32	s16, s17
 8003c52:	eeb0 0a48 	vmov.f32	s0, s16
 8003c56:	ecbd 8b02 	vpop	{d8}
 8003c5a:	bd08      	pop	{r3, pc}
 8003c5c:	eeb0 0a68 	vmov.f32	s0, s17
 8003c60:	f000 f808 	bl	8003c74 <__fpclassifyf>
 8003c64:	2800      	cmp	r0, #0
 8003c66:	d0f4      	beq.n	8003c52 <fminf+0x18>
 8003c68:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8003c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c70:	d5ed      	bpl.n	8003c4e <fminf+0x14>
 8003c72:	e7ee      	b.n	8003c52 <fminf+0x18>

08003c74 <__fpclassifyf>:
 8003c74:	ee10 3a10 	vmov	r3, s0
 8003c78:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8003c7c:	d00d      	beq.n	8003c9a <__fpclassifyf+0x26>
 8003c7e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8003c82:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8003c86:	d30a      	bcc.n	8003c9e <__fpclassifyf+0x2a>
 8003c88:	4b07      	ldr	r3, [pc, #28]	@ (8003ca8 <__fpclassifyf+0x34>)
 8003c8a:	1e42      	subs	r2, r0, #1
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d908      	bls.n	8003ca2 <__fpclassifyf+0x2e>
 8003c90:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8003c94:	4258      	negs	r0, r3
 8003c96:	4158      	adcs	r0, r3
 8003c98:	4770      	bx	lr
 8003c9a:	2002      	movs	r0, #2
 8003c9c:	4770      	bx	lr
 8003c9e:	2004      	movs	r0, #4
 8003ca0:	4770      	bx	lr
 8003ca2:	2003      	movs	r0, #3
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	007ffffe 	.word	0x007ffffe

08003cac <__kernel_cosf>:
 8003cac:	ee10 3a10 	vmov	r3, s0
 8003cb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003cb4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8003cb8:	eef0 6a40 	vmov.f32	s13, s0
 8003cbc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003cc0:	d204      	bcs.n	8003ccc <__kernel_cosf+0x20>
 8003cc2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8003cc6:	ee17 2a90 	vmov	r2, s15
 8003cca:	b342      	cbz	r2, 8003d1e <__kernel_cosf+0x72>
 8003ccc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8003cd0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8003d3c <__kernel_cosf+0x90>
 8003cd4:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8003d40 <__kernel_cosf+0x94>
 8003cd8:	4a1a      	ldr	r2, [pc, #104]	@ (8003d44 <__kernel_cosf+0x98>)
 8003cda:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8003d48 <__kernel_cosf+0x9c>
 8003ce4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003ce8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8003d4c <__kernel_cosf+0xa0>
 8003cec:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003cf0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8003d50 <__kernel_cosf+0xa4>
 8003cf4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003cf8:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8003d54 <__kernel_cosf+0xa8>
 8003cfc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003d00:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8003d04:	ee26 6a07 	vmul.f32	s12, s12, s14
 8003d08:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8003d0c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8003d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d14:	d804      	bhi.n	8003d20 <__kernel_cosf+0x74>
 8003d16:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8003d1a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003d1e:	4770      	bx	lr
 8003d20:	4a0d      	ldr	r2, [pc, #52]	@ (8003d58 <__kernel_cosf+0xac>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	bf9a      	itte	ls
 8003d26:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8003d2a:	ee07 3a10 	vmovls	s14, r3
 8003d2e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8003d32:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003d36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d3a:	e7ec      	b.n	8003d16 <__kernel_cosf+0x6a>
 8003d3c:	ad47d74e 	.word	0xad47d74e
 8003d40:	310f74f6 	.word	0x310f74f6
 8003d44:	3e999999 	.word	0x3e999999
 8003d48:	b493f27c 	.word	0xb493f27c
 8003d4c:	37d00d01 	.word	0x37d00d01
 8003d50:	bab60b61 	.word	0xbab60b61
 8003d54:	3d2aaaab 	.word	0x3d2aaaab
 8003d58:	3f480000 	.word	0x3f480000

08003d5c <__kernel_sinf>:
 8003d5c:	ee10 3a10 	vmov	r3, s0
 8003d60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d64:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8003d68:	d204      	bcs.n	8003d74 <__kernel_sinf+0x18>
 8003d6a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003d6e:	ee17 3a90 	vmov	r3, s15
 8003d72:	b35b      	cbz	r3, 8003dcc <__kernel_sinf+0x70>
 8003d74:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003d78:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8003dd0 <__kernel_sinf+0x74>
 8003d7c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8003dd4 <__kernel_sinf+0x78>
 8003d80:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003d84:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8003dd8 <__kernel_sinf+0x7c>
 8003d88:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003d8c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8003ddc <__kernel_sinf+0x80>
 8003d90:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003d94:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8003de0 <__kernel_sinf+0x84>
 8003d98:	ee60 6a07 	vmul.f32	s13, s0, s14
 8003d9c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003da0:	b930      	cbnz	r0, 8003db0 <__kernel_sinf+0x54>
 8003da2:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8003de4 <__kernel_sinf+0x88>
 8003da6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003daa:	eea6 0a26 	vfma.f32	s0, s12, s13
 8003dae:	4770      	bx	lr
 8003db0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8003db4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8003db8:	eee0 7a86 	vfma.f32	s15, s1, s12
 8003dbc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8003dc0:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8003de8 <__kernel_sinf+0x8c>
 8003dc4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8003dc8:	ee30 0a60 	vsub.f32	s0, s0, s1
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	2f2ec9d3 	.word	0x2f2ec9d3
 8003dd4:	b2d72f34 	.word	0xb2d72f34
 8003dd8:	3638ef1b 	.word	0x3638ef1b
 8003ddc:	b9500d01 	.word	0xb9500d01
 8003de0:	3c088889 	.word	0x3c088889
 8003de4:	be2aaaab 	.word	0xbe2aaaab
 8003de8:	3e2aaaab 	.word	0x3e2aaaab

08003dec <__ieee754_rem_pio2f>:
 8003dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dee:	ee10 6a10 	vmov	r6, s0
 8003df2:	4b88      	ldr	r3, [pc, #544]	@ (8004014 <__ieee754_rem_pio2f+0x228>)
 8003df4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8003df8:	429d      	cmp	r5, r3
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	4604      	mov	r4, r0
 8003dfe:	d805      	bhi.n	8003e0c <__ieee754_rem_pio2f+0x20>
 8003e00:	2300      	movs	r3, #0
 8003e02:	ed80 0a00 	vstr	s0, [r0]
 8003e06:	6043      	str	r3, [r0, #4]
 8003e08:	2000      	movs	r0, #0
 8003e0a:	e022      	b.n	8003e52 <__ieee754_rem_pio2f+0x66>
 8003e0c:	4b82      	ldr	r3, [pc, #520]	@ (8004018 <__ieee754_rem_pio2f+0x22c>)
 8003e0e:	429d      	cmp	r5, r3
 8003e10:	d83a      	bhi.n	8003e88 <__ieee754_rem_pio2f+0x9c>
 8003e12:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8003e16:	2e00      	cmp	r6, #0
 8003e18:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800401c <__ieee754_rem_pio2f+0x230>
 8003e1c:	4a80      	ldr	r2, [pc, #512]	@ (8004020 <__ieee754_rem_pio2f+0x234>)
 8003e1e:	f023 030f 	bic.w	r3, r3, #15
 8003e22:	dd18      	ble.n	8003e56 <__ieee754_rem_pio2f+0x6a>
 8003e24:	4293      	cmp	r3, r2
 8003e26:	ee70 7a47 	vsub.f32	s15, s0, s14
 8003e2a:	bf09      	itett	eq
 8003e2c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8004024 <__ieee754_rem_pio2f+0x238>
 8003e30:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8004028 <__ieee754_rem_pio2f+0x23c>
 8003e34:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800402c <__ieee754_rem_pio2f+0x240>
 8003e38:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8003e3c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8003e40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e44:	ed80 7a00 	vstr	s14, [r0]
 8003e48:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003e4c:	edc0 7a01 	vstr	s15, [r0, #4]
 8003e50:	2001      	movs	r0, #1
 8003e52:	b007      	add	sp, #28
 8003e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e56:	4293      	cmp	r3, r2
 8003e58:	ee70 7a07 	vadd.f32	s15, s0, s14
 8003e5c:	bf09      	itett	eq
 8003e5e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8004024 <__ieee754_rem_pio2f+0x238>
 8003e62:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8004028 <__ieee754_rem_pio2f+0x23c>
 8003e66:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800402c <__ieee754_rem_pio2f+0x240>
 8003e6a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8003e6e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003e72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e76:	ed80 7a00 	vstr	s14, [r0]
 8003e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e7e:	edc0 7a01 	vstr	s15, [r0, #4]
 8003e82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e86:	e7e4      	b.n	8003e52 <__ieee754_rem_pio2f+0x66>
 8003e88:	4b69      	ldr	r3, [pc, #420]	@ (8004030 <__ieee754_rem_pio2f+0x244>)
 8003e8a:	429d      	cmp	r5, r3
 8003e8c:	d873      	bhi.n	8003f76 <__ieee754_rem_pio2f+0x18a>
 8003e8e:	f000 f8dd 	bl	800404c <fabsf>
 8003e92:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8004034 <__ieee754_rem_pio2f+0x248>
 8003e96:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8003e9a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003e9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ea2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ea6:	ee17 0a90 	vmov	r0, s15
 8003eaa:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800401c <__ieee754_rem_pio2f+0x230>
 8003eae:	eea7 0a67 	vfms.f32	s0, s14, s15
 8003eb2:	281f      	cmp	r0, #31
 8003eb4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8004028 <__ieee754_rem_pio2f+0x23c>
 8003eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ebc:	eeb1 6a47 	vneg.f32	s12, s14
 8003ec0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8003ec4:	ee16 1a90 	vmov	r1, s13
 8003ec8:	dc09      	bgt.n	8003ede <__ieee754_rem_pio2f+0xf2>
 8003eca:	4a5b      	ldr	r2, [pc, #364]	@ (8004038 <__ieee754_rem_pio2f+0x24c>)
 8003ecc:	1e47      	subs	r7, r0, #1
 8003ece:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8003ed2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8003ed6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d107      	bne.n	8003eee <__ieee754_rem_pio2f+0x102>
 8003ede:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8003ee2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8003ee6:	2a08      	cmp	r2, #8
 8003ee8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8003eec:	dc14      	bgt.n	8003f18 <__ieee754_rem_pio2f+0x12c>
 8003eee:	6021      	str	r1, [r4, #0]
 8003ef0:	ed94 7a00 	vldr	s14, [r4]
 8003ef4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003ef8:	2e00      	cmp	r6, #0
 8003efa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003efe:	ed84 0a01 	vstr	s0, [r4, #4]
 8003f02:	daa6      	bge.n	8003e52 <__ieee754_rem_pio2f+0x66>
 8003f04:	eeb1 7a47 	vneg.f32	s14, s14
 8003f08:	eeb1 0a40 	vneg.f32	s0, s0
 8003f0c:	ed84 7a00 	vstr	s14, [r4]
 8003f10:	ed84 0a01 	vstr	s0, [r4, #4]
 8003f14:	4240      	negs	r0, r0
 8003f16:	e79c      	b.n	8003e52 <__ieee754_rem_pio2f+0x66>
 8003f18:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8004024 <__ieee754_rem_pio2f+0x238>
 8003f1c:	eef0 6a40 	vmov.f32	s13, s0
 8003f20:	eee6 6a25 	vfma.f32	s13, s12, s11
 8003f24:	ee70 7a66 	vsub.f32	s15, s0, s13
 8003f28:	eee6 7a25 	vfma.f32	s15, s12, s11
 8003f2c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800402c <__ieee754_rem_pio2f+0x240>
 8003f30:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8003f34:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8003f38:	ee15 2a90 	vmov	r2, s11
 8003f3c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8003f40:	1a5b      	subs	r3, r3, r1
 8003f42:	2b19      	cmp	r3, #25
 8003f44:	dc04      	bgt.n	8003f50 <__ieee754_rem_pio2f+0x164>
 8003f46:	edc4 5a00 	vstr	s11, [r4]
 8003f4a:	eeb0 0a66 	vmov.f32	s0, s13
 8003f4e:	e7cf      	b.n	8003ef0 <__ieee754_rem_pio2f+0x104>
 8003f50:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800403c <__ieee754_rem_pio2f+0x250>
 8003f54:	eeb0 0a66 	vmov.f32	s0, s13
 8003f58:	eea6 0a25 	vfma.f32	s0, s12, s11
 8003f5c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8003f60:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8004040 <__ieee754_rem_pio2f+0x254>
 8003f64:	eee6 7a25 	vfma.f32	s15, s12, s11
 8003f68:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8003f6c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8003f70:	ed84 7a00 	vstr	s14, [r4]
 8003f74:	e7bc      	b.n	8003ef0 <__ieee754_rem_pio2f+0x104>
 8003f76:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8003f7a:	d306      	bcc.n	8003f8a <__ieee754_rem_pio2f+0x19e>
 8003f7c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8003f80:	edc0 7a01 	vstr	s15, [r0, #4]
 8003f84:	edc0 7a00 	vstr	s15, [r0]
 8003f88:	e73e      	b.n	8003e08 <__ieee754_rem_pio2f+0x1c>
 8003f8a:	15ea      	asrs	r2, r5, #23
 8003f8c:	3a86      	subs	r2, #134	@ 0x86
 8003f8e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8003f92:	ee07 3a90 	vmov	s15, r3
 8003f96:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003f9a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8004044 <__ieee754_rem_pio2f+0x258>
 8003f9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003fa2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003fa6:	ed8d 7a03 	vstr	s14, [sp, #12]
 8003faa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003fae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003fb2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003fb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003fba:	ed8d 7a04 	vstr	s14, [sp, #16]
 8003fbe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003fc2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fca:	edcd 7a05 	vstr	s15, [sp, #20]
 8003fce:	d11e      	bne.n	800400e <__ieee754_rem_pio2f+0x222>
 8003fd0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8003fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd8:	bf0c      	ite	eq
 8003fda:	2301      	moveq	r3, #1
 8003fdc:	2302      	movne	r3, #2
 8003fde:	491a      	ldr	r1, [pc, #104]	@ (8004048 <__ieee754_rem_pio2f+0x25c>)
 8003fe0:	9101      	str	r1, [sp, #4]
 8003fe2:	2102      	movs	r1, #2
 8003fe4:	9100      	str	r1, [sp, #0]
 8003fe6:	a803      	add	r0, sp, #12
 8003fe8:	4621      	mov	r1, r4
 8003fea:	f000 f837 	bl	800405c <__kernel_rem_pio2f>
 8003fee:	2e00      	cmp	r6, #0
 8003ff0:	f6bf af2f 	bge.w	8003e52 <__ieee754_rem_pio2f+0x66>
 8003ff4:	edd4 7a00 	vldr	s15, [r4]
 8003ff8:	eef1 7a67 	vneg.f32	s15, s15
 8003ffc:	edc4 7a00 	vstr	s15, [r4]
 8004000:	edd4 7a01 	vldr	s15, [r4, #4]
 8004004:	eef1 7a67 	vneg.f32	s15, s15
 8004008:	edc4 7a01 	vstr	s15, [r4, #4]
 800400c:	e782      	b.n	8003f14 <__ieee754_rem_pio2f+0x128>
 800400e:	2303      	movs	r3, #3
 8004010:	e7e5      	b.n	8003fde <__ieee754_rem_pio2f+0x1f2>
 8004012:	bf00      	nop
 8004014:	3f490fd8 	.word	0x3f490fd8
 8004018:	4016cbe3 	.word	0x4016cbe3
 800401c:	3fc90f80 	.word	0x3fc90f80
 8004020:	3fc90fd0 	.word	0x3fc90fd0
 8004024:	37354400 	.word	0x37354400
 8004028:	37354443 	.word	0x37354443
 800402c:	2e85a308 	.word	0x2e85a308
 8004030:	43490f80 	.word	0x43490f80
 8004034:	3f22f984 	.word	0x3f22f984
 8004038:	08004858 	.word	0x08004858
 800403c:	2e85a300 	.word	0x2e85a300
 8004040:	248d3132 	.word	0x248d3132
 8004044:	43800000 	.word	0x43800000
 8004048:	080048d8 	.word	0x080048d8

0800404c <fabsf>:
 800404c:	ee10 3a10 	vmov	r3, s0
 8004050:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004054:	ee00 3a10 	vmov	s0, r3
 8004058:	4770      	bx	lr
	...

0800405c <__kernel_rem_pio2f>:
 800405c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004060:	ed2d 8b04 	vpush	{d8-d9}
 8004064:	b0d9      	sub	sp, #356	@ 0x164
 8004066:	4690      	mov	r8, r2
 8004068:	9001      	str	r0, [sp, #4]
 800406a:	4ab6      	ldr	r2, [pc, #728]	@ (8004344 <__kernel_rem_pio2f+0x2e8>)
 800406c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800406e:	f118 0f04 	cmn.w	r8, #4
 8004072:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8004076:	460f      	mov	r7, r1
 8004078:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800407c:	db26      	blt.n	80040cc <__kernel_rem_pio2f+0x70>
 800407e:	f1b8 0203 	subs.w	r2, r8, #3
 8004082:	bf48      	it	mi
 8004084:	f108 0204 	addmi.w	r2, r8, #4
 8004088:	10d2      	asrs	r2, r2, #3
 800408a:	1c55      	adds	r5, r2, #1
 800408c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800408e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8004354 <__kernel_rem_pio2f+0x2f8>
 8004092:	00e8      	lsls	r0, r5, #3
 8004094:	eba2 060b 	sub.w	r6, r2, fp
 8004098:	9002      	str	r0, [sp, #8]
 800409a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800409e:	eb0a 0c0b 	add.w	ip, sl, fp
 80040a2:	ac1c      	add	r4, sp, #112	@ 0x70
 80040a4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80040a8:	2000      	movs	r0, #0
 80040aa:	4560      	cmp	r0, ip
 80040ac:	dd10      	ble.n	80040d0 <__kernel_rem_pio2f+0x74>
 80040ae:	a91c      	add	r1, sp, #112	@ 0x70
 80040b0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80040b4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80040b8:	2600      	movs	r6, #0
 80040ba:	4556      	cmp	r6, sl
 80040bc:	dc24      	bgt.n	8004108 <__kernel_rem_pio2f+0xac>
 80040be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80040c2:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8004354 <__kernel_rem_pio2f+0x2f8>
 80040c6:	4684      	mov	ip, r0
 80040c8:	2400      	movs	r4, #0
 80040ca:	e016      	b.n	80040fa <__kernel_rem_pio2f+0x9e>
 80040cc:	2200      	movs	r2, #0
 80040ce:	e7dc      	b.n	800408a <__kernel_rem_pio2f+0x2e>
 80040d0:	42c6      	cmn	r6, r0
 80040d2:	bf5d      	ittte	pl
 80040d4:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80040d8:	ee07 1a90 	vmovpl	s15, r1
 80040dc:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80040e0:	eef0 7a47 	vmovmi.f32	s15, s14
 80040e4:	ece4 7a01 	vstmia	r4!, {s15}
 80040e8:	3001      	adds	r0, #1
 80040ea:	e7de      	b.n	80040aa <__kernel_rem_pio2f+0x4e>
 80040ec:	ecfe 6a01 	vldmia	lr!, {s13}
 80040f0:	ed3c 7a01 	vldmdb	ip!, {s14}
 80040f4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80040f8:	3401      	adds	r4, #1
 80040fa:	455c      	cmp	r4, fp
 80040fc:	ddf6      	ble.n	80040ec <__kernel_rem_pio2f+0x90>
 80040fe:	ece9 7a01 	vstmia	r9!, {s15}
 8004102:	3601      	adds	r6, #1
 8004104:	3004      	adds	r0, #4
 8004106:	e7d8      	b.n	80040ba <__kernel_rem_pio2f+0x5e>
 8004108:	a908      	add	r1, sp, #32
 800410a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800410e:	9104      	str	r1, [sp, #16]
 8004110:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8004112:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8004350 <__kernel_rem_pio2f+0x2f4>
 8004116:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800434c <__kernel_rem_pio2f+0x2f0>
 800411a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800411e:	9203      	str	r2, [sp, #12]
 8004120:	4654      	mov	r4, sl
 8004122:	00a2      	lsls	r2, r4, #2
 8004124:	9205      	str	r2, [sp, #20]
 8004126:	aa58      	add	r2, sp, #352	@ 0x160
 8004128:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800412c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8004130:	a944      	add	r1, sp, #272	@ 0x110
 8004132:	aa08      	add	r2, sp, #32
 8004134:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8004138:	4694      	mov	ip, r2
 800413a:	4626      	mov	r6, r4
 800413c:	2e00      	cmp	r6, #0
 800413e:	dc4c      	bgt.n	80041da <__kernel_rem_pio2f+0x17e>
 8004140:	4628      	mov	r0, r5
 8004142:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004146:	f000 f9f1 	bl	800452c <scalbnf>
 800414a:	eeb0 8a40 	vmov.f32	s16, s0
 800414e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8004152:	ee28 0a00 	vmul.f32	s0, s16, s0
 8004156:	f000 fa4f 	bl	80045f8 <floorf>
 800415a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800415e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8004162:	2d00      	cmp	r5, #0
 8004164:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004168:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800416c:	ee17 9a90 	vmov	r9, s15
 8004170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004174:	ee38 8a67 	vsub.f32	s16, s16, s15
 8004178:	dd41      	ble.n	80041fe <__kernel_rem_pio2f+0x1a2>
 800417a:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800417e:	a908      	add	r1, sp, #32
 8004180:	f1c5 0e08 	rsb	lr, r5, #8
 8004184:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8004188:	fa46 f00e 	asr.w	r0, r6, lr
 800418c:	4481      	add	r9, r0
 800418e:	fa00 f00e 	lsl.w	r0, r0, lr
 8004192:	1a36      	subs	r6, r6, r0
 8004194:	f1c5 0007 	rsb	r0, r5, #7
 8004198:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800419c:	4106      	asrs	r6, r0
 800419e:	2e00      	cmp	r6, #0
 80041a0:	dd3c      	ble.n	800421c <__kernel_rem_pio2f+0x1c0>
 80041a2:	f04f 0e00 	mov.w	lr, #0
 80041a6:	f109 0901 	add.w	r9, r9, #1
 80041aa:	4670      	mov	r0, lr
 80041ac:	4574      	cmp	r4, lr
 80041ae:	dc68      	bgt.n	8004282 <__kernel_rem_pio2f+0x226>
 80041b0:	2d00      	cmp	r5, #0
 80041b2:	dd03      	ble.n	80041bc <__kernel_rem_pio2f+0x160>
 80041b4:	2d01      	cmp	r5, #1
 80041b6:	d074      	beq.n	80042a2 <__kernel_rem_pio2f+0x246>
 80041b8:	2d02      	cmp	r5, #2
 80041ba:	d07d      	beq.n	80042b8 <__kernel_rem_pio2f+0x25c>
 80041bc:	2e02      	cmp	r6, #2
 80041be:	d12d      	bne.n	800421c <__kernel_rem_pio2f+0x1c0>
 80041c0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80041c4:	ee30 8a48 	vsub.f32	s16, s0, s16
 80041c8:	b340      	cbz	r0, 800421c <__kernel_rem_pio2f+0x1c0>
 80041ca:	4628      	mov	r0, r5
 80041cc:	9306      	str	r3, [sp, #24]
 80041ce:	f000 f9ad 	bl	800452c <scalbnf>
 80041d2:	9b06      	ldr	r3, [sp, #24]
 80041d4:	ee38 8a40 	vsub.f32	s16, s16, s0
 80041d8:	e020      	b.n	800421c <__kernel_rem_pio2f+0x1c0>
 80041da:	ee60 7a28 	vmul.f32	s15, s0, s17
 80041de:	3e01      	subs	r6, #1
 80041e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041e8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80041ec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80041f0:	ecac 0a01 	vstmia	ip!, {s0}
 80041f4:	ed30 0a01 	vldmdb	r0!, {s0}
 80041f8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80041fc:	e79e      	b.n	800413c <__kernel_rem_pio2f+0xe0>
 80041fe:	d105      	bne.n	800420c <__kernel_rem_pio2f+0x1b0>
 8004200:	1e60      	subs	r0, r4, #1
 8004202:	a908      	add	r1, sp, #32
 8004204:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8004208:	11f6      	asrs	r6, r6, #7
 800420a:	e7c8      	b.n	800419e <__kernel_rem_pio2f+0x142>
 800420c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004210:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004218:	da31      	bge.n	800427e <__kernel_rem_pio2f+0x222>
 800421a:	2600      	movs	r6, #0
 800421c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004224:	f040 8098 	bne.w	8004358 <__kernel_rem_pio2f+0x2fc>
 8004228:	1e60      	subs	r0, r4, #1
 800422a:	2200      	movs	r2, #0
 800422c:	4550      	cmp	r0, sl
 800422e:	da4b      	bge.n	80042c8 <__kernel_rem_pio2f+0x26c>
 8004230:	2a00      	cmp	r2, #0
 8004232:	d065      	beq.n	8004300 <__kernel_rem_pio2f+0x2a4>
 8004234:	3c01      	subs	r4, #1
 8004236:	ab08      	add	r3, sp, #32
 8004238:	3d08      	subs	r5, #8
 800423a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f8      	beq.n	8004234 <__kernel_rem_pio2f+0x1d8>
 8004242:	4628      	mov	r0, r5
 8004244:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004248:	f000 f970 	bl	800452c <scalbnf>
 800424c:	1c63      	adds	r3, r4, #1
 800424e:	aa44      	add	r2, sp, #272	@ 0x110
 8004250:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8004350 <__kernel_rem_pio2f+0x2f4>
 8004254:	0099      	lsls	r1, r3, #2
 8004256:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800425a:	4623      	mov	r3, r4
 800425c:	2b00      	cmp	r3, #0
 800425e:	f280 80a9 	bge.w	80043b4 <__kernel_rem_pio2f+0x358>
 8004262:	4623      	mov	r3, r4
 8004264:	2b00      	cmp	r3, #0
 8004266:	f2c0 80c7 	blt.w	80043f8 <__kernel_rem_pio2f+0x39c>
 800426a:	aa44      	add	r2, sp, #272	@ 0x110
 800426c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8004270:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8004348 <__kernel_rem_pio2f+0x2ec>
 8004274:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8004354 <__kernel_rem_pio2f+0x2f8>
 8004278:	2000      	movs	r0, #0
 800427a:	1ae2      	subs	r2, r4, r3
 800427c:	e0b1      	b.n	80043e2 <__kernel_rem_pio2f+0x386>
 800427e:	2602      	movs	r6, #2
 8004280:	e78f      	b.n	80041a2 <__kernel_rem_pio2f+0x146>
 8004282:	f852 1b04 	ldr.w	r1, [r2], #4
 8004286:	b948      	cbnz	r0, 800429c <__kernel_rem_pio2f+0x240>
 8004288:	b121      	cbz	r1, 8004294 <__kernel_rem_pio2f+0x238>
 800428a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800428e:	f842 1c04 	str.w	r1, [r2, #-4]
 8004292:	2101      	movs	r1, #1
 8004294:	f10e 0e01 	add.w	lr, lr, #1
 8004298:	4608      	mov	r0, r1
 800429a:	e787      	b.n	80041ac <__kernel_rem_pio2f+0x150>
 800429c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80042a0:	e7f5      	b.n	800428e <__kernel_rem_pio2f+0x232>
 80042a2:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 80042a6:	aa08      	add	r2, sp, #32
 80042a8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80042ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80042b0:	a908      	add	r1, sp, #32
 80042b2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80042b6:	e781      	b.n	80041bc <__kernel_rem_pio2f+0x160>
 80042b8:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 80042bc:	aa08      	add	r2, sp, #32
 80042be:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80042c2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80042c6:	e7f3      	b.n	80042b0 <__kernel_rem_pio2f+0x254>
 80042c8:	a908      	add	r1, sp, #32
 80042ca:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80042ce:	3801      	subs	r0, #1
 80042d0:	430a      	orrs	r2, r1
 80042d2:	e7ab      	b.n	800422c <__kernel_rem_pio2f+0x1d0>
 80042d4:	3201      	adds	r2, #1
 80042d6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80042da:	2e00      	cmp	r6, #0
 80042dc:	d0fa      	beq.n	80042d4 <__kernel_rem_pio2f+0x278>
 80042de:	9905      	ldr	r1, [sp, #20]
 80042e0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80042e4:	eb0d 0001 	add.w	r0, sp, r1
 80042e8:	18e6      	adds	r6, r4, r3
 80042ea:	a91c      	add	r1, sp, #112	@ 0x70
 80042ec:	f104 0c01 	add.w	ip, r4, #1
 80042f0:	384c      	subs	r0, #76	@ 0x4c
 80042f2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80042f6:	4422      	add	r2, r4
 80042f8:	4562      	cmp	r2, ip
 80042fa:	da04      	bge.n	8004306 <__kernel_rem_pio2f+0x2aa>
 80042fc:	4614      	mov	r4, r2
 80042fe:	e710      	b.n	8004122 <__kernel_rem_pio2f+0xc6>
 8004300:	9804      	ldr	r0, [sp, #16]
 8004302:	2201      	movs	r2, #1
 8004304:	e7e7      	b.n	80042d6 <__kernel_rem_pio2f+0x27a>
 8004306:	9903      	ldr	r1, [sp, #12]
 8004308:	f8dd e004 	ldr.w	lr, [sp, #4]
 800430c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8004310:	9105      	str	r1, [sp, #20]
 8004312:	ee07 1a90 	vmov	s15, r1
 8004316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800431a:	2400      	movs	r4, #0
 800431c:	ece6 7a01 	vstmia	r6!, {s15}
 8004320:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8004354 <__kernel_rem_pio2f+0x2f8>
 8004324:	46b1      	mov	r9, r6
 8004326:	455c      	cmp	r4, fp
 8004328:	dd04      	ble.n	8004334 <__kernel_rem_pio2f+0x2d8>
 800432a:	ece0 7a01 	vstmia	r0!, {s15}
 800432e:	f10c 0c01 	add.w	ip, ip, #1
 8004332:	e7e1      	b.n	80042f8 <__kernel_rem_pio2f+0x29c>
 8004334:	ecfe 6a01 	vldmia	lr!, {s13}
 8004338:	ed39 7a01 	vldmdb	r9!, {s14}
 800433c:	3401      	adds	r4, #1
 800433e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004342:	e7f0      	b.n	8004326 <__kernel_rem_pio2f+0x2ca>
 8004344:	08004c1c 	.word	0x08004c1c
 8004348:	08004bf0 	.word	0x08004bf0
 800434c:	43800000 	.word	0x43800000
 8004350:	3b800000 	.word	0x3b800000
 8004354:	00000000 	.word	0x00000000
 8004358:	9b02      	ldr	r3, [sp, #8]
 800435a:	eeb0 0a48 	vmov.f32	s0, s16
 800435e:	eba3 0008 	sub.w	r0, r3, r8
 8004362:	f000 f8e3 	bl	800452c <scalbnf>
 8004366:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800434c <__kernel_rem_pio2f+0x2f0>
 800436a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800436e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004372:	db19      	blt.n	80043a8 <__kernel_rem_pio2f+0x34c>
 8004374:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8004350 <__kernel_rem_pio2f+0x2f4>
 8004378:	ee60 7a27 	vmul.f32	s15, s0, s15
 800437c:	aa08      	add	r2, sp, #32
 800437e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004382:	3508      	adds	r5, #8
 8004384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004388:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800438c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004390:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004394:	ee10 3a10 	vmov	r3, s0
 8004398:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800439c:	ee17 3a90 	vmov	r3, s15
 80043a0:	3401      	adds	r4, #1
 80043a2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80043a6:	e74c      	b.n	8004242 <__kernel_rem_pio2f+0x1e6>
 80043a8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80043ac:	aa08      	add	r2, sp, #32
 80043ae:	ee10 3a10 	vmov	r3, s0
 80043b2:	e7f6      	b.n	80043a2 <__kernel_rem_pio2f+0x346>
 80043b4:	a808      	add	r0, sp, #32
 80043b6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80043ba:	9001      	str	r0, [sp, #4]
 80043bc:	ee07 0a90 	vmov	s15, r0
 80043c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043c4:	3b01      	subs	r3, #1
 80043c6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80043ca:	ee20 0a07 	vmul.f32	s0, s0, s14
 80043ce:	ed62 7a01 	vstmdb	r2!, {s15}
 80043d2:	e743      	b.n	800425c <__kernel_rem_pio2f+0x200>
 80043d4:	ecfc 6a01 	vldmia	ip!, {s13}
 80043d8:	ecb5 7a01 	vldmia	r5!, {s14}
 80043dc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80043e0:	3001      	adds	r0, #1
 80043e2:	4550      	cmp	r0, sl
 80043e4:	dc01      	bgt.n	80043ea <__kernel_rem_pio2f+0x38e>
 80043e6:	4290      	cmp	r0, r2
 80043e8:	ddf4      	ble.n	80043d4 <__kernel_rem_pio2f+0x378>
 80043ea:	a858      	add	r0, sp, #352	@ 0x160
 80043ec:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80043f0:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80043f4:	3b01      	subs	r3, #1
 80043f6:	e735      	b.n	8004264 <__kernel_rem_pio2f+0x208>
 80043f8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	dc09      	bgt.n	8004412 <__kernel_rem_pio2f+0x3b6>
 80043fe:	2b00      	cmp	r3, #0
 8004400:	dc27      	bgt.n	8004452 <__kernel_rem_pio2f+0x3f6>
 8004402:	d040      	beq.n	8004486 <__kernel_rem_pio2f+0x42a>
 8004404:	f009 0007 	and.w	r0, r9, #7
 8004408:	b059      	add	sp, #356	@ 0x164
 800440a:	ecbd 8b04 	vpop	{d8-d9}
 800440e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004412:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8004414:	2b03      	cmp	r3, #3
 8004416:	d1f5      	bne.n	8004404 <__kernel_rem_pio2f+0x3a8>
 8004418:	aa30      	add	r2, sp, #192	@ 0xc0
 800441a:	1f0b      	subs	r3, r1, #4
 800441c:	4413      	add	r3, r2
 800441e:	461a      	mov	r2, r3
 8004420:	4620      	mov	r0, r4
 8004422:	2800      	cmp	r0, #0
 8004424:	dc50      	bgt.n	80044c8 <__kernel_rem_pio2f+0x46c>
 8004426:	4622      	mov	r2, r4
 8004428:	2a01      	cmp	r2, #1
 800442a:	dc5d      	bgt.n	80044e8 <__kernel_rem_pio2f+0x48c>
 800442c:	ab30      	add	r3, sp, #192	@ 0xc0
 800442e:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8004354 <__kernel_rem_pio2f+0x2f8>
 8004432:	440b      	add	r3, r1
 8004434:	2c01      	cmp	r4, #1
 8004436:	dc67      	bgt.n	8004508 <__kernel_rem_pio2f+0x4ac>
 8004438:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800443c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8004440:	2e00      	cmp	r6, #0
 8004442:	d167      	bne.n	8004514 <__kernel_rem_pio2f+0x4b8>
 8004444:	edc7 6a00 	vstr	s13, [r7]
 8004448:	ed87 7a01 	vstr	s14, [r7, #4]
 800444c:	edc7 7a02 	vstr	s15, [r7, #8]
 8004450:	e7d8      	b.n	8004404 <__kernel_rem_pio2f+0x3a8>
 8004452:	ab30      	add	r3, sp, #192	@ 0xc0
 8004454:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8004354 <__kernel_rem_pio2f+0x2f8>
 8004458:	440b      	add	r3, r1
 800445a:	4622      	mov	r2, r4
 800445c:	2a00      	cmp	r2, #0
 800445e:	da24      	bge.n	80044aa <__kernel_rem_pio2f+0x44e>
 8004460:	b34e      	cbz	r6, 80044b6 <__kernel_rem_pio2f+0x45a>
 8004462:	eef1 7a47 	vneg.f32	s15, s14
 8004466:	edc7 7a00 	vstr	s15, [r7]
 800446a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800446e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004472:	aa31      	add	r2, sp, #196	@ 0xc4
 8004474:	2301      	movs	r3, #1
 8004476:	429c      	cmp	r4, r3
 8004478:	da20      	bge.n	80044bc <__kernel_rem_pio2f+0x460>
 800447a:	b10e      	cbz	r6, 8004480 <__kernel_rem_pio2f+0x424>
 800447c:	eef1 7a67 	vneg.f32	s15, s15
 8004480:	edc7 7a01 	vstr	s15, [r7, #4]
 8004484:	e7be      	b.n	8004404 <__kernel_rem_pio2f+0x3a8>
 8004486:	ab30      	add	r3, sp, #192	@ 0xc0
 8004488:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8004354 <__kernel_rem_pio2f+0x2f8>
 800448c:	440b      	add	r3, r1
 800448e:	2c00      	cmp	r4, #0
 8004490:	da05      	bge.n	800449e <__kernel_rem_pio2f+0x442>
 8004492:	b10e      	cbz	r6, 8004498 <__kernel_rem_pio2f+0x43c>
 8004494:	eef1 7a67 	vneg.f32	s15, s15
 8004498:	edc7 7a00 	vstr	s15, [r7]
 800449c:	e7b2      	b.n	8004404 <__kernel_rem_pio2f+0x3a8>
 800449e:	ed33 7a01 	vldmdb	r3!, {s14}
 80044a2:	3c01      	subs	r4, #1
 80044a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044a8:	e7f1      	b.n	800448e <__kernel_rem_pio2f+0x432>
 80044aa:	ed73 7a01 	vldmdb	r3!, {s15}
 80044ae:	3a01      	subs	r2, #1
 80044b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044b4:	e7d2      	b.n	800445c <__kernel_rem_pio2f+0x400>
 80044b6:	eef0 7a47 	vmov.f32	s15, s14
 80044ba:	e7d4      	b.n	8004466 <__kernel_rem_pio2f+0x40a>
 80044bc:	ecb2 7a01 	vldmia	r2!, {s14}
 80044c0:	3301      	adds	r3, #1
 80044c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044c6:	e7d6      	b.n	8004476 <__kernel_rem_pio2f+0x41a>
 80044c8:	ed72 7a01 	vldmdb	r2!, {s15}
 80044cc:	edd2 6a01 	vldr	s13, [r2, #4]
 80044d0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80044d4:	3801      	subs	r0, #1
 80044d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044da:	ed82 7a00 	vstr	s14, [r2]
 80044de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044e2:	edc2 7a01 	vstr	s15, [r2, #4]
 80044e6:	e79c      	b.n	8004422 <__kernel_rem_pio2f+0x3c6>
 80044e8:	ed73 7a01 	vldmdb	r3!, {s15}
 80044ec:	edd3 6a01 	vldr	s13, [r3, #4]
 80044f0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80044f4:	3a01      	subs	r2, #1
 80044f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044fa:	ed83 7a00 	vstr	s14, [r3]
 80044fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004502:	edc3 7a01 	vstr	s15, [r3, #4]
 8004506:	e78f      	b.n	8004428 <__kernel_rem_pio2f+0x3cc>
 8004508:	ed33 7a01 	vldmdb	r3!, {s14}
 800450c:	3c01      	subs	r4, #1
 800450e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004512:	e78f      	b.n	8004434 <__kernel_rem_pio2f+0x3d8>
 8004514:	eef1 6a66 	vneg.f32	s13, s13
 8004518:	eeb1 7a47 	vneg.f32	s14, s14
 800451c:	edc7 6a00 	vstr	s13, [r7]
 8004520:	ed87 7a01 	vstr	s14, [r7, #4]
 8004524:	eef1 7a67 	vneg.f32	s15, s15
 8004528:	e790      	b.n	800444c <__kernel_rem_pio2f+0x3f0>
 800452a:	bf00      	nop

0800452c <scalbnf>:
 800452c:	ee10 3a10 	vmov	r3, s0
 8004530:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8004534:	d02b      	beq.n	800458e <scalbnf+0x62>
 8004536:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800453a:	d302      	bcc.n	8004542 <scalbnf+0x16>
 800453c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004540:	4770      	bx	lr
 8004542:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8004546:	d123      	bne.n	8004590 <scalbnf+0x64>
 8004548:	4b24      	ldr	r3, [pc, #144]	@ (80045dc <scalbnf+0xb0>)
 800454a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80045e0 <scalbnf+0xb4>
 800454e:	4298      	cmp	r0, r3
 8004550:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004554:	db17      	blt.n	8004586 <scalbnf+0x5a>
 8004556:	ee10 3a10 	vmov	r3, s0
 800455a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800455e:	3a19      	subs	r2, #25
 8004560:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8004564:	4288      	cmp	r0, r1
 8004566:	dd15      	ble.n	8004594 <scalbnf+0x68>
 8004568:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80045e4 <scalbnf+0xb8>
 800456c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80045e8 <scalbnf+0xbc>
 8004570:	ee10 3a10 	vmov	r3, s0
 8004574:	eeb0 7a67 	vmov.f32	s14, s15
 8004578:	2b00      	cmp	r3, #0
 800457a:	bfb8      	it	lt
 800457c:	eef0 7a66 	vmovlt.f32	s15, s13
 8004580:	ee27 0a87 	vmul.f32	s0, s15, s14
 8004584:	4770      	bx	lr
 8004586:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80045ec <scalbnf+0xc0>
 800458a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800458e:	4770      	bx	lr
 8004590:	0dd2      	lsrs	r2, r2, #23
 8004592:	e7e5      	b.n	8004560 <scalbnf+0x34>
 8004594:	4410      	add	r0, r2
 8004596:	28fe      	cmp	r0, #254	@ 0xfe
 8004598:	dce6      	bgt.n	8004568 <scalbnf+0x3c>
 800459a:	2800      	cmp	r0, #0
 800459c:	dd06      	ble.n	80045ac <scalbnf+0x80>
 800459e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80045a2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80045a6:	ee00 3a10 	vmov	s0, r3
 80045aa:	4770      	bx	lr
 80045ac:	f110 0f16 	cmn.w	r0, #22
 80045b0:	da09      	bge.n	80045c6 <scalbnf+0x9a>
 80045b2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80045ec <scalbnf+0xc0>
 80045b6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80045f0 <scalbnf+0xc4>
 80045ba:	ee10 3a10 	vmov	r3, s0
 80045be:	eeb0 7a67 	vmov.f32	s14, s15
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	e7d9      	b.n	800457a <scalbnf+0x4e>
 80045c6:	3019      	adds	r0, #25
 80045c8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80045cc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80045d0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80045f4 <scalbnf+0xc8>
 80045d4:	ee07 3a90 	vmov	s15, r3
 80045d8:	e7d7      	b.n	800458a <scalbnf+0x5e>
 80045da:	bf00      	nop
 80045dc:	ffff3cb0 	.word	0xffff3cb0
 80045e0:	4c000000 	.word	0x4c000000
 80045e4:	7149f2ca 	.word	0x7149f2ca
 80045e8:	f149f2ca 	.word	0xf149f2ca
 80045ec:	0da24260 	.word	0x0da24260
 80045f0:	8da24260 	.word	0x8da24260
 80045f4:	33000000 	.word	0x33000000

080045f8 <floorf>:
 80045f8:	ee10 3a10 	vmov	r3, s0
 80045fc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004600:	3a7f      	subs	r2, #127	@ 0x7f
 8004602:	2a16      	cmp	r2, #22
 8004604:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004608:	dc2b      	bgt.n	8004662 <floorf+0x6a>
 800460a:	2a00      	cmp	r2, #0
 800460c:	da12      	bge.n	8004634 <floorf+0x3c>
 800460e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8004674 <floorf+0x7c>
 8004612:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004616:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800461a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800461e:	dd06      	ble.n	800462e <floorf+0x36>
 8004620:	2b00      	cmp	r3, #0
 8004622:	da24      	bge.n	800466e <floorf+0x76>
 8004624:	2900      	cmp	r1, #0
 8004626:	4b14      	ldr	r3, [pc, #80]	@ (8004678 <floorf+0x80>)
 8004628:	bf08      	it	eq
 800462a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800462e:	ee00 3a10 	vmov	s0, r3
 8004632:	4770      	bx	lr
 8004634:	4911      	ldr	r1, [pc, #68]	@ (800467c <floorf+0x84>)
 8004636:	4111      	asrs	r1, r2
 8004638:	420b      	tst	r3, r1
 800463a:	d0fa      	beq.n	8004632 <floorf+0x3a>
 800463c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8004674 <floorf+0x7c>
 8004640:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004644:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800464c:	ddef      	ble.n	800462e <floorf+0x36>
 800464e:	2b00      	cmp	r3, #0
 8004650:	bfbe      	ittt	lt
 8004652:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8004656:	fa40 f202 	asrlt.w	r2, r0, r2
 800465a:	189b      	addlt	r3, r3, r2
 800465c:	ea23 0301 	bic.w	r3, r3, r1
 8004660:	e7e5      	b.n	800462e <floorf+0x36>
 8004662:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8004666:	d3e4      	bcc.n	8004632 <floorf+0x3a>
 8004668:	ee30 0a00 	vadd.f32	s0, s0, s0
 800466c:	4770      	bx	lr
 800466e:	2300      	movs	r3, #0
 8004670:	e7dd      	b.n	800462e <floorf+0x36>
 8004672:	bf00      	nop
 8004674:	7149f2ca 	.word	0x7149f2ca
 8004678:	bf800000 	.word	0xbf800000
 800467c:	007fffff 	.word	0x007fffff

08004680 <free>:
 8004680:	4b02      	ldr	r3, [pc, #8]	@ (800468c <free+0xc>)
 8004682:	4601      	mov	r1, r0
 8004684:	6818      	ldr	r0, [r3, #0]
 8004686:	f000 b83d 	b.w	8004704 <_free_r>
 800468a:	bf00      	nop
 800468c:	2000001c 	.word	0x2000001c

08004690 <__malloc_lock>:
 8004690:	4801      	ldr	r0, [pc, #4]	@ (8004698 <__malloc_lock+0x8>)
 8004692:	f000 b835 	b.w	8004700 <__retarget_lock_acquire_recursive>
 8004696:	bf00      	nop
 8004698:	20000274 	.word	0x20000274

0800469c <__malloc_unlock>:
 800469c:	4801      	ldr	r0, [pc, #4]	@ (80046a4 <__malloc_unlock+0x8>)
 800469e:	f000 b830 	b.w	8004702 <__retarget_lock_release_recursive>
 80046a2:	bf00      	nop
 80046a4:	20000274 	.word	0x20000274

080046a8 <memset>:
 80046a8:	4402      	add	r2, r0
 80046aa:	4603      	mov	r3, r0
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d100      	bne.n	80046b2 <memset+0xa>
 80046b0:	4770      	bx	lr
 80046b2:	f803 1b01 	strb.w	r1, [r3], #1
 80046b6:	e7f9      	b.n	80046ac <memset+0x4>

080046b8 <__libc_init_array>:
 80046b8:	b570      	push	{r4, r5, r6, lr}
 80046ba:	4d0d      	ldr	r5, [pc, #52]	@ (80046f0 <__libc_init_array+0x38>)
 80046bc:	4c0d      	ldr	r4, [pc, #52]	@ (80046f4 <__libc_init_array+0x3c>)
 80046be:	1b64      	subs	r4, r4, r5
 80046c0:	10a4      	asrs	r4, r4, #2
 80046c2:	2600      	movs	r6, #0
 80046c4:	42a6      	cmp	r6, r4
 80046c6:	d109      	bne.n	80046dc <__libc_init_array+0x24>
 80046c8:	4d0b      	ldr	r5, [pc, #44]	@ (80046f8 <__libc_init_array+0x40>)
 80046ca:	4c0c      	ldr	r4, [pc, #48]	@ (80046fc <__libc_init_array+0x44>)
 80046cc:	f000 f864 	bl	8004798 <_init>
 80046d0:	1b64      	subs	r4, r4, r5
 80046d2:	10a4      	asrs	r4, r4, #2
 80046d4:	2600      	movs	r6, #0
 80046d6:	42a6      	cmp	r6, r4
 80046d8:	d105      	bne.n	80046e6 <__libc_init_array+0x2e>
 80046da:	bd70      	pop	{r4, r5, r6, pc}
 80046dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80046e0:	4798      	blx	r3
 80046e2:	3601      	adds	r6, #1
 80046e4:	e7ee      	b.n	80046c4 <__libc_init_array+0xc>
 80046e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ea:	4798      	blx	r3
 80046ec:	3601      	adds	r6, #1
 80046ee:	e7f2      	b.n	80046d6 <__libc_init_array+0x1e>
 80046f0:	08004c28 	.word	0x08004c28
 80046f4:	08004c28 	.word	0x08004c28
 80046f8:	08004c28 	.word	0x08004c28
 80046fc:	08004c30 	.word	0x08004c30

08004700 <__retarget_lock_acquire_recursive>:
 8004700:	4770      	bx	lr

08004702 <__retarget_lock_release_recursive>:
 8004702:	4770      	bx	lr

08004704 <_free_r>:
 8004704:	b538      	push	{r3, r4, r5, lr}
 8004706:	4605      	mov	r5, r0
 8004708:	2900      	cmp	r1, #0
 800470a:	d041      	beq.n	8004790 <_free_r+0x8c>
 800470c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004710:	1f0c      	subs	r4, r1, #4
 8004712:	2b00      	cmp	r3, #0
 8004714:	bfb8      	it	lt
 8004716:	18e4      	addlt	r4, r4, r3
 8004718:	f7ff ffba 	bl	8004690 <__malloc_lock>
 800471c:	4a1d      	ldr	r2, [pc, #116]	@ (8004794 <_free_r+0x90>)
 800471e:	6813      	ldr	r3, [r2, #0]
 8004720:	b933      	cbnz	r3, 8004730 <_free_r+0x2c>
 8004722:	6063      	str	r3, [r4, #4]
 8004724:	6014      	str	r4, [r2, #0]
 8004726:	4628      	mov	r0, r5
 8004728:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800472c:	f7ff bfb6 	b.w	800469c <__malloc_unlock>
 8004730:	42a3      	cmp	r3, r4
 8004732:	d908      	bls.n	8004746 <_free_r+0x42>
 8004734:	6820      	ldr	r0, [r4, #0]
 8004736:	1821      	adds	r1, r4, r0
 8004738:	428b      	cmp	r3, r1
 800473a:	bf01      	itttt	eq
 800473c:	6819      	ldreq	r1, [r3, #0]
 800473e:	685b      	ldreq	r3, [r3, #4]
 8004740:	1809      	addeq	r1, r1, r0
 8004742:	6021      	streq	r1, [r4, #0]
 8004744:	e7ed      	b.n	8004722 <_free_r+0x1e>
 8004746:	461a      	mov	r2, r3
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	b10b      	cbz	r3, 8004750 <_free_r+0x4c>
 800474c:	42a3      	cmp	r3, r4
 800474e:	d9fa      	bls.n	8004746 <_free_r+0x42>
 8004750:	6811      	ldr	r1, [r2, #0]
 8004752:	1850      	adds	r0, r2, r1
 8004754:	42a0      	cmp	r0, r4
 8004756:	d10b      	bne.n	8004770 <_free_r+0x6c>
 8004758:	6820      	ldr	r0, [r4, #0]
 800475a:	4401      	add	r1, r0
 800475c:	1850      	adds	r0, r2, r1
 800475e:	4283      	cmp	r3, r0
 8004760:	6011      	str	r1, [r2, #0]
 8004762:	d1e0      	bne.n	8004726 <_free_r+0x22>
 8004764:	6818      	ldr	r0, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	6053      	str	r3, [r2, #4]
 800476a:	4408      	add	r0, r1
 800476c:	6010      	str	r0, [r2, #0]
 800476e:	e7da      	b.n	8004726 <_free_r+0x22>
 8004770:	d902      	bls.n	8004778 <_free_r+0x74>
 8004772:	230c      	movs	r3, #12
 8004774:	602b      	str	r3, [r5, #0]
 8004776:	e7d6      	b.n	8004726 <_free_r+0x22>
 8004778:	6820      	ldr	r0, [r4, #0]
 800477a:	1821      	adds	r1, r4, r0
 800477c:	428b      	cmp	r3, r1
 800477e:	bf04      	itt	eq
 8004780:	6819      	ldreq	r1, [r3, #0]
 8004782:	685b      	ldreq	r3, [r3, #4]
 8004784:	6063      	str	r3, [r4, #4]
 8004786:	bf04      	itt	eq
 8004788:	1809      	addeq	r1, r1, r0
 800478a:	6021      	streq	r1, [r4, #0]
 800478c:	6054      	str	r4, [r2, #4]
 800478e:	e7ca      	b.n	8004726 <_free_r+0x22>
 8004790:	bd38      	pop	{r3, r4, r5, pc}
 8004792:	bf00      	nop
 8004794:	20000138 	.word	0x20000138

08004798 <_init>:
 8004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479a:	bf00      	nop
 800479c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479e:	bc08      	pop	{r3}
 80047a0:	469e      	mov	lr, r3
 80047a2:	4770      	bx	lr

080047a4 <_fini>:
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a6:	bf00      	nop
 80047a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047aa:	bc08      	pop	{r3}
 80047ac:	469e      	mov	lr, r3
 80047ae:	4770      	bx	lr
