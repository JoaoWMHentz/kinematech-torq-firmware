
kinematech-torq-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abe8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  0800adc8  0800adc8  0000bdc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afb4  0800afb4  0000c1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800afb4  0800afb4  0000bfb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afbc  0800afbc  0000c1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afbc  0800afbc  0000bfbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800afc0  0800afc0  0000bfc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800afc4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001df0  200001e0  0800b1a4  0000c1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fd0  0800b1a4  0000cfd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018254  00000000  00000000  0000c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040e1  00000000  00000000  00024464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  00028548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fcc  00000000  00000000  00029a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006068  00000000  00000000  0002aa0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018bd5  00000000  00000000  00030a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da15f  00000000  00000000  00049649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001237a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e88  00000000  00000000  001237ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00129674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800adb0 	.word	0x0800adb0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800adb0 	.word	0x0800adb0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <MX_GPIO_Init>:
        * EXTI
     PA15   ------> I2C1_SCL
     PB7   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b08a      	sub	sp, #40	@ 0x28
 80002d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d6:	f107 0314 	add.w	r3, r7, #20
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
 80002e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e6:	4b35      	ldr	r3, [pc, #212]	@ (80003bc <MX_GPIO_Init+0xec>)
 80002e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ea:	4a34      	ldr	r2, [pc, #208]	@ (80003bc <MX_GPIO_Init+0xec>)
 80002ec:	f043 0304 	orr.w	r3, r3, #4
 80002f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002f2:	4b32      	ldr	r3, [pc, #200]	@ (80003bc <MX_GPIO_Init+0xec>)
 80002f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002f6:	f003 0304 	and.w	r3, r3, #4
 80002fa:	613b      	str	r3, [r7, #16]
 80002fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002fe:	4b2f      	ldr	r3, [pc, #188]	@ (80003bc <MX_GPIO_Init+0xec>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000302:	4a2e      	ldr	r2, [pc, #184]	@ (80003bc <MX_GPIO_Init+0xec>)
 8000304:	f043 0320 	orr.w	r3, r3, #32
 8000308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800030a:	4b2c      	ldr	r3, [pc, #176]	@ (80003bc <MX_GPIO_Init+0xec>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800030e:	f003 0320 	and.w	r3, r3, #32
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000316:	4b29      	ldr	r3, [pc, #164]	@ (80003bc <MX_GPIO_Init+0xec>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800031a:	4a28      	ldr	r2, [pc, #160]	@ (80003bc <MX_GPIO_Init+0xec>)
 800031c:	f043 0302 	orr.w	r3, r3, #2
 8000320:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000322:	4b26      	ldr	r3, [pc, #152]	@ (80003bc <MX_GPIO_Init+0xec>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000326:	f003 0302 	and.w	r3, r3, #2
 800032a:	60bb      	str	r3, [r7, #8]
 800032c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032e:	4b23      	ldr	r3, [pc, #140]	@ (80003bc <MX_GPIO_Init+0xec>)
 8000330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000332:	4a22      	ldr	r2, [pc, #136]	@ (80003bc <MX_GPIO_Init+0xec>)
 8000334:	f043 0301 	orr.w	r3, r3, #1
 8000338:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800033a:	4b20      	ldr	r3, [pc, #128]	@ (80003bc <MX_GPIO_Init+0xec>)
 800033c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800033e:	f003 0301 	and.w	r3, r3, #1
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_BLUE_Pin|LED_RED_Pin, GPIO_PIN_SET);
 8000346:	2201      	movs	r2, #1
 8000348:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 800034c:	481c      	ldr	r0, [pc, #112]	@ (80003c0 <MX_GPIO_Init+0xf0>)
 800034e:	f001 f9bf 	bl	80016d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_BLUE_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_RED_Pin;
 8000352:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000358:	2301      	movs	r3, #1
 800035a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800035c:	2301      	movs	r3, #1
 800035e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000360:	2300      	movs	r3, #0
 8000362:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000364:	f107 0314 	add.w	r3, r7, #20
 8000368:	4619      	mov	r1, r3
 800036a:	4815      	ldr	r0, [pc, #84]	@ (80003c0 <MX_GPIO_Init+0xf0>)
 800036c:	f001 f82e 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_SCL_Pin */
  GPIO_InitStruct.Pin = ENCODER_SCL_Pin;
 8000370:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000376:	2312      	movs	r3, #18
 8000378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037a:	2300      	movs	r3, #0
 800037c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037e:	2300      	movs	r3, #0
 8000380:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000382:	2304      	movs	r3, #4
 8000384:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ENCODER_SCL_GPIO_Port, &GPIO_InitStruct);
 8000386:	f107 0314 	add.w	r3, r7, #20
 800038a:	4619      	mov	r1, r3
 800038c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000390:	f001 f81c 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_SDA_Pin */
  GPIO_InitStruct.Pin = ENCODER_SDA_Pin;
 8000394:	2380      	movs	r3, #128	@ 0x80
 8000396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000398:	2312      	movs	r3, #18
 800039a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039c:	2300      	movs	r3, #0
 800039e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a0:	2300      	movs	r3, #0
 80003a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80003a4:	2304      	movs	r3, #4
 80003a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ENCODER_SDA_GPIO_Port, &GPIO_InitStruct);
 80003a8:	f107 0314 	add.w	r3, r7, #20
 80003ac:	4619      	mov	r1, r3
 80003ae:	4805      	ldr	r0, [pc, #20]	@ (80003c4 <MX_GPIO_Init+0xf4>)
 80003b0:	f001 f80c 	bl	80013cc <HAL_GPIO_Init>

}
 80003b4:	bf00      	nop
 80003b6:	3728      	adds	r7, #40	@ 0x28
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40021000 	.word	0x40021000
 80003c0:	48000800 	.word	0x48000800
 80003c4:	48000400 	.word	0x48000400

080003c8 <Hall_Init>:
    {0,  0,  0,  0,  0,  0,  0,  0}  // De 7 (inválido)
};

/* ========== PUBLIC FUNCTIONS ========== */

void Hall_Init(HallSensor_t* hall) {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
    hall->hall_state = 0;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2200      	movs	r2, #0
 80003d4:	701a      	strb	r2, [r3, #0]
    hall->last_hall_state = 0;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2200      	movs	r2, #0
 80003da:	751a      	strb	r2, [r3, #20]
    hall->electrical_rotations = 0;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2200      	movs	r2, #0
 80003e0:	619a      	str	r2, [r3, #24]
    hall->angle_electrical = 0.0f;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	f04f 0200 	mov.w	r2, #0
 80003e8:	61da      	str	r2, [r3, #28]
    hall->velocity_erpm = 0.0f;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	f04f 0200 	mov.w	r2, #0
 80003f0:	621a      	str	r2, [r3, #32]
    hall->direction = 0;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2200      	movs	r2, #0
 80003f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    hall->hall_capture = 0;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2200      	movs	r2, #0
 80003fe:	605a      	str	r2, [r3, #4]
    hall->last_capture = 0;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
    hall->new_capture_flag = 0;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	2200      	movs	r2, #0
 800040a:	731a      	strb	r2, [r3, #12]
    hall->isr_counter = 0;  // DEBUG: inicializar contador
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	2200      	movs	r2, #0
 8000410:	611a      	str	r2, [r3, #16]
    
    // Leitura inicial do estado Hall
    hall->hall_state = Hall_ReadState();
 8000412:	f000 f82f 	bl	8000474 <Hall_ReadState>
 8000416:	4603      	mov	r3, r0
 8000418:	461a      	mov	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	701a      	strb	r2, [r3, #0]
    hall->last_hall_state = hall->hall_state;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	b2da      	uxtb	r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	751a      	strb	r2, [r3, #20]
    
    // Setar ângulo inicial baseado no estado Hall atual
    if (hall->hall_state >= 1 && hall->hall_state <= 6) {
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	b2db      	uxtb	r3, r3
 800042e:	2b00      	cmp	r3, #0
 8000430:	d00d      	beq.n	800044e <Hall_Init+0x86>
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	b2db      	uxtb	r3, r3
 8000438:	2b06      	cmp	r3, #6
 800043a:	d808      	bhi.n	800044e <Hall_Init+0x86>
        hall->angle_electrical = HALL_ANGLE_TABLE[hall->hall_state];
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	b2db      	uxtb	r3, r3
 8000442:	4a0a      	ldr	r2, [pc, #40]	@ (800046c <Hall_Init+0xa4>)
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	4413      	add	r3, r2
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	61da      	str	r2, [r3, #28]
    }
    
    // Iniciar TIM8 em modo Hall Sensor com interrupção
    HAL_TIMEx_HallSensor_Start_IT(&htim8);
 800044e:	4808      	ldr	r0, [pc, #32]	@ (8000470 <Hall_Init+0xa8>)
 8000450:	f005 f952 	bl	80056f8 <HAL_TIMEx_HallSensor_Start_IT>
    
    // ===== FIX CRÍTICO: Habilitar interrupção TIM_IT_COM =====
    // A HAL habilita apenas TIM_IT_CC1, mas a callback HAL_TIMEx_CommutCallback()
    // só é chamada quando TIM_FLAG_COM está setada!
    // Precisamos habilitar TIM_IT_COM explicitamente:
    __HAL_TIM_ENABLE_IT(&htim8, TIM_IT_COM);
 8000454:	4b06      	ldr	r3, [pc, #24]	@ (8000470 <Hall_Init+0xa8>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	68da      	ldr	r2, [r3, #12]
 800045a:	4b05      	ldr	r3, [pc, #20]	@ (8000470 <Hall_Init+0xa8>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f042 0220 	orr.w	r2, r2, #32
 8000462:	60da      	str	r2, [r3, #12]
}
 8000464:	bf00      	nop
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	0800af08 	.word	0x0800af08
 8000470:	200002e0 	.word	0x200002e0

08000474 <Hall_ReadState>:

uint8_t Hall_ReadState(void) {
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
    uint8_t state = 0;
 800047a:	2300      	movs	r3, #0
 800047c:	71fb      	strb	r3, [r7, #7]
    
    // Ler os 3 pinos Hall (PB6, PB8, PB9)
    // IMPORTANTE: Como estão em modo AF (TIM8), ler direto do registrador IDR
    if (GPIOB->IDR & HALL_A_Pin) state |= 0x01; // Bit 0
 800047e:	4b12      	ldr	r3, [pc, #72]	@ (80004c8 <Hall_ReadState+0x54>)
 8000480:	691b      	ldr	r3, [r3, #16]
 8000482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000486:	2b00      	cmp	r3, #0
 8000488:	d003      	beq.n	8000492 <Hall_ReadState+0x1e>
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	f043 0301 	orr.w	r3, r3, #1
 8000490:	71fb      	strb	r3, [r7, #7]
    if (GPIOB->IDR & HALL_B_Pin) state |= 0x02; // Bit 1
 8000492:	4b0d      	ldr	r3, [pc, #52]	@ (80004c8 <Hall_ReadState+0x54>)
 8000494:	691b      	ldr	r3, [r3, #16]
 8000496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800049a:	2b00      	cmp	r3, #0
 800049c:	d003      	beq.n	80004a6 <Hall_ReadState+0x32>
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	f043 0302 	orr.w	r3, r3, #2
 80004a4:	71fb      	strb	r3, [r7, #7]
    if (GPIOB->IDR & HALL_C_Pin) state |= 0x04; // Bit 2
 80004a6:	4b08      	ldr	r3, [pc, #32]	@ (80004c8 <Hall_ReadState+0x54>)
 80004a8:	691b      	ldr	r3, [r3, #16]
 80004aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d003      	beq.n	80004ba <Hall_ReadState+0x46>
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	f043 0304 	orr.w	r3, r3, #4
 80004b8:	71fb      	strb	r3, [r7, #7]
    
    return state;
 80004ba:	79fb      	ldrb	r3, [r7, #7]
}
 80004bc:	4618      	mov	r0, r3
 80004be:	370c      	adds	r7, #12
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr
 80004c8:	48000400 	.word	0x48000400

080004cc <Hall_ProcessData>:

void Hall_ProcessData(HallSensor_t* hall) {
 80004cc:	b480      	push	{r7}
 80004ce:	b087      	sub	sp, #28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
    // Processar apenas se houver nova captura
    if (!hall->new_capture_flag) {
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	7b1b      	ldrb	r3, [r3, #12]
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	2b00      	cmp	r3, #0
 80004dc:	f000 808b 	beq.w	80005f6 <Hall_ProcessData+0x12a>
        return;
    }
    
    hall->new_capture_flag = 0; // Limpar flag
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2200      	movs	r2, #0
 80004e4:	731a      	strb	r2, [r3, #12]
    
    // Calcular velocidade baseado no delta de captures
    uint32_t delta_capture = hall->hall_capture - hall->last_capture;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	685a      	ldr	r2, [r3, #4]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	689b      	ldr	r3, [r3, #8]
 80004ee:	1ad3      	subs	r3, r2, r3
 80004f0:	617b      	str	r3, [r7, #20]
    
    if (delta_capture > 0 && delta_capture < 1000000) { // Timeout de 1 segundo (1MHz timer)
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d020      	beq.n	800053a <Hall_ProcessData+0x6e>
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	4a42      	ldr	r2, [pc, #264]	@ (8000604 <Hall_ProcessData+0x138>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d81c      	bhi.n	800053a <Hall_ProcessData+0x6e>
        // Timer roda a 1MHz (1μs por tick)
        // Cada transição Hall = 60° elétrico = 1/6 rotação elétrica
        float time_seconds = delta_capture / 1000000.0f;
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	ee07 3a90 	vmov	s15, r3
 8000506:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800050a:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8000608 <Hall_ProcessData+0x13c>
 800050e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000512:	edc7 7a04 	vstr	s15, [r7, #16]
        float electrical_rps = (1.0f / 6.0f) / time_seconds;
 8000516:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800060c <Hall_ProcessData+0x140>
 800051a:	ed97 7a04 	vldr	s14, [r7, #16]
 800051e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000522:	edc7 7a03 	vstr	s15, [r7, #12]
        hall->velocity_erpm = electrical_rps * 60.0f; // Converter para eRPM
 8000526:	edd7 7a03 	vldr	s15, [r7, #12]
 800052a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8000610 <Hall_ProcessData+0x144>
 800052e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	edc3 7a08 	vstr	s15, [r3, #32]
    if (delta_capture > 0 && delta_capture < 1000000) { // Timeout de 1 segundo (1MHz timer)
 8000538:	e003      	b.n	8000542 <Hall_ProcessData+0x76>
    } else {
        hall->velocity_erpm = 0.0f; // Timeout ou primeira leitura
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	f04f 0200 	mov.w	r2, #0
 8000540:	621a      	str	r2, [r3, #32]
    }
    
    // Verificar direção baseado na transição
    uint8_t new_state = hall->hall_state;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	72fb      	strb	r3, [r7, #11]
    
    if (new_state != hall->last_hall_state && new_state >= 1 && new_state <= 6) {
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	7d1b      	ldrb	r3, [r3, #20]
 800054c:	7afa      	ldrb	r2, [r7, #11]
 800054e:	429a      	cmp	r2, r3
 8000550:	d039      	beq.n	80005c6 <Hall_ProcessData+0xfa>
 8000552:	7afb      	ldrb	r3, [r7, #11]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d036      	beq.n	80005c6 <Hall_ProcessData+0xfa>
 8000558:	7afb      	ldrb	r3, [r7, #11]
 800055a:	2b06      	cmp	r3, #6
 800055c:	d833      	bhi.n	80005c6 <Hall_ProcessData+0xfa>
        int8_t transition = HALL_TRANSITION_TABLE[hall->last_hall_state][new_state];
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	7d1b      	ldrb	r3, [r3, #20]
 8000562:	461a      	mov	r2, r3
 8000564:	7afb      	ldrb	r3, [r7, #11]
 8000566:	492b      	ldr	r1, [pc, #172]	@ (8000614 <Hall_ProcessData+0x148>)
 8000568:	00d2      	lsls	r2, r2, #3
 800056a:	440a      	add	r2, r1
 800056c:	4413      	add	r3, r2
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	72bb      	strb	r3, [r7, #10]
        
        if (transition != 0) {
 8000572:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d022      	beq.n	80005c0 <Hall_ProcessData+0xf4>
            // Transição válida
            hall->direction = (transition > 0) ? 1 : 2;
 800057a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800057e:	2b00      	cmp	r3, #0
 8000580:	dd01      	ble.n	8000586 <Hall_ProcessData+0xba>
 8000582:	2201      	movs	r2, #1
 8000584:	e000      	b.n	8000588 <Hall_ProcessData+0xbc>
 8000586:	2202      	movs	r2, #2
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            // Atualizar contador de rotações
            if (hall->last_hall_state == 6 && new_state == 1) {
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	7d1b      	ldrb	r3, [r3, #20]
 8000592:	2b06      	cmp	r3, #6
 8000594:	d108      	bne.n	80005a8 <Hall_ProcessData+0xdc>
 8000596:	7afb      	ldrb	r3, [r7, #11]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d105      	bne.n	80005a8 <Hall_ProcessData+0xdc>
                hall->electrical_rotations++; // Completou rotação horária
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	1c5a      	adds	r2, r3, #1
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	619a      	str	r2, [r3, #24]
 80005a6:	e00b      	b.n	80005c0 <Hall_ProcessData+0xf4>
            } else if (hall->last_hall_state == 1 && new_state == 6) {
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	7d1b      	ldrb	r3, [r3, #20]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d107      	bne.n	80005c0 <Hall_ProcessData+0xf4>
 80005b0:	7afb      	ldrb	r3, [r7, #11]
 80005b2:	2b06      	cmp	r3, #6
 80005b4:	d104      	bne.n	80005c0 <Hall_ProcessData+0xf4>
                hall->electrical_rotations--; // Completou rotação anti-horária
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	1e5a      	subs	r2, r3, #1
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	619a      	str	r2, [r3, #24]
            }
        }
        
        hall->last_hall_state = new_state;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	7afa      	ldrb	r2, [r7, #11]
 80005c4:	751a      	strb	r2, [r3, #20]
    }
    
    // Atualizar ângulo baseado na tabela
    if (hall->hall_state >= 1 && hall->hall_state <= 6) {
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d00d      	beq.n	80005ec <Hall_ProcessData+0x120>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	2b06      	cmp	r3, #6
 80005d8:	d808      	bhi.n	80005ec <Hall_ProcessData+0x120>
        hall->angle_electrical = HALL_ANGLE_TABLE[hall->hall_state];
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000618 <Hall_ProcessData+0x14c>)
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	4413      	add	r3, r2
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	61da      	str	r2, [r3, #28]
    }
    
    hall->last_capture = hall->hall_capture;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	685a      	ldr	r2, [r3, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	e000      	b.n	80005f8 <Hall_ProcessData+0x12c>
        return;
 80005f6:	bf00      	nop
}
 80005f8:	371c      	adds	r7, #28
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	000f423f 	.word	0x000f423f
 8000608:	49742400 	.word	0x49742400
 800060c:	3e2aaaab 	.word	0x3e2aaaab
 8000610:	42700000 	.word	0x42700000
 8000614:	0800af28 	.word	0x0800af28
 8000618:	0800af08 	.word	0x0800af08

0800061c <Hall_TIM_CaptureCallback>:

void Hall_TIM_CaptureCallback(HallSensor_t* hall) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
    // ===== ISR ULTRA RÁPIDA (executada a cada transição Hall) =====
    // Objetivo: capturar dados e sair imediatamente (~1-2μs)
    
    // DEBUG: incrementar contador de ISR e piscar LED
    hall->isr_counter++;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	691b      	ldr	r3, [r3, #16]
 8000628:	1c5a      	adds	r2, r3, #1
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);  // DEBUG: LED pisca a cada transição
 800062e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000632:	480a      	ldr	r0, [pc, #40]	@ (800065c <Hall_TIM_CaptureCallback+0x40>)
 8000634:	f001 f864 	bl	8001700 <HAL_GPIO_TogglePin>
    
    // 1. Ler estado Hall atual
    hall->hall_state = Hall_ReadState();
 8000638:	f7ff ff1c 	bl	8000474 <Hall_ReadState>
 800063c:	4603      	mov	r3, r0
 800063e:	461a      	mov	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	701a      	strb	r2, [r3, #0]
    
    // 2. Capturar valor do contador do TIM8
    hall->hall_capture = __HAL_TIM_GET_COUNTER(&htim8);
 8000644:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <Hall_TIM_CaptureCallback+0x44>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	605a      	str	r2, [r3, #4]
    
    // 3. Setar flag para processar no main loop
    hall->new_capture_flag = 1;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2201      	movs	r2, #1
 8000652:	731a      	strb	r2, [r3, #12]
    
    // FIM da ISR! Processamento pesado vai no main loop
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	48000800 	.word	0x48000800
 8000660:	200002e0 	.word	0x200002e0

08000664 <Hall_GetAngle>:

float Hall_GetAngle(HallSensor_t* hall) {
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
    return hall->angle_electrical;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	69db      	ldr	r3, [r3, #28]
 8000670:	ee07 3a90 	vmov	s15, r3
}
 8000674:	eeb0 0a67 	vmov.f32	s0, s15
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <Hall_GetVelocity>:

float Hall_GetVelocity(HallSensor_t* hall) {
 8000682:	b480      	push	{r7}
 8000684:	b083      	sub	sp, #12
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
    return hall->velocity_erpm;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6a1b      	ldr	r3, [r3, #32]
 800068e:	ee07 3a90 	vmov	s15, r3
}
 8000692:	eeb0 0a67 	vmov.f32	s0, s15
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006a6:	f000 fd58 	bl	800115a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006aa:	f000 f87b 	bl	80007a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006ae:	f7ff fe0f 	bl	80002d0 <MX_GPIO_Init>
	MX_TIM1_Init();
 80006b2:	f000 faa1 	bl	8000bf8 <MX_TIM1_Init>
	MX_TIM8_Init();
 80006b6:	f000 fb6b 	bl	8000d90 <MX_TIM8_Init>
	MX_USB_Device_Init();
 80006ba:	f008 fd19 	bl	80090f0 <MX_USB_Device_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 80006be:	f000 f8bc 	bl	800083a <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */

	// Delay para estabilização USB
	HAL_Delay(500);
 80006c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006c6:	f000 fd7f 	bl	80011c8 <HAL_Delay>

	// Inicializar módulos
	USB_Comm_Init();
 80006ca:	f000 fcaf 	bl	800102c <USB_Comm_Init>
	Hall_Init(&hall_sensor);  // Já inicia o TIM8 Hall Interface
 80006ce:	482c      	ldr	r0, [pc, #176]	@ (8000780 <main+0xe0>)
 80006d0:	f7ff fe7a 	bl	80003c8 <Hall_Init>

	USB_Comm_Print("\r\n=== KINEMATECH TORQ ESC ===\r\n");
 80006d4:	482b      	ldr	r0, [pc, #172]	@ (8000784 <main+0xe4>)
 80006d6:	f000 fd05 	bl	80010e4 <USB_Comm_Print>
	USB_Comm_Print("Firmware v0.1 - Oct 2025\r\n");
 80006da:	482b      	ldr	r0, [pc, #172]	@ (8000788 <main+0xe8>)
 80006dc:	f000 fd02 	bl	80010e4 <USB_Comm_Print>
	USB_Comm_Print("Hall Interface (TIM8) - Hardware Accelerated\r\n");
 80006e0:	482a      	ldr	r0, [pc, #168]	@ (800078c <main+0xec>)
 80006e2:	f000 fcff 	bl	80010e4 <USB_Comm_Print>
	USB_Comm_Print("System ready! Rotate motor manually.\r\n\r\n");
 80006e6:	482a      	ldr	r0, [pc, #168]	@ (8000790 <main+0xf0>)
 80006e8:	f000 fcfc 	bl	80010e4 <USB_Comm_Print>

	// Diagnóstico do TIM8
	HAL_Delay(100);
 80006ec:	2064      	movs	r0, #100	@ 0x64
 80006ee:	f000 fd6b 	bl	80011c8 <HAL_Delay>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		static uint32_t last_led_toggle = 0;
		if (HAL_GetTick() - last_led_toggle >= 500) {
 80006f2:	f000 fd5d 	bl	80011b0 <HAL_GetTick>
 80006f6:	4602      	mov	r2, r0
 80006f8:	4b26      	ldr	r3, [pc, #152]	@ (8000794 <main+0xf4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000702:	d309      	bcc.n	8000718 <main+0x78>
			last_led_toggle = HAL_GetTick();
 8000704:	f000 fd54 	bl	80011b0 <HAL_GetTick>
 8000708:	4603      	mov	r3, r0
 800070a:	4a22      	ldr	r2, [pc, #136]	@ (8000794 <main+0xf4>)
 800070c:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 800070e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000712:	4821      	ldr	r0, [pc, #132]	@ (8000798 <main+0xf8>)
 8000714:	f000 fff4 	bl	8001700 <HAL_GPIO_TogglePin>
		}
		/* USER CODE BEGIN 3 */

		// ===== PROCESSAR DADOS DO HALL (main loop) =====
		Hall_ProcessData(&hall_sensor);
 8000718:	4819      	ldr	r0, [pc, #100]	@ (8000780 <main+0xe0>)
 800071a:	f7ff fed7 	bl	80004cc <Hall_ProcessData>

		// ===== TELEMETRIA VIA USB (100Hz) =====
		uint32_t current_time = HAL_GetTick();
 800071e:	f000 fd47 	bl	80011b0 <HAL_GetTick>
 8000722:	6078      	str	r0, [r7, #4]
		if (current_time - last_telemetry_ms >= (1000 / TELEMETRY_RATE_HZ)) {
 8000724:	4b1d      	ldr	r3, [pc, #116]	@ (800079c <main+0xfc>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	1ad3      	subs	r3, r2, r3
 800072c:	2b09      	cmp	r3, #9
 800072e:	d924      	bls.n	800077a <main+0xda>
			last_telemetry_ms = current_time;
 8000730:	4a1a      	ldr	r2, [pc, #104]	@ (800079c <main+0xfc>)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6013      	str	r3, [r2, #0]

			telemetry.hall_state = hall_sensor.hall_state;
 8000736:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <main+0xe0>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <main+0x100>)
 800073e:	701a      	strb	r2, [r3, #0]
			telemetry.hall_angle = Hall_GetAngle(&hall_sensor);
 8000740:	480f      	ldr	r0, [pc, #60]	@ (8000780 <main+0xe0>)
 8000742:	f7ff ff8f 	bl	8000664 <Hall_GetAngle>
 8000746:	eef0 7a40 	vmov.f32	s15, s0
 800074a:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <main+0x100>)
 800074c:	edc3 7a01 	vstr	s15, [r3, #4]
			telemetry.hall_velocity = Hall_GetVelocity(&hall_sensor);
 8000750:	480b      	ldr	r0, [pc, #44]	@ (8000780 <main+0xe0>)
 8000752:	f7ff ff96 	bl	8000682 <Hall_GetVelocity>
 8000756:	eef0 7a40 	vmov.f32	s15, s0
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <main+0x100>)
 800075c:	edc3 7a02 	vstr	s15, [r3, #8]
			telemetry.isr_counter = hall_sensor.isr_counter;  // DEBUG
 8000760:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <main+0xe0>)
 8000762:	691b      	ldr	r3, [r3, #16]
 8000764:	4a0e      	ldr	r2, [pc, #56]	@ (80007a0 <main+0x100>)
 8000766:	60d3      	str	r3, [r2, #12]
			telemetry.uptime_ms = current_time;
 8000768:	4a0d      	ldr	r2, [pc, #52]	@ (80007a0 <main+0x100>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6113      	str	r3, [r2, #16]
			telemetry.errors = 0;
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <main+0x100>)
 8000770:	2200      	movs	r2, #0
 8000772:	751a      	strb	r2, [r3, #20]
			//TIM8_PrintDiagnostics();
			USB_Comm_SendTelemetry(&telemetry);
 8000774:	480a      	ldr	r0, [pc, #40]	@ (80007a0 <main+0x100>)
 8000776:	f000 fc71 	bl	800105c <USB_Comm_SendTelemetry>
		}

		//USB_Comm_ProcessCommands();
		__WFI();
 800077a:	bf30      	wfi
	while (1) {
 800077c:	e7b9      	b.n	80006f2 <main+0x52>
 800077e:	bf00      	nop
 8000780:	200001fc 	.word	0x200001fc
 8000784:	0800adc8 	.word	0x0800adc8
 8000788:	0800ade8 	.word	0x0800ade8
 800078c:	0800ae04 	.word	0x0800ae04
 8000790:	0800ae34 	.word	0x0800ae34
 8000794:	20000240 	.word	0x20000240
 8000798:	48000800 	.word	0x48000800
 800079c:	2000023c 	.word	0x2000023c
 80007a0:	20000224 	.word	0x20000224

080007a4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b094      	sub	sp, #80	@ 0x50
 80007a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007aa:	f107 0318 	add.w	r3, r7, #24
 80007ae:	2238      	movs	r2, #56	@ 0x38
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f009 fafb 	bl	8009dae <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007c6:	2000      	movs	r0, #0
 80007c8:	f002 fcb6 	bl	8003138 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 80007cc:	2321      	movs	r3, #33	@ 0x21
 80007ce:	61bb      	str	r3, [r7, #24]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007d4:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007d6:	2301      	movs	r3, #1
 80007d8:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007da:	2302      	movs	r3, #2
 80007dc:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007de:	2303      	movs	r3, #3
 80007e0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80007e2:	2306      	movs	r3, #6
 80007e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80007e6:	2355      	movs	r3, #85	@ 0x55
 80007e8:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007f2:	2302      	movs	r3, #2
 80007f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007f6:	f107 0318 	add.w	r3, r7, #24
 80007fa:	4618      	mov	r0, r3
 80007fc:	f002 fd50 	bl	80032a0 <HAL_RCC_OscConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x66>
		Error_Handler();
 8000806:	f000 f848 	bl	800089a <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800080a:	230f      	movs	r3, #15
 800080c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080e:	2303      	movs	r3, #3
 8000810:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2104      	movs	r1, #4
 8000822:	4618      	mov	r0, r3
 8000824:	f003 f84e 	bl	80038c4 <HAL_RCC_ClockConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x8e>
		Error_Handler();
 800082e:	f000 f834 	bl	800089a <Error_Handler>
	}
}
 8000832:	bf00      	nop
 8000834:	3750      	adds	r7, #80	@ 0x50
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 800083a:	b580      	push	{r7, lr}
 800083c:	af00      	add	r7, sp, #0
	/* USB_LP_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	2014      	movs	r0, #20
 8000844:	f000 fd9a 	bl	800137c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8000848:	2014      	movs	r0, #20
 800084a:	f000 fdb1 	bl	80013b0 <HAL_NVIC_EnableIRQ>
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <HAL_TIMEx_CommutCallback>:

/**
 * @brief Callback de captura do TIM8 (Hall Interface)
 * @note Chamado automaticamente pelo HAL a cada transição Hall
 */
void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM8) {
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a04      	ldr	r2, [pc, #16]	@ (8000874 <HAL_TIMEx_CommutCallback+0x20>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d102      	bne.n	800086c <HAL_TIMEx_CommutCallback+0x18>
		// ISR ultra rápida: apenas capturar dados

		Hall_TIM_CaptureCallback(&hall_sensor);
 8000866:	4804      	ldr	r0, [pc, #16]	@ (8000878 <HAL_TIMEx_CommutCallback+0x24>)
 8000868:	f7ff fed8 	bl	800061c <Hall_TIM_CaptureCallback>
	}
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40013400 	.word	0x40013400
 8000878:	200001fc 	.word	0x200001fc

0800087c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM2) {
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800088c:	d101      	bne.n	8000892 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800088e:	f000 fc7d 	bl	800118c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089e:	b672      	cpsid	i
}
 80008a0:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008a2:	bf00      	nop
 80008a4:	e7fd      	b.n	80008a2 <Error_Handler+0x8>
	...

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <HAL_MspInit+0x44>)
 80008b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008b2:	4a0e      	ldr	r2, [pc, #56]	@ (80008ec <HAL_MspInit+0x44>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80008ba:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <HAL_MspInit+0x44>)
 80008bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <HAL_MspInit+0x44>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ca:	4a08      	ldr	r2, [pc, #32]	@ (80008ec <HAL_MspInit+0x44>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80008d2:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <HAL_MspInit+0x44>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008de:	f002 fccf 	bl	8003280 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000

080008f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	@ 0x30
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000900:	4b2d      	ldr	r3, [pc, #180]	@ (80009b8 <HAL_InitTick+0xc8>)
 8000902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000904:	4a2c      	ldr	r2, [pc, #176]	@ (80009b8 <HAL_InitTick+0xc8>)
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	6593      	str	r3, [r2, #88]	@ 0x58
 800090c:	4b2a      	ldr	r3, [pc, #168]	@ (80009b8 <HAL_InitTick+0xc8>)
 800090e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000918:	f107 020c 	add.w	r2, r7, #12
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	4611      	mov	r1, r2
 8000922:	4618      	mov	r0, r3
 8000924:	f003 f98e 	bl	8003c44 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000928:	f003 f976 	bl	8003c18 <HAL_RCC_GetPCLK1Freq>
 800092c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800092e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000930:	4a22      	ldr	r2, [pc, #136]	@ (80009bc <HAL_InitTick+0xcc>)
 8000932:	fba2 2303 	umull	r2, r3, r2, r3
 8000936:	0c9b      	lsrs	r3, r3, #18
 8000938:	3b01      	subs	r3, #1
 800093a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800093c:	4b20      	ldr	r3, [pc, #128]	@ (80009c0 <HAL_InitTick+0xd0>)
 800093e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000942:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000944:	4b1e      	ldr	r3, [pc, #120]	@ (80009c0 <HAL_InitTick+0xd0>)
 8000946:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800094a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800094c:	4a1c      	ldr	r2, [pc, #112]	@ (80009c0 <HAL_InitTick+0xd0>)
 800094e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000950:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000952:	4b1b      	ldr	r3, [pc, #108]	@ (80009c0 <HAL_InitTick+0xd0>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000958:	4b19      	ldr	r3, [pc, #100]	@ (80009c0 <HAL_InitTick+0xd0>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 800095e:	4818      	ldr	r0, [pc, #96]	@ (80009c0 <HAL_InitTick+0xd0>)
 8000960:	f003 fc36 	bl	80041d0 <HAL_TIM_Base_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800096a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800096e:	2b00      	cmp	r3, #0
 8000970:	d11b      	bne.n	80009aa <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000972:	4813      	ldr	r0, [pc, #76]	@ (80009c0 <HAL_InitTick+0xd0>)
 8000974:	f003 fc84 	bl	8004280 <HAL_TIM_Base_Start_IT>
 8000978:	4603      	mov	r3, r0
 800097a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800097e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000982:	2b00      	cmp	r3, #0
 8000984:	d111      	bne.n	80009aa <HAL_InitTick+0xba>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000986:	201c      	movs	r0, #28
 8000988:	f000 fd12 	bl	80013b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b0f      	cmp	r3, #15
 8000990:	d808      	bhi.n	80009a4 <HAL_InitTick+0xb4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000992:	2200      	movs	r2, #0
 8000994:	6879      	ldr	r1, [r7, #4]
 8000996:	201c      	movs	r0, #28
 8000998:	f000 fcf0 	bl	800137c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800099c:	4a09      	ldr	r2, [pc, #36]	@ (80009c4 <HAL_InitTick+0xd4>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6013      	str	r3, [r2, #0]
 80009a2:	e002      	b.n	80009aa <HAL_InitTick+0xba>
      }
      else
      {
        status = HAL_ERROR;
 80009a4:	2301      	movs	r3, #1
 80009a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3730      	adds	r7, #48	@ 0x30
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000
 80009bc:	431bde83 	.word	0x431bde83
 80009c0:	20000244 	.word	0x20000244
 80009c4:	20000004 	.word	0x20000004

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <NMI_Handler+0x4>

080009d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <MemManage_Handler+0x4>

080009e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <UsageFault_Handler+0x4>

080009f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a2c:	4802      	ldr	r0, [pc, #8]	@ (8000a38 <USB_HP_IRQHandler+0x10>)
 8000a2e:	f000 ff71 	bl	8001914 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20001988 	.word	0x20001988

08000a3c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a40:	4802      	ldr	r0, [pc, #8]	@ (8000a4c <USB_LP_IRQHandler+0x10>)
 8000a42:	f000 ff67 	bl	8001914 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20001988 	.word	0x20001988

08000a50 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a54:	4802      	ldr	r0, [pc, #8]	@ (8000a60 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a56:	f003 fcec 	bl	8004432 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000294 	.word	0x20000294

08000a64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a68:	4802      	ldr	r0, [pc, #8]	@ (8000a74 <TIM2_IRQHandler+0x10>)
 8000a6a:	f003 fce2 	bl	8004432 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000244 	.word	0x20000244

08000a78 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000a7c:	4802      	ldr	r0, [pc, #8]	@ (8000a88 <TIM8_CC_IRQHandler+0x10>)
 8000a7e:	f003 fcd8 	bl	8004432 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200002e0 	.word	0x200002e0

08000a8c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	e00a      	b.n	8000ab4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a9e:	f3af 8000 	nop.w
 8000aa2:	4601      	mov	r1, r0
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	1c5a      	adds	r2, r3, #1
 8000aa8:	60ba      	str	r2, [r7, #8]
 8000aaa:	b2ca      	uxtb	r2, r1
 8000aac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	697a      	ldr	r2, [r7, #20]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	dbf0      	blt.n	8000a9e <_read+0x12>
  }

  return len;
 8000abc:	687b      	ldr	r3, [r7, #4]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	60f8      	str	r0, [r7, #12]
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	e009      	b.n	8000aec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	1c5a      	adds	r2, r3, #1
 8000adc:	60ba      	str	r2, [r7, #8]
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	dbf1      	blt.n	8000ad8 <_write+0x12>
  }
  return len;
 8000af4:	687b      	ldr	r3, [r7, #4]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <_close>:

int _close(int file)
{
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b16:	b480      	push	{r7}
 8000b18:	b083      	sub	sp, #12
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
 8000b1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b26:	605a      	str	r2, [r3, #4]
  return 0;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <_isatty>:

int _isatty(int file)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b083      	sub	sp, #12
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
	...

08000b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b70:	4a14      	ldr	r2, [pc, #80]	@ (8000bc4 <_sbrk+0x5c>)
 8000b72:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <_sbrk+0x60>)
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b7c:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d102      	bne.n	8000b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b84:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <_sbrk+0x64>)
 8000b86:	4a12      	ldr	r2, [pc, #72]	@ (8000bd0 <_sbrk+0x68>)
 8000b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b8a:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <_sbrk+0x64>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d207      	bcs.n	8000ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b98:	f009 f958 	bl	8009e4c <__errno>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ba6:	e009      	b.n	8000bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <_sbrk+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bae:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	4a05      	ldr	r2, [pc, #20]	@ (8000bcc <_sbrk+0x64>)
 8000bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bba:	68fb      	ldr	r3, [r7, #12]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20020000 	.word	0x20020000
 8000bc8:	00000400 	.word	0x00000400
 8000bcc:	20000290 	.word	0x20000290
 8000bd0:	20001fd0 	.word	0x20001fd0

08000bd4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bd8:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <SystemInit+0x20>)
 8000bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bde:	4a05      	ldr	r2, [pc, #20]	@ (8000bf4 <SystemInit+0x20>)
 8000be0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000be4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b09c      	sub	sp, #112	@ 0x70
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bfe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c18:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
 8000c28:	615a      	str	r2, [r3, #20]
 8000c2a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	2234      	movs	r2, #52	@ 0x34
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f009 f8bb 	bl	8009dae <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c38:	4b53      	ldr	r3, [pc, #332]	@ (8000d88 <MX_TIM1_Init+0x190>)
 8000c3a:	4a54      	ldr	r2, [pc, #336]	@ (8000d8c <MX_TIM1_Init+0x194>)
 8000c3c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c3e:	4b52      	ldr	r3, [pc, #328]	@ (8000d88 <MX_TIM1_Init+0x190>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000c44:	4b50      	ldr	r3, [pc, #320]	@ (8000d88 <MX_TIM1_Init+0x190>)
 8000c46:	2220      	movs	r2, #32
 8000c48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4249;
 8000c4a:	4b4f      	ldr	r3, [pc, #316]	@ (8000d88 <MX_TIM1_Init+0x190>)
 8000c4c:	f241 0299 	movw	r2, #4249	@ 0x1099
 8000c50:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c52:	4b4d      	ldr	r3, [pc, #308]	@ (8000d88 <MX_TIM1_Init+0x190>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c58:	4b4b      	ldr	r3, [pc, #300]	@ (8000d88 <MX_TIM1_Init+0x190>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c5e:	4b4a      	ldr	r3, [pc, #296]	@ (8000d88 <MX_TIM1_Init+0x190>)
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c64:	4848      	ldr	r0, [pc, #288]	@ (8000d88 <MX_TIM1_Init+0x190>)
 8000c66:	f003 fab3 	bl	80041d0 <HAL_TIM_Base_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000c70:	f7ff fe13 	bl	800089a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c78:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c7a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4841      	ldr	r0, [pc, #260]	@ (8000d88 <MX_TIM1_Init+0x190>)
 8000c82:	f003 fe39 	bl	80048f8 <HAL_TIM_ConfigClockSource>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000c8c:	f7ff fe05 	bl	800089a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c90:	483d      	ldr	r0, [pc, #244]	@ (8000d88 <MX_TIM1_Init+0x190>)
 8000c92:	f003 fb6d 	bl	8004370 <HAL_TIM_PWM_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000c9c:	f7ff fdfd 	bl	800089a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4835      	ldr	r0, [pc, #212]	@ (8000d88 <MX_TIM1_Init+0x190>)
 8000cb4:	f004 fdbe 	bl	8005834 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000cbe:	f7ff fdec 	bl	800089a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cc2:	2360      	movs	r3, #96	@ 0x60
 8000cc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cde:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4828      	ldr	r0, [pc, #160]	@ (8000d88 <MX_TIM1_Init+0x190>)
 8000ce8:	f003 fcf2 	bl	80046d0 <HAL_TIM_PWM_ConfigChannel>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000cf2:	f7ff fdd2 	bl	800089a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cf6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cfa:	2204      	movs	r2, #4
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4822      	ldr	r0, [pc, #136]	@ (8000d88 <MX_TIM1_Init+0x190>)
 8000d00:	f003 fce6 	bl	80046d0 <HAL_TIM_PWM_ConfigChannel>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000d0a:	f7ff fdc6 	bl	800089a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d0e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d12:	2208      	movs	r2, #8
 8000d14:	4619      	mov	r1, r3
 8000d16:	481c      	ldr	r0, [pc, #112]	@ (8000d88 <MX_TIM1_Init+0x190>)
 8000d18:	f003 fcda 	bl	80046d0 <HAL_TIM_PWM_ConfigChannel>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000d22:	f7ff fdba 	bl	800089a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000d26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d2a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000d2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 5;
 8000d36:	2305      	movs	r3, #5
 8000d38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d54:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000d5e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d62:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	4619      	mov	r1, r3
 8000d68:	4807      	ldr	r0, [pc, #28]	@ (8000d88 <MX_TIM1_Init+0x190>)
 8000d6a:	f004 fdf9 	bl	8005960 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM1_Init+0x180>
  {
    Error_Handler();
 8000d74:	f7ff fd91 	bl	800089a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d78:	4803      	ldr	r0, [pc, #12]	@ (8000d88 <MX_TIM1_Init+0x190>)
 8000d7a:	f000 f8ef 	bl	8000f5c <HAL_TIM_MspPostInit>

}
 8000d7e:	bf00      	nop
 8000d80:	3770      	adds	r7, #112	@ 0x70
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000294 	.word	0x20000294
 8000d8c:	40012c00 	.word	0x40012c00

08000d90 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08c      	sub	sp, #48	@ 0x30
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d96:	f107 0320 	add.w	r3, r7, #32
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000dbc:	4b29      	ldr	r3, [pc, #164]	@ (8000e64 <MX_TIM8_Init+0xd4>)
 8000dbe:	4a2a      	ldr	r2, [pc, #168]	@ (8000e68 <MX_TIM8_Init+0xd8>)
 8000dc0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 8000dc2:	4b28      	ldr	r3, [pc, #160]	@ (8000e64 <MX_TIM8_Init+0xd4>)
 8000dc4:	22a9      	movs	r2, #169	@ 0xa9
 8000dc6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc8:	4b26      	ldr	r3, [pc, #152]	@ (8000e64 <MX_TIM8_Init+0xd4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000dce:	4b25      	ldr	r3, [pc, #148]	@ (8000e64 <MX_TIM8_Init+0xd4>)
 8000dd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dd4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd6:	4b23      	ldr	r3, [pc, #140]	@ (8000e64 <MX_TIM8_Init+0xd4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000ddc:	4b21      	ldr	r3, [pc, #132]	@ (8000e64 <MX_TIM8_Init+0xd4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de2:	4b20      	ldr	r3, [pc, #128]	@ (8000e64 <MX_TIM8_Init+0xd4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000de8:	481e      	ldr	r0, [pc, #120]	@ (8000e64 <MX_TIM8_Init+0xd4>)
 8000dea:	f003 f9f1 	bl	80041d0 <HAL_TIM_Base_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8000df4:	f7ff fd51 	bl	800089a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dfc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000dfe:	f107 0320 	add.w	r3, r7, #32
 8000e02:	4619      	mov	r1, r3
 8000e04:	4817      	ldr	r0, [pc, #92]	@ (8000e64 <MX_TIM8_Init+0xd4>)
 8000e06:	f003 fd77 	bl	80048f8 <HAL_TIM_ConfigClockSource>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000e10:	f7ff fd43 	bl	800089a <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim8, &sConfig) != HAL_OK)
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480e      	ldr	r0, [pc, #56]	@ (8000e64 <MX_TIM8_Init+0xd4>)
 8000e2c:	f004 fbab 	bl	8005586 <HAL_TIMEx_HallSensor_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8000e36:	f7ff fd30 	bl	800089a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000e3a:	2350      	movs	r3, #80	@ 0x50
 8000e3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4806      	ldr	r0, [pc, #24]	@ (8000e64 <MX_TIM8_Init+0xd4>)
 8000e4c:	f004 fcf2 	bl	8005834 <HAL_TIMEx_MasterConfigSynchronization>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000e56:	f7ff fd20 	bl	800089a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000e5a:	bf00      	nop
 8000e5c:	3730      	adds	r7, #48	@ 0x30
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200002e0 	.word	0x200002e0
 8000e68:	40013400 	.word	0x40013400

08000e6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	@ 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a30      	ldr	r2, [pc, #192]	@ (8000f4c <HAL_TIM_Base_MspInit+0xe0>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d114      	bne.n	8000eb8 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e8e:	4b30      	ldr	r3, [pc, #192]	@ (8000f50 <HAL_TIM_Base_MspInit+0xe4>)
 8000e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e92:	4a2f      	ldr	r2, [pc, #188]	@ (8000f50 <HAL_TIM_Base_MspInit+0xe4>)
 8000e94:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e98:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e9a:	4b2d      	ldr	r3, [pc, #180]	@ (8000f50 <HAL_TIM_Base_MspInit+0xe4>)
 8000e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2019      	movs	r0, #25
 8000eac:	f000 fa66 	bl	800137c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000eb0:	2019      	movs	r0, #25
 8000eb2:	f000 fa7d 	bl	80013b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000eb6:	e045      	b.n	8000f44 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM8)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a25      	ldr	r2, [pc, #148]	@ (8000f54 <HAL_TIM_Base_MspInit+0xe8>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d140      	bne.n	8000f44 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000ec2:	4b23      	ldr	r3, [pc, #140]	@ (8000f50 <HAL_TIM_Base_MspInit+0xe4>)
 8000ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ec6:	4a22      	ldr	r2, [pc, #136]	@ (8000f50 <HAL_TIM_Base_MspInit+0xe4>)
 8000ec8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ecc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ece:	4b20      	ldr	r3, [pc, #128]	@ (8000f50 <HAL_TIM_Base_MspInit+0xe4>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ed2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eda:	4b1d      	ldr	r3, [pc, #116]	@ (8000f50 <HAL_TIM_Base_MspInit+0xe4>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ede:	4a1c      	ldr	r2, [pc, #112]	@ (8000f50 <HAL_TIM_Base_MspInit+0xe4>)
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f50 <HAL_TIM_Base_MspInit+0xe4>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HALL_A_Pin;
 8000ef2:	2340      	movs	r3, #64	@ 0x40
 8000ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8000f02:	2305      	movs	r3, #5
 8000f04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(HALL_A_GPIO_Port, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4812      	ldr	r0, [pc, #72]	@ (8000f58 <HAL_TIM_Base_MspInit+0xec>)
 8000f0e:	f000 fa5d 	bl	80013cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HALL_B_Pin|HALL_C_Pin;
 8000f12:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8000f24:	230a      	movs	r3, #10
 8000f26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480a      	ldr	r0, [pc, #40]	@ (8000f58 <HAL_TIM_Base_MspInit+0xec>)
 8000f30:	f000 fa4c 	bl	80013cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 2, 0);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2102      	movs	r1, #2
 8000f38:	202e      	movs	r0, #46	@ 0x2e
 8000f3a:	f000 fa1f 	bl	800137c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8000f3e:	202e      	movs	r0, #46	@ 0x2e
 8000f40:	f000 fa36 	bl	80013b0 <HAL_NVIC_EnableIRQ>
}
 8000f44:	bf00      	nop
 8000f46:	3728      	adds	r7, #40	@ 0x28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40012c00 	.word	0x40012c00
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40013400 	.word	0x40013400
 8000f58:	48000400 	.word	0x48000400

08000f5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	@ 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a29      	ldr	r2, [pc, #164]	@ (8001020 <HAL_TIM_MspPostInit+0xc4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d14b      	bne.n	8001016 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	4b29      	ldr	r3, [pc, #164]	@ (8001024 <HAL_TIM_MspPostInit+0xc8>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f82:	4a28      	ldr	r2, [pc, #160]	@ (8001024 <HAL_TIM_MspPostInit+0xc8>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f8a:	4b26      	ldr	r3, [pc, #152]	@ (8001024 <HAL_TIM_MspPostInit+0xc8>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b23      	ldr	r3, [pc, #140]	@ (8001024 <HAL_TIM_MspPostInit+0xc8>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	4a22      	ldr	r2, [pc, #136]	@ (8001024 <HAL_TIM_MspPostInit+0xc8>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa2:	4b20      	ldr	r3, [pc, #128]	@ (8001024 <HAL_TIM_MspPostInit+0xc8>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PA_LIN_Pin|PB_LIN_Pin;
 8000fae:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000fc0:	2306      	movs	r3, #6
 8000fc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4817      	ldr	r0, [pc, #92]	@ (8001028 <HAL_TIM_MspPostInit+0xcc>)
 8000fcc:	f000 f9fe 	bl	80013cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PC_LIN_Pin;
 8000fd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PC_LIN_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	480e      	ldr	r0, [pc, #56]	@ (8001028 <HAL_TIM_MspPostInit+0xcc>)
 8000fee:	f000 f9ed 	bl	80013cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PA_HIN_Pin|PB_HIN_Pin|PC_HIN_Pin;
 8000ff2:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001004:	2306      	movs	r3, #6
 8001006:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	4619      	mov	r1, r3
 800100e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001012:	f000 f9db 	bl	80013cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001016:	bf00      	nop
 8001018:	3728      	adds	r7, #40	@ 0x28
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40012c00 	.word	0x40012c00
 8001024:	40021000 	.word	0x40021000
 8001028:	48000400 	.word	0x48000400

0800102c <USB_Comm_Init>:
static uint8_t usb_rx_buffer[128];
static uint8_t rx_index = 0;

/* ========== PUBLIC FUNCTIONS ========== */

void USB_Comm_Init(void) {
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
    rx_index = 0;
 8001030:	4b07      	ldr	r3, [pc, #28]	@ (8001050 <USB_Comm_Init+0x24>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
    memset(usb_tx_buffer, 0, sizeof(usb_tx_buffer));
 8001036:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800103a:	2100      	movs	r1, #0
 800103c:	4805      	ldr	r0, [pc, #20]	@ (8001054 <USB_Comm_Init+0x28>)
 800103e:	f008 feb6 	bl	8009dae <memset>
    memset(usb_rx_buffer, 0, sizeof(usb_rx_buffer));
 8001042:	2280      	movs	r2, #128	@ 0x80
 8001044:	2100      	movs	r1, #0
 8001046:	4804      	ldr	r0, [pc, #16]	@ (8001058 <USB_Comm_Init+0x2c>)
 8001048:	f008 feb1 	bl	8009dae <memset>
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200004ac 	.word	0x200004ac
 8001054:	2000032c 	.word	0x2000032c
 8001058:	2000042c 	.word	0x2000042c

0800105c <USB_Comm_SendTelemetry>:

void USB_Comm_SendTelemetry(Telemetry_t* telem) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af04      	add	r7, sp, #16
 8001062:	6078      	str	r0, [r7, #4]
    // Formato CSV simplificado - usando inteiros para evitar problema com float/printf
    // Ang e Vel multiplicados por 100 para manter 2 casas decimais
    int32_t ang_int = (int32_t)(telem->hall_angle * 100.0f);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	edd3 7a01 	vldr	s15, [r3, #4]
 800106a:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80010d8 <USB_Comm_SendTelemetry+0x7c>
 800106e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001072:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001076:	ee17 3a90 	vmov	r3, s15
 800107a:	60fb      	str	r3, [r7, #12]
    int32_t vel_int = (int32_t)(telem->hall_velocity * 10.0f);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001082:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001086:	ee67 7a87 	vmul.f32	s15, s15, s14
 800108a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800108e:	ee17 3a90 	vmov	r3, s15
 8001092:	60bb      	str	r3, [r7, #8]
    
    snprintf(usb_tx_buffer, sizeof(usb_tx_buffer),
             "H:%d,Ang:%ld,Vel:%ld,ISR:%lu,Time:%lu\r\n",
             telem->hall_state,
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	781b      	ldrb	r3, [r3, #0]
    snprintf(usb_tx_buffer, sizeof(usb_tx_buffer),
 8001098:	4619      	mov	r1, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	6912      	ldr	r2, [r2, #16]
 80010a2:	9203      	str	r2, [sp, #12]
 80010a4:	9302      	str	r3, [sp, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	460b      	mov	r3, r1
 80010b0:	4a0a      	ldr	r2, [pc, #40]	@ (80010dc <USB_Comm_SendTelemetry+0x80>)
 80010b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010b6:	480a      	ldr	r0, [pc, #40]	@ (80010e0 <USB_Comm_SendTelemetry+0x84>)
 80010b8:	f008 fe00 	bl	8009cbc <sniprintf>
             ang_int,      // Ângulo x100 (ex: 1.05 rad -> 105)
             vel_int,      // Velocidade x10 (ex: 123.4 eRPM -> 1234)
             telem->isr_counter,  // DEBUG: contador de ISR
             telem->uptime_ms);
    
    CDC_Transmit_FS((uint8_t*)usb_tx_buffer, strlen(usb_tx_buffer));
 80010bc:	4808      	ldr	r0, [pc, #32]	@ (80010e0 <USB_Comm_SendTelemetry+0x84>)
 80010be:	f7ff f8af 	bl	8000220 <strlen>
 80010c2:	4603      	mov	r3, r0
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <USB_Comm_SendTelemetry+0x84>)
 80010ca:	f008 f8cf 	bl	800926c <CDC_Transmit_FS>
}
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	42c80000 	.word	0x42c80000
 80010dc:	0800ae60 	.word	0x0800ae60
 80010e0:	2000032c 	.word	0x2000032c

080010e4 <USB_Comm_Print>:

void USB_Comm_Print(const char* str) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
    CDC_Transmit_FS((uint8_t*)str, strlen(str));
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff f897 	bl	8000220 <strlen>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	4619      	mov	r1, r3
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f008 f8b7 	bl	800926c <CDC_Transmit_FS>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001108:	480d      	ldr	r0, [pc, #52]	@ (8001140 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800110a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800110c:	f7ff fd62 	bl	8000bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001110:	480c      	ldr	r0, [pc, #48]	@ (8001144 <LoopForever+0x6>)
  ldr r1, =_edata
 8001112:	490d      	ldr	r1, [pc, #52]	@ (8001148 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001114:	4a0d      	ldr	r2, [pc, #52]	@ (800114c <LoopForever+0xe>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001118:	e002      	b.n	8001120 <LoopCopyDataInit>

0800111a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800111c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111e:	3304      	adds	r3, #4

08001120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001124:	d3f9      	bcc.n	800111a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001126:	4a0a      	ldr	r2, [pc, #40]	@ (8001150 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001128:	4c0a      	ldr	r4, [pc, #40]	@ (8001154 <LoopForever+0x16>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800112c:	e001      	b.n	8001132 <LoopFillZerobss>

0800112e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001130:	3204      	adds	r2, #4

08001132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001134:	d3fb      	bcc.n	800112e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001136:	f008 fe8f 	bl	8009e58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800113a:	f7ff fab1 	bl	80006a0 <main>

0800113e <LoopForever>:

LoopForever:
    b LoopForever
 800113e:	e7fe      	b.n	800113e <LoopForever>
  ldr   r0, =_estack
 8001140:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001148:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800114c:	0800afc4 	.word	0x0800afc4
  ldr r2, =_sbss
 8001150:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001154:	20001fd0 	.word	0x20001fd0

08001158 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC1_2_IRQHandler>

0800115a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001164:	2003      	movs	r0, #3
 8001166:	f000 f8fe 	bl	8001366 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800116a:	200f      	movs	r0, #15
 800116c:	f7ff fbc0 	bl	80008f0 <HAL_InitTick>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d002      	beq.n	800117c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	71fb      	strb	r3, [r7, #7]
 800117a:	e001      	b.n	8001180 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800117c:	f7ff fb94 	bl	80008a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001180:	79fb      	ldrb	r3, [r7, #7]

}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001190:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <HAL_IncTick+0x1c>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <HAL_IncTick+0x20>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4413      	add	r3, r2
 800119a:	4a03      	ldr	r2, [pc, #12]	@ (80011a8 <HAL_IncTick+0x1c>)
 800119c:	6013      	str	r3, [r2, #0]
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	200004b0 	.word	0x200004b0
 80011ac:	20000008 	.word	0x20000008

080011b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return uwTick;
 80011b4:	4b03      	ldr	r3, [pc, #12]	@ (80011c4 <HAL_GetTick+0x14>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	200004b0 	.word	0x200004b0

080011c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d0:	f7ff ffee 	bl	80011b0 <HAL_GetTick>
 80011d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011e0:	d004      	beq.n	80011ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e2:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <HAL_Delay+0x40>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	4413      	add	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ec:	bf00      	nop
 80011ee:	f7ff ffdf 	bl	80011b0 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d8f7      	bhi.n	80011ee <HAL_Delay+0x26>
  {
  }
}
 80011fe:	bf00      	nop
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000008 	.word	0x20000008

0800120c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800121c:	4b0c      	ldr	r3, [pc, #48]	@ (8001250 <__NVIC_SetPriorityGrouping+0x44>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001228:	4013      	ands	r3, r2
 800122a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001234:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001238:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800123c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800123e:	4a04      	ldr	r2, [pc, #16]	@ (8001250 <__NVIC_SetPriorityGrouping+0x44>)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	60d3      	str	r3, [r2, #12]
}
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001258:	4b04      	ldr	r3, [pc, #16]	@ (800126c <__NVIC_GetPriorityGrouping+0x18>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	0a1b      	lsrs	r3, r3, #8
 800125e:	f003 0307 	and.w	r3, r3, #7
}
 8001262:	4618      	mov	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	2b00      	cmp	r3, #0
 8001280:	db0b      	blt.n	800129a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	f003 021f 	and.w	r2, r3, #31
 8001288:	4907      	ldr	r1, [pc, #28]	@ (80012a8 <__NVIC_EnableIRQ+0x38>)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	095b      	lsrs	r3, r3, #5
 8001290:	2001      	movs	r0, #1
 8001292:	fa00 f202 	lsl.w	r2, r0, r2
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000e100 	.word	0xe000e100

080012ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	db0a      	blt.n	80012d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	490c      	ldr	r1, [pc, #48]	@ (80012f8 <__NVIC_SetPriority+0x4c>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	0112      	lsls	r2, r2, #4
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	440b      	add	r3, r1
 80012d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d4:	e00a      	b.n	80012ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4908      	ldr	r1, [pc, #32]	@ (80012fc <__NVIC_SetPriority+0x50>)
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	3b04      	subs	r3, #4
 80012e4:	0112      	lsls	r2, r2, #4
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	440b      	add	r3, r1
 80012ea:	761a      	strb	r2, [r3, #24]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000e100 	.word	0xe000e100
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001300:	b480      	push	{r7}
 8001302:	b089      	sub	sp, #36	@ 0x24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f1c3 0307 	rsb	r3, r3, #7
 800131a:	2b04      	cmp	r3, #4
 800131c:	bf28      	it	cs
 800131e:	2304      	movcs	r3, #4
 8001320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3304      	adds	r3, #4
 8001326:	2b06      	cmp	r3, #6
 8001328:	d902      	bls.n	8001330 <NVIC_EncodePriority+0x30>
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3b03      	subs	r3, #3
 800132e:	e000      	b.n	8001332 <NVIC_EncodePriority+0x32>
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43da      	mvns	r2, r3
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	401a      	ands	r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001348:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	fa01 f303 	lsl.w	r3, r1, r3
 8001352:	43d9      	mvns	r1, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	4313      	orrs	r3, r2
         );
}
 800135a:	4618      	mov	r0, r3
 800135c:	3724      	adds	r7, #36	@ 0x24
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ff4c 	bl	800120c <__NVIC_SetPriorityGrouping>
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
 8001388:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800138a:	f7ff ff63 	bl	8001254 <__NVIC_GetPriorityGrouping>
 800138e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	68b9      	ldr	r1, [r7, #8]
 8001394:	6978      	ldr	r0, [r7, #20]
 8001396:	f7ff ffb3 	bl	8001300 <NVIC_EncodePriority>
 800139a:	4602      	mov	r2, r0
 800139c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a0:	4611      	mov	r1, r2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff ff82 	bl	80012ac <__NVIC_SetPriority>
}
 80013a8:	bf00      	nop
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff56 	bl	8001270 <__NVIC_EnableIRQ>
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b087      	sub	sp, #28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013da:	e15a      	b.n	8001692 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	2101      	movs	r1, #1
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	fa01 f303 	lsl.w	r3, r1, r3
 80013e8:	4013      	ands	r3, r2
 80013ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 814c 	beq.w	800168c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d005      	beq.n	800140c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001408:	2b02      	cmp	r3, #2
 800140a:	d130      	bne.n	800146e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	2203      	movs	r2, #3
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4313      	orrs	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001442:	2201      	movs	r2, #1
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	091b      	lsrs	r3, r3, #4
 8001458:	f003 0201 	and.w	r2, r3, #1
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	2b03      	cmp	r3, #3
 8001478:	d017      	beq.n	80014aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	2203      	movs	r2, #3
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4013      	ands	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d123      	bne.n	80014fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	08da      	lsrs	r2, r3, #3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3208      	adds	r2, #8
 80014be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	220f      	movs	r2, #15
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	691a      	ldr	r2, [r3, #16]
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	08da      	lsrs	r2, r3, #3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3208      	adds	r2, #8
 80014f8:	6939      	ldr	r1, [r7, #16]
 80014fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	2203      	movs	r2, #3
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 0203 	and.w	r2, r3, #3
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 80a6 	beq.w	800168c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001540:	4b5b      	ldr	r3, [pc, #364]	@ (80016b0 <HAL_GPIO_Init+0x2e4>)
 8001542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001544:	4a5a      	ldr	r2, [pc, #360]	@ (80016b0 <HAL_GPIO_Init+0x2e4>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6613      	str	r3, [r2, #96]	@ 0x60
 800154c:	4b58      	ldr	r3, [pc, #352]	@ (80016b0 <HAL_GPIO_Init+0x2e4>)
 800154e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001558:	4a56      	ldr	r2, [pc, #344]	@ (80016b4 <HAL_GPIO_Init+0x2e8>)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	089b      	lsrs	r3, r3, #2
 800155e:	3302      	adds	r3, #2
 8001560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	220f      	movs	r2, #15
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001582:	d01f      	beq.n	80015c4 <HAL_GPIO_Init+0x1f8>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a4c      	ldr	r2, [pc, #304]	@ (80016b8 <HAL_GPIO_Init+0x2ec>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d019      	beq.n	80015c0 <HAL_GPIO_Init+0x1f4>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a4b      	ldr	r2, [pc, #300]	@ (80016bc <HAL_GPIO_Init+0x2f0>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d013      	beq.n	80015bc <HAL_GPIO_Init+0x1f0>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a4a      	ldr	r2, [pc, #296]	@ (80016c0 <HAL_GPIO_Init+0x2f4>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d00d      	beq.n	80015b8 <HAL_GPIO_Init+0x1ec>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a49      	ldr	r2, [pc, #292]	@ (80016c4 <HAL_GPIO_Init+0x2f8>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d007      	beq.n	80015b4 <HAL_GPIO_Init+0x1e8>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a48      	ldr	r2, [pc, #288]	@ (80016c8 <HAL_GPIO_Init+0x2fc>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d101      	bne.n	80015b0 <HAL_GPIO_Init+0x1e4>
 80015ac:	2305      	movs	r3, #5
 80015ae:	e00a      	b.n	80015c6 <HAL_GPIO_Init+0x1fa>
 80015b0:	2306      	movs	r3, #6
 80015b2:	e008      	b.n	80015c6 <HAL_GPIO_Init+0x1fa>
 80015b4:	2304      	movs	r3, #4
 80015b6:	e006      	b.n	80015c6 <HAL_GPIO_Init+0x1fa>
 80015b8:	2303      	movs	r3, #3
 80015ba:	e004      	b.n	80015c6 <HAL_GPIO_Init+0x1fa>
 80015bc:	2302      	movs	r3, #2
 80015be:	e002      	b.n	80015c6 <HAL_GPIO_Init+0x1fa>
 80015c0:	2301      	movs	r3, #1
 80015c2:	e000      	b.n	80015c6 <HAL_GPIO_Init+0x1fa>
 80015c4:	2300      	movs	r3, #0
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	f002 0203 	and.w	r2, r2, #3
 80015cc:	0092      	lsls	r2, r2, #2
 80015ce:	4093      	lsls	r3, r2
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d6:	4937      	ldr	r1, [pc, #220]	@ (80016b4 <HAL_GPIO_Init+0x2e8>)
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	089b      	lsrs	r3, r3, #2
 80015dc:	3302      	adds	r3, #2
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015e4:	4b39      	ldr	r3, [pc, #228]	@ (80016cc <HAL_GPIO_Init+0x300>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001608:	4a30      	ldr	r2, [pc, #192]	@ (80016cc <HAL_GPIO_Init+0x300>)
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800160e:	4b2f      	ldr	r3, [pc, #188]	@ (80016cc <HAL_GPIO_Init+0x300>)
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	43db      	mvns	r3, r3
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4313      	orrs	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001632:	4a26      	ldr	r2, [pc, #152]	@ (80016cc <HAL_GPIO_Init+0x300>)
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001638:	4b24      	ldr	r3, [pc, #144]	@ (80016cc <HAL_GPIO_Init+0x300>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	43db      	mvns	r3, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800165c:	4a1b      	ldr	r2, [pc, #108]	@ (80016cc <HAL_GPIO_Init+0x300>)
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001662:	4b1a      	ldr	r3, [pc, #104]	@ (80016cc <HAL_GPIO_Init+0x300>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	43db      	mvns	r3, r3
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4013      	ands	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4313      	orrs	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001686:	4a11      	ldr	r2, [pc, #68]	@ (80016cc <HAL_GPIO_Init+0x300>)
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	3301      	adds	r3, #1
 8001690:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	fa22 f303 	lsr.w	r3, r2, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	f47f ae9d 	bne.w	80013dc <HAL_GPIO_Init+0x10>
  }
}
 80016a2:	bf00      	nop
 80016a4:	bf00      	nop
 80016a6:	371c      	adds	r7, #28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40010000 	.word	0x40010000
 80016b8:	48000400 	.word	0x48000400
 80016bc:	48000800 	.word	0x48000800
 80016c0:	48000c00 	.word	0x48000c00
 80016c4:	48001000 	.word	0x48001000
 80016c8:	48001400 	.word	0x48001400
 80016cc:	40010400 	.word	0x40010400

080016d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	807b      	strh	r3, [r7, #2]
 80016dc:	4613      	mov	r3, r2
 80016de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016e0:	787b      	ldrb	r3, [r7, #1]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016e6:	887a      	ldrh	r2, [r7, #2]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016ec:	e002      	b.n	80016f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016ee:	887a      	ldrh	r2, [r7, #2]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001712:	887a      	ldrh	r2, [r7, #2]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4013      	ands	r3, r2
 8001718:	041a      	lsls	r2, r3, #16
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	43d9      	mvns	r1, r3
 800171e:	887b      	ldrh	r3, [r7, #2]
 8001720:	400b      	ands	r3, r1
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	619a      	str	r2, [r3, #24]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e0c0      	b.n	80018c8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d106      	bne.n	8001760 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f007 fece 	bl	80094fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2203      	movs	r2, #3
 8001764:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f004 f9de 	bl	8005b2e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001772:	2300      	movs	r3, #0
 8001774:	73fb      	strb	r3, [r7, #15]
 8001776:	e03e      	b.n	80017f6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001778:	7bfa      	ldrb	r2, [r7, #15]
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	440b      	add	r3, r1
 8001786:	3311      	adds	r3, #17
 8001788:	2201      	movs	r2, #1
 800178a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800178c:	7bfa      	ldrb	r2, [r7, #15]
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	440b      	add	r3, r1
 800179a:	3310      	adds	r3, #16
 800179c:	7bfa      	ldrb	r2, [r7, #15]
 800179e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017a0:	7bfa      	ldrb	r2, [r7, #15]
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	440b      	add	r3, r1
 80017ae:	3313      	adds	r3, #19
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017b4:	7bfa      	ldrb	r2, [r7, #15]
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	440b      	add	r3, r1
 80017c2:	3320      	adds	r3, #32
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017c8:	7bfa      	ldrb	r2, [r7, #15]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	440b      	add	r3, r1
 80017d6:	3324      	adds	r3, #36	@ 0x24
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	440b      	add	r3, r1
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	3301      	adds	r3, #1
 80017f4:	73fb      	strb	r3, [r7, #15]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	791b      	ldrb	r3, [r3, #4]
 80017fa:	7bfa      	ldrb	r2, [r7, #15]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d3bb      	bcc.n	8001778 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001800:	2300      	movs	r3, #0
 8001802:	73fb      	strb	r3, [r7, #15]
 8001804:	e044      	b.n	8001890 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001806:	7bfa      	ldrb	r2, [r7, #15]
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	440b      	add	r3, r1
 8001814:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800181c:	7bfa      	ldrb	r2, [r7, #15]
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	440b      	add	r3, r1
 800182a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800182e:	7bfa      	ldrb	r2, [r7, #15]
 8001830:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001832:	7bfa      	ldrb	r2, [r7, #15]
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	440b      	add	r3, r1
 8001840:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001848:	7bfa      	ldrb	r2, [r7, #15]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	440b      	add	r3, r1
 8001856:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800185e:	7bfa      	ldrb	r2, [r7, #15]
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	440b      	add	r3, r1
 800186c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001874:	7bfa      	ldrb	r2, [r7, #15]
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	440b      	add	r3, r1
 8001882:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	3301      	adds	r3, #1
 800188e:	73fb      	strb	r3, [r7, #15]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	791b      	ldrb	r3, [r3, #4]
 8001894:	7bfa      	ldrb	r2, [r7, #15]
 8001896:	429a      	cmp	r2, r3
 8001898:	d3b5      	bcc.n	8001806 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6818      	ldr	r0, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3304      	adds	r3, #4
 80018a2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80018a6:	f004 f95d 	bl	8005b64 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	7a9b      	ldrb	r3, [r3, #10]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d102      	bne.n	80018c6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f001 fc0e 	bl	80030e2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d101      	bne.n	80018e6 <HAL_PCD_Start+0x16>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e012      	b.n	800190c <HAL_PCD_Start+0x3c>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f004 f904 	bl	8005b00 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f005 fee1 	bl	80076c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f005 fee6 	bl	80076f2 <USB_ReadInterrupts>
 8001926:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 fb06 	bl	8001f44 <PCD_EP_ISR_Handler>

    return;
 8001938:	e110      	b.n	8001b5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001940:	2b00      	cmp	r3, #0
 8001942:	d013      	beq.n	800196c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800194c:	b29a      	uxth	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001956:	b292      	uxth	r2, r2
 8001958:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f007 fe5e 	bl	800961e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001962:	2100      	movs	r1, #0
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f8fc 	bl	8001b62 <HAL_PCD_SetAddress>

    return;
 800196a:	e0f7      	b.n	8001b5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00c      	beq.n	8001990 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800197e:	b29a      	uxth	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001988:	b292      	uxth	r2, r2
 800198a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800198e:	e0e5      	b.n	8001b5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00c      	beq.n	80019b4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80019ac:	b292      	uxth	r2, r2
 80019ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80019b2:	e0d3      	b.n	8001b5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d034      	beq.n	8001a28 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0204 	bic.w	r2, r2, #4
 80019d0:	b292      	uxth	r2, r2
 80019d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019de:	b29a      	uxth	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 0208 	bic.w	r2, r2, #8
 80019e8:	b292      	uxth	r2, r2
 80019ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d107      	bne.n	8001a08 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a00:	2100      	movs	r1, #0
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f007 fffe 	bl	8009a04 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f007 fe41 	bl	8009690 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a20:	b292      	uxth	r2, r2
 8001a22:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001a26:	e099      	b.n	8001b5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d027      	beq.n	8001a82 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f042 0208 	orr.w	r2, r2, #8
 8001a44:	b292      	uxth	r2, r2
 8001a46:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a5c:	b292      	uxth	r2, r2
 8001a5e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0204 	orr.w	r2, r2, #4
 8001a74:	b292      	uxth	r2, r2
 8001a76:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f007 fdee 	bl	800965c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001a80:	e06c      	b.n	8001b5c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d040      	beq.n	8001b0e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a9e:	b292      	uxth	r2, r2
 8001aa0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d12b      	bne.n	8001b06 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f042 0204 	orr.w	r2, r2, #4
 8001ac0:	b292      	uxth	r2, r2
 8001ac2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f042 0208 	orr.w	r2, r2, #8
 8001ad8:	b292      	uxth	r2, r2
 8001ada:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	089b      	lsrs	r3, r3, #2
 8001af2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001afc:	2101      	movs	r1, #1
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f007 ff80 	bl	8009a04 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001b04:	e02a      	b.n	8001b5c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f007 fda8 	bl	800965c <HAL_PCD_SuspendCallback>
    return;
 8001b0c:	e026      	b.n	8001b5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00f      	beq.n	8001b38 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b2a:	b292      	uxth	r2, r2
 8001b2c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f007 fd66 	bl	8009602 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b36:	e011      	b.n	8001b5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00c      	beq.n	8001b5c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b54:	b292      	uxth	r2, r2
 8001b56:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001b5a:	bf00      	nop
  }
}
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <HAL_PCD_SetAddress+0x1a>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e012      	b.n	8001ba2 <HAL_PCD_SetAddress+0x40>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	78fa      	ldrb	r2, [r7, #3]
 8001b88:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	78fa      	ldrb	r2, [r7, #3]
 8001b90:	4611      	mov	r1, r2
 8001b92:	4618      	mov	r0, r3
 8001b94:	f005 fd82 	bl	800769c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b084      	sub	sp, #16
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	4608      	mov	r0, r1
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4603      	mov	r3, r0
 8001bba:	70fb      	strb	r3, [r7, #3]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	803b      	strh	r3, [r7, #0]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	da0e      	bge.n	8001bee <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	f003 0207 	and.w	r2, r3, #7
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	3310      	adds	r3, #16
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2201      	movs	r2, #1
 8001bea:	705a      	strb	r2, [r3, #1]
 8001bec:	e00e      	b.n	8001c0c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	f003 0207 	and.w	r2, r3, #7
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	4413      	add	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c0c:	78fb      	ldrb	r3, [r7, #3]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001c18:	883b      	ldrh	r3, [r7, #0]
 8001c1a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	78ba      	ldrb	r2, [r7, #2]
 8001c26:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c28:	78bb      	ldrb	r3, [r7, #2]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d102      	bne.n	8001c34 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_PCD_EP_Open+0x98>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e00e      	b.n	8001c60 <HAL_PCD_EP_Open+0xb6>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68f9      	ldr	r1, [r7, #12]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f003 ffa5 	bl	8005ba0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001c5e:	7afb      	ldrb	r3, [r7, #11]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	da0e      	bge.n	8001c9a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	f003 0207 	and.w	r2, r3, #7
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	3310      	adds	r3, #16
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	4413      	add	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2201      	movs	r2, #1
 8001c96:	705a      	strb	r2, [r3, #1]
 8001c98:	e00e      	b.n	8001cb8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	f003 0207 	and.w	r2, r3, #7
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	4413      	add	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_PCD_EP_Close+0x6a>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e00e      	b.n	8001cf0 <HAL_PCD_EP_Close+0x88>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68f9      	ldr	r1, [r7, #12]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f004 fc45 	bl	8006570 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	460b      	mov	r3, r1
 8001d06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d08:	7afb      	ldrb	r3, [r7, #11]
 8001d0a:	f003 0207 	and.w	r2, r3, #7
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	2200      	movs	r2, #0
 8001d36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d38:	7afb      	ldrb	r3, [r7, #11]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6979      	ldr	r1, [r7, #20]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f004 fdfd 	bl	800694a <USB_EPStartXfer>

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	460b      	mov	r3, r1
 8001d64:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	f003 0207 	and.w	r2, r3, #7
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	440b      	add	r3, r1
 8001d78:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001d7c:	681b      	ldr	r3, [r3, #0]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b086      	sub	sp, #24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	603b      	str	r3, [r7, #0]
 8001d96:	460b      	mov	r3, r1
 8001d98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d9a:	7afb      	ldrb	r3, [r7, #11]
 8001d9c:	f003 0207 	and.w	r2, r3, #7
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	3310      	adds	r3, #16
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	4413      	add	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dd6:	7afb      	ldrb	r3, [r7, #11]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6979      	ldr	r1, [r7, #20]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f004 fdae 	bl	800694a <USB_EPStartXfer>

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	7912      	ldrb	r2, [r2, #4]
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e03e      	b.n	8001e94 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	da0e      	bge.n	8001e3c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	f003 0207 	and.w	r2, r3, #7
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	3310      	adds	r3, #16
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2201      	movs	r2, #1
 8001e38:	705a      	strb	r2, [r3, #1]
 8001e3a:	e00c      	b.n	8001e56 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e3c:	78fa      	ldrb	r2, [r7, #3]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <HAL_PCD_EP_SetStall+0x7e>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e00e      	b.n	8001e94 <HAL_PCD_EP_SetStall+0x9c>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68f9      	ldr	r1, [r7, #12]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f005 fb0f 	bl	80074a8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ea8:	78fb      	ldrb	r3, [r7, #3]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	7912      	ldrb	r2, [r2, #4]
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d901      	bls.n	8001eba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e040      	b.n	8001f3c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	da0e      	bge.n	8001ee0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ec2:	78fb      	ldrb	r3, [r7, #3]
 8001ec4:	f003 0207 	and.w	r2, r3, #7
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	3310      	adds	r3, #16
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2201      	movs	r2, #1
 8001edc:	705a      	strb	r2, [r3, #1]
 8001ede:	e00e      	b.n	8001efe <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	f003 0207 	and.w	r2, r3, #7
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <HAL_PCD_EP_ClrStall+0x82>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e00e      	b.n	8001f3c <HAL_PCD_EP_ClrStall+0xa0>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68f9      	ldr	r1, [r7, #12]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f005 fb0c 	bl	800754a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b092      	sub	sp, #72	@ 0x48
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f4c:	e333      	b.n	80025b6 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f56:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001f58:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8001f64:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f040 8108 	bne.w	800217e <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001f6e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001f70:	f003 0310 	and.w	r3, r3, #16
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d14c      	bne.n	8002012 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001f84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f88:	813b      	strh	r3, [r7, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	893b      	ldrh	r3, [r7, #8]
 8001f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3310      	adds	r3, #16
 8001fa0:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fc8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001fca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fcc:	695a      	ldr	r2, [r3, #20]
 8001fce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	441a      	add	r2, r3
 8001fd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fd6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001fd8:	2100      	movs	r1, #0
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f007 faf7 	bl	80095ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	7b1b      	ldrb	r3, [r3, #12]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 82e5 	beq.w	80025b6 <PCD_EP_ISR_Handler+0x672>
 8001fec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f040 82e0 	bne.w	80025b6 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	7b1b      	ldrb	r3, [r3, #12]
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002000:	b2da      	uxtb	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	731a      	strb	r2, [r3, #12]
 8002010:	e2d1      	b.n	80025b6 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002018:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002022:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002024:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002028:	2b00      	cmp	r3, #0
 800202a:	d032      	beq.n	8002092 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002034:	b29b      	uxth	r3, r3
 8002036:	461a      	mov	r2, r3
 8002038:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4413      	add	r3, r2
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	4413      	add	r3, r2
 8002046:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002050:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002052:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800205e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002060:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002062:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002064:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002066:	b29b      	uxth	r3, r3
 8002068:	f005 fb96 	bl	8007798 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	b29a      	uxth	r2, r3
 8002074:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002078:	4013      	ands	r3, r2
 800207a:	817b      	strh	r3, [r7, #10]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	897a      	ldrh	r2, [r7, #10]
 8002082:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002086:	b292      	uxth	r2, r2
 8002088:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f007 fa72 	bl	8009574 <HAL_PCD_SetupStageCallback>
 8002090:	e291      	b.n	80025b6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002092:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002096:	2b00      	cmp	r3, #0
 8002098:	f280 828d 	bge.w	80025b6 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80020a8:	4013      	ands	r3, r2
 80020aa:	81fb      	strh	r3, [r7, #14]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	89fa      	ldrh	r2, [r7, #14]
 80020b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020b6:	b292      	uxth	r2, r2
 80020b8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	461a      	mov	r2, r3
 80020c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4413      	add	r3, r2
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6812      	ldr	r2, [r2, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020e0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80020e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d019      	beq.n	800211e <PCD_EP_ISR_Handler+0x1da>
 80020ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d015      	beq.n	800211e <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f8:	6959      	ldr	r1, [r3, #20]
 80020fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020fc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80020fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002100:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002102:	b29b      	uxth	r3, r3
 8002104:	f005 fb48 	bl	8007798 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002108:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800210a:	695a      	ldr	r2, [r3, #20]
 800210c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	441a      	add	r2, r3
 8002112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002114:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002116:	2100      	movs	r1, #0
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f007 fa3d 	bl	8009598 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002126:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002128:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800212c:	2b00      	cmp	r3, #0
 800212e:	f040 8242 	bne.w	80025b6 <PCD_EP_ISR_Handler+0x672>
 8002132:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002134:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002138:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800213c:	f000 823b 	beq.w	80025b6 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800214c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002150:	81bb      	strh	r3, [r7, #12]
 8002152:	89bb      	ldrh	r3, [r7, #12]
 8002154:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002158:	81bb      	strh	r3, [r7, #12]
 800215a:	89bb      	ldrh	r3, [r7, #12]
 800215c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002160:	81bb      	strh	r3, [r7, #12]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	89bb      	ldrh	r3, [r7, #12]
 8002168:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800216c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002170:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002174:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002178:	b29b      	uxth	r3, r3
 800217a:	8013      	strh	r3, [r2, #0]
 800217c:	e21b      	b.n	80025b6 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002190:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002194:	2b00      	cmp	r3, #0
 8002196:	f280 80f1 	bge.w	800237c <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	461a      	mov	r2, r3
 80021a0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80021b0:	4013      	ands	r3, r2
 80021b2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	461a      	mov	r2, r3
 80021ba:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80021c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80021c8:	b292      	uxth	r2, r2
 80021ca:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80021cc:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	4413      	add	r3, r2
 80021e0:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80021e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021e4:	7b1b      	ldrb	r3, [r3, #12]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d123      	bne.n	8002232 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4413      	add	r3, r2
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6812      	ldr	r2, [r2, #0]
 8002202:	4413      	add	r3, r2
 8002204:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800220e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8002212:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 808b 	beq.w	8002332 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002222:	6959      	ldr	r1, [r3, #20]
 8002224:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002226:	88da      	ldrh	r2, [r3, #6]
 8002228:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800222c:	f005 fab4 	bl	8007798 <USB_ReadPMA>
 8002230:	e07f      	b.n	8002332 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002232:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002234:	78db      	ldrb	r3, [r3, #3]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d109      	bne.n	800224e <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800223a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800223c:	461a      	mov	r2, r3
 800223e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f9c6 	bl	80025d2 <HAL_PCD_EP_DB_Receive>
 8002246:	4603      	mov	r3, r0
 8002248:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800224c:	e071      	b.n	8002332 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	b29b      	uxth	r3, r3
 8002260:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002264:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002268:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	441a      	add	r2, r3
 8002278:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800227a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800227e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002282:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002286:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800228a:	b29b      	uxth	r3, r3
 800228c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	461a      	mov	r2, r3
 8002294:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d022      	beq.n	80022ee <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4413      	add	r3, r2
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	4413      	add	r3, r2
 80022c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022cc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80022d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d02c      	beq.n	8002332 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022de:	6959      	ldr	r1, [r3, #20]
 80022e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022e2:	891a      	ldrh	r2, [r3, #8]
 80022e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80022e8:	f005 fa56 	bl	8007798 <USB_ReadPMA>
 80022ec:	e021      	b.n	8002332 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	461a      	mov	r2, r3
 80022fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4413      	add	r3, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	4413      	add	r3, r2
 8002308:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002312:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8002316:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800231a:	2b00      	cmp	r3, #0
 800231c:	d009      	beq.n	8002332 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002324:	6959      	ldr	r1, [r3, #20]
 8002326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002328:	895a      	ldrh	r2, [r3, #10]
 800232a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800232e:	f005 fa33 	bl	8007798 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002334:	69da      	ldr	r2, [r3, #28]
 8002336:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800233a:	441a      	add	r2, r3
 800233c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800233e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002340:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002342:	695a      	ldr	r2, [r3, #20]
 8002344:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002348:	441a      	add	r2, r3
 800234a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800234c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800234e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <PCD_EP_ISR_Handler+0x41e>
 8002356:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800235a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	429a      	cmp	r2, r3
 8002360:	d206      	bcs.n	8002370 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	4619      	mov	r1, r3
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f007 f915 	bl	8009598 <HAL_PCD_DataOutStageCallback>
 800236e:	e005      	b.n	800237c <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002376:	4618      	mov	r0, r3
 8002378:	f004 fae7 	bl	800694a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800237c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800237e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 8117 	beq.w	80025b6 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8002388:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	3310      	adds	r3, #16
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80023b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023b6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	441a      	add	r2, r3
 80023c6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80023c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80023d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023d6:	78db      	ldrb	r3, [r3, #3]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	f040 80a1 	bne.w	8002520 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80023de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023e0:	2200      	movs	r2, #0
 80023e2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80023e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023e6:	7b1b      	ldrb	r3, [r3, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 8092 	beq.w	8002512 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023ee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80023f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d046      	beq.n	8002486 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023fa:	785b      	ldrb	r3, [r3, #1]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d126      	bne.n	800244e <PCD_EP_ISR_Handler+0x50a>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800240e:	b29b      	uxth	r3, r3
 8002410:	461a      	mov	r2, r3
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	4413      	add	r3, r2
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	00da      	lsls	r2, r3, #3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	4413      	add	r3, r2
 8002422:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	b29b      	uxth	r3, r3
 800242e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002432:	b29a      	uxth	r2, r3
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	801a      	strh	r2, [r3, #0]
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	b29b      	uxth	r3, r3
 800243e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002442:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002446:	b29a      	uxth	r2, r3
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	801a      	strh	r2, [r3, #0]
 800244c:	e061      	b.n	8002512 <PCD_EP_ISR_Handler+0x5ce>
 800244e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002450:	785b      	ldrb	r3, [r3, #1]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d15d      	bne.n	8002512 <PCD_EP_ISR_Handler+0x5ce>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	61fb      	str	r3, [r7, #28]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002464:	b29b      	uxth	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	4413      	add	r3, r2
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	00da      	lsls	r2, r3, #3
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	4413      	add	r3, r2
 8002478:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800247c:	61bb      	str	r3, [r7, #24]
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	2200      	movs	r2, #0
 8002482:	801a      	strh	r2, [r3, #0]
 8002484:	e045      	b.n	8002512 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800248c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800248e:	785b      	ldrb	r3, [r3, #1]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d126      	bne.n	80024e2 <PCD_EP_ISR_Handler+0x59e>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	627b      	str	r3, [r7, #36]	@ 0x24
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	461a      	mov	r2, r3
 80024a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a8:	4413      	add	r3, r2
 80024aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80024ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	00da      	lsls	r2, r3, #3
 80024b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b4:	4413      	add	r3, r2
 80024b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80024ba:	623b      	str	r3, [r7, #32]
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	6a3b      	ldr	r3, [r7, #32]
 80024ca:	801a      	strh	r2, [r3, #0]
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024da:	b29a      	uxth	r2, r3
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	801a      	strh	r2, [r3, #0]
 80024e0:	e017      	b.n	8002512 <PCD_EP_ISR_Handler+0x5ce>
 80024e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024e4:	785b      	ldrb	r3, [r3, #1]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d113      	bne.n	8002512 <PCD_EP_ISR_Handler+0x5ce>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024f8:	4413      	add	r3, r2
 80024fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	00da      	lsls	r2, r3, #3
 8002502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002504:	4413      	add	r3, r2
 8002506:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800250a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800250c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800250e:	2200      	movs	r2, #0
 8002510:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	4619      	mov	r1, r3
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f007 f858 	bl	80095ce <HAL_PCD_DataInStageCallback>
 800251e:	e04a      	b.n	80025b6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002520:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002526:	2b00      	cmp	r3, #0
 8002528:	d13f      	bne.n	80025aa <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002532:	b29b      	uxth	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4413      	add	r3, r2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	4413      	add	r3, r2
 8002544:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800254e:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8002550:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002552:	699a      	ldr	r2, [r3, #24]
 8002554:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002556:	429a      	cmp	r2, r3
 8002558:	d906      	bls.n	8002568 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800255a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800255c:	699a      	ldr	r2, [r3, #24]
 800255e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002560:	1ad2      	subs	r2, r2, r3
 8002562:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002564:	619a      	str	r2, [r3, #24]
 8002566:	e002      	b.n	800256e <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002568:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800256a:	2200      	movs	r2, #0
 800256c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800256e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002576:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	4619      	mov	r1, r3
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f007 f826 	bl	80095ce <HAL_PCD_DataInStageCallback>
 8002582:	e018      	b.n	80025b6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002584:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002586:	695a      	ldr	r2, [r3, #20]
 8002588:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800258a:	441a      	add	r2, r3
 800258c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800258e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002590:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002592:	69da      	ldr	r2, [r3, #28]
 8002594:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002596:	441a      	add	r2, r3
 8002598:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800259a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80025a2:	4618      	mov	r0, r3
 80025a4:	f004 f9d1 	bl	800694a <USB_EPStartXfer>
 80025a8:	e005      	b.n	80025b6 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80025aa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80025ac:	461a      	mov	r2, r3
 80025ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f917 	bl	80027e4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025be:	b29b      	uxth	r3, r3
 80025c0:	b21b      	sxth	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f6ff acc3 	blt.w	8001f4e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3748      	adds	r7, #72	@ 0x48
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b088      	sub	sp, #32
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	4613      	mov	r3, r2
 80025de:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025e0:	88fb      	ldrh	r3, [r7, #6]
 80025e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d07c      	beq.n	80026e4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	4413      	add	r3, r2
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	4413      	add	r3, r2
 8002604:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800260e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	699a      	ldr	r2, [r3, #24]
 8002614:	8b7b      	ldrh	r3, [r7, #26]
 8002616:	429a      	cmp	r2, r3
 8002618:	d306      	bcc.n	8002628 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	8b7b      	ldrh	r3, [r7, #26]
 8002620:	1ad2      	subs	r2, r2, r3
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	619a      	str	r2, [r3, #24]
 8002626:	e002      	b.n	800262e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2200      	movs	r2, #0
 800262c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d123      	bne.n	800267e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	b29b      	uxth	r3, r3
 8002648:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800264c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002650:	833b      	strh	r3, [r7, #24]
 8002652:	8b3b      	ldrh	r3, [r7, #24]
 8002654:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002658:	833b      	strh	r3, [r7, #24]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	441a      	add	r2, r3
 8002668:	8b3b      	ldrh	r3, [r7, #24]
 800266a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800266e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800267a:	b29b      	uxth	r3, r3
 800267c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002684:	2b00      	cmp	r3, #0
 8002686:	d01f      	beq.n	80026c8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	461a      	mov	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	b29b      	uxth	r3, r3
 800269a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800269e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026a2:	82fb      	strh	r3, [r7, #22]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	441a      	add	r2, r3
 80026b2:	8afb      	ldrh	r3, [r7, #22]
 80026b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80026b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80026bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80026c8:	8b7b      	ldrh	r3, [r7, #26]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 8085 	beq.w	80027da <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	6959      	ldr	r1, [r3, #20]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	891a      	ldrh	r2, [r3, #8]
 80026dc:	8b7b      	ldrh	r3, [r7, #26]
 80026de:	f005 f85b 	bl	8007798 <USB_ReadPMA>
 80026e2:	e07a      	b.n	80027da <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	461a      	mov	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4413      	add	r3, r2
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	4413      	add	r3, r2
 80026fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002708:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	699a      	ldr	r2, [r3, #24]
 800270e:	8b7b      	ldrh	r3, [r7, #26]
 8002710:	429a      	cmp	r2, r3
 8002712:	d306      	bcc.n	8002722 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	699a      	ldr	r2, [r3, #24]
 8002718:	8b7b      	ldrh	r3, [r7, #26]
 800271a:	1ad2      	subs	r2, r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	619a      	str	r2, [r3, #24]
 8002720:	e002      	b.n	8002728 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2200      	movs	r2, #0
 8002726:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d123      	bne.n	8002778 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	b29b      	uxth	r3, r3
 8002742:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800274a:	83fb      	strh	r3, [r7, #30]
 800274c:	8bfb      	ldrh	r3, [r7, #30]
 800274e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002752:	83fb      	strh	r3, [r7, #30]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	461a      	mov	r2, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	441a      	add	r2, r3
 8002762:	8bfb      	ldrh	r3, [r7, #30]
 8002764:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002768:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800276c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002774:	b29b      	uxth	r3, r3
 8002776:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002778:	88fb      	ldrh	r3, [r7, #6]
 800277a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800277e:	2b00      	cmp	r3, #0
 8002780:	d11f      	bne.n	80027c2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800279c:	83bb      	strh	r3, [r7, #28]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	441a      	add	r2, r3
 80027ac:	8bbb      	ldrh	r3, [r7, #28]
 80027ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80027be:	b29b      	uxth	r3, r3
 80027c0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027c2:	8b7b      	ldrh	r3, [r7, #26]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	6959      	ldr	r1, [r3, #20]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	895a      	ldrh	r2, [r3, #10]
 80027d4:	8b7b      	ldrh	r3, [r7, #26]
 80027d6:	f004 ffdf 	bl	8007798 <USB_ReadPMA>
    }
  }

  return count;
 80027da:	8b7b      	ldrh	r3, [r7, #26]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3720      	adds	r7, #32
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b0a6      	sub	sp, #152	@ 0x98
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	4613      	mov	r3, r2
 80027f0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 81f7 	beq.w	8002bec <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002806:	b29b      	uxth	r3, r3
 8002808:	461a      	mov	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4413      	add	r3, r2
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	4413      	add	r3, r2
 8002818:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002822:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800282e:	429a      	cmp	r2, r3
 8002830:	d907      	bls.n	8002842 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	699a      	ldr	r2, [r3, #24]
 8002836:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800283a:	1ad2      	subs	r2, r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	619a      	str	r2, [r3, #24]
 8002840:	e002      	b.n	8002848 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2200      	movs	r2, #0
 8002846:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	2b00      	cmp	r3, #0
 800284e:	f040 80e1 	bne.w	8002a14 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	785b      	ldrb	r3, [r3, #1]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d126      	bne.n	80028a8 <HAL_PCD_EP_DB_Transmit+0xc4>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002868:	b29b      	uxth	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800286e:	4413      	add	r3, r2
 8002870:	633b      	str	r3, [r7, #48]	@ 0x30
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	00da      	lsls	r2, r3, #3
 8002878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800287a:	4413      	add	r3, r2
 800287c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002880:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	b29b      	uxth	r3, r3
 8002888:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800288c:	b29a      	uxth	r2, r3
 800288e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002890:	801a      	strh	r2, [r3, #0]
 8002892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	b29b      	uxth	r3, r3
 8002898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800289c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028a4:	801a      	strh	r2, [r3, #0]
 80028a6:	e01a      	b.n	80028de <HAL_PCD_EP_DB_Transmit+0xfa>
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	785b      	ldrb	r3, [r3, #1]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d116      	bne.n	80028de <HAL_PCD_EP_DB_Transmit+0xfa>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028be:	b29b      	uxth	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028c4:	4413      	add	r3, r2
 80028c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	00da      	lsls	r2, r3, #3
 80028ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d0:	4413      	add	r3, r2
 80028d2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80028d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80028d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028da:	2200      	movs	r2, #0
 80028dc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	785b      	ldrb	r3, [r3, #1]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d126      	bne.n	800293a <HAL_PCD_EP_DB_Transmit+0x156>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	623b      	str	r3, [r7, #32]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	461a      	mov	r2, r3
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	4413      	add	r3, r2
 8002902:	623b      	str	r3, [r7, #32]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	00da      	lsls	r2, r3, #3
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	4413      	add	r3, r2
 800290e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002912:	61fb      	str	r3, [r7, #28]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	b29b      	uxth	r3, r3
 800291a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800291e:	b29a      	uxth	r2, r3
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	801a      	strh	r2, [r3, #0]
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	b29b      	uxth	r3, r3
 800292a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800292e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002932:	b29a      	uxth	r2, r3
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	801a      	strh	r2, [r3, #0]
 8002938:	e017      	b.n	800296a <HAL_PCD_EP_DB_Transmit+0x186>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	785b      	ldrb	r3, [r3, #1]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d113      	bne.n	800296a <HAL_PCD_EP_DB_Transmit+0x186>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800294a:	b29b      	uxth	r3, r3
 800294c:	461a      	mov	r2, r3
 800294e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002950:	4413      	add	r3, r2
 8002952:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	00da      	lsls	r2, r3, #3
 800295a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800295c:	4413      	add	r3, r2
 800295e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002962:	627b      	str	r3, [r7, #36]	@ 0x24
 8002964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002966:	2200      	movs	r2, #0
 8002968:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	78db      	ldrb	r3, [r3, #3]
 800296e:	2b02      	cmp	r3, #2
 8002970:	d123      	bne.n	80029ba <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	b29b      	uxth	r3, r3
 8002984:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002988:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800298c:	837b      	strh	r3, [r7, #26]
 800298e:	8b7b      	ldrh	r3, [r7, #26]
 8002990:	f083 0320 	eor.w	r3, r3, #32
 8002994:	837b      	strh	r3, [r7, #26]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	441a      	add	r2, r3
 80029a4:	8b7b      	ldrh	r3, [r7, #26]
 80029a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	4619      	mov	r1, r3
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f006 fe04 	bl	80095ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029c6:	88fb      	ldrh	r3, [r7, #6]
 80029c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d01f      	beq.n	8002a10 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	461a      	mov	r2, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ea:	833b      	strh	r3, [r7, #24]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	461a      	mov	r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	441a      	add	r2, r3
 80029fa:	8b3b      	ldrh	r3, [r7, #24]
 80029fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	e31f      	b.n	8003054 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a14:	88fb      	ldrh	r3, [r7, #6]
 8002a16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d021      	beq.n	8002a62 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a38:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	461a      	mov	r2, r3
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	441a      	add	r2, r3
 8002a4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	f040 82ca 	bne.w	8003002 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002a76:	441a      	add	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	69da      	ldr	r2, [r3, #28]
 8002a80:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002a84:	441a      	add	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	6a1a      	ldr	r2, [r3, #32]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d309      	bcc.n	8002aaa <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	6a1a      	ldr	r2, [r3, #32]
 8002aa0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002aa2:	1ad2      	subs	r2, r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	621a      	str	r2, [r3, #32]
 8002aa8:	e015      	b.n	8002ad6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d107      	bne.n	8002ac2 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8002ab2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002ab6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002ac0:	e009      	b.n	8002ad6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	785b      	ldrb	r3, [r3, #1]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d15f      	bne.n	8002b9e <HAL_PCD_EP_DB_Transmit+0x3ba>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002af2:	4413      	add	r3, r2
 8002af4:	643b      	str	r3, [r7, #64]	@ 0x40
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	00da      	lsls	r2, r3, #3
 8002afc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002afe:	4413      	add	r3, r2
 8002b00:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b14:	801a      	strh	r2, [r3, #0]
 8002b16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10a      	bne.n	8002b32 <HAL_PCD_EP_DB_Transmit+0x34e>
 8002b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b2e:	801a      	strh	r2, [r3, #0]
 8002b30:	e051      	b.n	8002bd6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002b32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b34:	2b3e      	cmp	r3, #62	@ 0x3e
 8002b36:	d816      	bhi.n	8002b66 <HAL_PCD_EP_DB_Transmit+0x382>
 8002b38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b3a:	085b      	lsrs	r3, r3, #1
 8002b3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <HAL_PCD_EP_DB_Transmit+0x36a>
 8002b48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	029b      	lsls	r3, r3, #10
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b62:	801a      	strh	r2, [r3, #0]
 8002b64:	e037      	b.n	8002bd6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002b66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b68:	095b      	lsrs	r3, r3, #5
 8002b6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b6e:	f003 031f 	and.w	r3, r3, #31
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d102      	bne.n	8002b7c <HAL_PCD_EP_DB_Transmit+0x398>
 8002b76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	029b      	lsls	r3, r3, #10
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b9a:	801a      	strh	r2, [r3, #0]
 8002b9c:	e01b      	b.n	8002bd6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	785b      	ldrb	r3, [r3, #1]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d117      	bne.n	8002bd6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bba:	4413      	add	r3, r2
 8002bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	00da      	lsls	r2, r3, #3
 8002bc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002bcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bd4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	6959      	ldr	r1, [r3, #20]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	891a      	ldrh	r2, [r3, #8]
 8002be2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	f004 fd94 	bl	8007712 <USB_WritePMA>
 8002bea:	e20a      	b.n	8003002 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4413      	add	r3, r2
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	4413      	add	r3, r2
 8002c06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c10:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	699a      	ldr	r2, [r3, #24]
 8002c18:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d307      	bcc.n	8002c30 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	699a      	ldr	r2, [r3, #24]
 8002c24:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002c28:	1ad2      	subs	r2, r2, r3
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	619a      	str	r2, [r3, #24]
 8002c2e:	e002      	b.n	8002c36 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2200      	movs	r2, #0
 8002c34:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f040 80f6 	bne.w	8002e2c <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	785b      	ldrb	r3, [r3, #1]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d126      	bne.n	8002c96 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	677b      	str	r3, [r7, #116]	@ 0x74
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	461a      	mov	r2, r3
 8002c5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c5c:	4413      	add	r3, r2
 8002c5e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	00da      	lsls	r2, r3, #3
 8002c66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c68:	4413      	add	r3, r2
 8002c6a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002c6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c7e:	801a      	strh	r2, [r3, #0]
 8002c80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c92:	801a      	strh	r2, [r3, #0]
 8002c94:	e01a      	b.n	8002ccc <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	785b      	ldrb	r3, [r3, #1]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d116      	bne.n	8002ccc <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	461a      	mov	r2, r3
 8002cb0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002cb2:	4413      	add	r3, r2
 8002cb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	00da      	lsls	r2, r3, #3
 8002cbc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002cc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002cc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cc8:	2200      	movs	r2, #0
 8002cca:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	785b      	ldrb	r3, [r3, #1]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d12f      	bne.n	8002d3c <HAL_PCD_EP_DB_Transmit+0x558>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	00da      	lsls	r2, r3, #3
 8002d00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d04:	4413      	add	r3, r2
 8002d06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002d0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d20:	801a      	strh	r2, [r3, #0]
 8002d22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d38:	801a      	strh	r2, [r3, #0]
 8002d3a:	e01c      	b.n	8002d76 <HAL_PCD_EP_DB_Transmit+0x592>
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	785b      	ldrb	r3, [r3, #1]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d118      	bne.n	8002d76 <HAL_PCD_EP_DB_Transmit+0x592>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	461a      	mov	r2, r3
 8002d50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d54:	4413      	add	r3, r2
 8002d56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	00da      	lsls	r2, r3, #3
 8002d60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d64:	4413      	add	r3, r2
 8002d66:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002d6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d72:	2200      	movs	r2, #0
 8002d74:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	78db      	ldrb	r3, [r3, #3]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d127      	bne.n	8002dce <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d98:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002d9c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002da0:	f083 0320 	eor.w	r3, r3, #32
 8002da4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	441a      	add	r2, r3
 8002db6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002dba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002dbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002dc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f006 fbfa 	bl	80095ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002dda:	88fb      	ldrh	r3, [r7, #6]
 8002ddc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d121      	bne.n	8002e28 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	461a      	mov	r2, r3
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dfe:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	441a      	add	r2, r3
 8002e10:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8002e14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e113      	b.n	8003054 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e2c:	88fb      	ldrh	r3, [r7, #6]
 8002e2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d121      	bne.n	8002e7a <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e50:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	441a      	add	r2, r3
 8002e62:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002e66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	f040 80be 	bne.w	8003002 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002e8e:	441a      	add	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	69da      	ldr	r2, [r3, #28]
 8002e98:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002e9c:	441a      	add	r2, r3
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	6a1a      	ldr	r2, [r3, #32]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d309      	bcc.n	8002ec2 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	6a1a      	ldr	r2, [r3, #32]
 8002eb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002eba:	1ad2      	subs	r2, r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	621a      	str	r2, [r3, #32]
 8002ec0:	e015      	b.n	8002eee <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d107      	bne.n	8002eda <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8002eca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002ece:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002ed8:	e009      	b.n	8002eee <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	785b      	ldrb	r3, [r3, #1]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d15f      	bne.n	8002fbc <HAL_PCD_EP_DB_Transmit+0x7d8>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f10:	4413      	add	r3, r2
 8002f12:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	00da      	lsls	r2, r3, #3
 8002f1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002f22:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f32:	801a      	strh	r2, [r3, #0]
 8002f34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10a      	bne.n	8002f50 <HAL_PCD_EP_DB_Transmit+0x76c>
 8002f3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f4c:	801a      	strh	r2, [r3, #0]
 8002f4e:	e04e      	b.n	8002fee <HAL_PCD_EP_DB_Transmit+0x80a>
 8002f50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f52:	2b3e      	cmp	r3, #62	@ 0x3e
 8002f54:	d816      	bhi.n	8002f84 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8002f56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f58:	085b      	lsrs	r3, r3, #1
 8002f5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <HAL_PCD_EP_DB_Transmit+0x788>
 8002f66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f68:	3301      	adds	r3, #1
 8002f6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	029b      	lsls	r3, r3, #10
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f80:	801a      	strh	r2, [r3, #0]
 8002f82:	e034      	b.n	8002fee <HAL_PCD_EP_DB_Transmit+0x80a>
 8002f84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f8c:	f003 031f 	and.w	r3, r3, #31
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d102      	bne.n	8002f9a <HAL_PCD_EP_DB_Transmit+0x7b6>
 8002f94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f96:	3b01      	subs	r3, #1
 8002f98:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	029b      	lsls	r3, r3, #10
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fb8:	801a      	strh	r2, [r3, #0]
 8002fba:	e018      	b.n	8002fee <HAL_PCD_EP_DB_Transmit+0x80a>
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	785b      	ldrb	r3, [r3, #1]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d114      	bne.n	8002fee <HAL_PCD_EP_DB_Transmit+0x80a>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	461a      	mov	r2, r3
 8002fd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fd2:	4413      	add	r3, r2
 8002fd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	00da      	lsls	r2, r3, #3
 8002fdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fde:	4413      	add	r3, r2
 8002fe0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002fe4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002fe6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fec:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	6959      	ldr	r1, [r3, #20]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	895a      	ldrh	r2, [r3, #10]
 8002ffa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	f004 fb88 	bl	8007712 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	881b      	ldrh	r3, [r3, #0]
 8003012:	b29b      	uxth	r3, r3
 8003014:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003018:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800301c:	82fb      	strh	r3, [r7, #22]
 800301e:	8afb      	ldrh	r3, [r7, #22]
 8003020:	f083 0310 	eor.w	r3, r3, #16
 8003024:	82fb      	strh	r3, [r7, #22]
 8003026:	8afb      	ldrh	r3, [r7, #22]
 8003028:	f083 0320 	eor.w	r3, r3, #32
 800302c:	82fb      	strh	r3, [r7, #22]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	441a      	add	r2, r3
 800303c:	8afb      	ldrh	r3, [r7, #22]
 800303e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003042:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003046:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800304a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800304e:	b29b      	uxth	r3, r3
 8003050:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3798      	adds	r7, #152	@ 0x98
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	607b      	str	r3, [r7, #4]
 8003066:	460b      	mov	r3, r1
 8003068:	817b      	strh	r3, [r7, #10]
 800306a:	4613      	mov	r3, r2
 800306c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800306e:	897b      	ldrh	r3, [r7, #10]
 8003070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00b      	beq.n	8003092 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800307a:	897b      	ldrh	r3, [r7, #10]
 800307c:	f003 0207 	and.w	r2, r3, #7
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	3310      	adds	r3, #16
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4413      	add	r3, r2
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	e009      	b.n	80030a6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003092:	897a      	ldrh	r2, [r7, #10]
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	4413      	add	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80030a6:	893b      	ldrh	r3, [r7, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d107      	bne.n	80030bc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	2200      	movs	r2, #0
 80030b0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	80da      	strh	r2, [r3, #6]
 80030ba:	e00b      	b.n	80030d4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2201      	movs	r2, #1
 80030c0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	0c1b      	lsrs	r3, r3, #16
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	371c      	adds	r7, #28
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b085      	sub	sp, #20
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003106:	b29b      	uxth	r3, r3
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800311a:	b29b      	uxth	r3, r3
 800311c:	f043 0302 	orr.w	r3, r3, #2
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d141      	bne.n	80031ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003146:	4b4b      	ldr	r3, [pc, #300]	@ (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800314e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003152:	d131      	bne.n	80031b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003154:	4b47      	ldr	r3, [pc, #284]	@ (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800315a:	4a46      	ldr	r2, [pc, #280]	@ (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800315c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003160:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003164:	4b43      	ldr	r3, [pc, #268]	@ (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800316c:	4a41      	ldr	r2, [pc, #260]	@ (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800316e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003172:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003174:	4b40      	ldr	r3, [pc, #256]	@ (8003278 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2232      	movs	r2, #50	@ 0x32
 800317a:	fb02 f303 	mul.w	r3, r2, r3
 800317e:	4a3f      	ldr	r2, [pc, #252]	@ (800327c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003180:	fba2 2303 	umull	r2, r3, r2, r3
 8003184:	0c9b      	lsrs	r3, r3, #18
 8003186:	3301      	adds	r3, #1
 8003188:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800318a:	e002      	b.n	8003192 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	3b01      	subs	r3, #1
 8003190:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003192:	4b38      	ldr	r3, [pc, #224]	@ (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800319a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800319e:	d102      	bne.n	80031a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f2      	bne.n	800318c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031a6:	4b33      	ldr	r3, [pc, #204]	@ (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031b2:	d158      	bne.n	8003266 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e057      	b.n	8003268 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031be:	4a2d      	ldr	r2, [pc, #180]	@ (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80031c8:	e04d      	b.n	8003266 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031d0:	d141      	bne.n	8003256 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031d2:	4b28      	ldr	r3, [pc, #160]	@ (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031de:	d131      	bne.n	8003244 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031e0:	4b24      	ldr	r3, [pc, #144]	@ (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031e6:	4a23      	ldr	r2, [pc, #140]	@ (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031f0:	4b20      	ldr	r3, [pc, #128]	@ (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003200:	4b1d      	ldr	r3, [pc, #116]	@ (8003278 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2232      	movs	r2, #50	@ 0x32
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	4a1c      	ldr	r2, [pc, #112]	@ (800327c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800320c:	fba2 2303 	umull	r2, r3, r2, r3
 8003210:	0c9b      	lsrs	r3, r3, #18
 8003212:	3301      	adds	r3, #1
 8003214:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003216:	e002      	b.n	800321e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	3b01      	subs	r3, #1
 800321c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800321e:	4b15      	ldr	r3, [pc, #84]	@ (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800322a:	d102      	bne.n	8003232 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f2      	bne.n	8003218 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003232:	4b10      	ldr	r3, [pc, #64]	@ (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800323a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800323e:	d112      	bne.n	8003266 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e011      	b.n	8003268 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003244:	4b0b      	ldr	r3, [pc, #44]	@ (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003246:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800324a:	4a0a      	ldr	r2, [pc, #40]	@ (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800324c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003250:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003254:	e007      	b.n	8003266 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003256:	4b07      	ldr	r3, [pc, #28]	@ (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800325e:	4a05      	ldr	r2, [pc, #20]	@ (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003260:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003264:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	40007000 	.word	0x40007000
 8003278:	20000000 	.word	0x20000000
 800327c:	431bde83 	.word	0x431bde83

08003280 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003284:	4b05      	ldr	r3, [pc, #20]	@ (800329c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	4a04      	ldr	r2, [pc, #16]	@ (800329c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800328a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800328e:	6093      	str	r3, [r2, #8]
}
 8003290:	bf00      	nop
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	40007000 	.word	0x40007000

080032a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e2fe      	b.n	80038b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d075      	beq.n	80033aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032be:	4b97      	ldr	r3, [pc, #604]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 030c 	and.w	r3, r3, #12
 80032c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032c8:	4b94      	ldr	r3, [pc, #592]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	2b0c      	cmp	r3, #12
 80032d6:	d102      	bne.n	80032de <HAL_RCC_OscConfig+0x3e>
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d002      	beq.n	80032e4 <HAL_RCC_OscConfig+0x44>
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d10b      	bne.n	80032fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e4:	4b8d      	ldr	r3, [pc, #564]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d05b      	beq.n	80033a8 <HAL_RCC_OscConfig+0x108>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d157      	bne.n	80033a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e2d9      	b.n	80038b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003304:	d106      	bne.n	8003314 <HAL_RCC_OscConfig+0x74>
 8003306:	4b85      	ldr	r3, [pc, #532]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a84      	ldr	r2, [pc, #528]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 800330c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	e01d      	b.n	8003350 <HAL_RCC_OscConfig+0xb0>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800331c:	d10c      	bne.n	8003338 <HAL_RCC_OscConfig+0x98>
 800331e:	4b7f      	ldr	r3, [pc, #508]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a7e      	ldr	r2, [pc, #504]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 8003324:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	4b7c      	ldr	r3, [pc, #496]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a7b      	ldr	r2, [pc, #492]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 8003330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e00b      	b.n	8003350 <HAL_RCC_OscConfig+0xb0>
 8003338:	4b78      	ldr	r3, [pc, #480]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a77      	ldr	r2, [pc, #476]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 800333e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	4b75      	ldr	r3, [pc, #468]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a74      	ldr	r2, [pc, #464]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 800334a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800334e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d013      	beq.n	8003380 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003358:	f7fd ff2a 	bl	80011b0 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003360:	f7fd ff26 	bl	80011b0 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	@ 0x64
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e29e      	b.n	80038b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003372:	4b6a      	ldr	r3, [pc, #424]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0xc0>
 800337e:	e014      	b.n	80033aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003380:	f7fd ff16 	bl	80011b0 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003388:	f7fd ff12 	bl	80011b0 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b64      	cmp	r3, #100	@ 0x64
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e28a      	b.n	80038b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800339a:	4b60      	ldr	r3, [pc, #384]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0xe8>
 80033a6:	e000      	b.n	80033aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d075      	beq.n	80034a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033b6:	4b59      	ldr	r3, [pc, #356]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033c0:	4b56      	ldr	r3, [pc, #344]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	2b0c      	cmp	r3, #12
 80033ce:	d102      	bne.n	80033d6 <HAL_RCC_OscConfig+0x136>
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d002      	beq.n	80033dc <HAL_RCC_OscConfig+0x13c>
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d11f      	bne.n	800341c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033dc:	4b4f      	ldr	r3, [pc, #316]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d005      	beq.n	80033f4 <HAL_RCC_OscConfig+0x154>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e25d      	b.n	80038b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f4:	4b49      	ldr	r3, [pc, #292]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	061b      	lsls	r3, r3, #24
 8003402:	4946      	ldr	r1, [pc, #280]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 8003404:	4313      	orrs	r3, r2
 8003406:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003408:	4b45      	ldr	r3, [pc, #276]	@ (8003520 <HAL_RCC_OscConfig+0x280>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7fd fa6f 	bl	80008f0 <HAL_InitTick>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d043      	beq.n	80034a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e249      	b.n	80038b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d023      	beq.n	800346c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003424:	4b3d      	ldr	r3, [pc, #244]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a3c      	ldr	r2, [pc, #240]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 800342a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800342e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003430:	f7fd febe 	bl	80011b0 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003438:	f7fd feba 	bl	80011b0 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e232      	b.n	80038b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800344a:	4b34      	ldr	r3, [pc, #208]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0f0      	beq.n	8003438 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003456:	4b31      	ldr	r3, [pc, #196]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	061b      	lsls	r3, r3, #24
 8003464:	492d      	ldr	r1, [pc, #180]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 8003466:	4313      	orrs	r3, r2
 8003468:	604b      	str	r3, [r1, #4]
 800346a:	e01a      	b.n	80034a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800346c:	4b2b      	ldr	r3, [pc, #172]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a2a      	ldr	r2, [pc, #168]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 8003472:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003478:	f7fd fe9a 	bl	80011b0 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003480:	f7fd fe96 	bl	80011b0 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e20e      	b.n	80038b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003492:	4b22      	ldr	r3, [pc, #136]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f0      	bne.n	8003480 <HAL_RCC_OscConfig+0x1e0>
 800349e:	e000      	b.n	80034a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d041      	beq.n	8003532 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d01c      	beq.n	80034f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b6:	4b19      	ldr	r3, [pc, #100]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 80034b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034bc:	4a17      	ldr	r2, [pc, #92]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c6:	f7fd fe73 	bl	80011b0 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ce:	f7fd fe6f 	bl	80011b0 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e1e7      	b.n	80038b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034e0:	4b0e      	ldr	r3, [pc, #56]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 80034e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0ef      	beq.n	80034ce <HAL_RCC_OscConfig+0x22e>
 80034ee:	e020      	b.n	8003532 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034f0:	4b0a      	ldr	r3, [pc, #40]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 80034f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034f6:	4a09      	ldr	r2, [pc, #36]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 80034f8:	f023 0301 	bic.w	r3, r3, #1
 80034fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003500:	f7fd fe56 	bl	80011b0 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003506:	e00d      	b.n	8003524 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003508:	f7fd fe52 	bl	80011b0 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d906      	bls.n	8003524 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e1ca      	b.n	80038b0 <HAL_RCC_OscConfig+0x610>
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000
 8003520:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003524:	4b8c      	ldr	r3, [pc, #560]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 8003526:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1ea      	bne.n	8003508 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 80a6 	beq.w	800368c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003540:	2300      	movs	r3, #0
 8003542:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003544:	4b84      	ldr	r3, [pc, #528]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 8003546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_RCC_OscConfig+0x2b4>
 8003550:	2301      	movs	r3, #1
 8003552:	e000      	b.n	8003556 <HAL_RCC_OscConfig+0x2b6>
 8003554:	2300      	movs	r3, #0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00d      	beq.n	8003576 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800355a:	4b7f      	ldr	r3, [pc, #508]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 800355c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355e:	4a7e      	ldr	r2, [pc, #504]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 8003560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003564:	6593      	str	r3, [r2, #88]	@ 0x58
 8003566:	4b7c      	ldr	r3, [pc, #496]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 8003568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003572:	2301      	movs	r3, #1
 8003574:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003576:	4b79      	ldr	r3, [pc, #484]	@ (800375c <HAL_RCC_OscConfig+0x4bc>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357e:	2b00      	cmp	r3, #0
 8003580:	d118      	bne.n	80035b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003582:	4b76      	ldr	r3, [pc, #472]	@ (800375c <HAL_RCC_OscConfig+0x4bc>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a75      	ldr	r2, [pc, #468]	@ (800375c <HAL_RCC_OscConfig+0x4bc>)
 8003588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800358c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800358e:	f7fd fe0f 	bl	80011b0 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003596:	f7fd fe0b 	bl	80011b0 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e183      	b.n	80038b0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035a8:	4b6c      	ldr	r3, [pc, #432]	@ (800375c <HAL_RCC_OscConfig+0x4bc>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0f0      	beq.n	8003596 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d108      	bne.n	80035ce <HAL_RCC_OscConfig+0x32e>
 80035bc:	4b66      	ldr	r3, [pc, #408]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 80035be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c2:	4a65      	ldr	r2, [pc, #404]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035cc:	e024      	b.n	8003618 <HAL_RCC_OscConfig+0x378>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2b05      	cmp	r3, #5
 80035d4:	d110      	bne.n	80035f8 <HAL_RCC_OscConfig+0x358>
 80035d6:	4b60      	ldr	r3, [pc, #384]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035dc:	4a5e      	ldr	r2, [pc, #376]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 80035de:	f043 0304 	orr.w	r3, r3, #4
 80035e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035e6:	4b5c      	ldr	r3, [pc, #368]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 80035e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ec:	4a5a      	ldr	r2, [pc, #360]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035f6:	e00f      	b.n	8003618 <HAL_RCC_OscConfig+0x378>
 80035f8:	4b57      	ldr	r3, [pc, #348]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035fe:	4a56      	ldr	r2, [pc, #344]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 8003600:	f023 0301 	bic.w	r3, r3, #1
 8003604:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003608:	4b53      	ldr	r3, [pc, #332]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800360e:	4a52      	ldr	r2, [pc, #328]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 8003610:	f023 0304 	bic.w	r3, r3, #4
 8003614:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d016      	beq.n	800364e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003620:	f7fd fdc6 	bl	80011b0 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003626:	e00a      	b.n	800363e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003628:	f7fd fdc2 	bl	80011b0 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e138      	b.n	80038b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800363e:	4b46      	ldr	r3, [pc, #280]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 8003640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0ed      	beq.n	8003628 <HAL_RCC_OscConfig+0x388>
 800364c:	e015      	b.n	800367a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364e:	f7fd fdaf 	bl	80011b0 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003654:	e00a      	b.n	800366c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003656:	f7fd fdab 	bl	80011b0 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003664:	4293      	cmp	r3, r2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e121      	b.n	80038b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800366c:	4b3a      	ldr	r3, [pc, #232]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1ed      	bne.n	8003656 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800367a:	7ffb      	ldrb	r3, [r7, #31]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d105      	bne.n	800368c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003680:	4b35      	ldr	r3, [pc, #212]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 8003682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003684:	4a34      	ldr	r2, [pc, #208]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 8003686:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800368a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	2b00      	cmp	r3, #0
 8003696:	d03c      	beq.n	8003712 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01c      	beq.n	80036da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 80036a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b0:	f7fd fd7e 	bl	80011b0 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036b8:	f7fd fd7a 	bl	80011b0 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e0f2      	b.n	80038b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036ca:	4b23      	ldr	r3, [pc, #140]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 80036cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0ef      	beq.n	80036b8 <HAL_RCC_OscConfig+0x418>
 80036d8:	e01b      	b.n	8003712 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036da:	4b1f      	ldr	r3, [pc, #124]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 80036dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 80036e2:	f023 0301 	bic.w	r3, r3, #1
 80036e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ea:	f7fd fd61 	bl	80011b0 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036f2:	f7fd fd5d 	bl	80011b0 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e0d5      	b.n	80038b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003704:	4b14      	ldr	r3, [pc, #80]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 8003706:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1ef      	bne.n	80036f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 80c9 	beq.w	80038ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800371c:	4b0e      	ldr	r3, [pc, #56]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 030c 	and.w	r3, r3, #12
 8003724:	2b0c      	cmp	r3, #12
 8003726:	f000 8083 	beq.w	8003830 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	2b02      	cmp	r3, #2
 8003730:	d15e      	bne.n	80037f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003732:	4b09      	ldr	r3, [pc, #36]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a08      	ldr	r2, [pc, #32]	@ (8003758 <HAL_RCC_OscConfig+0x4b8>)
 8003738:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800373c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373e:	f7fd fd37 	bl	80011b0 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003744:	e00c      	b.n	8003760 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003746:	f7fd fd33 	bl	80011b0 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d905      	bls.n	8003760 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e0ab      	b.n	80038b0 <HAL_RCC_OscConfig+0x610>
 8003758:	40021000 	.word	0x40021000
 800375c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003760:	4b55      	ldr	r3, [pc, #340]	@ (80038b8 <HAL_RCC_OscConfig+0x618>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1ec      	bne.n	8003746 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800376c:	4b52      	ldr	r3, [pc, #328]	@ (80038b8 <HAL_RCC_OscConfig+0x618>)
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	4b52      	ldr	r3, [pc, #328]	@ (80038bc <HAL_RCC_OscConfig+0x61c>)
 8003772:	4013      	ands	r3, r2
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6a11      	ldr	r1, [r2, #32]
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800377c:	3a01      	subs	r2, #1
 800377e:	0112      	lsls	r2, r2, #4
 8003780:	4311      	orrs	r1, r2
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003786:	0212      	lsls	r2, r2, #8
 8003788:	4311      	orrs	r1, r2
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800378e:	0852      	lsrs	r2, r2, #1
 8003790:	3a01      	subs	r2, #1
 8003792:	0552      	lsls	r2, r2, #21
 8003794:	4311      	orrs	r1, r2
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800379a:	0852      	lsrs	r2, r2, #1
 800379c:	3a01      	subs	r2, #1
 800379e:	0652      	lsls	r2, r2, #25
 80037a0:	4311      	orrs	r1, r2
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80037a6:	06d2      	lsls	r2, r2, #27
 80037a8:	430a      	orrs	r2, r1
 80037aa:	4943      	ldr	r1, [pc, #268]	@ (80038b8 <HAL_RCC_OscConfig+0x618>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b0:	4b41      	ldr	r3, [pc, #260]	@ (80038b8 <HAL_RCC_OscConfig+0x618>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a40      	ldr	r2, [pc, #256]	@ (80038b8 <HAL_RCC_OscConfig+0x618>)
 80037b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037bc:	4b3e      	ldr	r3, [pc, #248]	@ (80038b8 <HAL_RCC_OscConfig+0x618>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	4a3d      	ldr	r2, [pc, #244]	@ (80038b8 <HAL_RCC_OscConfig+0x618>)
 80037c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c8:	f7fd fcf2 	bl	80011b0 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d0:	f7fd fcee 	bl	80011b0 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e066      	b.n	80038b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037e2:	4b35      	ldr	r3, [pc, #212]	@ (80038b8 <HAL_RCC_OscConfig+0x618>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f0      	beq.n	80037d0 <HAL_RCC_OscConfig+0x530>
 80037ee:	e05e      	b.n	80038ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f0:	4b31      	ldr	r3, [pc, #196]	@ (80038b8 <HAL_RCC_OscConfig+0x618>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a30      	ldr	r2, [pc, #192]	@ (80038b8 <HAL_RCC_OscConfig+0x618>)
 80037f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fc:	f7fd fcd8 	bl	80011b0 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003804:	f7fd fcd4 	bl	80011b0 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e04c      	b.n	80038b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003816:	4b28      	ldr	r3, [pc, #160]	@ (80038b8 <HAL_RCC_OscConfig+0x618>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003822:	4b25      	ldr	r3, [pc, #148]	@ (80038b8 <HAL_RCC_OscConfig+0x618>)
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	4924      	ldr	r1, [pc, #144]	@ (80038b8 <HAL_RCC_OscConfig+0x618>)
 8003828:	4b25      	ldr	r3, [pc, #148]	@ (80038c0 <HAL_RCC_OscConfig+0x620>)
 800382a:	4013      	ands	r3, r2
 800382c:	60cb      	str	r3, [r1, #12]
 800382e:	e03e      	b.n	80038ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e039      	b.n	80038b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800383c:	4b1e      	ldr	r3, [pc, #120]	@ (80038b8 <HAL_RCC_OscConfig+0x618>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f003 0203 	and.w	r2, r3, #3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	429a      	cmp	r2, r3
 800384e:	d12c      	bne.n	80038aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385a:	3b01      	subs	r3, #1
 800385c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385e:	429a      	cmp	r2, r3
 8003860:	d123      	bne.n	80038aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800386e:	429a      	cmp	r2, r3
 8003870:	d11b      	bne.n	80038aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800387e:	429a      	cmp	r2, r3
 8003880:	d113      	bne.n	80038aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388c:	085b      	lsrs	r3, r3, #1
 800388e:	3b01      	subs	r3, #1
 8003890:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003892:	429a      	cmp	r2, r3
 8003894:	d109      	bne.n	80038aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038a0:	085b      	lsrs	r3, r3, #1
 80038a2:	3b01      	subs	r3, #1
 80038a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d001      	beq.n	80038ae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3720      	adds	r7, #32
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40021000 	.word	0x40021000
 80038bc:	019f800c 	.word	0x019f800c
 80038c0:	feeefffc 	.word	0xfeeefffc

080038c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e11e      	b.n	8003b1a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038dc:	4b91      	ldr	r3, [pc, #580]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 030f 	and.w	r3, r3, #15
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d910      	bls.n	800390c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ea:	4b8e      	ldr	r3, [pc, #568]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f023 020f 	bic.w	r2, r3, #15
 80038f2:	498c      	ldr	r1, [pc, #560]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fa:	4b8a      	ldr	r3, [pc, #552]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d001      	beq.n	800390c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e106      	b.n	8003b1a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d073      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b03      	cmp	r3, #3
 800391e:	d129      	bne.n	8003974 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003920:	4b81      	ldr	r3, [pc, #516]	@ (8003b28 <HAL_RCC_ClockConfig+0x264>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e0f4      	b.n	8003b1a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003930:	f000 f9ba 	bl	8003ca8 <RCC_GetSysClockFreqFromPLLSource>
 8003934:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4a7c      	ldr	r2, [pc, #496]	@ (8003b2c <HAL_RCC_ClockConfig+0x268>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d93f      	bls.n	80039be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800393e:	4b7a      	ldr	r3, [pc, #488]	@ (8003b28 <HAL_RCC_ClockConfig+0x264>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d009      	beq.n	800395e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003952:	2b00      	cmp	r3, #0
 8003954:	d033      	beq.n	80039be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800395a:	2b00      	cmp	r3, #0
 800395c:	d12f      	bne.n	80039be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800395e:	4b72      	ldr	r3, [pc, #456]	@ (8003b28 <HAL_RCC_ClockConfig+0x264>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003966:	4a70      	ldr	r2, [pc, #448]	@ (8003b28 <HAL_RCC_ClockConfig+0x264>)
 8003968:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800396c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800396e:	2380      	movs	r3, #128	@ 0x80
 8003970:	617b      	str	r3, [r7, #20]
 8003972:	e024      	b.n	80039be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b02      	cmp	r3, #2
 800397a:	d107      	bne.n	800398c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800397c:	4b6a      	ldr	r3, [pc, #424]	@ (8003b28 <HAL_RCC_ClockConfig+0x264>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d109      	bne.n	800399c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e0c6      	b.n	8003b1a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800398c:	4b66      	ldr	r3, [pc, #408]	@ (8003b28 <HAL_RCC_ClockConfig+0x264>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e0be      	b.n	8003b1a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800399c:	f000 f8ce 	bl	8003b3c <HAL_RCC_GetSysClockFreq>
 80039a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4a61      	ldr	r2, [pc, #388]	@ (8003b2c <HAL_RCC_ClockConfig+0x268>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d909      	bls.n	80039be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003b28 <HAL_RCC_ClockConfig+0x264>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039b2:	4a5d      	ldr	r2, [pc, #372]	@ (8003b28 <HAL_RCC_ClockConfig+0x264>)
 80039b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80039ba:	2380      	movs	r3, #128	@ 0x80
 80039bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039be:	4b5a      	ldr	r3, [pc, #360]	@ (8003b28 <HAL_RCC_ClockConfig+0x264>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f023 0203 	bic.w	r2, r3, #3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	4957      	ldr	r1, [pc, #348]	@ (8003b28 <HAL_RCC_ClockConfig+0x264>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039d0:	f7fd fbee 	bl	80011b0 <HAL_GetTick>
 80039d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d6:	e00a      	b.n	80039ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d8:	f7fd fbea 	bl	80011b0 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e095      	b.n	8003b1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ee:	4b4e      	ldr	r3, [pc, #312]	@ (8003b28 <HAL_RCC_ClockConfig+0x264>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 020c 	and.w	r2, r3, #12
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d1eb      	bne.n	80039d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d023      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a18:	4b43      	ldr	r3, [pc, #268]	@ (8003b28 <HAL_RCC_ClockConfig+0x264>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	4a42      	ldr	r2, [pc, #264]	@ (8003b28 <HAL_RCC_ClockConfig+0x264>)
 8003a1e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a22:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0308 	and.w	r3, r3, #8
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d007      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003a30:	4b3d      	ldr	r3, [pc, #244]	@ (8003b28 <HAL_RCC_ClockConfig+0x264>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003a38:	4a3b      	ldr	r2, [pc, #236]	@ (8003b28 <HAL_RCC_ClockConfig+0x264>)
 8003a3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a40:	4b39      	ldr	r3, [pc, #228]	@ (8003b28 <HAL_RCC_ClockConfig+0x264>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	4936      	ldr	r1, [pc, #216]	@ (8003b28 <HAL_RCC_ClockConfig+0x264>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	608b      	str	r3, [r1, #8]
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	2b80      	cmp	r3, #128	@ 0x80
 8003a58:	d105      	bne.n	8003a66 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a5a:	4b33      	ldr	r3, [pc, #204]	@ (8003b28 <HAL_RCC_ClockConfig+0x264>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	4a32      	ldr	r2, [pc, #200]	@ (8003b28 <HAL_RCC_ClockConfig+0x264>)
 8003a60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a64:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a66:	4b2f      	ldr	r3, [pc, #188]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d21d      	bcs.n	8003ab0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a74:	4b2b      	ldr	r3, [pc, #172]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f023 020f 	bic.w	r2, r3, #15
 8003a7c:	4929      	ldr	r1, [pc, #164]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a84:	f7fd fb94 	bl	80011b0 <HAL_GetTick>
 8003a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8a:	e00a      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a8c:	f7fd fb90 	bl	80011b0 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e03b      	b.n	8003b1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa2:	4b20      	ldr	r3, [pc, #128]	@ (8003b24 <HAL_RCC_ClockConfig+0x260>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d1ed      	bne.n	8003a8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d008      	beq.n	8003ace <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003abc:	4b1a      	ldr	r3, [pc, #104]	@ (8003b28 <HAL_RCC_ClockConfig+0x264>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	4917      	ldr	r1, [pc, #92]	@ (8003b28 <HAL_RCC_ClockConfig+0x264>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d009      	beq.n	8003aee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ada:	4b13      	ldr	r3, [pc, #76]	@ (8003b28 <HAL_RCC_ClockConfig+0x264>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	490f      	ldr	r1, [pc, #60]	@ (8003b28 <HAL_RCC_ClockConfig+0x264>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003aee:	f000 f825 	bl	8003b3c <HAL_RCC_GetSysClockFreq>
 8003af2:	4602      	mov	r2, r0
 8003af4:	4b0c      	ldr	r3, [pc, #48]	@ (8003b28 <HAL_RCC_ClockConfig+0x264>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	091b      	lsrs	r3, r3, #4
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	490c      	ldr	r1, [pc, #48]	@ (8003b30 <HAL_RCC_ClockConfig+0x26c>)
 8003b00:	5ccb      	ldrb	r3, [r1, r3]
 8003b02:	f003 031f 	and.w	r3, r3, #31
 8003b06:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b34 <HAL_RCC_ClockConfig+0x270>)
 8003b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b38 <HAL_RCC_ClockConfig+0x274>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fc feec 	bl	80008f0 <HAL_InitTick>
 8003b18:	4603      	mov	r3, r0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40022000 	.word	0x40022000
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	04c4b400 	.word	0x04c4b400
 8003b30:	0800af68 	.word	0x0800af68
 8003b34:	20000000 	.word	0x20000000
 8003b38:	20000004 	.word	0x20000004

08003b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b42:	4b2c      	ldr	r3, [pc, #176]	@ (8003bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 030c 	and.w	r3, r3, #12
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d102      	bne.n	8003b54 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8003bf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b50:	613b      	str	r3, [r7, #16]
 8003b52:	e047      	b.n	8003be4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b54:	4b27      	ldr	r3, [pc, #156]	@ (8003bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 030c 	and.w	r3, r3, #12
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d102      	bne.n	8003b66 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b60:	4b26      	ldr	r3, [pc, #152]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b62:	613b      	str	r3, [r7, #16]
 8003b64:	e03e      	b.n	8003be4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b66:	4b23      	ldr	r3, [pc, #140]	@ (8003bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
 8003b6e:	2b0c      	cmp	r3, #12
 8003b70:	d136      	bne.n	8003be0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b72:	4b20      	ldr	r3, [pc, #128]	@ (8003bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	3301      	adds	r3, #1
 8003b88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d10c      	bne.n	8003baa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b90:	4a1a      	ldr	r2, [pc, #104]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	4a16      	ldr	r2, [pc, #88]	@ (8003bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b9a:	68d2      	ldr	r2, [r2, #12]
 8003b9c:	0a12      	lsrs	r2, r2, #8
 8003b9e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ba2:	fb02 f303 	mul.w	r3, r2, r3
 8003ba6:	617b      	str	r3, [r7, #20]
      break;
 8003ba8:	e00c      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003baa:	4a13      	ldr	r2, [pc, #76]	@ (8003bf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb2:	4a10      	ldr	r2, [pc, #64]	@ (8003bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bb4:	68d2      	ldr	r2, [r2, #12]
 8003bb6:	0a12      	lsrs	r2, r2, #8
 8003bb8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003bbc:	fb02 f303 	mul.w	r3, r2, r3
 8003bc0:	617b      	str	r3, [r7, #20]
      break;
 8003bc2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	0e5b      	lsrs	r3, r3, #25
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	3301      	adds	r3, #1
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	e001      	b.n	8003be4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003be4:	693b      	ldr	r3, [r7, #16]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	371c      	adds	r7, #28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	00f42400 	.word	0x00f42400
 8003bfc:	016e3600 	.word	0x016e3600

08003c00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c04:	4b03      	ldr	r3, [pc, #12]	@ (8003c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c06:	681b      	ldr	r3, [r3, #0]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	20000000 	.word	0x20000000

08003c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c1c:	f7ff fff0 	bl	8003c00 <HAL_RCC_GetHCLKFreq>
 8003c20:	4602      	mov	r2, r0
 8003c22:	4b06      	ldr	r3, [pc, #24]	@ (8003c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	0a1b      	lsrs	r3, r3, #8
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	4904      	ldr	r1, [pc, #16]	@ (8003c40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c2e:	5ccb      	ldrb	r3, [r1, r3]
 8003c30:	f003 031f 	and.w	r3, r3, #31
 8003c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	0800af78 	.word	0x0800af78

08003c44 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	220f      	movs	r2, #15
 8003c52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003c54:	4b12      	ldr	r3, [pc, #72]	@ (8003ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 0203 	and.w	r2, r3, #3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003c60:	4b0f      	ldr	r3, [pc, #60]	@ (8003ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003c78:	4b09      	ldr	r3, [pc, #36]	@ (8003ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	08db      	lsrs	r3, r3, #3
 8003c7e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003c86:	4b07      	ldr	r3, [pc, #28]	@ (8003ca4 <HAL_RCC_GetClockConfig+0x60>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 020f 	and.w	r2, r3, #15
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	601a      	str	r2, [r3, #0]
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	40022000 	.word	0x40022000

08003ca8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cae:	4b1e      	ldr	r3, [pc, #120]	@ (8003d28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	091b      	lsrs	r3, r3, #4
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	d10c      	bne.n	8003ce6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ccc:	4a17      	ldr	r2, [pc, #92]	@ (8003d2c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd4:	4a14      	ldr	r2, [pc, #80]	@ (8003d28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cd6:	68d2      	ldr	r2, [r2, #12]
 8003cd8:	0a12      	lsrs	r2, r2, #8
 8003cda:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003cde:	fb02 f303 	mul.w	r3, r2, r3
 8003ce2:	617b      	str	r3, [r7, #20]
    break;
 8003ce4:	e00c      	b.n	8003d00 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ce6:	4a12      	ldr	r2, [pc, #72]	@ (8003d30 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cee:	4a0e      	ldr	r2, [pc, #56]	@ (8003d28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cf0:	68d2      	ldr	r2, [r2, #12]
 8003cf2:	0a12      	lsrs	r2, r2, #8
 8003cf4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003cf8:	fb02 f303 	mul.w	r3, r2, r3
 8003cfc:	617b      	str	r3, [r7, #20]
    break;
 8003cfe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d00:	4b09      	ldr	r3, [pc, #36]	@ (8003d28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	0e5b      	lsrs	r3, r3, #25
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d18:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d1a:	687b      	ldr	r3, [r7, #4]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	371c      	adds	r7, #28
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	016e3600 	.word	0x016e3600
 8003d30:	00f42400 	.word	0x00f42400

08003d34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d40:	2300      	movs	r3, #0
 8003d42:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 8098 	beq.w	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d52:	2300      	movs	r3, #0
 8003d54:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d56:	4b43      	ldr	r3, [pc, #268]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10d      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d62:	4b40      	ldr	r3, [pc, #256]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d66:	4a3f      	ldr	r2, [pc, #252]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d6e:	4b3d      	ldr	r3, [pc, #244]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d76:	60bb      	str	r3, [r7, #8]
 8003d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a39      	ldr	r2, [pc, #228]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d8a:	f7fd fa11 	bl	80011b0 <HAL_GetTick>
 8003d8e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d90:	e009      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d92:	f7fd fa0d 	bl	80011b0 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d902      	bls.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	74fb      	strb	r3, [r7, #19]
        break;
 8003da4:	e005      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003da6:	4b30      	ldr	r3, [pc, #192]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0ef      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003db2:	7cfb      	ldrb	r3, [r7, #19]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d159      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003db8:	4b2a      	ldr	r3, [pc, #168]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dc2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d01e      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d019      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dd4:	4b23      	ldr	r3, [pc, #140]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003de0:	4b20      	ldr	r3, [pc, #128]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de6:	4a1f      	ldr	r2, [pc, #124]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003df0:	4b1c      	ldr	r3, [pc, #112]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df6:	4a1b      	ldr	r2, [pc, #108]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e00:	4a18      	ldr	r2, [pc, #96]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d016      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e12:	f7fd f9cd 	bl	80011b0 <HAL_GetTick>
 8003e16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e18:	e00b      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1a:	f7fd f9c9 	bl	80011b0 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d902      	bls.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	74fb      	strb	r3, [r7, #19]
            break;
 8003e30:	e006      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e32:	4b0c      	ldr	r3, [pc, #48]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0ec      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e40:	7cfb      	ldrb	r3, [r7, #19]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10b      	bne.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e46:	4b07      	ldr	r3, [pc, #28]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e54:	4903      	ldr	r1, [pc, #12]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e5c:	e008      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e5e:	7cfb      	ldrb	r3, [r7, #19]
 8003e60:	74bb      	strb	r3, [r7, #18]
 8003e62:	e005      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e64:	40021000 	.word	0x40021000
 8003e68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e6c:	7cfb      	ldrb	r3, [r7, #19]
 8003e6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e70:	7c7b      	ldrb	r3, [r7, #17]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d105      	bne.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e76:	4ba7      	ldr	r3, [pc, #668]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e7a:	4aa6      	ldr	r2, [pc, #664]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e80:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e8e:	4ba1      	ldr	r3, [pc, #644]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e94:	f023 0203 	bic.w	r2, r3, #3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	499d      	ldr	r1, [pc, #628]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003eb0:	4b98      	ldr	r3, [pc, #608]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb6:	f023 020c 	bic.w	r2, r3, #12
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	4995      	ldr	r1, [pc, #596]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ed2:	4b90      	ldr	r3, [pc, #576]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	498c      	ldr	r1, [pc, #560]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ef4:	4b87      	ldr	r3, [pc, #540]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003efa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	4984      	ldr	r1, [pc, #528]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0310 	and.w	r3, r3, #16
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f16:	4b7f      	ldr	r3, [pc, #508]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	497b      	ldr	r1, [pc, #492]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f38:	4b76      	ldr	r3, [pc, #472]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	4973      	ldr	r1, [pc, #460]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f5a:	4b6e      	ldr	r3, [pc, #440]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f60:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	496a      	ldr	r1, [pc, #424]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00a      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f7c:	4b65      	ldr	r3, [pc, #404]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f82:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	4962      	ldr	r1, [pc, #392]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f9e:	4b5d      	ldr	r3, [pc, #372]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fac:	4959      	ldr	r1, [pc, #356]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00a      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fc0:	4b54      	ldr	r3, [pc, #336]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fc6:	f023 0203 	bic.w	r2, r3, #3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fce:	4951      	ldr	r1, [pc, #324]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fe2:	4b4c      	ldr	r3, [pc, #304]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff0:	4948      	ldr	r1, [pc, #288]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004000:	2b00      	cmp	r3, #0
 8004002:	d015      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004004:	4b43      	ldr	r3, [pc, #268]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800400a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004012:	4940      	ldr	r1, [pc, #256]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004022:	d105      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004024:	4b3b      	ldr	r3, [pc, #236]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	4a3a      	ldr	r2, [pc, #232]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800402a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800402e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004038:	2b00      	cmp	r3, #0
 800403a:	d015      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800403c:	4b35      	ldr	r3, [pc, #212]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800403e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004042:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800404a:	4932      	ldr	r1, [pc, #200]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004056:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800405a:	d105      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800405c:	4b2d      	ldr	r3, [pc, #180]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	4a2c      	ldr	r2, [pc, #176]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004062:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004066:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d015      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004074:	4b27      	ldr	r3, [pc, #156]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004082:	4924      	ldr	r1, [pc, #144]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800408e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004092:	d105      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004094:	4b1f      	ldr	r3, [pc, #124]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	4a1e      	ldr	r2, [pc, #120]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800409e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d015      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040ac:	4b19      	ldr	r3, [pc, #100]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ba:	4916      	ldr	r1, [pc, #88]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040ca:	d105      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040cc:	4b11      	ldr	r3, [pc, #68]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	4a10      	ldr	r2, [pc, #64]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d019      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f2:	4908      	ldr	r1, [pc, #32]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004102:	d109      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004104:	4b03      	ldr	r3, [pc, #12]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	4a02      	ldr	r2, [pc, #8]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800410e:	60d3      	str	r3, [r2, #12]
 8004110:	e002      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004112:	bf00      	nop
 8004114:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d015      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004124:	4b29      	ldr	r3, [pc, #164]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004132:	4926      	ldr	r1, [pc, #152]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004142:	d105      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004144:	4b21      	ldr	r3, [pc, #132]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	4a20      	ldr	r2, [pc, #128]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800414a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800414e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d015      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800415c:	4b1b      	ldr	r3, [pc, #108]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800415e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004162:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800416a:	4918      	ldr	r1, [pc, #96]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800417a:	d105      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800417c:	4b13      	ldr	r3, [pc, #76]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	4a12      	ldr	r2, [pc, #72]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004182:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004186:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d015      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004194:	4b0d      	ldr	r3, [pc, #52]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004196:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800419a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041a2:	490a      	ldr	r1, [pc, #40]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041b2:	d105      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041b4:	4b05      	ldr	r3, [pc, #20]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	4a04      	ldr	r2, [pc, #16]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80041c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	40021000 	.word	0x40021000

080041d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e049      	b.n	8004276 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d106      	bne.n	80041fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7fc fe38 	bl	8000e6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3304      	adds	r3, #4
 800420c:	4619      	mov	r1, r3
 800420e:	4610      	mov	r0, r2
 8004210:	f000 fca6 	bl	8004b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
	...

08004280 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b01      	cmp	r3, #1
 8004292:	d001      	beq.n	8004298 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e054      	b.n	8004342 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a26      	ldr	r2, [pc, #152]	@ (8004350 <HAL_TIM_Base_Start_IT+0xd0>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d022      	beq.n	8004300 <HAL_TIM_Base_Start_IT+0x80>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042c2:	d01d      	beq.n	8004300 <HAL_TIM_Base_Start_IT+0x80>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a22      	ldr	r2, [pc, #136]	@ (8004354 <HAL_TIM_Base_Start_IT+0xd4>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d018      	beq.n	8004300 <HAL_TIM_Base_Start_IT+0x80>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a21      	ldr	r2, [pc, #132]	@ (8004358 <HAL_TIM_Base_Start_IT+0xd8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d013      	beq.n	8004300 <HAL_TIM_Base_Start_IT+0x80>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a1f      	ldr	r2, [pc, #124]	@ (800435c <HAL_TIM_Base_Start_IT+0xdc>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d00e      	beq.n	8004300 <HAL_TIM_Base_Start_IT+0x80>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004360 <HAL_TIM_Base_Start_IT+0xe0>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d009      	beq.n	8004300 <HAL_TIM_Base_Start_IT+0x80>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004364 <HAL_TIM_Base_Start_IT+0xe4>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d004      	beq.n	8004300 <HAL_TIM_Base_Start_IT+0x80>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a1b      	ldr	r2, [pc, #108]	@ (8004368 <HAL_TIM_Base_Start_IT+0xe8>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d115      	bne.n	800432c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	4b19      	ldr	r3, [pc, #100]	@ (800436c <HAL_TIM_Base_Start_IT+0xec>)
 8004308:	4013      	ands	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2b06      	cmp	r3, #6
 8004310:	d015      	beq.n	800433e <HAL_TIM_Base_Start_IT+0xbe>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004318:	d011      	beq.n	800433e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f042 0201 	orr.w	r2, r2, #1
 8004328:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432a:	e008      	b.n	800433e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0201 	orr.w	r2, r2, #1
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	e000      	b.n	8004340 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800433e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	40012c00 	.word	0x40012c00
 8004354:	40000400 	.word	0x40000400
 8004358:	40000800 	.word	0x40000800
 800435c:	40000c00 	.word	0x40000c00
 8004360:	40013400 	.word	0x40013400
 8004364:	40014000 	.word	0x40014000
 8004368:	40015000 	.word	0x40015000
 800436c:	00010007 	.word	0x00010007

08004370 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e049      	b.n	8004416 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d106      	bne.n	800439c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f841 	bl	800441e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3304      	adds	r3, #4
 80043ac:	4619      	mov	r1, r3
 80043ae:	4610      	mov	r0, r2
 80043b0:	f000 fbd6 	bl	8004b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b084      	sub	sp, #16
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d020      	beq.n	8004496 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d01b      	beq.n	8004496 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f06f 0202 	mvn.w	r2, #2
 8004466:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	f003 0303 	and.w	r3, r3, #3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 fb51 	bl	8004b24 <HAL_TIM_IC_CaptureCallback>
 8004482:	e005      	b.n	8004490 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 fb43 	bl	8004b10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fb54 	bl	8004b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b00      	cmp	r3, #0
 800449e:	d020      	beq.n	80044e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d01b      	beq.n	80044e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f06f 0204 	mvn.w	r2, #4
 80044b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 fb2b 	bl	8004b24 <HAL_TIM_IC_CaptureCallback>
 80044ce:	e005      	b.n	80044dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 fb1d 	bl	8004b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 fb2e 	bl	8004b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f003 0308 	and.w	r3, r3, #8
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d020      	beq.n	800452e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d01b      	beq.n	800452e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f06f 0208 	mvn.w	r2, #8
 80044fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2204      	movs	r2, #4
 8004504:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	f003 0303 	and.w	r3, r3, #3
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 fb05 	bl	8004b24 <HAL_TIM_IC_CaptureCallback>
 800451a:	e005      	b.n	8004528 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 faf7 	bl	8004b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fb08 	bl	8004b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f003 0310 	and.w	r3, r3, #16
 8004534:	2b00      	cmp	r3, #0
 8004536:	d020      	beq.n	800457a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	2b00      	cmp	r3, #0
 8004540:	d01b      	beq.n	800457a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f06f 0210 	mvn.w	r2, #16
 800454a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2208      	movs	r2, #8
 8004550:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 fadf 	bl	8004b24 <HAL_TIM_IC_CaptureCallback>
 8004566:	e005      	b.n	8004574 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 fad1 	bl	8004b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fae2 	bl	8004b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00c      	beq.n	800459e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d007      	beq.n	800459e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f06f 0201 	mvn.w	r2, #1
 8004596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7fc f96f 	bl	800087c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d104      	bne.n	80045b2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00c      	beq.n	80045cc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d007      	beq.n	80045cc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80045c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f001 fa5e 	bl	8005a88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00c      	beq.n	80045f0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d007      	beq.n	80045f0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80045e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f001 fa56 	bl	8005a9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00c      	beq.n	8004614 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004600:	2b00      	cmp	r3, #0
 8004602:	d007      	beq.n	8004614 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800460c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fa9c 	bl	8004b4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00c      	beq.n	8004638 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f003 0320 	and.w	r3, r3, #32
 8004624:	2b00      	cmp	r3, #0
 8004626:	d007      	beq.n	8004638 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f06f 0220 	mvn.w	r2, #32
 8004630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7fc f90e 	bl	8000854 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00c      	beq.n	800465c <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d007      	beq.n	800465c <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f001 fa2a 	bl	8005ab0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00c      	beq.n	8004680 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d007      	beq.n	8004680 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f001 fa22 	bl	8005ac4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00c      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d007      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800469c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f001 fa1a 	bl	8005ad8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00c      	beq.n	80046c8 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d007      	beq.n	80046c8 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80046c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f001 fa12 	bl	8005aec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046c8:	bf00      	nop
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046dc:	2300      	movs	r3, #0
 80046de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d101      	bne.n	80046ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046ea:	2302      	movs	r3, #2
 80046ec:	e0ff      	b.n	80048ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b14      	cmp	r3, #20
 80046fa:	f200 80f0 	bhi.w	80048de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80046fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004704 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004704:	08004759 	.word	0x08004759
 8004708:	080048df 	.word	0x080048df
 800470c:	080048df 	.word	0x080048df
 8004710:	080048df 	.word	0x080048df
 8004714:	08004799 	.word	0x08004799
 8004718:	080048df 	.word	0x080048df
 800471c:	080048df 	.word	0x080048df
 8004720:	080048df 	.word	0x080048df
 8004724:	080047db 	.word	0x080047db
 8004728:	080048df 	.word	0x080048df
 800472c:	080048df 	.word	0x080048df
 8004730:	080048df 	.word	0x080048df
 8004734:	0800481b 	.word	0x0800481b
 8004738:	080048df 	.word	0x080048df
 800473c:	080048df 	.word	0x080048df
 8004740:	080048df 	.word	0x080048df
 8004744:	0800485d 	.word	0x0800485d
 8004748:	080048df 	.word	0x080048df
 800474c:	080048df 	.word	0x080048df
 8004750:	080048df 	.word	0x080048df
 8004754:	0800489d 	.word	0x0800489d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68b9      	ldr	r1, [r7, #8]
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fab2 	bl	8004cc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699a      	ldr	r2, [r3, #24]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0208 	orr.w	r2, r2, #8
 8004772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699a      	ldr	r2, [r3, #24]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0204 	bic.w	r2, r2, #4
 8004782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6999      	ldr	r1, [r3, #24]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	619a      	str	r2, [r3, #24]
      break;
 8004796:	e0a5      	b.n	80048e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68b9      	ldr	r1, [r7, #8]
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 fb2c 	bl	8004dfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699a      	ldr	r2, [r3, #24]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699a      	ldr	r2, [r3, #24]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6999      	ldr	r1, [r3, #24]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	021a      	lsls	r2, r3, #8
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	619a      	str	r2, [r3, #24]
      break;
 80047d8:	e084      	b.n	80048e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68b9      	ldr	r1, [r7, #8]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 fb9f 	bl	8004f24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69da      	ldr	r2, [r3, #28]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f042 0208 	orr.w	r2, r2, #8
 80047f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0204 	bic.w	r2, r2, #4
 8004804:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69d9      	ldr	r1, [r3, #28]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	61da      	str	r2, [r3, #28]
      break;
 8004818:	e064      	b.n	80048e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68b9      	ldr	r1, [r7, #8]
 8004820:	4618      	mov	r0, r3
 8004822:	f000 fc11 	bl	8005048 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	69da      	ldr	r2, [r3, #28]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004834:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	69da      	ldr	r2, [r3, #28]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004844:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69d9      	ldr	r1, [r3, #28]
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	021a      	lsls	r2, r3, #8
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	61da      	str	r2, [r3, #28]
      break;
 800485a:	e043      	b.n	80048e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68b9      	ldr	r1, [r7, #8]
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fc84 	bl	8005170 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0208 	orr.w	r2, r2, #8
 8004876:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0204 	bic.w	r2, r2, #4
 8004886:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	691a      	ldr	r2, [r3, #16]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800489a:	e023      	b.n	80048e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68b9      	ldr	r1, [r7, #8]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fcce 	bl	8005244 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048c6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	021a      	lsls	r2, r3, #8
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80048dc:	e002      	b.n	80048e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	75fb      	strb	r3, [r7, #23]
      break;
 80048e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop

080048f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800490c:	2b01      	cmp	r3, #1
 800490e:	d101      	bne.n	8004914 <HAL_TIM_ConfigClockSource+0x1c>
 8004910:	2302      	movs	r3, #2
 8004912:	e0ee      	b.n	8004af2 <HAL_TIM_ConfigClockSource+0x1fa>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004932:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800493e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a6b      	ldr	r2, [pc, #428]	@ (8004afc <HAL_TIM_ConfigClockSource+0x204>)
 800494e:	4293      	cmp	r3, r2
 8004950:	f000 80b9 	beq.w	8004ac6 <HAL_TIM_ConfigClockSource+0x1ce>
 8004954:	4a69      	ldr	r2, [pc, #420]	@ (8004afc <HAL_TIM_ConfigClockSource+0x204>)
 8004956:	4293      	cmp	r3, r2
 8004958:	f200 80be 	bhi.w	8004ad8 <HAL_TIM_ConfigClockSource+0x1e0>
 800495c:	4a68      	ldr	r2, [pc, #416]	@ (8004b00 <HAL_TIM_ConfigClockSource+0x208>)
 800495e:	4293      	cmp	r3, r2
 8004960:	f000 80b1 	beq.w	8004ac6 <HAL_TIM_ConfigClockSource+0x1ce>
 8004964:	4a66      	ldr	r2, [pc, #408]	@ (8004b00 <HAL_TIM_ConfigClockSource+0x208>)
 8004966:	4293      	cmp	r3, r2
 8004968:	f200 80b6 	bhi.w	8004ad8 <HAL_TIM_ConfigClockSource+0x1e0>
 800496c:	4a65      	ldr	r2, [pc, #404]	@ (8004b04 <HAL_TIM_ConfigClockSource+0x20c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	f000 80a9 	beq.w	8004ac6 <HAL_TIM_ConfigClockSource+0x1ce>
 8004974:	4a63      	ldr	r2, [pc, #396]	@ (8004b04 <HAL_TIM_ConfigClockSource+0x20c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	f200 80ae 	bhi.w	8004ad8 <HAL_TIM_ConfigClockSource+0x1e0>
 800497c:	4a62      	ldr	r2, [pc, #392]	@ (8004b08 <HAL_TIM_ConfigClockSource+0x210>)
 800497e:	4293      	cmp	r3, r2
 8004980:	f000 80a1 	beq.w	8004ac6 <HAL_TIM_ConfigClockSource+0x1ce>
 8004984:	4a60      	ldr	r2, [pc, #384]	@ (8004b08 <HAL_TIM_ConfigClockSource+0x210>)
 8004986:	4293      	cmp	r3, r2
 8004988:	f200 80a6 	bhi.w	8004ad8 <HAL_TIM_ConfigClockSource+0x1e0>
 800498c:	4a5f      	ldr	r2, [pc, #380]	@ (8004b0c <HAL_TIM_ConfigClockSource+0x214>)
 800498e:	4293      	cmp	r3, r2
 8004990:	f000 8099 	beq.w	8004ac6 <HAL_TIM_ConfigClockSource+0x1ce>
 8004994:	4a5d      	ldr	r2, [pc, #372]	@ (8004b0c <HAL_TIM_ConfigClockSource+0x214>)
 8004996:	4293      	cmp	r3, r2
 8004998:	f200 809e 	bhi.w	8004ad8 <HAL_TIM_ConfigClockSource+0x1e0>
 800499c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80049a0:	f000 8091 	beq.w	8004ac6 <HAL_TIM_ConfigClockSource+0x1ce>
 80049a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80049a8:	f200 8096 	bhi.w	8004ad8 <HAL_TIM_ConfigClockSource+0x1e0>
 80049ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049b0:	f000 8089 	beq.w	8004ac6 <HAL_TIM_ConfigClockSource+0x1ce>
 80049b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049b8:	f200 808e 	bhi.w	8004ad8 <HAL_TIM_ConfigClockSource+0x1e0>
 80049bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049c0:	d03e      	beq.n	8004a40 <HAL_TIM_ConfigClockSource+0x148>
 80049c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049c6:	f200 8087 	bhi.w	8004ad8 <HAL_TIM_ConfigClockSource+0x1e0>
 80049ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049ce:	f000 8086 	beq.w	8004ade <HAL_TIM_ConfigClockSource+0x1e6>
 80049d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049d6:	d87f      	bhi.n	8004ad8 <HAL_TIM_ConfigClockSource+0x1e0>
 80049d8:	2b70      	cmp	r3, #112	@ 0x70
 80049da:	d01a      	beq.n	8004a12 <HAL_TIM_ConfigClockSource+0x11a>
 80049dc:	2b70      	cmp	r3, #112	@ 0x70
 80049de:	d87b      	bhi.n	8004ad8 <HAL_TIM_ConfigClockSource+0x1e0>
 80049e0:	2b60      	cmp	r3, #96	@ 0x60
 80049e2:	d050      	beq.n	8004a86 <HAL_TIM_ConfigClockSource+0x18e>
 80049e4:	2b60      	cmp	r3, #96	@ 0x60
 80049e6:	d877      	bhi.n	8004ad8 <HAL_TIM_ConfigClockSource+0x1e0>
 80049e8:	2b50      	cmp	r3, #80	@ 0x50
 80049ea:	d03c      	beq.n	8004a66 <HAL_TIM_ConfigClockSource+0x16e>
 80049ec:	2b50      	cmp	r3, #80	@ 0x50
 80049ee:	d873      	bhi.n	8004ad8 <HAL_TIM_ConfigClockSource+0x1e0>
 80049f0:	2b40      	cmp	r3, #64	@ 0x40
 80049f2:	d058      	beq.n	8004aa6 <HAL_TIM_ConfigClockSource+0x1ae>
 80049f4:	2b40      	cmp	r3, #64	@ 0x40
 80049f6:	d86f      	bhi.n	8004ad8 <HAL_TIM_ConfigClockSource+0x1e0>
 80049f8:	2b30      	cmp	r3, #48	@ 0x30
 80049fa:	d064      	beq.n	8004ac6 <HAL_TIM_ConfigClockSource+0x1ce>
 80049fc:	2b30      	cmp	r3, #48	@ 0x30
 80049fe:	d86b      	bhi.n	8004ad8 <HAL_TIM_ConfigClockSource+0x1e0>
 8004a00:	2b20      	cmp	r3, #32
 8004a02:	d060      	beq.n	8004ac6 <HAL_TIM_ConfigClockSource+0x1ce>
 8004a04:	2b20      	cmp	r3, #32
 8004a06:	d867      	bhi.n	8004ad8 <HAL_TIM_ConfigClockSource+0x1e0>
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d05c      	beq.n	8004ac6 <HAL_TIM_ConfigClockSource+0x1ce>
 8004a0c:	2b10      	cmp	r3, #16
 8004a0e:	d05a      	beq.n	8004ac6 <HAL_TIM_ConfigClockSource+0x1ce>
 8004a10:	e062      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a22:	f000 fd6b 	bl	80054fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	609a      	str	r2, [r3, #8]
      break;
 8004a3e:	e04f      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a50:	f000 fd54 	bl	80054fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689a      	ldr	r2, [r3, #8]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a62:	609a      	str	r2, [r3, #8]
      break;
 8004a64:	e03c      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a72:	461a      	mov	r2, r3
 8004a74:	f000 fcc6 	bl	8005404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2150      	movs	r1, #80	@ 0x50
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 fd1f 	bl	80054c2 <TIM_ITRx_SetConfig>
      break;
 8004a84:	e02c      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a92:	461a      	mov	r2, r3
 8004a94:	f000 fce5 	bl	8005462 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2160      	movs	r1, #96	@ 0x60
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fd0f 	bl	80054c2 <TIM_ITRx_SetConfig>
      break;
 8004aa4:	e01c      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	f000 fca6 	bl	8005404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2140      	movs	r1, #64	@ 0x40
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 fcff 	bl	80054c2 <TIM_ITRx_SetConfig>
      break;
 8004ac4:	e00c      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	f000 fcf6 	bl	80054c2 <TIM_ITRx_SetConfig>
      break;
 8004ad6:	e003      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	73fb      	strb	r3, [r7, #15]
      break;
 8004adc:	e000      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8004ade:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	00100070 	.word	0x00100070
 8004b00:	00100050 	.word	0x00100050
 8004b04:	00100040 	.word	0x00100040
 8004b08:	00100030 	.word	0x00100030
 8004b0c:	00100020 	.word	0x00100020

08004b10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a4c      	ldr	r2, [pc, #304]	@ (8004ca4 <TIM_Base_SetConfig+0x144>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d017      	beq.n	8004ba8 <TIM_Base_SetConfig+0x48>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b7e:	d013      	beq.n	8004ba8 <TIM_Base_SetConfig+0x48>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a49      	ldr	r2, [pc, #292]	@ (8004ca8 <TIM_Base_SetConfig+0x148>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00f      	beq.n	8004ba8 <TIM_Base_SetConfig+0x48>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a48      	ldr	r2, [pc, #288]	@ (8004cac <TIM_Base_SetConfig+0x14c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00b      	beq.n	8004ba8 <TIM_Base_SetConfig+0x48>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a47      	ldr	r2, [pc, #284]	@ (8004cb0 <TIM_Base_SetConfig+0x150>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d007      	beq.n	8004ba8 <TIM_Base_SetConfig+0x48>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a46      	ldr	r2, [pc, #280]	@ (8004cb4 <TIM_Base_SetConfig+0x154>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d003      	beq.n	8004ba8 <TIM_Base_SetConfig+0x48>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a45      	ldr	r2, [pc, #276]	@ (8004cb8 <TIM_Base_SetConfig+0x158>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d108      	bne.n	8004bba <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a39      	ldr	r2, [pc, #228]	@ (8004ca4 <TIM_Base_SetConfig+0x144>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d023      	beq.n	8004c0a <TIM_Base_SetConfig+0xaa>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bc8:	d01f      	beq.n	8004c0a <TIM_Base_SetConfig+0xaa>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a36      	ldr	r2, [pc, #216]	@ (8004ca8 <TIM_Base_SetConfig+0x148>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d01b      	beq.n	8004c0a <TIM_Base_SetConfig+0xaa>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a35      	ldr	r2, [pc, #212]	@ (8004cac <TIM_Base_SetConfig+0x14c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d017      	beq.n	8004c0a <TIM_Base_SetConfig+0xaa>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a34      	ldr	r2, [pc, #208]	@ (8004cb0 <TIM_Base_SetConfig+0x150>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d013      	beq.n	8004c0a <TIM_Base_SetConfig+0xaa>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a33      	ldr	r2, [pc, #204]	@ (8004cb4 <TIM_Base_SetConfig+0x154>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00f      	beq.n	8004c0a <TIM_Base_SetConfig+0xaa>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a33      	ldr	r2, [pc, #204]	@ (8004cbc <TIM_Base_SetConfig+0x15c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00b      	beq.n	8004c0a <TIM_Base_SetConfig+0xaa>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a32      	ldr	r2, [pc, #200]	@ (8004cc0 <TIM_Base_SetConfig+0x160>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d007      	beq.n	8004c0a <TIM_Base_SetConfig+0xaa>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a31      	ldr	r2, [pc, #196]	@ (8004cc4 <TIM_Base_SetConfig+0x164>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d003      	beq.n	8004c0a <TIM_Base_SetConfig+0xaa>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a2c      	ldr	r2, [pc, #176]	@ (8004cb8 <TIM_Base_SetConfig+0x158>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d108      	bne.n	8004c1c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a18      	ldr	r2, [pc, #96]	@ (8004ca4 <TIM_Base_SetConfig+0x144>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d013      	beq.n	8004c70 <TIM_Base_SetConfig+0x110>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a1a      	ldr	r2, [pc, #104]	@ (8004cb4 <TIM_Base_SetConfig+0x154>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d00f      	beq.n	8004c70 <TIM_Base_SetConfig+0x110>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a1a      	ldr	r2, [pc, #104]	@ (8004cbc <TIM_Base_SetConfig+0x15c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d00b      	beq.n	8004c70 <TIM_Base_SetConfig+0x110>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a19      	ldr	r2, [pc, #100]	@ (8004cc0 <TIM_Base_SetConfig+0x160>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d007      	beq.n	8004c70 <TIM_Base_SetConfig+0x110>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a18      	ldr	r2, [pc, #96]	@ (8004cc4 <TIM_Base_SetConfig+0x164>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d003      	beq.n	8004c70 <TIM_Base_SetConfig+0x110>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a13      	ldr	r2, [pc, #76]	@ (8004cb8 <TIM_Base_SetConfig+0x158>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d103      	bne.n	8004c78 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	691a      	ldr	r2, [r3, #16]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d105      	bne.n	8004c96 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	f023 0201 	bic.w	r2, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	611a      	str	r2, [r3, #16]
  }
}
 8004c96:	bf00      	nop
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40012c00 	.word	0x40012c00
 8004ca8:	40000400 	.word	0x40000400
 8004cac:	40000800 	.word	0x40000800
 8004cb0:	40000c00 	.word	0x40000c00
 8004cb4:	40013400 	.word	0x40013400
 8004cb8:	40015000 	.word	0x40015000
 8004cbc:	40014000 	.word	0x40014000
 8004cc0:	40014400 	.word	0x40014400
 8004cc4:	40014800 	.word	0x40014800

08004cc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	f023 0201 	bic.w	r2, r3, #1
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0303 	bic.w	r3, r3, #3
 8004d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f023 0302 	bic.w	r3, r3, #2
 8004d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a30      	ldr	r2, [pc, #192]	@ (8004de4 <TIM_OC1_SetConfig+0x11c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d013      	beq.n	8004d50 <TIM_OC1_SetConfig+0x88>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a2f      	ldr	r2, [pc, #188]	@ (8004de8 <TIM_OC1_SetConfig+0x120>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d00f      	beq.n	8004d50 <TIM_OC1_SetConfig+0x88>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a2e      	ldr	r2, [pc, #184]	@ (8004dec <TIM_OC1_SetConfig+0x124>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00b      	beq.n	8004d50 <TIM_OC1_SetConfig+0x88>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a2d      	ldr	r2, [pc, #180]	@ (8004df0 <TIM_OC1_SetConfig+0x128>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d007      	beq.n	8004d50 <TIM_OC1_SetConfig+0x88>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a2c      	ldr	r2, [pc, #176]	@ (8004df4 <TIM_OC1_SetConfig+0x12c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d003      	beq.n	8004d50 <TIM_OC1_SetConfig+0x88>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a2b      	ldr	r2, [pc, #172]	@ (8004df8 <TIM_OC1_SetConfig+0x130>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d10c      	bne.n	8004d6a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f023 0308 	bic.w	r3, r3, #8
 8004d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f023 0304 	bic.w	r3, r3, #4
 8004d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8004de4 <TIM_OC1_SetConfig+0x11c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d013      	beq.n	8004d9a <TIM_OC1_SetConfig+0xd2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a1c      	ldr	r2, [pc, #112]	@ (8004de8 <TIM_OC1_SetConfig+0x120>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d00f      	beq.n	8004d9a <TIM_OC1_SetConfig+0xd2>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8004dec <TIM_OC1_SetConfig+0x124>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d00b      	beq.n	8004d9a <TIM_OC1_SetConfig+0xd2>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a1a      	ldr	r2, [pc, #104]	@ (8004df0 <TIM_OC1_SetConfig+0x128>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d007      	beq.n	8004d9a <TIM_OC1_SetConfig+0xd2>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a19      	ldr	r2, [pc, #100]	@ (8004df4 <TIM_OC1_SetConfig+0x12c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d003      	beq.n	8004d9a <TIM_OC1_SetConfig+0xd2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a18      	ldr	r2, [pc, #96]	@ (8004df8 <TIM_OC1_SetConfig+0x130>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d111      	bne.n	8004dbe <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	621a      	str	r2, [r3, #32]
}
 8004dd8:	bf00      	nop
 8004dda:	371c      	adds	r7, #28
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr
 8004de4:	40012c00 	.word	0x40012c00
 8004de8:	40013400 	.word	0x40013400
 8004dec:	40014000 	.word	0x40014000
 8004df0:	40014400 	.word	0x40014400
 8004df4:	40014800 	.word	0x40014800
 8004df8:	40015000 	.word	0x40015000

08004dfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	f023 0210 	bic.w	r2, r3, #16
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	021b      	lsls	r3, r3, #8
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f023 0320 	bic.w	r3, r3, #32
 8004e4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	011b      	lsls	r3, r3, #4
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a2c      	ldr	r2, [pc, #176]	@ (8004f0c <TIM_OC2_SetConfig+0x110>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d007      	beq.n	8004e70 <TIM_OC2_SetConfig+0x74>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a2b      	ldr	r2, [pc, #172]	@ (8004f10 <TIM_OC2_SetConfig+0x114>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d003      	beq.n	8004e70 <TIM_OC2_SetConfig+0x74>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a2a      	ldr	r2, [pc, #168]	@ (8004f14 <TIM_OC2_SetConfig+0x118>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d10d      	bne.n	8004e8c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a1f      	ldr	r2, [pc, #124]	@ (8004f0c <TIM_OC2_SetConfig+0x110>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d013      	beq.n	8004ebc <TIM_OC2_SetConfig+0xc0>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a1e      	ldr	r2, [pc, #120]	@ (8004f10 <TIM_OC2_SetConfig+0x114>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00f      	beq.n	8004ebc <TIM_OC2_SetConfig+0xc0>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a1e      	ldr	r2, [pc, #120]	@ (8004f18 <TIM_OC2_SetConfig+0x11c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00b      	beq.n	8004ebc <TIM_OC2_SetConfig+0xc0>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a1d      	ldr	r2, [pc, #116]	@ (8004f1c <TIM_OC2_SetConfig+0x120>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d007      	beq.n	8004ebc <TIM_OC2_SetConfig+0xc0>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a1c      	ldr	r2, [pc, #112]	@ (8004f20 <TIM_OC2_SetConfig+0x124>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d003      	beq.n	8004ebc <TIM_OC2_SetConfig+0xc0>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a17      	ldr	r2, [pc, #92]	@ (8004f14 <TIM_OC2_SetConfig+0x118>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d113      	bne.n	8004ee4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ec2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004eca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	621a      	str	r2, [r3, #32]
}
 8004efe:	bf00      	nop
 8004f00:	371c      	adds	r7, #28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40012c00 	.word	0x40012c00
 8004f10:	40013400 	.word	0x40013400
 8004f14:	40015000 	.word	0x40015000
 8004f18:	40014000 	.word	0x40014000
 8004f1c:	40014400 	.word	0x40014400
 8004f20:	40014800 	.word	0x40014800

08004f24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0303 	bic.w	r3, r3, #3
 8004f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	021b      	lsls	r3, r3, #8
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a2b      	ldr	r2, [pc, #172]	@ (8005030 <TIM_OC3_SetConfig+0x10c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d007      	beq.n	8004f96 <TIM_OC3_SetConfig+0x72>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a2a      	ldr	r2, [pc, #168]	@ (8005034 <TIM_OC3_SetConfig+0x110>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d003      	beq.n	8004f96 <TIM_OC3_SetConfig+0x72>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a29      	ldr	r2, [pc, #164]	@ (8005038 <TIM_OC3_SetConfig+0x114>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d10d      	bne.n	8004fb2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	021b      	lsls	r3, r3, #8
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a1e      	ldr	r2, [pc, #120]	@ (8005030 <TIM_OC3_SetConfig+0x10c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d013      	beq.n	8004fe2 <TIM_OC3_SetConfig+0xbe>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8005034 <TIM_OC3_SetConfig+0x110>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d00f      	beq.n	8004fe2 <TIM_OC3_SetConfig+0xbe>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800503c <TIM_OC3_SetConfig+0x118>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d00b      	beq.n	8004fe2 <TIM_OC3_SetConfig+0xbe>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8005040 <TIM_OC3_SetConfig+0x11c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d007      	beq.n	8004fe2 <TIM_OC3_SetConfig+0xbe>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8005044 <TIM_OC3_SetConfig+0x120>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d003      	beq.n	8004fe2 <TIM_OC3_SetConfig+0xbe>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a16      	ldr	r2, [pc, #88]	@ (8005038 <TIM_OC3_SetConfig+0x114>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d113      	bne.n	800500a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fe8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	4313      	orrs	r3, r2
 8005008:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	621a      	str	r2, [r3, #32]
}
 8005024:	bf00      	nop
 8005026:	371c      	adds	r7, #28
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	40012c00 	.word	0x40012c00
 8005034:	40013400 	.word	0x40013400
 8005038:	40015000 	.word	0x40015000
 800503c:	40014000 	.word	0x40014000
 8005040:	40014400 	.word	0x40014400
 8005044:	40014800 	.word	0x40014800

08005048 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005076:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800507a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	021b      	lsls	r3, r3, #8
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	4313      	orrs	r3, r2
 800508e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005096:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	031b      	lsls	r3, r3, #12
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a2c      	ldr	r2, [pc, #176]	@ (8005158 <TIM_OC4_SetConfig+0x110>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d007      	beq.n	80050bc <TIM_OC4_SetConfig+0x74>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a2b      	ldr	r2, [pc, #172]	@ (800515c <TIM_OC4_SetConfig+0x114>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d003      	beq.n	80050bc <TIM_OC4_SetConfig+0x74>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a2a      	ldr	r2, [pc, #168]	@ (8005160 <TIM_OC4_SetConfig+0x118>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d10d      	bne.n	80050d8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80050c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	031b      	lsls	r3, r3, #12
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a1f      	ldr	r2, [pc, #124]	@ (8005158 <TIM_OC4_SetConfig+0x110>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d013      	beq.n	8005108 <TIM_OC4_SetConfig+0xc0>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a1e      	ldr	r2, [pc, #120]	@ (800515c <TIM_OC4_SetConfig+0x114>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d00f      	beq.n	8005108 <TIM_OC4_SetConfig+0xc0>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005164 <TIM_OC4_SetConfig+0x11c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d00b      	beq.n	8005108 <TIM_OC4_SetConfig+0xc0>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a1d      	ldr	r2, [pc, #116]	@ (8005168 <TIM_OC4_SetConfig+0x120>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d007      	beq.n	8005108 <TIM_OC4_SetConfig+0xc0>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a1c      	ldr	r2, [pc, #112]	@ (800516c <TIM_OC4_SetConfig+0x124>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d003      	beq.n	8005108 <TIM_OC4_SetConfig+0xc0>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a17      	ldr	r2, [pc, #92]	@ (8005160 <TIM_OC4_SetConfig+0x118>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d113      	bne.n	8005130 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800510e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005116:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	019b      	lsls	r3, r3, #6
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	4313      	orrs	r3, r2
 8005122:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	019b      	lsls	r3, r3, #6
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	621a      	str	r2, [r3, #32]
}
 800514a:	bf00      	nop
 800514c:	371c      	adds	r7, #28
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	40012c00 	.word	0x40012c00
 800515c:	40013400 	.word	0x40013400
 8005160:	40015000 	.word	0x40015000
 8005164:	40014000 	.word	0x40014000
 8005168:	40014400 	.word	0x40014400
 800516c:	40014800 	.word	0x40014800

08005170 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800519e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80051b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	041b      	lsls	r3, r3, #16
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	4313      	orrs	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a19      	ldr	r2, [pc, #100]	@ (800522c <TIM_OC5_SetConfig+0xbc>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d013      	beq.n	80051f2 <TIM_OC5_SetConfig+0x82>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a18      	ldr	r2, [pc, #96]	@ (8005230 <TIM_OC5_SetConfig+0xc0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d00f      	beq.n	80051f2 <TIM_OC5_SetConfig+0x82>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a17      	ldr	r2, [pc, #92]	@ (8005234 <TIM_OC5_SetConfig+0xc4>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00b      	beq.n	80051f2 <TIM_OC5_SetConfig+0x82>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a16      	ldr	r2, [pc, #88]	@ (8005238 <TIM_OC5_SetConfig+0xc8>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d007      	beq.n	80051f2 <TIM_OC5_SetConfig+0x82>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a15      	ldr	r2, [pc, #84]	@ (800523c <TIM_OC5_SetConfig+0xcc>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d003      	beq.n	80051f2 <TIM_OC5_SetConfig+0x82>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a14      	ldr	r2, [pc, #80]	@ (8005240 <TIM_OC5_SetConfig+0xd0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d109      	bne.n	8005206 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	021b      	lsls	r3, r3, #8
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	4313      	orrs	r3, r2
 8005204:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	621a      	str	r2, [r3, #32]
}
 8005220:	bf00      	nop
 8005222:	371c      	adds	r7, #28
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	40012c00 	.word	0x40012c00
 8005230:	40013400 	.word	0x40013400
 8005234:	40014000 	.word	0x40014000
 8005238:	40014400 	.word	0x40014400
 800523c:	40014800 	.word	0x40014800
 8005240:	40015000 	.word	0x40015000

08005244 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800526a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005272:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	021b      	lsls	r3, r3, #8
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	4313      	orrs	r3, r2
 8005282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800528a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	051b      	lsls	r3, r3, #20
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a1a      	ldr	r2, [pc, #104]	@ (8005304 <TIM_OC6_SetConfig+0xc0>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d013      	beq.n	80052c8 <TIM_OC6_SetConfig+0x84>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a19      	ldr	r2, [pc, #100]	@ (8005308 <TIM_OC6_SetConfig+0xc4>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d00f      	beq.n	80052c8 <TIM_OC6_SetConfig+0x84>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a18      	ldr	r2, [pc, #96]	@ (800530c <TIM_OC6_SetConfig+0xc8>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00b      	beq.n	80052c8 <TIM_OC6_SetConfig+0x84>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a17      	ldr	r2, [pc, #92]	@ (8005310 <TIM_OC6_SetConfig+0xcc>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d007      	beq.n	80052c8 <TIM_OC6_SetConfig+0x84>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a16      	ldr	r2, [pc, #88]	@ (8005314 <TIM_OC6_SetConfig+0xd0>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d003      	beq.n	80052c8 <TIM_OC6_SetConfig+0x84>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a15      	ldr	r2, [pc, #84]	@ (8005318 <TIM_OC6_SetConfig+0xd4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d109      	bne.n	80052dc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	029b      	lsls	r3, r3, #10
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	4313      	orrs	r3, r2
 80052da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	621a      	str	r2, [r3, #32]
}
 80052f6:	bf00      	nop
 80052f8:	371c      	adds	r7, #28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	40012c00 	.word	0x40012c00
 8005308:	40013400 	.word	0x40013400
 800530c:	40014000 	.word	0x40014000
 8005310:	40014400 	.word	0x40014400
 8005314:	40014800 	.word	0x40014800
 8005318:	40015000 	.word	0x40015000

0800531c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
 8005328:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	f023 0201 	bic.w	r2, r3, #1
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4a28      	ldr	r2, [pc, #160]	@ (80053e8 <TIM_TI1_SetConfig+0xcc>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d01b      	beq.n	8005382 <TIM_TI1_SetConfig+0x66>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005350:	d017      	beq.n	8005382 <TIM_TI1_SetConfig+0x66>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4a25      	ldr	r2, [pc, #148]	@ (80053ec <TIM_TI1_SetConfig+0xd0>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d013      	beq.n	8005382 <TIM_TI1_SetConfig+0x66>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	4a24      	ldr	r2, [pc, #144]	@ (80053f0 <TIM_TI1_SetConfig+0xd4>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00f      	beq.n	8005382 <TIM_TI1_SetConfig+0x66>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	4a23      	ldr	r2, [pc, #140]	@ (80053f4 <TIM_TI1_SetConfig+0xd8>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d00b      	beq.n	8005382 <TIM_TI1_SetConfig+0x66>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4a22      	ldr	r2, [pc, #136]	@ (80053f8 <TIM_TI1_SetConfig+0xdc>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d007      	beq.n	8005382 <TIM_TI1_SetConfig+0x66>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4a21      	ldr	r2, [pc, #132]	@ (80053fc <TIM_TI1_SetConfig+0xe0>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d003      	beq.n	8005382 <TIM_TI1_SetConfig+0x66>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	4a20      	ldr	r2, [pc, #128]	@ (8005400 <TIM_TI1_SetConfig+0xe4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d101      	bne.n	8005386 <TIM_TI1_SetConfig+0x6a>
 8005382:	2301      	movs	r3, #1
 8005384:	e000      	b.n	8005388 <TIM_TI1_SetConfig+0x6c>
 8005386:	2300      	movs	r3, #0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d008      	beq.n	800539e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f023 0303 	bic.w	r3, r3, #3
 8005392:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4313      	orrs	r3, r2
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	e003      	b.n	80053a6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f043 0301 	orr.w	r3, r3, #1
 80053a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f023 030a 	bic.w	r3, r3, #10
 80053c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f003 030a 	and.w	r3, r3, #10
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	621a      	str	r2, [r3, #32]
}
 80053da:	bf00      	nop
 80053dc:	371c      	adds	r7, #28
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	40012c00 	.word	0x40012c00
 80053ec:	40000400 	.word	0x40000400
 80053f0:	40000800 	.word	0x40000800
 80053f4:	40000c00 	.word	0x40000c00
 80053f8:	40013400 	.word	0x40013400
 80053fc:	40014000 	.word	0x40014000
 8005400:	40015000 	.word	0x40015000

08005404 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005404:	b480      	push	{r7}
 8005406:	b087      	sub	sp, #28
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	f023 0201 	bic.w	r2, r3, #1
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800542e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	011b      	lsls	r3, r3, #4
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	4313      	orrs	r3, r2
 8005438:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f023 030a 	bic.w	r3, r3, #10
 8005440:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4313      	orrs	r3, r2
 8005448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	621a      	str	r2, [r3, #32]
}
 8005456:	bf00      	nop
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005462:	b480      	push	{r7}
 8005464:	b087      	sub	sp, #28
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	f023 0210 	bic.w	r2, r3, #16
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800548c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	031b      	lsls	r3, r3, #12
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800549e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	621a      	str	r2, [r3, #32]
}
 80054b6:	bf00      	nop
 80054b8:	371c      	adds	r7, #28
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b085      	sub	sp, #20
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80054d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	f043 0307 	orr.w	r3, r3, #7
 80054e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	609a      	str	r2, [r3, #8]
}
 80054f0:	bf00      	nop
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
 8005508:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005516:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	021a      	lsls	r2, r3, #8
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	431a      	orrs	r2, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	4313      	orrs	r3, r2
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	4313      	orrs	r3, r2
 8005528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	609a      	str	r2, [r3, #8]
}
 8005530:	bf00      	nop
 8005532:	371c      	adds	r7, #28
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f003 031f 	and.w	r3, r3, #31
 800554e:	2201      	movs	r2, #1
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a1a      	ldr	r2, [r3, #32]
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	43db      	mvns	r3, r3
 800555e:	401a      	ands	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a1a      	ldr	r2, [r3, #32]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f003 031f 	and.w	r3, r3, #31
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	fa01 f303 	lsl.w	r3, r1, r3
 8005574:	431a      	orrs	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	621a      	str	r2, [r3, #32]
}
 800557a:	bf00      	nop
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b08a      	sub	sp, #40	@ 0x28
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e0a0      	b.n	80056dc <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f898 	bl	80056e4 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	3304      	adds	r3, #4
 80055c4:	4619      	mov	r1, r3
 80055c6:	4610      	mov	r0, r2
 80055c8:	f7ff faca 	bl	8004b60 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6818      	ldr	r0, [r3, #0]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	6819      	ldr	r1, [r3, #0]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	2203      	movs	r2, #3
 80055da:	f7ff fe9f 	bl	800531c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	699a      	ldr	r2, [r3, #24]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 020c 	bic.w	r2, r2, #12
 80055ec:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6999      	ldr	r1, [r3, #24]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800560e:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	6812      	ldr	r2, [r2, #0]
 800561a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800561e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005622:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689a      	ldr	r2, [r3, #8]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005632:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	6812      	ldr	r2, [r2, #0]
 800563e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005642:	f023 0307 	bic.w	r3, r3, #7
 8005646:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689a      	ldr	r2, [r3, #8]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f042 0204 	orr.w	r2, r2, #4
 8005656:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005658:	2300      	movs	r3, #0
 800565a:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800565c:	2300      	movs	r3, #0
 800565e:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005660:	2370      	movs	r3, #112	@ 0x70
 8005662:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005664:	2300      	movs	r3, #0
 8005666:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005668:	2300      	movs	r3, #0
 800566a:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800566c:	2300      	movs	r3, #0
 800566e:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f107 020c 	add.w	r2, r7, #12
 800567e:	4611      	mov	r1, r2
 8005680:	4618      	mov	r0, r3
 8005682:	f7ff fbbb 	bl	8004dfc <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6812      	ldr	r2, [r2, #0]
 8005690:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005694:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005698:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 80056a8:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3728      	adds	r7, #40	@ 0x28
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005706:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800570e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005716:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800571e:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005720:	7bfb      	ldrb	r3, [r7, #15]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d108      	bne.n	8005738 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005726:	7bbb      	ldrb	r3, [r7, #14]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d105      	bne.n	8005738 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800572c:	7b7b      	ldrb	r3, [r7, #13]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d102      	bne.n	8005738 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005732:	7b3b      	ldrb	r3, [r7, #12]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d001      	beq.n	800573c <HAL_TIMEx_HallSensor_Start_IT+0x44>
  {
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e067      	b.n	800580c <HAL_TIMEx_HallSensor_Start_IT+0x114>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2202      	movs	r2, #2
 8005758:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 0202 	orr.w	r2, r2, #2
 800576a:	60da      	str	r2, [r3, #12]

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2201      	movs	r2, #1
 8005772:	2100      	movs	r1, #0
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff fee1 	bl	800553c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a25      	ldr	r2, [pc, #148]	@ (8005814 <HAL_TIMEx_HallSensor_Start_IT+0x11c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d022      	beq.n	80057ca <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800578c:	d01d      	beq.n	80057ca <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a21      	ldr	r2, [pc, #132]	@ (8005818 <HAL_TIMEx_HallSensor_Start_IT+0x120>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d018      	beq.n	80057ca <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a1f      	ldr	r2, [pc, #124]	@ (800581c <HAL_TIMEx_HallSensor_Start_IT+0x124>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d013      	beq.n	80057ca <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005820 <HAL_TIMEx_HallSensor_Start_IT+0x128>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d00e      	beq.n	80057ca <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005824 <HAL_TIMEx_HallSensor_Start_IT+0x12c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d009      	beq.n	80057ca <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005828 <HAL_TIMEx_HallSensor_Start_IT+0x130>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d004      	beq.n	80057ca <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a19      	ldr	r2, [pc, #100]	@ (800582c <HAL_TIMEx_HallSensor_Start_IT+0x134>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d115      	bne.n	80057f6 <HAL_TIMEx_HallSensor_Start_IT+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	4b17      	ldr	r3, [pc, #92]	@ (8005830 <HAL_TIMEx_HallSensor_Start_IT+0x138>)
 80057d2:	4013      	ands	r3, r2
 80057d4:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2b06      	cmp	r3, #6
 80057da:	d015      	beq.n	8005808 <HAL_TIMEx_HallSensor_Start_IT+0x110>
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057e2:	d011      	beq.n	8005808 <HAL_TIMEx_HallSensor_Start_IT+0x110>
    {
      __HAL_TIM_ENABLE(htim);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 0201 	orr.w	r2, r2, #1
 80057f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f4:	e008      	b.n	8005808 <HAL_TIMEx_HallSensor_Start_IT+0x110>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f042 0201 	orr.w	r2, r2, #1
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	e000      	b.n	800580a <HAL_TIMEx_HallSensor_Start_IT+0x112>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005808:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40012c00 	.word	0x40012c00
 8005818:	40000400 	.word	0x40000400
 800581c:	40000800 	.word	0x40000800
 8005820:	40000c00 	.word	0x40000c00
 8005824:	40013400 	.word	0x40013400
 8005828:	40014000 	.word	0x40014000
 800582c:	40015000 	.word	0x40015000
 8005830:	00010007 	.word	0x00010007

08005834 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005848:	2302      	movs	r3, #2
 800584a:	e074      	b.n	8005936 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a34      	ldr	r2, [pc, #208]	@ (8005944 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d009      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a33      	ldr	r2, [pc, #204]	@ (8005948 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d004      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a31      	ldr	r2, [pc, #196]	@ (800594c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d108      	bne.n	800589c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005890:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	4313      	orrs	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80058a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a21      	ldr	r2, [pc, #132]	@ (8005944 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d022      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058cc:	d01d      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a1f      	ldr	r2, [pc, #124]	@ (8005950 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d018      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005954 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d013      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005958 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d00e      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a15      	ldr	r2, [pc, #84]	@ (8005948 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d009      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a18      	ldr	r2, [pc, #96]	@ (800595c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d004      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a11      	ldr	r2, [pc, #68]	@ (800594c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d10c      	bne.n	8005924 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005910:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	4313      	orrs	r3, r2
 800591a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	40012c00 	.word	0x40012c00
 8005948:	40013400 	.word	0x40013400
 800594c:	40015000 	.word	0x40015000
 8005950:	40000400 	.word	0x40000400
 8005954:	40000800 	.word	0x40000800
 8005958:	40000c00 	.word	0x40000c00
 800595c:	40014000 	.word	0x40014000

08005960 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005974:	2b01      	cmp	r3, #1
 8005976:	d101      	bne.n	800597c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005978:	2302      	movs	r3, #2
 800597a:	e078      	b.n	8005a6e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	4313      	orrs	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	041b      	lsls	r3, r3, #16
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a1c      	ldr	r2, [pc, #112]	@ (8005a7c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d009      	beq.n	8005a22 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a1b      	ldr	r2, [pc, #108]	@ (8005a80 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d004      	beq.n	8005a22 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a19      	ldr	r2, [pc, #100]	@ (8005a84 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d11c      	bne.n	8005a5c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a2c:	051b      	lsls	r3, r3, #20
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	40012c00 	.word	0x40012c00
 8005a80:	40013400 	.word	0x40013400
 8005a84:	40015000 	.word	0x40015000

08005a88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b10:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005b14:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b085      	sub	sp, #20
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b36:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005b3a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	43db      	mvns	r3, r3
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	1d3b      	adds	r3, r7, #4
 8005b6e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b0a7      	sub	sp, #156	@ 0x9c
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bc6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	78db      	ldrb	r3, [r3, #3]
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	d81f      	bhi.n	8005c12 <USB_ActivateEndpoint+0x72>
 8005bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bd8 <USB_ActivateEndpoint+0x38>)
 8005bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd8:	08005be9 	.word	0x08005be9
 8005bdc:	08005c05 	.word	0x08005c05
 8005be0:	08005c1b 	.word	0x08005c1b
 8005be4:	08005bf7 	.word	0x08005bf7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005be8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005bec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005bf0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005bf4:	e012      	b.n	8005c1c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005bf6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005bfa:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005bfe:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005c02:	e00b      	b.n	8005c1c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005c04:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005c08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005c0c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005c10:	e004      	b.n	8005c1c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8005c18:	e000      	b.n	8005c1c <USB_ActivateEndpoint+0x7c>
      break;
 8005c1a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	441a      	add	r2, r3
 8005c26:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005c2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	b21b      	sxth	r3, r3
 8005c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c56:	b21a      	sxth	r2, r3
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	b21b      	sxth	r3, r3
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	b21b      	sxth	r3, r3
 8005c62:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	441a      	add	r2, r3
 8005c70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005c74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	7b1b      	ldrb	r3, [r3, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f040 8180 	bne.w	8005f92 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	785b      	ldrb	r3, [r3, #1]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f000 8084 	beq.w	8005da4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	61bb      	str	r3, [r7, #24]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	461a      	mov	r2, r3
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	4413      	add	r3, r2
 8005cae:	61bb      	str	r3, [r7, #24]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	00da      	lsls	r2, r3, #3
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cbe:	617b      	str	r3, [r7, #20]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	88db      	ldrh	r3, [r3, #6]
 8005cc4:	085b      	lsrs	r3, r3, #1
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	881b      	ldrh	r3, [r3, #0]
 8005cdc:	827b      	strh	r3, [r7, #18]
 8005cde:	8a7b      	ldrh	r3, [r7, #18]
 8005ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01b      	beq.n	8005d20 <USB_ActivateEndpoint+0x180>
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cfe:	823b      	strh	r3, [r7, #16]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	441a      	add	r2, r3
 8005d0a:	8a3b      	ldrh	r3, [r7, #16]
 8005d0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d18:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	78db      	ldrb	r3, [r3, #3]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d020      	beq.n	8005d6a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d3e:	81bb      	strh	r3, [r7, #12]
 8005d40:	89bb      	ldrh	r3, [r7, #12]
 8005d42:	f083 0320 	eor.w	r3, r3, #32
 8005d46:	81bb      	strh	r3, [r7, #12]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	441a      	add	r2, r3
 8005d52:	89bb      	ldrh	r3, [r7, #12]
 8005d54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	8013      	strh	r3, [r2, #0]
 8005d68:	e3f9      	b.n	800655e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	881b      	ldrh	r3, [r3, #0]
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d80:	81fb      	strh	r3, [r7, #14]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	441a      	add	r2, r3
 8005d8c:	89fb      	ldrh	r3, [r7, #14]
 8005d8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	8013      	strh	r3, [r2, #0]
 8005da2:	e3dc      	b.n	800655e <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	461a      	mov	r2, r3
 8005db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db4:	4413      	add	r3, r2
 8005db6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	00da      	lsls	r2, r3, #3
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	88db      	ldrh	r3, [r3, #6]
 8005dcc:	085b      	lsrs	r3, r3, #1
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	461a      	mov	r2, r3
 8005de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de8:	4413      	add	r3, r2
 8005dea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	00da      	lsls	r2, r3, #3
 8005df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df4:	4413      	add	r3, r2
 8005df6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfe:	881b      	ldrh	r3, [r3, #0]
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0a:	801a      	strh	r2, [r3, #0]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <USB_ActivateEndpoint+0x28a>
 8005e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e16:	881b      	ldrh	r3, [r3, #0]
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e26:	801a      	strh	r2, [r3, #0]
 8005e28:	e041      	b.n	8005eae <USB_ActivateEndpoint+0x30e>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e30:	d81c      	bhi.n	8005e6c <USB_ActivateEndpoint+0x2cc>
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	085b      	lsrs	r3, r3, #1
 8005e38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d004      	beq.n	8005e52 <USB_ActivateEndpoint+0x2b2>
 8005e48:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	029b      	lsls	r3, r3, #10
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	4313      	orrs	r3, r2
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e68:	801a      	strh	r2, [r3, #0]
 8005e6a:	e020      	b.n	8005eae <USB_ActivateEndpoint+0x30e>
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	095b      	lsrs	r3, r3, #5
 8005e72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	f003 031f 	and.w	r3, r3, #31
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d104      	bne.n	8005e8c <USB_ActivateEndpoint+0x2ec>
 8005e82:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e86:	3b01      	subs	r3, #1
 8005e88:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	029b      	lsls	r3, r3, #10
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005ebc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005ebe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d01b      	beq.n	8005efe <USB_ActivateEndpoint+0x35e>
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005edc:	843b      	strh	r3, [r7, #32]
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	441a      	add	r2, r3
 8005ee8:	8c3b      	ldrh	r3, [r7, #32]
 8005eea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ef2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ef6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d124      	bne.n	8005f50 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f1c:	83bb      	strh	r3, [r7, #28]
 8005f1e:	8bbb      	ldrh	r3, [r7, #28]
 8005f20:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005f24:	83bb      	strh	r3, [r7, #28]
 8005f26:	8bbb      	ldrh	r3, [r7, #28]
 8005f28:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005f2c:	83bb      	strh	r3, [r7, #28]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	441a      	add	r2, r3
 8005f38:	8bbb      	ldrh	r3, [r7, #28]
 8005f3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	8013      	strh	r3, [r2, #0]
 8005f4e:	e306      	b.n	800655e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f66:	83fb      	strh	r3, [r7, #30]
 8005f68:	8bfb      	ldrh	r3, [r7, #30]
 8005f6a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005f6e:	83fb      	strh	r3, [r7, #30]
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	441a      	add	r2, r3
 8005f7a:	8bfb      	ldrh	r3, [r7, #30]
 8005f7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	8013      	strh	r3, [r2, #0]
 8005f90:	e2e5      	b.n	800655e <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	78db      	ldrb	r3, [r3, #3]
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d11e      	bne.n	8005fd8 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fb0:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	441a      	add	r2, r3
 8005fbe:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8005fc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fca:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	8013      	strh	r3, [r2, #0]
 8005fd6:	e01d      	b.n	8006014 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fee:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	441a      	add	r2, r3
 8005ffc:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8006000:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006004:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006008:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800600c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006010:	b29b      	uxth	r3, r3
 8006012:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800601e:	b29b      	uxth	r3, r3
 8006020:	461a      	mov	r2, r3
 8006022:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006024:	4413      	add	r3, r2
 8006026:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	00da      	lsls	r2, r3, #3
 800602e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006030:	4413      	add	r3, r2
 8006032:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006036:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	891b      	ldrh	r3, [r3, #8]
 800603c:	085b      	lsrs	r3, r3, #1
 800603e:	b29b      	uxth	r3, r3
 8006040:	005b      	lsls	r3, r3, #1
 8006042:	b29a      	uxth	r2, r3
 8006044:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006046:	801a      	strh	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	677b      	str	r3, [r7, #116]	@ 0x74
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006052:	b29b      	uxth	r3, r3
 8006054:	461a      	mov	r2, r3
 8006056:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006058:	4413      	add	r3, r2
 800605a:	677b      	str	r3, [r7, #116]	@ 0x74
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	00da      	lsls	r2, r3, #3
 8006062:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006064:	4413      	add	r3, r2
 8006066:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800606a:	673b      	str	r3, [r7, #112]	@ 0x70
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	895b      	ldrh	r3, [r3, #10]
 8006070:	085b      	lsrs	r3, r3, #1
 8006072:	b29b      	uxth	r3, r3
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	b29a      	uxth	r2, r3
 8006078:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800607a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	785b      	ldrb	r3, [r3, #1]
 8006080:	2b00      	cmp	r3, #0
 8006082:	f040 81af 	bne.w	80063e4 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4413      	add	r3, r2
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8006096:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800609a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d01d      	beq.n	80060de <USB_ActivateEndpoint+0x53e>
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060b8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	441a      	add	r2, r3
 80060c6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80060ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060da:	b29b      	uxth	r3, r3
 80060dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80060ee:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80060f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d01d      	beq.n	8006136 <USB_ActivateEndpoint+0x596>
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	b29b      	uxth	r3, r3
 8006108:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800610c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006110:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	441a      	add	r2, r3
 800611e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006122:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006126:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800612a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800612e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006132:	b29b      	uxth	r3, r3
 8006134:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	785b      	ldrb	r3, [r3, #1]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d16b      	bne.n	8006216 <USB_ActivateEndpoint+0x676>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006148:	b29b      	uxth	r3, r3
 800614a:	461a      	mov	r2, r3
 800614c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800614e:	4413      	add	r3, r2
 8006150:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	00da      	lsls	r2, r3, #3
 8006158:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800615a:	4413      	add	r3, r2
 800615c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006160:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006162:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	b29b      	uxth	r3, r3
 8006168:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800616c:	b29a      	uxth	r2, r3
 800616e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006170:	801a      	strh	r2, [r3, #0]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10a      	bne.n	8006190 <USB_ActivateEndpoint+0x5f0>
 800617a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	b29b      	uxth	r3, r3
 8006180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006188:	b29a      	uxth	r2, r3
 800618a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800618c:	801a      	strh	r2, [r3, #0]
 800618e:	e05d      	b.n	800624c <USB_ActivateEndpoint+0x6ac>
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	2b3e      	cmp	r3, #62	@ 0x3e
 8006196:	d81c      	bhi.n	80061d2 <USB_ActivateEndpoint+0x632>
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	085b      	lsrs	r3, r3, #1
 800619e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d004      	beq.n	80061b8 <USB_ActivateEndpoint+0x618>
 80061ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061b2:	3301      	adds	r3, #1
 80061b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80061b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	b29a      	uxth	r2, r3
 80061be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	029b      	lsls	r3, r3, #10
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	4313      	orrs	r3, r2
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061ce:	801a      	strh	r2, [r3, #0]
 80061d0:	e03c      	b.n	800624c <USB_ActivateEndpoint+0x6ac>
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	095b      	lsrs	r3, r3, #5
 80061d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	f003 031f 	and.w	r3, r3, #31
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d104      	bne.n	80061f2 <USB_ActivateEndpoint+0x652>
 80061e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061ec:	3b01      	subs	r3, #1
 80061ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80061f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	029b      	lsls	r3, r3, #10
 8006200:	b29b      	uxth	r3, r3
 8006202:	4313      	orrs	r3, r2
 8006204:	b29b      	uxth	r3, r3
 8006206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800620a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800620e:	b29a      	uxth	r2, r3
 8006210:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006212:	801a      	strh	r2, [r3, #0]
 8006214:	e01a      	b.n	800624c <USB_ActivateEndpoint+0x6ac>
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	785b      	ldrb	r3, [r3, #1]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d116      	bne.n	800624c <USB_ActivateEndpoint+0x6ac>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	657b      	str	r3, [r7, #84]	@ 0x54
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006228:	b29b      	uxth	r3, r3
 800622a:	461a      	mov	r2, r3
 800622c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800622e:	4413      	add	r3, r2
 8006230:	657b      	str	r3, [r7, #84]	@ 0x54
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	00da      	lsls	r2, r3, #3
 8006238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800623a:	4413      	add	r3, r2
 800623c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006240:	653b      	str	r3, [r7, #80]	@ 0x50
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	b29a      	uxth	r2, r3
 8006248:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800624a:	801a      	strh	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	785b      	ldrb	r3, [r3, #1]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d16b      	bne.n	8006330 <USB_ActivateEndpoint+0x790>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006262:	b29b      	uxth	r3, r3
 8006264:	461a      	mov	r2, r3
 8006266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006268:	4413      	add	r3, r2
 800626a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	00da      	lsls	r2, r3, #3
 8006272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006274:	4413      	add	r3, r2
 8006276:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800627a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800627c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	b29b      	uxth	r3, r3
 8006282:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006286:	b29a      	uxth	r2, r3
 8006288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800628a:	801a      	strh	r2, [r3, #0]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10a      	bne.n	80062aa <USB_ActivateEndpoint+0x70a>
 8006294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	b29b      	uxth	r3, r3
 800629a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800629e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a6:	801a      	strh	r2, [r3, #0]
 80062a8:	e05b      	b.n	8006362 <USB_ActivateEndpoint+0x7c2>
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80062b0:	d81c      	bhi.n	80062ec <USB_ActivateEndpoint+0x74c>
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	085b      	lsrs	r3, r3, #1
 80062b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d004      	beq.n	80062d2 <USB_ActivateEndpoint+0x732>
 80062c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062cc:	3301      	adds	r3, #1
 80062ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062dc:	b29b      	uxth	r3, r3
 80062de:	029b      	lsls	r3, r3, #10
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	4313      	orrs	r3, r2
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e8:	801a      	strh	r2, [r3, #0]
 80062ea:	e03a      	b.n	8006362 <USB_ActivateEndpoint+0x7c2>
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	095b      	lsrs	r3, r3, #5
 80062f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	f003 031f 	and.w	r3, r3, #31
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d104      	bne.n	800630c <USB_ActivateEndpoint+0x76c>
 8006302:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006306:	3b01      	subs	r3, #1
 8006308:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800630c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800630e:	881b      	ldrh	r3, [r3, #0]
 8006310:	b29a      	uxth	r2, r3
 8006312:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006316:	b29b      	uxth	r3, r3
 8006318:	029b      	lsls	r3, r3, #10
 800631a:	b29b      	uxth	r3, r3
 800631c:	4313      	orrs	r3, r2
 800631e:	b29b      	uxth	r3, r3
 8006320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006328:	b29a      	uxth	r2, r3
 800632a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800632c:	801a      	strh	r2, [r3, #0]
 800632e:	e018      	b.n	8006362 <USB_ActivateEndpoint+0x7c2>
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	785b      	ldrb	r3, [r3, #1]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d114      	bne.n	8006362 <USB_ActivateEndpoint+0x7c2>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800633e:	b29b      	uxth	r3, r3
 8006340:	461a      	mov	r2, r3
 8006342:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006344:	4413      	add	r3, r2
 8006346:	647b      	str	r3, [r7, #68]	@ 0x44
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	00da      	lsls	r2, r3, #3
 800634e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006350:	4413      	add	r3, r2
 8006352:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006356:	643b      	str	r3, [r7, #64]	@ 0x40
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	b29a      	uxth	r2, r3
 800635e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006360:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	881b      	ldrh	r3, [r3, #0]
 800636e:	b29b      	uxth	r3, r3
 8006370:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006374:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006378:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800637a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800637c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006380:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006382:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006384:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006388:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	441a      	add	r2, r3
 8006394:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006396:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800639a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800639e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063c0:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	441a      	add	r2, r3
 80063cc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80063ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063de:	b29b      	uxth	r3, r3
 80063e0:	8013      	strh	r3, [r2, #0]
 80063e2:	e0bc      	b.n	800655e <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80063f4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80063f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d01d      	beq.n	800643c <USB_ActivateEndpoint+0x89c>
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	881b      	ldrh	r3, [r3, #0]
 800640c:	b29b      	uxth	r3, r3
 800640e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006416:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	441a      	add	r2, r3
 8006424:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006428:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800642c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006430:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006438:	b29b      	uxth	r3, r3
 800643a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800644c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8006450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006454:	2b00      	cmp	r3, #0
 8006456:	d01d      	beq.n	8006494 <USB_ActivateEndpoint+0x8f4>
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	881b      	ldrh	r3, [r3, #0]
 8006464:	b29b      	uxth	r3, r3
 8006466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800646a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800646e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	441a      	add	r2, r3
 800647c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8006480:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006484:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006488:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800648c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006490:	b29b      	uxth	r3, r3
 8006492:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	78db      	ldrb	r3, [r3, #3]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d024      	beq.n	80064e6 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	881b      	ldrh	r3, [r3, #0]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064b2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80064b6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80064ba:	f083 0320 	eor.w	r3, r3, #32
 80064be:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	441a      	add	r2, r3
 80064cc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80064d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	8013      	strh	r3, [r2, #0]
 80064e4:	e01d      	b.n	8006522 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064fc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	441a      	add	r2, r3
 800650a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800650e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006512:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006516:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800651a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800651e:	b29b      	uxth	r3, r3
 8006520:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	881b      	ldrh	r3, [r3, #0]
 800652e:	b29b      	uxth	r3, r3
 8006530:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006534:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006538:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	441a      	add	r2, r3
 8006546:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800654a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800654e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006556:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800655a:	b29b      	uxth	r3, r3
 800655c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800655e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8006562:	4618      	mov	r0, r3
 8006564:	379c      	adds	r7, #156	@ 0x9c
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop

08006570 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006570:	b480      	push	{r7}
 8006572:	b08d      	sub	sp, #52	@ 0x34
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	7b1b      	ldrb	r3, [r3, #12]
 800657e:	2b00      	cmp	r3, #0
 8006580:	f040 808e 	bne.w	80066a0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	785b      	ldrb	r3, [r3, #1]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d044      	beq.n	8006616 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4413      	add	r3, r2
 8006596:	881b      	ldrh	r3, [r3, #0]
 8006598:	81bb      	strh	r3, [r7, #12]
 800659a:	89bb      	ldrh	r3, [r7, #12]
 800659c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d01b      	beq.n	80065dc <USB_DeactivateEndpoint+0x6c>
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ba:	817b      	strh	r3, [r7, #10]
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	441a      	add	r2, r3
 80065c6:	897b      	ldrh	r3, [r7, #10]
 80065c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80065d8:	b29b      	uxth	r3, r3
 80065da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	881b      	ldrh	r3, [r3, #0]
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065f2:	813b      	strh	r3, [r7, #8]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	441a      	add	r2, r3
 80065fe:	893b      	ldrh	r3, [r7, #8]
 8006600:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006604:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006608:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800660c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006610:	b29b      	uxth	r3, r3
 8006612:	8013      	strh	r3, [r2, #0]
 8006614:	e192      	b.n	800693c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	827b      	strh	r3, [r7, #18]
 8006624:	8a7b      	ldrh	r3, [r7, #18]
 8006626:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d01b      	beq.n	8006666 <USB_DeactivateEndpoint+0xf6>
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	b29b      	uxth	r3, r3
 800663c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006644:	823b      	strh	r3, [r7, #16]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	441a      	add	r2, r3
 8006650:	8a3b      	ldrh	r3, [r7, #16]
 8006652:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006656:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800665a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800665e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006662:	b29b      	uxth	r3, r3
 8006664:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800667c:	81fb      	strh	r3, [r7, #14]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	441a      	add	r2, r3
 8006688:	89fb      	ldrh	r3, [r7, #14]
 800668a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800668e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006692:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800669a:	b29b      	uxth	r3, r3
 800669c:	8013      	strh	r3, [r2, #0]
 800669e:	e14d      	b.n	800693c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	785b      	ldrb	r3, [r3, #1]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f040 80a5 	bne.w	80067f4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4413      	add	r3, r2
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	843b      	strh	r3, [r7, #32]
 80066b8:	8c3b      	ldrh	r3, [r7, #32]
 80066ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d01b      	beq.n	80066fa <USB_DeactivateEndpoint+0x18a>
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066d8:	83fb      	strh	r3, [r7, #30]
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	441a      	add	r2, r3
 80066e4:	8bfb      	ldrh	r3, [r7, #30]
 80066e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	83bb      	strh	r3, [r7, #28]
 8006708:	8bbb      	ldrh	r3, [r7, #28]
 800670a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800670e:	2b00      	cmp	r3, #0
 8006710:	d01b      	beq.n	800674a <USB_DeactivateEndpoint+0x1da>
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	b29b      	uxth	r3, r3
 8006720:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006724:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006728:	837b      	strh	r3, [r7, #26]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	441a      	add	r2, r3
 8006734:	8b7b      	ldrh	r3, [r7, #26]
 8006736:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800673a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800673e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006742:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006746:	b29b      	uxth	r3, r3
 8006748:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	b29b      	uxth	r3, r3
 8006758:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800675c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006760:	833b      	strh	r3, [r7, #24]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	441a      	add	r2, r3
 800676c:	8b3b      	ldrh	r3, [r7, #24]
 800676e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006772:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006776:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800677a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800677e:	b29b      	uxth	r3, r3
 8006780:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	b29b      	uxth	r3, r3
 8006790:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006794:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006798:	82fb      	strh	r3, [r7, #22]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	441a      	add	r2, r3
 80067a4:	8afb      	ldrh	r3, [r7, #22]
 80067a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067d0:	82bb      	strh	r3, [r7, #20]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	441a      	add	r2, r3
 80067dc:	8abb      	ldrh	r3, [r7, #20]
 80067de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	8013      	strh	r3, [r2, #0]
 80067f2:	e0a3      	b.n	800693c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	881b      	ldrh	r3, [r3, #0]
 8006800:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006802:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006804:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d01b      	beq.n	8006844 <USB_DeactivateEndpoint+0x2d4>
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800681e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006822:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	441a      	add	r2, r3
 800682e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006830:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006834:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006838:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800683c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006840:	b29b      	uxth	r3, r3
 8006842:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006852:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006858:	2b00      	cmp	r3, #0
 800685a:	d01b      	beq.n	8006894 <USB_DeactivateEndpoint+0x324>
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	881b      	ldrh	r3, [r3, #0]
 8006868:	b29b      	uxth	r3, r3
 800686a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800686e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006872:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	441a      	add	r2, r3
 800687e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006880:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006884:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006888:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800688c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006890:	b29b      	uxth	r3, r3
 8006892:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	441a      	add	r2, r3
 80068b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80068b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80068c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	881b      	ldrh	r3, [r3, #0]
 80068d8:	b29b      	uxth	r3, r3
 80068da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	441a      	add	r2, r3
 80068ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006900:	b29b      	uxth	r3, r3
 8006902:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	b29b      	uxth	r3, r3
 8006912:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800691a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	441a      	add	r2, r3
 8006926:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006928:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800692c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006930:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006934:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006938:	b29b      	uxth	r3, r3
 800693a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3734      	adds	r7, #52	@ 0x34
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b0ac      	sub	sp, #176	@ 0xb0
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	785b      	ldrb	r3, [r3, #1]
 8006958:	2b01      	cmp	r3, #1
 800695a:	f040 84ca 	bne.w	80072f2 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	699a      	ldr	r2, [r3, #24]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	429a      	cmp	r2, r3
 8006968:	d904      	bls.n	8006974 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006972:	e003      	b.n	800697c <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	7b1b      	ldrb	r3, [r3, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d122      	bne.n	80069ca <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	6959      	ldr	r1, [r3, #20]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	88da      	ldrh	r2, [r3, #6]
 800698c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006990:	b29b      	uxth	r3, r3
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 febd 	bl	8007712 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	613b      	str	r3, [r7, #16]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	461a      	mov	r2, r3
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	4413      	add	r3, r2
 80069aa:	613b      	str	r3, [r7, #16]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	00da      	lsls	r2, r3, #3
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	4413      	add	r3, r2
 80069b6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80069ba:	60fb      	str	r3, [r7, #12]
 80069bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	801a      	strh	r2, [r3, #0]
 80069c6:	f000 bc6f 	b.w	80072a8 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	78db      	ldrb	r3, [r3, #3]
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	f040 831e 	bne.w	8007010 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	6a1a      	ldr	r2, [r3, #32]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	429a      	cmp	r2, r3
 80069de:	f240 82cf 	bls.w	8006f80 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	881b      	ldrh	r3, [r3, #0]
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069f8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	441a      	add	r2, r3
 8006a06:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006a0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a12:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	6a1a      	ldr	r2, [r3, #32]
 8006a22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a26:	1ad2      	subs	r2, r2, r3
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	881b      	ldrh	r3, [r3, #0]
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f000 814f 	beq.w	8006ce2 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	785b      	ldrb	r3, [r3, #1]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d16b      	bne.n	8006b28 <USB_EPStartXfer+0x1de>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a60:	4413      	add	r3, r2
 8006a62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	00da      	lsls	r2, r3, #3
 8006a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a82:	801a      	strh	r2, [r3, #0]
 8006a84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10a      	bne.n	8006aa2 <USB_EPStartXfer+0x158>
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8e:	881b      	ldrh	r3, [r3, #0]
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9e:	801a      	strh	r2, [r3, #0]
 8006aa0:	e05b      	b.n	8006b5a <USB_EPStartXfer+0x210>
 8006aa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006aa6:	2b3e      	cmp	r3, #62	@ 0x3e
 8006aa8:	d81c      	bhi.n	8006ae4 <USB_EPStartXfer+0x19a>
 8006aaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006aae:	085b      	lsrs	r3, r3, #1
 8006ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ab4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d004      	beq.n	8006aca <USB_EPStartXfer+0x180>
 8006ac0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	029b      	lsls	r3, r3, #10
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	4313      	orrs	r3, r2
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae0:	801a      	strh	r2, [r3, #0]
 8006ae2:	e03a      	b.n	8006b5a <USB_EPStartXfer+0x210>
 8006ae4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ae8:	095b      	lsrs	r3, r3, #5
 8006aea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006aee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006af2:	f003 031f 	and.w	r3, r3, #31
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d104      	bne.n	8006b04 <USB_EPStartXfer+0x1ba>
 8006afa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006afe:	3b01      	subs	r3, #1
 8006b00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b06:	881b      	ldrh	r3, [r3, #0]
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	029b      	lsls	r3, r3, #10
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	4313      	orrs	r3, r2
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b24:	801a      	strh	r2, [r3, #0]
 8006b26:	e018      	b.n	8006b5a <USB_EPStartXfer+0x210>
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	785b      	ldrb	r3, [r3, #1]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d114      	bne.n	8006b5a <USB_EPStartXfer+0x210>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	461a      	mov	r2, r3
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b3c:	4413      	add	r3, r2
 8006b3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	00da      	lsls	r2, r3, #3
 8006b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b48:	4413      	add	r3, r2
 8006b4a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b58:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	895b      	ldrh	r3, [r3, #10]
 8006b5e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	6959      	ldr	r1, [r3, #20]
 8006b66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fdce 	bl	8007712 <USB_WritePMA>
            ep->xfer_buff += len;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	695a      	ldr	r2, [r3, #20]
 8006b7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b7e:	441a      	add	r2, r3
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	6a1a      	ldr	r2, [r3, #32]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d907      	bls.n	8006ba0 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	6a1a      	ldr	r2, [r3, #32]
 8006b94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b98:	1ad2      	subs	r2, r2, r3
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	621a      	str	r2, [r3, #32]
 8006b9e:	e006      	b.n	8006bae <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	2200      	movs	r2, #0
 8006bac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	785b      	ldrb	r3, [r3, #1]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d16b      	bne.n	8006c8e <USB_EPStartXfer+0x344>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	61bb      	str	r3, [r7, #24]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	61bb      	str	r3, [r7, #24]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	00da      	lsls	r2, r3, #3
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006bd8:	617b      	str	r3, [r7, #20]
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	801a      	strh	r2, [r3, #0]
 8006bea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10a      	bne.n	8006c08 <USB_EPStartXfer+0x2be>
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	801a      	strh	r2, [r3, #0]
 8006c06:	e05d      	b.n	8006cc4 <USB_EPStartXfer+0x37a>
 8006c08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c0c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c0e:	d81c      	bhi.n	8006c4a <USB_EPStartXfer+0x300>
 8006c10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c14:	085b      	lsrs	r3, r3, #1
 8006c16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d004      	beq.n	8006c30 <USB_EPStartXfer+0x2e6>
 8006c26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	881b      	ldrh	r3, [r3, #0]
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	029b      	lsls	r3, r3, #10
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	4313      	orrs	r3, r2
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	801a      	strh	r2, [r3, #0]
 8006c48:	e03c      	b.n	8006cc4 <USB_EPStartXfer+0x37a>
 8006c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c4e:	095b      	lsrs	r3, r3, #5
 8006c50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c58:	f003 031f 	and.w	r3, r3, #31
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d104      	bne.n	8006c6a <USB_EPStartXfer+0x320>
 8006c60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006c64:	3b01      	subs	r3, #1
 8006c66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	029b      	lsls	r3, r3, #10
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	801a      	strh	r2, [r3, #0]
 8006c8c:	e01a      	b.n	8006cc4 <USB_EPStartXfer+0x37a>
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	785b      	ldrb	r3, [r3, #1]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d116      	bne.n	8006cc4 <USB_EPStartXfer+0x37a>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	623b      	str	r3, [r7, #32]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	6a3b      	ldr	r3, [r7, #32]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	623b      	str	r3, [r7, #32]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	00da      	lsls	r2, r3, #3
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006cb8:	61fb      	str	r3, [r7, #28]
 8006cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	891b      	ldrh	r3, [r3, #8]
 8006cc8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	6959      	ldr	r1, [r3, #20]
 8006cd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fd19 	bl	8007712 <USB_WritePMA>
 8006ce0:	e2e2      	b.n	80072a8 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	785b      	ldrb	r3, [r3, #1]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d16b      	bne.n	8006dc2 <USB_EPStartXfer+0x478>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cfa:	4413      	add	r3, r2
 8006cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	00da      	lsls	r2, r3, #3
 8006d04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d06:	4413      	add	r3, r2
 8006d08:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006d0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d10:	881b      	ldrh	r3, [r3, #0]
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d1c:	801a      	strh	r2, [r3, #0]
 8006d1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10a      	bne.n	8006d3c <USB_EPStartXfer+0x3f2>
 8006d26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d38:	801a      	strh	r2, [r3, #0]
 8006d3a:	e05d      	b.n	8006df8 <USB_EPStartXfer+0x4ae>
 8006d3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d40:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d42:	d81c      	bhi.n	8006d7e <USB_EPStartXfer+0x434>
 8006d44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d48:	085b      	lsrs	r3, r3, #1
 8006d4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d004      	beq.n	8006d64 <USB_EPStartXfer+0x41a>
 8006d5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d5e:	3301      	adds	r3, #1
 8006d60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d66:	881b      	ldrh	r3, [r3, #0]
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	029b      	lsls	r3, r3, #10
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	4313      	orrs	r3, r2
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d7a:	801a      	strh	r2, [r3, #0]
 8006d7c:	e03c      	b.n	8006df8 <USB_EPStartXfer+0x4ae>
 8006d7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d82:	095b      	lsrs	r3, r3, #5
 8006d84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d8c:	f003 031f 	and.w	r3, r3, #31
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d104      	bne.n	8006d9e <USB_EPStartXfer+0x454>
 8006d94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	029b      	lsls	r3, r3, #10
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	4313      	orrs	r3, r2
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dbe:	801a      	strh	r2, [r3, #0]
 8006dc0:	e01a      	b.n	8006df8 <USB_EPStartXfer+0x4ae>
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	785b      	ldrb	r3, [r3, #1]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d116      	bne.n	8006df8 <USB_EPStartXfer+0x4ae>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dda:	4413      	add	r3, r2
 8006ddc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	00da      	lsls	r2, r3, #3
 8006de4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006de6:	4413      	add	r3, r2
 8006de8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006dec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006df6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	891b      	ldrh	r3, [r3, #8]
 8006dfc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	6959      	ldr	r1, [r3, #20]
 8006e04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fc7f 	bl	8007712 <USB_WritePMA>
            ep->xfer_buff += len;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	695a      	ldr	r2, [r3, #20]
 8006e18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e1c:	441a      	add	r2, r3
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	6a1a      	ldr	r2, [r3, #32]
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d907      	bls.n	8006e3e <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	6a1a      	ldr	r2, [r3, #32]
 8006e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e36:	1ad2      	subs	r2, r2, r3
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	621a      	str	r2, [r3, #32]
 8006e3c:	e006      	b.n	8006e4c <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	785b      	ldrb	r3, [r3, #1]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d16b      	bne.n	8006f30 <USB_EPStartXfer+0x5e6>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	461a      	mov	r2, r3
 8006e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e68:	4413      	add	r3, r2
 8006e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	00da      	lsls	r2, r3, #3
 8006e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e74:	4413      	add	r3, r2
 8006e76:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e7e:	881b      	ldrh	r3, [r3, #0]
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e8a:	801a      	strh	r2, [r3, #0]
 8006e8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10a      	bne.n	8006eaa <USB_EPStartXfer+0x560>
 8006e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ea6:	801a      	strh	r2, [r3, #0]
 8006ea8:	e05b      	b.n	8006f62 <USB_EPStartXfer+0x618>
 8006eaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006eae:	2b3e      	cmp	r3, #62	@ 0x3e
 8006eb0:	d81c      	bhi.n	8006eec <USB_EPStartXfer+0x5a2>
 8006eb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006eb6:	085b      	lsrs	r3, r3, #1
 8006eb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ebc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d004      	beq.n	8006ed2 <USB_EPStartXfer+0x588>
 8006ec8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ecc:	3301      	adds	r3, #1
 8006ece:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ed4:	881b      	ldrh	r3, [r3, #0]
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	029b      	lsls	r3, r3, #10
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee8:	801a      	strh	r2, [r3, #0]
 8006eea:	e03a      	b.n	8006f62 <USB_EPStartXfer+0x618>
 8006eec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ef0:	095b      	lsrs	r3, r3, #5
 8006ef2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ef6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006efa:	f003 031f 	and.w	r3, r3, #31
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d104      	bne.n	8006f0c <USB_EPStartXfer+0x5c2>
 8006f02:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f06:	3b01      	subs	r3, #1
 8006f08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	029b      	lsls	r3, r3, #10
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f2c:	801a      	strh	r2, [r3, #0]
 8006f2e:	e018      	b.n	8006f62 <USB_EPStartXfer+0x618>
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	785b      	ldrb	r3, [r3, #1]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d114      	bne.n	8006f62 <USB_EPStartXfer+0x618>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	461a      	mov	r2, r3
 8006f42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f44:	4413      	add	r3, r2
 8006f46:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	00da      	lsls	r2, r3, #3
 8006f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f50:	4413      	add	r3, r2
 8006f52:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	895b      	ldrh	r3, [r3, #10]
 8006f66:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	6959      	ldr	r1, [r3, #20]
 8006f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fbca 	bl	8007712 <USB_WritePMA>
 8006f7e:	e193      	b.n	80072a8 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4413      	add	r3, r2
 8006f92:	881b      	ldrh	r3, [r3, #0]
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006f9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f9e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	441a      	add	r2, r3
 8006fac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006fb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fd4:	4413      	add	r3, r2
 8006fd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	00da      	lsls	r2, r3, #3
 8006fde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006fe6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006fe8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ff0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	891b      	ldrh	r3, [r3, #8]
 8006ff6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	6959      	ldr	r1, [r3, #20]
 8006ffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007002:	b29b      	uxth	r3, r3
 8007004:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fb82 	bl	8007712 <USB_WritePMA>
 800700e:	e14b      	b.n	80072a8 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	6a1a      	ldr	r2, [r3, #32]
 8007014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007018:	1ad2      	subs	r2, r2, r3
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	b29b      	uxth	r3, r3
 800702c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007030:	2b00      	cmp	r3, #0
 8007032:	f000 809a 	beq.w	800716a <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	673b      	str	r3, [r7, #112]	@ 0x70
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	785b      	ldrb	r3, [r3, #1]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d16b      	bne.n	800711a <USB_EPStartXfer+0x7d0>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800704c:	b29b      	uxth	r3, r3
 800704e:	461a      	mov	r2, r3
 8007050:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007052:	4413      	add	r3, r2
 8007054:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	00da      	lsls	r2, r3, #3
 800705c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800705e:	4413      	add	r3, r2
 8007060:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007064:	667b      	str	r3, [r7, #100]	@ 0x64
 8007066:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007068:	881b      	ldrh	r3, [r3, #0]
 800706a:	b29b      	uxth	r3, r3
 800706c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007070:	b29a      	uxth	r2, r3
 8007072:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007074:	801a      	strh	r2, [r3, #0]
 8007076:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10a      	bne.n	8007094 <USB_EPStartXfer+0x74a>
 800707e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	b29b      	uxth	r3, r3
 8007084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800708c:	b29a      	uxth	r2, r3
 800708e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007090:	801a      	strh	r2, [r3, #0]
 8007092:	e05b      	b.n	800714c <USB_EPStartXfer+0x802>
 8007094:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007098:	2b3e      	cmp	r3, #62	@ 0x3e
 800709a:	d81c      	bhi.n	80070d6 <USB_EPStartXfer+0x78c>
 800709c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070a0:	085b      	lsrs	r3, r3, #1
 80070a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80070a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d004      	beq.n	80070bc <USB_EPStartXfer+0x772>
 80070b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070b6:	3301      	adds	r3, #1
 80070b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80070bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070be:	881b      	ldrh	r3, [r3, #0]
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	029b      	lsls	r3, r3, #10
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	4313      	orrs	r3, r2
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070d2:	801a      	strh	r2, [r3, #0]
 80070d4:	e03a      	b.n	800714c <USB_EPStartXfer+0x802>
 80070d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070da:	095b      	lsrs	r3, r3, #5
 80070dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80070e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070e4:	f003 031f 	and.w	r3, r3, #31
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d104      	bne.n	80070f6 <USB_EPStartXfer+0x7ac>
 80070ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070f0:	3b01      	subs	r3, #1
 80070f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80070f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007100:	b29b      	uxth	r3, r3
 8007102:	029b      	lsls	r3, r3, #10
 8007104:	b29b      	uxth	r3, r3
 8007106:	4313      	orrs	r3, r2
 8007108:	b29b      	uxth	r3, r3
 800710a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800710e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007112:	b29a      	uxth	r2, r3
 8007114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007116:	801a      	strh	r2, [r3, #0]
 8007118:	e018      	b.n	800714c <USB_EPStartXfer+0x802>
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	785b      	ldrb	r3, [r3, #1]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d114      	bne.n	800714c <USB_EPStartXfer+0x802>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007128:	b29b      	uxth	r3, r3
 800712a:	461a      	mov	r2, r3
 800712c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800712e:	4413      	add	r3, r2
 8007130:	673b      	str	r3, [r7, #112]	@ 0x70
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	00da      	lsls	r2, r3, #3
 8007138:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800713a:	4413      	add	r3, r2
 800713c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007140:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007142:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007146:	b29a      	uxth	r2, r3
 8007148:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800714a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	895b      	ldrh	r3, [r3, #10]
 8007150:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	6959      	ldr	r1, [r3, #20]
 8007158:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800715c:	b29b      	uxth	r3, r3
 800715e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fad5 	bl	8007712 <USB_WritePMA>
 8007168:	e09e      	b.n	80072a8 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	785b      	ldrb	r3, [r3, #1]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d16b      	bne.n	800724a <USB_EPStartXfer+0x900>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800717c:	b29b      	uxth	r3, r3
 800717e:	461a      	mov	r2, r3
 8007180:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007182:	4413      	add	r3, r2
 8007184:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	00da      	lsls	r2, r3, #3
 800718c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800718e:	4413      	add	r3, r2
 8007190:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007194:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007196:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007198:	881b      	ldrh	r3, [r3, #0]
 800719a:	b29b      	uxth	r3, r3
 800719c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071a4:	801a      	strh	r2, [r3, #0]
 80071a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10a      	bne.n	80071c4 <USB_EPStartXfer+0x87a>
 80071ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071bc:	b29a      	uxth	r2, r3
 80071be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071c0:	801a      	strh	r2, [r3, #0]
 80071c2:	e063      	b.n	800728c <USB_EPStartXfer+0x942>
 80071c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80071ca:	d81c      	bhi.n	8007206 <USB_EPStartXfer+0x8bc>
 80071cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071d0:	085b      	lsrs	r3, r3, #1
 80071d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80071d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d004      	beq.n	80071ec <USB_EPStartXfer+0x8a2>
 80071e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80071e6:	3301      	adds	r3, #1
 80071e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80071ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071ee:	881b      	ldrh	r3, [r3, #0]
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	029b      	lsls	r3, r3, #10
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	4313      	orrs	r3, r2
 80071fe:	b29a      	uxth	r2, r3
 8007200:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007202:	801a      	strh	r2, [r3, #0]
 8007204:	e042      	b.n	800728c <USB_EPStartXfer+0x942>
 8007206:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800720a:	095b      	lsrs	r3, r3, #5
 800720c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007214:	f003 031f 	and.w	r3, r3, #31
 8007218:	2b00      	cmp	r3, #0
 800721a:	d104      	bne.n	8007226 <USB_EPStartXfer+0x8dc>
 800721c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007220:	3b01      	subs	r3, #1
 8007222:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007226:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007228:	881b      	ldrh	r3, [r3, #0]
 800722a:	b29a      	uxth	r2, r3
 800722c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007230:	b29b      	uxth	r3, r3
 8007232:	029b      	lsls	r3, r3, #10
 8007234:	b29b      	uxth	r3, r3
 8007236:	4313      	orrs	r3, r2
 8007238:	b29b      	uxth	r3, r3
 800723a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800723e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007242:	b29a      	uxth	r2, r3
 8007244:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007246:	801a      	strh	r2, [r3, #0]
 8007248:	e020      	b.n	800728c <USB_EPStartXfer+0x942>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	785b      	ldrb	r3, [r3, #1]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d11c      	bne.n	800728c <USB_EPStartXfer+0x942>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800725e:	b29b      	uxth	r3, r3
 8007260:	461a      	mov	r2, r3
 8007262:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007266:	4413      	add	r3, r2
 8007268:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	00da      	lsls	r2, r3, #3
 8007272:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007276:	4413      	add	r3, r2
 8007278:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800727c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007280:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007284:	b29a      	uxth	r2, r3
 8007286:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800728a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	891b      	ldrh	r3, [r3, #8]
 8007290:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	6959      	ldr	r1, [r3, #20]
 8007298:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800729c:	b29b      	uxth	r3, r3
 800729e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fa35 	bl	8007712 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072be:	817b      	strh	r3, [r7, #10]
 80072c0:	897b      	ldrh	r3, [r7, #10]
 80072c2:	f083 0310 	eor.w	r3, r3, #16
 80072c6:	817b      	strh	r3, [r7, #10]
 80072c8:	897b      	ldrh	r3, [r7, #10]
 80072ca:	f083 0320 	eor.w	r3, r3, #32
 80072ce:	817b      	strh	r3, [r7, #10]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	441a      	add	r2, r3
 80072da:	897b      	ldrh	r3, [r7, #10]
 80072dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	8013      	strh	r3, [r2, #0]
 80072f0:	e0d5      	b.n	800749e <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	7b1b      	ldrb	r3, [r3, #12]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d156      	bne.n	80073a8 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d122      	bne.n	8007348 <USB_EPStartXfer+0x9fe>
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	78db      	ldrb	r3, [r3, #3]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d11e      	bne.n	8007348 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	b29b      	uxth	r3, r3
 8007318:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800731c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007320:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	441a      	add	r2, r3
 800732e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007332:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007336:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800733a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800733e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007342:	b29b      	uxth	r3, r3
 8007344:	8013      	strh	r3, [r2, #0]
 8007346:	e01d      	b.n	8007384 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	881b      	ldrh	r3, [r3, #0]
 8007354:	b29b      	uxth	r3, r3
 8007356:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800735a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800735e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	441a      	add	r2, r3
 800736c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8007370:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007374:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007378:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800737c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007380:	b29b      	uxth	r3, r3
 8007382:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	699a      	ldr	r2, [r3, #24]
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	429a      	cmp	r2, r3
 800738e:	d907      	bls.n	80073a0 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	699a      	ldr	r2, [r3, #24]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	1ad2      	subs	r2, r2, r3
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	619a      	str	r2, [r3, #24]
 800739e:	e054      	b.n	800744a <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	2200      	movs	r2, #0
 80073a4:	619a      	str	r2, [r3, #24]
 80073a6:	e050      	b.n	800744a <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	78db      	ldrb	r3, [r3, #3]
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d142      	bne.n	8007436 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	69db      	ldr	r3, [r3, #28]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d048      	beq.n	800744a <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073c8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80073cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d005      	beq.n	80073e0 <USB_EPStartXfer+0xa96>
 80073d4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80073d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10b      	bne.n	80073f8 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80073e0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80073e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d12e      	bne.n	800744a <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80073ec:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80073f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d128      	bne.n	800744a <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4413      	add	r3, r2
 8007402:	881b      	ldrh	r3, [r3, #0]
 8007404:	b29b      	uxth	r3, r3
 8007406:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800740a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800740e:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	441a      	add	r2, r3
 800741c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8007420:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007424:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007428:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800742c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007430:	b29b      	uxth	r3, r3
 8007432:	8013      	strh	r3, [r2, #0]
 8007434:	e009      	b.n	800744a <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	78db      	ldrb	r3, [r3, #3]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d103      	bne.n	8007446 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	2200      	movs	r2, #0
 8007442:	619a      	str	r2, [r3, #24]
 8007444:	e001      	b.n	800744a <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e02a      	b.n	80074a0 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4413      	add	r3, r2
 8007454:	881b      	ldrh	r3, [r3, #0]
 8007456:	b29b      	uxth	r3, r3
 8007458:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800745c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007460:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007464:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007468:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800746c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007470:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007474:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007478:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	441a      	add	r2, r3
 8007486:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800748a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800748e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800749a:	b29b      	uxth	r3, r3
 800749c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	37b0      	adds	r7, #176	@ 0xb0
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	785b      	ldrb	r3, [r3, #1]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d020      	beq.n	80074fc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	881b      	ldrh	r3, [r3, #0]
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074d0:	81bb      	strh	r3, [r7, #12]
 80074d2:	89bb      	ldrh	r3, [r7, #12]
 80074d4:	f083 0310 	eor.w	r3, r3, #16
 80074d8:	81bb      	strh	r3, [r7, #12]
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	441a      	add	r2, r3
 80074e4:	89bb      	ldrh	r3, [r7, #12]
 80074e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	8013      	strh	r3, [r2, #0]
 80074fa:	e01f      	b.n	800753c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4413      	add	r3, r2
 8007506:	881b      	ldrh	r3, [r3, #0]
 8007508:	b29b      	uxth	r3, r3
 800750a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800750e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007512:	81fb      	strh	r3, [r7, #14]
 8007514:	89fb      	ldrh	r3, [r7, #14]
 8007516:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800751a:	81fb      	strh	r3, [r7, #14]
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	441a      	add	r2, r3
 8007526:	89fb      	ldrh	r3, [r7, #14]
 8007528:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800752c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007530:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007538:	b29b      	uxth	r3, r3
 800753a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800754a:	b480      	push	{r7}
 800754c:	b087      	sub	sp, #28
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	785b      	ldrb	r3, [r3, #1]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d04c      	beq.n	80075f6 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4413      	add	r3, r2
 8007566:	881b      	ldrh	r3, [r3, #0]
 8007568:	823b      	strh	r3, [r7, #16]
 800756a:	8a3b      	ldrh	r3, [r7, #16]
 800756c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007570:	2b00      	cmp	r3, #0
 8007572:	d01b      	beq.n	80075ac <USB_EPClearStall+0x62>
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4413      	add	r3, r2
 800757e:	881b      	ldrh	r3, [r3, #0]
 8007580:	b29b      	uxth	r3, r3
 8007582:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800758a:	81fb      	strh	r3, [r7, #14]
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	441a      	add	r2, r3
 8007596:	89fb      	ldrh	r3, [r7, #14]
 8007598:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800759c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	78db      	ldrb	r3, [r3, #3]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d06c      	beq.n	800768e <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4413      	add	r3, r2
 80075be:	881b      	ldrh	r3, [r3, #0]
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075ca:	81bb      	strh	r3, [r7, #12]
 80075cc:	89bb      	ldrh	r3, [r7, #12]
 80075ce:	f083 0320 	eor.w	r3, r3, #32
 80075d2:	81bb      	strh	r3, [r7, #12]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	441a      	add	r2, r3
 80075de:	89bb      	ldrh	r3, [r7, #12]
 80075e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	8013      	strh	r3, [r2, #0]
 80075f4:	e04b      	b.n	800768e <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	82fb      	strh	r3, [r7, #22]
 8007604:	8afb      	ldrh	r3, [r7, #22]
 8007606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d01b      	beq.n	8007646 <USB_EPClearStall+0xfc>
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	b29b      	uxth	r3, r3
 800761c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007620:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007624:	82bb      	strh	r3, [r7, #20]
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	441a      	add	r2, r3
 8007630:	8abb      	ldrh	r3, [r7, #20]
 8007632:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007636:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800763a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800763e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007642:	b29b      	uxth	r3, r3
 8007644:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4413      	add	r3, r2
 8007650:	881b      	ldrh	r3, [r3, #0]
 8007652:	b29b      	uxth	r3, r3
 8007654:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007658:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800765c:	827b      	strh	r3, [r7, #18]
 800765e:	8a7b      	ldrh	r3, [r7, #18]
 8007660:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007664:	827b      	strh	r3, [r7, #18]
 8007666:	8a7b      	ldrh	r3, [r7, #18]
 8007668:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800766c:	827b      	strh	r3, [r7, #18]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	441a      	add	r2, r3
 8007678:	8a7b      	ldrh	r3, [r7, #18]
 800767a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800767e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007682:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800768a:	b29b      	uxth	r3, r3
 800768c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	371c      	adds	r7, #28
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80076a8:	78fb      	ldrb	r3, [r7, #3]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d103      	bne.n	80076b6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2280      	movs	r2, #128	@ 0x80
 80076b2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076dc:	b29a      	uxth	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b085      	sub	sp, #20
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007700:	b29b      	uxth	r3, r3
 8007702:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007704:	68fb      	ldr	r3, [r7, #12]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007712:	b480      	push	{r7}
 8007714:	b08b      	sub	sp, #44	@ 0x2c
 8007716:	af00      	add	r7, sp, #0
 8007718:	60f8      	str	r0, [r7, #12]
 800771a:	60b9      	str	r1, [r7, #8]
 800771c:	4611      	mov	r1, r2
 800771e:	461a      	mov	r2, r3
 8007720:	460b      	mov	r3, r1
 8007722:	80fb      	strh	r3, [r7, #6]
 8007724:	4613      	mov	r3, r2
 8007726:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007728:	88bb      	ldrh	r3, [r7, #4]
 800772a:	3301      	adds	r3, #1
 800772c:	085b      	lsrs	r3, r3, #1
 800772e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007738:	88fa      	ldrh	r2, [r7, #6]
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	4413      	add	r3, r2
 800773e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007742:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	627b      	str	r3, [r7, #36]	@ 0x24
 8007748:	e01c      	b.n	8007784 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	3301      	adds	r3, #1
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	b21b      	sxth	r3, r3
 8007758:	021b      	lsls	r3, r3, #8
 800775a:	b21a      	sxth	r2, r3
 800775c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007760:	4313      	orrs	r3, r2
 8007762:	b21b      	sxth	r3, r3
 8007764:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007766:	6a3b      	ldr	r3, [r7, #32]
 8007768:	8a7a      	ldrh	r2, [r7, #18]
 800776a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800776c:	6a3b      	ldr	r3, [r7, #32]
 800776e:	3302      	adds	r3, #2
 8007770:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	3301      	adds	r3, #1
 8007776:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	3301      	adds	r3, #1
 800777c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800777e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007780:	3b01      	subs	r3, #1
 8007782:	627b      	str	r3, [r7, #36]	@ 0x24
 8007784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1df      	bne.n	800774a <USB_WritePMA+0x38>
  }
}
 800778a:	bf00      	nop
 800778c:	bf00      	nop
 800778e:	372c      	adds	r7, #44	@ 0x2c
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007798:	b480      	push	{r7}
 800779a:	b08b      	sub	sp, #44	@ 0x2c
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	4611      	mov	r1, r2
 80077a4:	461a      	mov	r2, r3
 80077a6:	460b      	mov	r3, r1
 80077a8:	80fb      	strh	r3, [r7, #6]
 80077aa:	4613      	mov	r3, r2
 80077ac:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80077ae:	88bb      	ldrh	r3, [r7, #4]
 80077b0:	085b      	lsrs	r3, r3, #1
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80077be:	88fa      	ldrh	r2, [r7, #6]
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	4413      	add	r3, r2
 80077c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80077c8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80077ce:	e018      	b.n	8007802 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80077d0:	6a3b      	ldr	r3, [r7, #32]
 80077d2:	881b      	ldrh	r3, [r3, #0]
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80077d8:	6a3b      	ldr	r3, [r7, #32]
 80077da:	3302      	adds	r3, #2
 80077dc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	3301      	adds	r3, #1
 80077ea:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	0a1b      	lsrs	r3, r3, #8
 80077f0:	b2da      	uxtb	r2, r3
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	3301      	adds	r3, #1
 80077fa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80077fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fe:	3b01      	subs	r3, #1
 8007800:	627b      	str	r3, [r7, #36]	@ 0x24
 8007802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1e3      	bne.n	80077d0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007808:	88bb      	ldrh	r3, [r7, #4]
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	b29b      	uxth	r3, r3
 8007810:	2b00      	cmp	r3, #0
 8007812:	d007      	beq.n	8007824 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	b29b      	uxth	r3, r3
 800781a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	b2da      	uxtb	r2, r3
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	701a      	strb	r2, [r3, #0]
  }
}
 8007824:	bf00      	nop
 8007826:	372c      	adds	r7, #44	@ 0x2c
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	460b      	mov	r3, r1
 800783a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800783c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007840:	f002 f916 	bl	8009a70 <USBD_static_malloc>
 8007844:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d105      	bne.n	8007858 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8007854:	2302      	movs	r3, #2
 8007856:	e066      	b.n	8007926 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	7c1b      	ldrb	r3, [r3, #16]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d119      	bne.n	800789c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007868:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800786c:	2202      	movs	r2, #2
 800786e:	2181      	movs	r1, #129	@ 0x81
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f001 ffa4 	bl	80097be <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2201      	movs	r2, #1
 800787a:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800787c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007880:	2202      	movs	r2, #2
 8007882:	2101      	movs	r1, #1
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f001 ff9a 	bl	80097be <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2210      	movs	r2, #16
 8007896:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800789a:	e016      	b.n	80078ca <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800789c:	2340      	movs	r3, #64	@ 0x40
 800789e:	2202      	movs	r2, #2
 80078a0:	2181      	movs	r1, #129	@ 0x81
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f001 ff8b 	bl	80097be <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80078ae:	2340      	movs	r3, #64	@ 0x40
 80078b0:	2202      	movs	r2, #2
 80078b2:	2101      	movs	r1, #1
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f001 ff82 	bl	80097be <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2210      	movs	r2, #16
 80078c6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80078ca:	2308      	movs	r3, #8
 80078cc:	2203      	movs	r2, #3
 80078ce:	2182      	movs	r1, #130	@ 0x82
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f001 ff74 	bl	80097be <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2201      	movs	r2, #1
 80078da:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	7c1b      	ldrb	r3, [r3, #16]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d109      	bne.n	8007914 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007906:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800790a:	2101      	movs	r1, #1
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f002 f845 	bl	800999c <USBD_LL_PrepareReceive>
 8007912:	e007      	b.n	8007924 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800791a:	2340      	movs	r3, #64	@ 0x40
 800791c:	2101      	movs	r1, #1
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f002 f83c 	bl	800999c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b082      	sub	sp, #8
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	460b      	mov	r3, r1
 8007938:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800793a:	2181      	movs	r1, #129	@ 0x81
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f001 ff64 	bl	800980a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007948:	2101      	movs	r1, #1
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f001 ff5d 	bl	800980a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007958:	2182      	movs	r1, #130	@ 0x82
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f001 ff55 	bl	800980a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00e      	beq.n	8007998 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800798a:	4618      	mov	r0, r3
 800798c:	f002 f87e 	bl	8009a8c <USBD_static_free>
    pdev->pClassData = NULL;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
	...

080079a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80079b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80079b6:	2300      	movs	r3, #0
 80079b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80079ba:	2300      	movs	r3, #0
 80079bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d101      	bne.n	80079cc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e0af      	b.n	8007b2c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d03f      	beq.n	8007a58 <USBD_CDC_Setup+0xb4>
 80079d8:	2b20      	cmp	r3, #32
 80079da:	f040 809f 	bne.w	8007b1c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	88db      	ldrh	r3, [r3, #6]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d02e      	beq.n	8007a44 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	b25b      	sxtb	r3, r3
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	da16      	bge.n	8007a1e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	683a      	ldr	r2, [r7, #0]
 80079fa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80079fc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	88d2      	ldrh	r2, [r2, #6]
 8007a02:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	88db      	ldrh	r3, [r3, #6]
 8007a08:	2b07      	cmp	r3, #7
 8007a0a:	bf28      	it	cs
 8007a0c:	2307      	movcs	r3, #7
 8007a0e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	89fa      	ldrh	r2, [r7, #14]
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f001 fae9 	bl	8008fee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007a1c:	e085      	b.n	8007b2a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	785a      	ldrb	r2, [r3, #1]
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	88db      	ldrh	r3, [r3, #6]
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007a34:	6939      	ldr	r1, [r7, #16]
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	88db      	ldrh	r3, [r3, #6]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f001 fb02 	bl	8009046 <USBD_CtlPrepareRx>
      break;
 8007a42:	e072      	b.n	8007b2a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	683a      	ldr	r2, [r7, #0]
 8007a4e:	7850      	ldrb	r0, [r2, #1]
 8007a50:	2200      	movs	r2, #0
 8007a52:	6839      	ldr	r1, [r7, #0]
 8007a54:	4798      	blx	r3
      break;
 8007a56:	e068      	b.n	8007b2a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	785b      	ldrb	r3, [r3, #1]
 8007a5c:	2b0b      	cmp	r3, #11
 8007a5e:	d852      	bhi.n	8007b06 <USBD_CDC_Setup+0x162>
 8007a60:	a201      	add	r2, pc, #4	@ (adr r2, 8007a68 <USBD_CDC_Setup+0xc4>)
 8007a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a66:	bf00      	nop
 8007a68:	08007a99 	.word	0x08007a99
 8007a6c:	08007b15 	.word	0x08007b15
 8007a70:	08007b07 	.word	0x08007b07
 8007a74:	08007b07 	.word	0x08007b07
 8007a78:	08007b07 	.word	0x08007b07
 8007a7c:	08007b07 	.word	0x08007b07
 8007a80:	08007b07 	.word	0x08007b07
 8007a84:	08007b07 	.word	0x08007b07
 8007a88:	08007b07 	.word	0x08007b07
 8007a8c:	08007b07 	.word	0x08007b07
 8007a90:	08007ac3 	.word	0x08007ac3
 8007a94:	08007aed 	.word	0x08007aed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d107      	bne.n	8007ab4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007aa4:	f107 030a 	add.w	r3, r7, #10
 8007aa8:	2202      	movs	r2, #2
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f001 fa9e 	bl	8008fee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ab2:	e032      	b.n	8007b1a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f001 fa28 	bl	8008f0c <USBD_CtlError>
            ret = USBD_FAIL;
 8007abc:	2303      	movs	r3, #3
 8007abe:	75fb      	strb	r3, [r7, #23]
          break;
 8007ac0:	e02b      	b.n	8007b1a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b03      	cmp	r3, #3
 8007acc:	d107      	bne.n	8007ade <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007ace:	f107 030d 	add.w	r3, r7, #13
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f001 fa89 	bl	8008fee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007adc:	e01d      	b.n	8007b1a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f001 fa13 	bl	8008f0c <USBD_CtlError>
            ret = USBD_FAIL;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	75fb      	strb	r3, [r7, #23]
          break;
 8007aea:	e016      	b.n	8007b1a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b03      	cmp	r3, #3
 8007af6:	d00f      	beq.n	8007b18 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f001 fa06 	bl	8008f0c <USBD_CtlError>
            ret = USBD_FAIL;
 8007b00:	2303      	movs	r3, #3
 8007b02:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007b04:	e008      	b.n	8007b18 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f001 f9ff 	bl	8008f0c <USBD_CtlError>
          ret = USBD_FAIL;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	75fb      	strb	r3, [r7, #23]
          break;
 8007b12:	e002      	b.n	8007b1a <USBD_CDC_Setup+0x176>
          break;
 8007b14:	bf00      	nop
 8007b16:	e008      	b.n	8007b2a <USBD_CDC_Setup+0x186>
          break;
 8007b18:	bf00      	nop
      }
      break;
 8007b1a:	e006      	b.n	8007b2a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f001 f9f4 	bl	8008f0c <USBD_CtlError>
      ret = USBD_FAIL;
 8007b24:	2303      	movs	r3, #3
 8007b26:	75fb      	strb	r3, [r7, #23]
      break;
 8007b28:	bf00      	nop
  }

  return (uint8_t)ret;
 8007b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3718      	adds	r7, #24
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007b46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b52:	2303      	movs	r3, #3
 8007b54:	e04f      	b.n	8007bf6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007b5c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007b5e:	78fa      	ldrb	r2, [r7, #3]
 8007b60:	6879      	ldr	r1, [r7, #4]
 8007b62:	4613      	mov	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	440b      	add	r3, r1
 8007b6c:	3318      	adds	r3, #24
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d029      	beq.n	8007bc8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007b74:	78fa      	ldrb	r2, [r7, #3]
 8007b76:	6879      	ldr	r1, [r7, #4]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	440b      	add	r3, r1
 8007b82:	3318      	adds	r3, #24
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	78f9      	ldrb	r1, [r7, #3]
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	440b      	add	r3, r1
 8007b90:	00db      	lsls	r3, r3, #3
 8007b92:	4403      	add	r3, r0
 8007b94:	3320      	adds	r3, #32
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ba0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d110      	bne.n	8007bc8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007ba6:	78fa      	ldrb	r2, [r7, #3]
 8007ba8:	6879      	ldr	r1, [r7, #4]
 8007baa:	4613      	mov	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	440b      	add	r3, r1
 8007bb4:	3318      	adds	r3, #24
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007bba:	78f9      	ldrb	r1, [r7, #3]
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f001 feca 	bl	800995a <USBD_LL_Transmit>
 8007bc6:	e015      	b.n	8007bf4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00b      	beq.n	8007bf4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007bf0:	78fa      	ldrb	r2, [r7, #3]
 8007bf2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	460b      	mov	r3, r1
 8007c08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c10:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d101      	bne.n	8007c20 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	e015      	b.n	8007c4c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007c20:	78fb      	ldrb	r3, [r7, #3]
 8007c22:	4619      	mov	r1, r3
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f001 feda 	bl	80099de <USBD_LL_GetRxDataSize>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007c46:	4611      	mov	r1, r2
 8007c48:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c62:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d101      	bne.n	8007c6e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e01a      	b.n	8007ca4 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d014      	beq.n	8007ca2 <USBD_CDC_EP0_RxReady+0x4e>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007c7e:	2bff      	cmp	r3, #255	@ 0xff
 8007c80:	d00f      	beq.n	8007ca2 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8007c90:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c98:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	22ff      	movs	r2, #255	@ 0xff
 8007c9e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2243      	movs	r2, #67	@ 0x43
 8007cb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007cba:	4b03      	ldr	r3, [pc, #12]	@ (8007cc8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr
 8007cc8:	20000094 	.word	0x20000094

08007ccc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2243      	movs	r2, #67	@ 0x43
 8007cd8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007cda:	4b03      	ldr	r3, [pc, #12]	@ (8007ce8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr
 8007ce8:	20000050 	.word	0x20000050

08007cec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2243      	movs	r2, #67	@ 0x43
 8007cf8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007cfa:	4b03      	ldr	r3, [pc, #12]	@ (8007d08 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr
 8007d08:	200000d8 	.word	0x200000d8

08007d0c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	220a      	movs	r2, #10
 8007d18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007d1a:	4b03      	ldr	r3, [pc, #12]	@ (8007d28 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr
 8007d28:	2000000c 	.word	0x2000000c

08007d2c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e004      	b.n	8007d4a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	370c      	adds	r7, #12
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b087      	sub	sp, #28
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	60f8      	str	r0, [r7, #12]
 8007d5e:	60b9      	str	r1, [r7, #8]
 8007d60:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007d68:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d101      	bne.n	8007d74 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007d70:	2303      	movs	r3, #3
 8007d72:	e008      	b.n	8007d86 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	371c      	adds	r7, #28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b085      	sub	sp, #20
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
 8007d9a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007da2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d101      	bne.n	8007dae <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e004      	b.n	8007db8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	683a      	ldr	r2, [r7, #0]
 8007db2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3714      	adds	r7, #20
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007dd2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d101      	bne.n	8007de6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e01a      	b.n	8007e1c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d114      	bne.n	8007e1a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007e0e:	2181      	movs	r1, #129	@ 0x81
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f001 fda2 	bl	800995a <USBD_LL_Transmit>

    ret = USBD_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e016      	b.n	8007e70 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	7c1b      	ldrb	r3, [r3, #16]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d109      	bne.n	8007e5e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e54:	2101      	movs	r1, #1
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f001 fda0 	bl	800999c <USBD_LL_PrepareReceive>
 8007e5c:	e007      	b.n	8007e6e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e64:	2340      	movs	r3, #64	@ 0x40
 8007e66:	2101      	movs	r1, #1
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f001 fd97 	bl	800999c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	4613      	mov	r3, r2
 8007e84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d10a      	bne.n	8007ea2 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8007e8c:	4817      	ldr	r0, [pc, #92]	@ (8007eec <USBD_Init+0x74>)
 8007e8e:	f001 fefb 	bl	8009c88 <iprintf>
 8007e92:	4817      	ldr	r0, [pc, #92]	@ (8007ef0 <USBD_Init+0x78>)
 8007e94:	f001 fef8 	bl	8009c88 <iprintf>
 8007e98:	200a      	movs	r0, #10
 8007e9a:	f001 ff07 	bl	8009cac <putchar>
#endif
    return USBD_FAIL;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	e01f      	b.n	8007ee2 <USBD_Init+0x6a>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d003      	beq.n	8007ec8 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	79fa      	ldrb	r2, [r7, #7]
 8007ed4:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f001 fbf6 	bl	80096c8 <USBD_LL_Init>
 8007edc:	4603      	mov	r3, r0
 8007ede:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3718      	adds	r7, #24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	0800ae88 	.word	0x0800ae88
 8007ef0:	0800ae90 	.word	0x0800ae90

08007ef4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007efe:	2300      	movs	r3, #0
 8007f00:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10a      	bne.n	8007f1e <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8007f08:	4812      	ldr	r0, [pc, #72]	@ (8007f54 <USBD_RegisterClass+0x60>)
 8007f0a:	f001 febd 	bl	8009c88 <iprintf>
 8007f0e:	4812      	ldr	r0, [pc, #72]	@ (8007f58 <USBD_RegisterClass+0x64>)
 8007f10:	f001 feba 	bl	8009c88 <iprintf>
 8007f14:	200a      	movs	r0, #10
 8007f16:	f001 fec9 	bl	8009cac <putchar>
#endif
    return USBD_FAIL;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e016      	b.n	8007f4c <USBD_RegisterClass+0x58>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	683a      	ldr	r2, [r7, #0]
 8007f22:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00b      	beq.n	8007f4a <USBD_RegisterClass+0x56>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f3a:	f107 020e 	add.w	r2, r7, #14
 8007f3e:	4610      	mov	r0, r2
 8007f40:	4798      	blx	r3
 8007f42:	4602      	mov	r2, r0
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	0800ae88 	.word	0x0800ae88
 8007f58:	0800aea8 	.word	0x0800aea8

08007f5c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f001 fc0f 	bl	8009788 <USBD_LL_Start>
 8007f6a:	4603      	mov	r3, r0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3708      	adds	r7, #8
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	370c      	adds	r7, #12
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b084      	sub	sp, #16
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	460b      	mov	r3, r1
 8007f94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007f96:	2303      	movs	r3, #3
 8007f98:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d009      	beq.n	8007fb8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	78fa      	ldrb	r2, [r7, #3]
 8007fae:	4611      	mov	r1, r2
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	4798      	blx	r3
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b082      	sub	sp, #8
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
 8007fca:	460b      	mov	r3, r1
 8007fcc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d007      	beq.n	8007fe8 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	78fa      	ldrb	r2, [r7, #3]
 8007fe2:	4611      	mov	r1, r2
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	4798      	blx	r3
  }

  return USBD_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3708      	adds	r7, #8
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b084      	sub	sp, #16
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008002:	6839      	ldr	r1, [r7, #0]
 8008004:	4618      	mov	r0, r3
 8008006:	f000 ff47 	bl	8008e98 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2201      	movs	r2, #1
 800800e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008018:	461a      	mov	r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008026:	f003 031f 	and.w	r3, r3, #31
 800802a:	2b02      	cmp	r3, #2
 800802c:	d01a      	beq.n	8008064 <USBD_LL_SetupStage+0x72>
 800802e:	2b02      	cmp	r3, #2
 8008030:	d822      	bhi.n	8008078 <USBD_LL_SetupStage+0x86>
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <USBD_LL_SetupStage+0x4a>
 8008036:	2b01      	cmp	r3, #1
 8008038:	d00a      	beq.n	8008050 <USBD_LL_SetupStage+0x5e>
 800803a:	e01d      	b.n	8008078 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f9ef 	bl	8008428 <USBD_StdDevReq>
 800804a:	4603      	mov	r3, r0
 800804c:	73fb      	strb	r3, [r7, #15]
      break;
 800804e:	e020      	b.n	8008092 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008056:	4619      	mov	r1, r3
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fa53 	bl	8008504 <USBD_StdItfReq>
 800805e:	4603      	mov	r3, r0
 8008060:	73fb      	strb	r3, [r7, #15]
      break;
 8008062:	e016      	b.n	8008092 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800806a:	4619      	mov	r1, r3
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fa92 	bl	8008596 <USBD_StdEPReq>
 8008072:	4603      	mov	r3, r0
 8008074:	73fb      	strb	r3, [r7, #15]
      break;
 8008076:	e00c      	b.n	8008092 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800807e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008082:	b2db      	uxtb	r3, r3
 8008084:	4619      	mov	r1, r3
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f001 fbde 	bl	8009848 <USBD_LL_StallEP>
 800808c:	4603      	mov	r3, r0
 800808e:	73fb      	strb	r3, [r7, #15]
      break;
 8008090:	bf00      	nop
  }

  return ret;
 8008092:	7bfb      	ldrb	r3, [r7, #15]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	460b      	mov	r3, r1
 80080a6:	607a      	str	r2, [r7, #4]
 80080a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80080aa:	7afb      	ldrb	r3, [r7, #11]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d138      	bne.n	8008122 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80080b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80080be:	2b03      	cmp	r3, #3
 80080c0:	d14a      	bne.n	8008158 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	689a      	ldr	r2, [r3, #8]
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d913      	bls.n	80080f6 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	689a      	ldr	r2, [r3, #8]
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	1ad2      	subs	r2, r2, r3
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	68da      	ldr	r2, [r3, #12]
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	4293      	cmp	r3, r2
 80080e6:	bf28      	it	cs
 80080e8:	4613      	movcs	r3, r2
 80080ea:	461a      	mov	r2, r3
 80080ec:	6879      	ldr	r1, [r7, #4]
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	f000 ffc6 	bl	8009080 <USBD_CtlContinueRx>
 80080f4:	e030      	b.n	8008158 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	2b03      	cmp	r3, #3
 8008100:	d10b      	bne.n	800811a <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d005      	beq.n	800811a <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f000 ffc1 	bl	80090a2 <USBD_CtlSendStatus>
 8008120:	e01a      	b.n	8008158 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008128:	b2db      	uxtb	r3, r3
 800812a:	2b03      	cmp	r3, #3
 800812c:	d114      	bne.n	8008158 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00e      	beq.n	8008158 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	7afa      	ldrb	r2, [r7, #11]
 8008144:	4611      	mov	r1, r2
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	4798      	blx	r3
 800814a:	4603      	mov	r3, r0
 800814c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800814e:	7dfb      	ldrb	r3, [r7, #23]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d001      	beq.n	8008158 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008154:	7dfb      	ldrb	r3, [r7, #23]
 8008156:	e000      	b.n	800815a <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3718      	adds	r7, #24
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b086      	sub	sp, #24
 8008166:	af00      	add	r7, sp, #0
 8008168:	60f8      	str	r0, [r7, #12]
 800816a:	460b      	mov	r3, r1
 800816c:	607a      	str	r2, [r7, #4]
 800816e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008170:	7afb      	ldrb	r3, [r7, #11]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d16b      	bne.n	800824e <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	3314      	adds	r3, #20
 800817a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008182:	2b02      	cmp	r3, #2
 8008184:	d156      	bne.n	8008234 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	689a      	ldr	r2, [r3, #8]
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	429a      	cmp	r2, r3
 8008190:	d914      	bls.n	80081bc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	689a      	ldr	r2, [r3, #8]
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	1ad2      	subs	r2, r2, r3
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	461a      	mov	r2, r3
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f000 ff3b 	bl	8009024 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081ae:	2300      	movs	r3, #0
 80081b0:	2200      	movs	r2, #0
 80081b2:	2100      	movs	r1, #0
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f001 fbf1 	bl	800999c <USBD_LL_PrepareReceive>
 80081ba:	e03b      	b.n	8008234 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	68da      	ldr	r2, [r3, #12]
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d11c      	bne.n	8008202 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	685a      	ldr	r2, [r3, #4]
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d316      	bcc.n	8008202 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	685a      	ldr	r2, [r3, #4]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80081de:	429a      	cmp	r2, r3
 80081e0:	d20f      	bcs.n	8008202 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80081e2:	2200      	movs	r2, #0
 80081e4:	2100      	movs	r1, #0
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	f000 ff1c 	bl	8009024 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081f4:	2300      	movs	r3, #0
 80081f6:	2200      	movs	r2, #0
 80081f8:	2100      	movs	r1, #0
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f001 fbce 	bl	800999c <USBD_LL_PrepareReceive>
 8008200:	e018      	b.n	8008234 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b03      	cmp	r3, #3
 800820c:	d10b      	bne.n	8008226 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d005      	beq.n	8008226 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008226:	2180      	movs	r1, #128	@ 0x80
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f001 fb0d 	bl	8009848 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f000 ff4a 	bl	80090c8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800823a:	2b01      	cmp	r3, #1
 800823c:	d122      	bne.n	8008284 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f7ff fe98 	bl	8007f74 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800824c:	e01a      	b.n	8008284 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008254:	b2db      	uxtb	r3, r3
 8008256:	2b03      	cmp	r3, #3
 8008258:	d114      	bne.n	8008284 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00e      	beq.n	8008284 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800826c:	695b      	ldr	r3, [r3, #20]
 800826e:	7afa      	ldrb	r2, [r7, #11]
 8008270:	4611      	mov	r1, r2
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	4798      	blx	r3
 8008276:	4603      	mov	r3, r0
 8008278:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800827a:	7dfb      	ldrb	r3, [r7, #23]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d001      	beq.n	8008284 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008280:	7dfb      	ldrb	r3, [r7, #23]
 8008282:	e000      	b.n	8008286 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3718      	adds	r7, #24
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b082      	sub	sp, #8
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d101      	bne.n	80082c2 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80082be:	2303      	movs	r3, #3
 80082c0:	e02f      	b.n	8008322 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00f      	beq.n	80082ec <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d009      	beq.n	80082ec <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	6852      	ldr	r2, [r2, #4]
 80082e4:	b2d2      	uxtb	r2, r2
 80082e6:	4611      	mov	r1, r2
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082ec:	2340      	movs	r3, #64	@ 0x40
 80082ee:	2200      	movs	r2, #0
 80082f0:	2100      	movs	r1, #0
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f001 fa63 	bl	80097be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2240      	movs	r2, #64	@ 0x40
 8008304:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008308:	2340      	movs	r3, #64	@ 0x40
 800830a:	2200      	movs	r2, #0
 800830c:	2180      	movs	r1, #128	@ 0x80
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f001 fa55 	bl	80097be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2240      	movs	r2, #64	@ 0x40
 800831e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3708      	adds	r7, #8
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800832a:	b480      	push	{r7}
 800832c:	b083      	sub	sp, #12
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	460b      	mov	r3, r1
 8008334:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	78fa      	ldrb	r2, [r7, #3]
 800833a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	370c      	adds	r7, #12
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800834a:	b480      	push	{r7}
 800834c:	b083      	sub	sp, #12
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008358:	b2da      	uxtb	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2204      	movs	r2, #4
 8008364:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	370c      	adds	r7, #12
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr

08008376 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008376:	b480      	push	{r7}
 8008378:	b083      	sub	sp, #12
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008384:	b2db      	uxtb	r3, r3
 8008386:	2b04      	cmp	r3, #4
 8008388:	d106      	bne.n	8008398 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008390:	b2da      	uxtb	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	370c      	adds	r7, #12
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr

080083a6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b082      	sub	sp, #8
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d101      	bne.n	80083bc <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e012      	b.n	80083e2 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b03      	cmp	r3, #3
 80083c6:	d10b      	bne.n	80083e0 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083ce:	69db      	ldr	r3, [r3, #28]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d005      	beq.n	80083e0 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083da:	69db      	ldr	r3, [r3, #28]
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80083ea:	b480      	push	{r7}
 80083ec:	b087      	sub	sp, #28
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	3301      	adds	r3, #1
 8008400:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008408:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800840c:	021b      	lsls	r3, r3, #8
 800840e:	b21a      	sxth	r2, r3
 8008410:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008414:	4313      	orrs	r3, r2
 8008416:	b21b      	sxth	r3, r3
 8008418:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800841a:	89fb      	ldrh	r3, [r7, #14]
}
 800841c:	4618      	mov	r0, r3
 800841e:	371c      	adds	r7, #28
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008432:	2300      	movs	r3, #0
 8008434:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800843e:	2b40      	cmp	r3, #64	@ 0x40
 8008440:	d005      	beq.n	800844e <USBD_StdDevReq+0x26>
 8008442:	2b40      	cmp	r3, #64	@ 0x40
 8008444:	d853      	bhi.n	80084ee <USBD_StdDevReq+0xc6>
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00b      	beq.n	8008462 <USBD_StdDevReq+0x3a>
 800844a:	2b20      	cmp	r3, #32
 800844c:	d14f      	bne.n	80084ee <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	4798      	blx	r3
 800845c:	4603      	mov	r3, r0
 800845e:	73fb      	strb	r3, [r7, #15]
      break;
 8008460:	e04a      	b.n	80084f8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	785b      	ldrb	r3, [r3, #1]
 8008466:	2b09      	cmp	r3, #9
 8008468:	d83b      	bhi.n	80084e2 <USBD_StdDevReq+0xba>
 800846a:	a201      	add	r2, pc, #4	@ (adr r2, 8008470 <USBD_StdDevReq+0x48>)
 800846c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008470:	080084c5 	.word	0x080084c5
 8008474:	080084d9 	.word	0x080084d9
 8008478:	080084e3 	.word	0x080084e3
 800847c:	080084cf 	.word	0x080084cf
 8008480:	080084e3 	.word	0x080084e3
 8008484:	080084a3 	.word	0x080084a3
 8008488:	08008499 	.word	0x08008499
 800848c:	080084e3 	.word	0x080084e3
 8008490:	080084bb 	.word	0x080084bb
 8008494:	080084ad 	.word	0x080084ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f9de 	bl	800885c <USBD_GetDescriptor>
          break;
 80084a0:	e024      	b.n	80084ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fb6d 	bl	8008b84 <USBD_SetAddress>
          break;
 80084aa:	e01f      	b.n	80084ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fbac 	bl	8008c0c <USBD_SetConfig>
 80084b4:	4603      	mov	r3, r0
 80084b6:	73fb      	strb	r3, [r7, #15]
          break;
 80084b8:	e018      	b.n	80084ec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fc4b 	bl	8008d58 <USBD_GetConfig>
          break;
 80084c2:	e013      	b.n	80084ec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fc7c 	bl	8008dc4 <USBD_GetStatus>
          break;
 80084cc:	e00e      	b.n	80084ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fcab 	bl	8008e2c <USBD_SetFeature>
          break;
 80084d6:	e009      	b.n	80084ec <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fcba 	bl	8008e54 <USBD_ClrFeature>
          break;
 80084e0:	e004      	b.n	80084ec <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 fd11 	bl	8008f0c <USBD_CtlError>
          break;
 80084ea:	bf00      	nop
      }
      break;
 80084ec:	e004      	b.n	80084f8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fd0b 	bl	8008f0c <USBD_CtlError>
      break;
 80084f6:	bf00      	nop
  }

  return ret;
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop

08008504 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800850e:	2300      	movs	r3, #0
 8008510:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800851a:	2b40      	cmp	r3, #64	@ 0x40
 800851c:	d005      	beq.n	800852a <USBD_StdItfReq+0x26>
 800851e:	2b40      	cmp	r3, #64	@ 0x40
 8008520:	d82f      	bhi.n	8008582 <USBD_StdItfReq+0x7e>
 8008522:	2b00      	cmp	r3, #0
 8008524:	d001      	beq.n	800852a <USBD_StdItfReq+0x26>
 8008526:	2b20      	cmp	r3, #32
 8008528:	d12b      	bne.n	8008582 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008530:	b2db      	uxtb	r3, r3
 8008532:	3b01      	subs	r3, #1
 8008534:	2b02      	cmp	r3, #2
 8008536:	d81d      	bhi.n	8008574 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	889b      	ldrh	r3, [r3, #4]
 800853c:	b2db      	uxtb	r3, r3
 800853e:	2b01      	cmp	r3, #1
 8008540:	d813      	bhi.n	800856a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	4798      	blx	r3
 8008550:	4603      	mov	r3, r0
 8008552:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	88db      	ldrh	r3, [r3, #6]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d110      	bne.n	800857e <USBD_StdItfReq+0x7a>
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d10d      	bne.n	800857e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fd9d 	bl	80090a2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008568:	e009      	b.n	800857e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800856a:	6839      	ldr	r1, [r7, #0]
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 fccd 	bl	8008f0c <USBD_CtlError>
          break;
 8008572:	e004      	b.n	800857e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008574:	6839      	ldr	r1, [r7, #0]
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fcc8 	bl	8008f0c <USBD_CtlError>
          break;
 800857c:	e000      	b.n	8008580 <USBD_StdItfReq+0x7c>
          break;
 800857e:	bf00      	nop
      }
      break;
 8008580:	e004      	b.n	800858c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fcc1 	bl	8008f0c <USBD_CtlError>
      break;
 800858a:	bf00      	nop
  }

  return ret;
 800858c:	7bfb      	ldrb	r3, [r7, #15]
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b084      	sub	sp, #16
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	889b      	ldrh	r3, [r3, #4]
 80085a8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80085b2:	2b40      	cmp	r3, #64	@ 0x40
 80085b4:	d007      	beq.n	80085c6 <USBD_StdEPReq+0x30>
 80085b6:	2b40      	cmp	r3, #64	@ 0x40
 80085b8:	f200 8145 	bhi.w	8008846 <USBD_StdEPReq+0x2b0>
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00c      	beq.n	80085da <USBD_StdEPReq+0x44>
 80085c0:	2b20      	cmp	r3, #32
 80085c2:	f040 8140 	bne.w	8008846 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	4798      	blx	r3
 80085d4:	4603      	mov	r3, r0
 80085d6:	73fb      	strb	r3, [r7, #15]
      break;
 80085d8:	e13a      	b.n	8008850 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	785b      	ldrb	r3, [r3, #1]
 80085de:	2b03      	cmp	r3, #3
 80085e0:	d007      	beq.n	80085f2 <USBD_StdEPReq+0x5c>
 80085e2:	2b03      	cmp	r3, #3
 80085e4:	f300 8129 	bgt.w	800883a <USBD_StdEPReq+0x2a4>
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d07f      	beq.n	80086ec <USBD_StdEPReq+0x156>
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d03c      	beq.n	800866a <USBD_StdEPReq+0xd4>
 80085f0:	e123      	b.n	800883a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d002      	beq.n	8008604 <USBD_StdEPReq+0x6e>
 80085fe:	2b03      	cmp	r3, #3
 8008600:	d016      	beq.n	8008630 <USBD_StdEPReq+0x9a>
 8008602:	e02c      	b.n	800865e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008604:	7bbb      	ldrb	r3, [r7, #14]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00d      	beq.n	8008626 <USBD_StdEPReq+0x90>
 800860a:	7bbb      	ldrb	r3, [r7, #14]
 800860c:	2b80      	cmp	r3, #128	@ 0x80
 800860e:	d00a      	beq.n	8008626 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008610:	7bbb      	ldrb	r3, [r7, #14]
 8008612:	4619      	mov	r1, r3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f001 f917 	bl	8009848 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800861a:	2180      	movs	r1, #128	@ 0x80
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f001 f913 	bl	8009848 <USBD_LL_StallEP>
 8008622:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008624:	e020      	b.n	8008668 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008626:	6839      	ldr	r1, [r7, #0]
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fc6f 	bl	8008f0c <USBD_CtlError>
              break;
 800862e:	e01b      	b.n	8008668 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	885b      	ldrh	r3, [r3, #2]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10e      	bne.n	8008656 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008638:	7bbb      	ldrb	r3, [r7, #14]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00b      	beq.n	8008656 <USBD_StdEPReq+0xc0>
 800863e:	7bbb      	ldrb	r3, [r7, #14]
 8008640:	2b80      	cmp	r3, #128	@ 0x80
 8008642:	d008      	beq.n	8008656 <USBD_StdEPReq+0xc0>
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	88db      	ldrh	r3, [r3, #6]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d104      	bne.n	8008656 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800864c:	7bbb      	ldrb	r3, [r7, #14]
 800864e:	4619      	mov	r1, r3
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f001 f8f9 	bl	8009848 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fd23 	bl	80090a2 <USBD_CtlSendStatus>

              break;
 800865c:	e004      	b.n	8008668 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800865e:	6839      	ldr	r1, [r7, #0]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fc53 	bl	8008f0c <USBD_CtlError>
              break;
 8008666:	bf00      	nop
          }
          break;
 8008668:	e0ec      	b.n	8008844 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008670:	b2db      	uxtb	r3, r3
 8008672:	2b02      	cmp	r3, #2
 8008674:	d002      	beq.n	800867c <USBD_StdEPReq+0xe6>
 8008676:	2b03      	cmp	r3, #3
 8008678:	d016      	beq.n	80086a8 <USBD_StdEPReq+0x112>
 800867a:	e030      	b.n	80086de <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800867c:	7bbb      	ldrb	r3, [r7, #14]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00d      	beq.n	800869e <USBD_StdEPReq+0x108>
 8008682:	7bbb      	ldrb	r3, [r7, #14]
 8008684:	2b80      	cmp	r3, #128	@ 0x80
 8008686:	d00a      	beq.n	800869e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008688:	7bbb      	ldrb	r3, [r7, #14]
 800868a:	4619      	mov	r1, r3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f001 f8db 	bl	8009848 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008692:	2180      	movs	r1, #128	@ 0x80
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f001 f8d7 	bl	8009848 <USBD_LL_StallEP>
 800869a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800869c:	e025      	b.n	80086ea <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800869e:	6839      	ldr	r1, [r7, #0]
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fc33 	bl	8008f0c <USBD_CtlError>
              break;
 80086a6:	e020      	b.n	80086ea <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	885b      	ldrh	r3, [r3, #2]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d11b      	bne.n	80086e8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80086b0:	7bbb      	ldrb	r3, [r7, #14]
 80086b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d004      	beq.n	80086c4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80086ba:	7bbb      	ldrb	r3, [r7, #14]
 80086bc:	4619      	mov	r1, r3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f001 f8e1 	bl	8009886 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 fcec 	bl	80090a2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	6839      	ldr	r1, [r7, #0]
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	4798      	blx	r3
 80086d8:	4603      	mov	r3, r0
 80086da:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80086dc:	e004      	b.n	80086e8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80086de:	6839      	ldr	r1, [r7, #0]
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fc13 	bl	8008f0c <USBD_CtlError>
              break;
 80086e6:	e000      	b.n	80086ea <USBD_StdEPReq+0x154>
              break;
 80086e8:	bf00      	nop
          }
          break;
 80086ea:	e0ab      	b.n	8008844 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d002      	beq.n	80086fe <USBD_StdEPReq+0x168>
 80086f8:	2b03      	cmp	r3, #3
 80086fa:	d032      	beq.n	8008762 <USBD_StdEPReq+0x1cc>
 80086fc:	e097      	b.n	800882e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086fe:	7bbb      	ldrb	r3, [r7, #14]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d007      	beq.n	8008714 <USBD_StdEPReq+0x17e>
 8008704:	7bbb      	ldrb	r3, [r7, #14]
 8008706:	2b80      	cmp	r3, #128	@ 0x80
 8008708:	d004      	beq.n	8008714 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800870a:	6839      	ldr	r1, [r7, #0]
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fbfd 	bl	8008f0c <USBD_CtlError>
                break;
 8008712:	e091      	b.n	8008838 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008714:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008718:	2b00      	cmp	r3, #0
 800871a:	da0b      	bge.n	8008734 <USBD_StdEPReq+0x19e>
 800871c:	7bbb      	ldrb	r3, [r7, #14]
 800871e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008722:	4613      	mov	r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	4413      	add	r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	3310      	adds	r3, #16
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	4413      	add	r3, r2
 8008730:	3304      	adds	r3, #4
 8008732:	e00b      	b.n	800874c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008734:	7bbb      	ldrb	r3, [r7, #14]
 8008736:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800873a:	4613      	mov	r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	4413      	add	r3, r2
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	4413      	add	r3, r2
 800874a:	3304      	adds	r3, #4
 800874c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	2200      	movs	r2, #0
 8008752:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	2202      	movs	r2, #2
 8008758:	4619      	mov	r1, r3
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 fc47 	bl	8008fee <USBD_CtlSendData>
              break;
 8008760:	e06a      	b.n	8008838 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008762:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008766:	2b00      	cmp	r3, #0
 8008768:	da11      	bge.n	800878e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800876a:	7bbb      	ldrb	r3, [r7, #14]
 800876c:	f003 020f 	and.w	r2, r3, #15
 8008770:	6879      	ldr	r1, [r7, #4]
 8008772:	4613      	mov	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4413      	add	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	440b      	add	r3, r1
 800877c:	3324      	adds	r3, #36	@ 0x24
 800877e:	881b      	ldrh	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d117      	bne.n	80087b4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008784:	6839      	ldr	r1, [r7, #0]
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 fbc0 	bl	8008f0c <USBD_CtlError>
                  break;
 800878c:	e054      	b.n	8008838 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800878e:	7bbb      	ldrb	r3, [r7, #14]
 8008790:	f003 020f 	and.w	r2, r3, #15
 8008794:	6879      	ldr	r1, [r7, #4]
 8008796:	4613      	mov	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	4413      	add	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	440b      	add	r3, r1
 80087a0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80087a4:	881b      	ldrh	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d104      	bne.n	80087b4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80087aa:	6839      	ldr	r1, [r7, #0]
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fbad 	bl	8008f0c <USBD_CtlError>
                  break;
 80087b2:	e041      	b.n	8008838 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	da0b      	bge.n	80087d4 <USBD_StdEPReq+0x23e>
 80087bc:	7bbb      	ldrb	r3, [r7, #14]
 80087be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087c2:	4613      	mov	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	3310      	adds	r3, #16
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	4413      	add	r3, r2
 80087d0:	3304      	adds	r3, #4
 80087d2:	e00b      	b.n	80087ec <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087d4:	7bbb      	ldrb	r3, [r7, #14]
 80087d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087da:	4613      	mov	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	4413      	add	r3, r2
 80087ea:	3304      	adds	r3, #4
 80087ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087ee:	7bbb      	ldrb	r3, [r7, #14]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d002      	beq.n	80087fa <USBD_StdEPReq+0x264>
 80087f4:	7bbb      	ldrb	r3, [r7, #14]
 80087f6:	2b80      	cmp	r3, #128	@ 0x80
 80087f8:	d103      	bne.n	8008802 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	2200      	movs	r2, #0
 80087fe:	601a      	str	r2, [r3, #0]
 8008800:	e00e      	b.n	8008820 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008802:	7bbb      	ldrb	r3, [r7, #14]
 8008804:	4619      	mov	r1, r3
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f001 f85c 	bl	80098c4 <USBD_LL_IsStallEP>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d003      	beq.n	800881a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	2201      	movs	r2, #1
 8008816:	601a      	str	r2, [r3, #0]
 8008818:	e002      	b.n	8008820 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	2200      	movs	r2, #0
 800881e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	2202      	movs	r2, #2
 8008824:	4619      	mov	r1, r3
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fbe1 	bl	8008fee <USBD_CtlSendData>
              break;
 800882c:	e004      	b.n	8008838 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800882e:	6839      	ldr	r1, [r7, #0]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fb6b 	bl	8008f0c <USBD_CtlError>
              break;
 8008836:	bf00      	nop
          }
          break;
 8008838:	e004      	b.n	8008844 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800883a:	6839      	ldr	r1, [r7, #0]
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 fb65 	bl	8008f0c <USBD_CtlError>
          break;
 8008842:	bf00      	nop
      }
      break;
 8008844:	e004      	b.n	8008850 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fb5f 	bl	8008f0c <USBD_CtlError>
      break;
 800884e:	bf00      	nop
  }

  return ret;
 8008850:	7bfb      	ldrb	r3, [r7, #15]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
	...

0800885c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008866:	2300      	movs	r3, #0
 8008868:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800886a:	2300      	movs	r3, #0
 800886c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800886e:	2300      	movs	r3, #0
 8008870:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	885b      	ldrh	r3, [r3, #2]
 8008876:	0a1b      	lsrs	r3, r3, #8
 8008878:	b29b      	uxth	r3, r3
 800887a:	3b01      	subs	r3, #1
 800887c:	2b0e      	cmp	r3, #14
 800887e:	f200 8152 	bhi.w	8008b26 <USBD_GetDescriptor+0x2ca>
 8008882:	a201      	add	r2, pc, #4	@ (adr r2, 8008888 <USBD_GetDescriptor+0x2c>)
 8008884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008888:	080088f9 	.word	0x080088f9
 800888c:	08008911 	.word	0x08008911
 8008890:	08008951 	.word	0x08008951
 8008894:	08008b27 	.word	0x08008b27
 8008898:	08008b27 	.word	0x08008b27
 800889c:	08008ac7 	.word	0x08008ac7
 80088a0:	08008af3 	.word	0x08008af3
 80088a4:	08008b27 	.word	0x08008b27
 80088a8:	08008b27 	.word	0x08008b27
 80088ac:	08008b27 	.word	0x08008b27
 80088b0:	08008b27 	.word	0x08008b27
 80088b4:	08008b27 	.word	0x08008b27
 80088b8:	08008b27 	.word	0x08008b27
 80088bc:	08008b27 	.word	0x08008b27
 80088c0:	080088c5 	.word	0x080088c5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088ca:	69db      	ldr	r3, [r3, #28]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d00b      	beq.n	80088e8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088d6:	69db      	ldr	r3, [r3, #28]
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	7c12      	ldrb	r2, [r2, #16]
 80088dc:	f107 0108 	add.w	r1, r7, #8
 80088e0:	4610      	mov	r0, r2
 80088e2:	4798      	blx	r3
 80088e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088e6:	e126      	b.n	8008b36 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80088e8:	6839      	ldr	r1, [r7, #0]
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fb0e 	bl	8008f0c <USBD_CtlError>
        err++;
 80088f0:	7afb      	ldrb	r3, [r7, #11]
 80088f2:	3301      	adds	r3, #1
 80088f4:	72fb      	strb	r3, [r7, #11]
      break;
 80088f6:	e11e      	b.n	8008b36 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	7c12      	ldrb	r2, [r2, #16]
 8008904:	f107 0108 	add.w	r1, r7, #8
 8008908:	4610      	mov	r0, r2
 800890a:	4798      	blx	r3
 800890c:	60f8      	str	r0, [r7, #12]
      break;
 800890e:	e112      	b.n	8008b36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	7c1b      	ldrb	r3, [r3, #16]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d10d      	bne.n	8008934 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800891e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008920:	f107 0208 	add.w	r2, r7, #8
 8008924:	4610      	mov	r0, r2
 8008926:	4798      	blx	r3
 8008928:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	3301      	adds	r3, #1
 800892e:	2202      	movs	r2, #2
 8008930:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008932:	e100      	b.n	8008b36 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800893a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800893c:	f107 0208 	add.w	r2, r7, #8
 8008940:	4610      	mov	r0, r2
 8008942:	4798      	blx	r3
 8008944:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	3301      	adds	r3, #1
 800894a:	2202      	movs	r2, #2
 800894c:	701a      	strb	r2, [r3, #0]
      break;
 800894e:	e0f2      	b.n	8008b36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	885b      	ldrh	r3, [r3, #2]
 8008954:	b2db      	uxtb	r3, r3
 8008956:	2b05      	cmp	r3, #5
 8008958:	f200 80ac 	bhi.w	8008ab4 <USBD_GetDescriptor+0x258>
 800895c:	a201      	add	r2, pc, #4	@ (adr r2, 8008964 <USBD_GetDescriptor+0x108>)
 800895e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008962:	bf00      	nop
 8008964:	0800897d 	.word	0x0800897d
 8008968:	080089b1 	.word	0x080089b1
 800896c:	080089e5 	.word	0x080089e5
 8008970:	08008a19 	.word	0x08008a19
 8008974:	08008a4d 	.word	0x08008a4d
 8008978:	08008a81 	.word	0x08008a81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00b      	beq.n	80089a0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	7c12      	ldrb	r2, [r2, #16]
 8008994:	f107 0108 	add.w	r1, r7, #8
 8008998:	4610      	mov	r0, r2
 800899a:	4798      	blx	r3
 800899c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800899e:	e091      	b.n	8008ac4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089a0:	6839      	ldr	r1, [r7, #0]
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 fab2 	bl	8008f0c <USBD_CtlError>
            err++;
 80089a8:	7afb      	ldrb	r3, [r7, #11]
 80089aa:	3301      	adds	r3, #1
 80089ac:	72fb      	strb	r3, [r7, #11]
          break;
 80089ae:	e089      	b.n	8008ac4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00b      	beq.n	80089d4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	7c12      	ldrb	r2, [r2, #16]
 80089c8:	f107 0108 	add.w	r1, r7, #8
 80089cc:	4610      	mov	r0, r2
 80089ce:	4798      	blx	r3
 80089d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089d2:	e077      	b.n	8008ac4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089d4:	6839      	ldr	r1, [r7, #0]
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fa98 	bl	8008f0c <USBD_CtlError>
            err++;
 80089dc:	7afb      	ldrb	r3, [r7, #11]
 80089de:	3301      	adds	r3, #1
 80089e0:	72fb      	strb	r3, [r7, #11]
          break;
 80089e2:	e06f      	b.n	8008ac4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d00b      	beq.n	8008a08 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	7c12      	ldrb	r2, [r2, #16]
 80089fc:	f107 0108 	add.w	r1, r7, #8
 8008a00:	4610      	mov	r0, r2
 8008a02:	4798      	blx	r3
 8008a04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a06:	e05d      	b.n	8008ac4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fa7e 	bl	8008f0c <USBD_CtlError>
            err++;
 8008a10:	7afb      	ldrb	r3, [r7, #11]
 8008a12:	3301      	adds	r3, #1
 8008a14:	72fb      	strb	r3, [r7, #11]
          break;
 8008a16:	e055      	b.n	8008ac4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d00b      	beq.n	8008a3c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	7c12      	ldrb	r2, [r2, #16]
 8008a30:	f107 0108 	add.w	r1, r7, #8
 8008a34:	4610      	mov	r0, r2
 8008a36:	4798      	blx	r3
 8008a38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a3a:	e043      	b.n	8008ac4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a3c:	6839      	ldr	r1, [r7, #0]
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 fa64 	bl	8008f0c <USBD_CtlError>
            err++;
 8008a44:	7afb      	ldrb	r3, [r7, #11]
 8008a46:	3301      	adds	r3, #1
 8008a48:	72fb      	strb	r3, [r7, #11]
          break;
 8008a4a:	e03b      	b.n	8008ac4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00b      	beq.n	8008a70 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a5e:	695b      	ldr	r3, [r3, #20]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	7c12      	ldrb	r2, [r2, #16]
 8008a64:	f107 0108 	add.w	r1, r7, #8
 8008a68:	4610      	mov	r0, r2
 8008a6a:	4798      	blx	r3
 8008a6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a6e:	e029      	b.n	8008ac4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fa4a 	bl	8008f0c <USBD_CtlError>
            err++;
 8008a78:	7afb      	ldrb	r3, [r7, #11]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a7e:	e021      	b.n	8008ac4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00b      	beq.n	8008aa4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a92:	699b      	ldr	r3, [r3, #24]
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	7c12      	ldrb	r2, [r2, #16]
 8008a98:	f107 0108 	add.w	r1, r7, #8
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	4798      	blx	r3
 8008aa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008aa2:	e00f      	b.n	8008ac4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008aa4:	6839      	ldr	r1, [r7, #0]
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fa30 	bl	8008f0c <USBD_CtlError>
            err++;
 8008aac:	7afb      	ldrb	r3, [r7, #11]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ab2:	e007      	b.n	8008ac4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008ab4:	6839      	ldr	r1, [r7, #0]
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fa28 	bl	8008f0c <USBD_CtlError>
          err++;
 8008abc:	7afb      	ldrb	r3, [r7, #11]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008ac2:	bf00      	nop
      }
      break;
 8008ac4:	e037      	b.n	8008b36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	7c1b      	ldrb	r3, [r3, #16]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d109      	bne.n	8008ae2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ad6:	f107 0208 	add.w	r2, r7, #8
 8008ada:	4610      	mov	r0, r2
 8008adc:	4798      	blx	r3
 8008ade:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ae0:	e029      	b.n	8008b36 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fa11 	bl	8008f0c <USBD_CtlError>
        err++;
 8008aea:	7afb      	ldrb	r3, [r7, #11]
 8008aec:	3301      	adds	r3, #1
 8008aee:	72fb      	strb	r3, [r7, #11]
      break;
 8008af0:	e021      	b.n	8008b36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	7c1b      	ldrb	r3, [r3, #16]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10d      	bne.n	8008b16 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b02:	f107 0208 	add.w	r2, r7, #8
 8008b06:	4610      	mov	r0, r2
 8008b08:	4798      	blx	r3
 8008b0a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	2207      	movs	r2, #7
 8008b12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b14:	e00f      	b.n	8008b36 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f9f7 	bl	8008f0c <USBD_CtlError>
        err++;
 8008b1e:	7afb      	ldrb	r3, [r7, #11]
 8008b20:	3301      	adds	r3, #1
 8008b22:	72fb      	strb	r3, [r7, #11]
      break;
 8008b24:	e007      	b.n	8008b36 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008b26:	6839      	ldr	r1, [r7, #0]
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 f9ef 	bl	8008f0c <USBD_CtlError>
      err++;
 8008b2e:	7afb      	ldrb	r3, [r7, #11]
 8008b30:	3301      	adds	r3, #1
 8008b32:	72fb      	strb	r3, [r7, #11]
      break;
 8008b34:	bf00      	nop
  }

  if (err != 0U)
 8008b36:	7afb      	ldrb	r3, [r7, #11]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d11e      	bne.n	8008b7a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	88db      	ldrh	r3, [r3, #6]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d016      	beq.n	8008b72 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008b44:	893b      	ldrh	r3, [r7, #8]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00e      	beq.n	8008b68 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	88da      	ldrh	r2, [r3, #6]
 8008b4e:	893b      	ldrh	r3, [r7, #8]
 8008b50:	4293      	cmp	r3, r2
 8008b52:	bf28      	it	cs
 8008b54:	4613      	movcs	r3, r2
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b5a:	893b      	ldrh	r3, [r7, #8]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	68f9      	ldr	r1, [r7, #12]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fa44 	bl	8008fee <USBD_CtlSendData>
 8008b66:	e009      	b.n	8008b7c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b68:	6839      	ldr	r1, [r7, #0]
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 f9ce 	bl	8008f0c <USBD_CtlError>
 8008b70:	e004      	b.n	8008b7c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fa95 	bl	80090a2 <USBD_CtlSendStatus>
 8008b78:	e000      	b.n	8008b7c <USBD_GetDescriptor+0x320>
    return;
 8008b7a:	bf00      	nop
  }
}
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop

08008b84 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	889b      	ldrh	r3, [r3, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d131      	bne.n	8008bfa <USBD_SetAddress+0x76>
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	88db      	ldrh	r3, [r3, #6]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d12d      	bne.n	8008bfa <USBD_SetAddress+0x76>
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	885b      	ldrh	r3, [r3, #2]
 8008ba2:	2b7f      	cmp	r3, #127	@ 0x7f
 8008ba4:	d829      	bhi.n	8008bfa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	885b      	ldrh	r3, [r3, #2]
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bb0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b03      	cmp	r3, #3
 8008bbc:	d104      	bne.n	8008bc8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008bbe:	6839      	ldr	r1, [r7, #0]
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 f9a3 	bl	8008f0c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bc6:	e01d      	b.n	8008c04 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	7bfa      	ldrb	r2, [r7, #15]
 8008bcc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008bd0:	7bfb      	ldrb	r3, [r7, #15]
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 fea1 	bl	800991c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 fa61 	bl	80090a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008be0:	7bfb      	ldrb	r3, [r7, #15]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d004      	beq.n	8008bf0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2202      	movs	r2, #2
 8008bea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bee:	e009      	b.n	8008c04 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bf8:	e004      	b.n	8008c04 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bfa:	6839      	ldr	r1, [r7, #0]
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 f985 	bl	8008f0c <USBD_CtlError>
  }
}
 8008c02:	bf00      	nop
 8008c04:	bf00      	nop
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c16:	2300      	movs	r3, #0
 8008c18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	885b      	ldrh	r3, [r3, #2]
 8008c1e:	b2da      	uxtb	r2, r3
 8008c20:	4b4c      	ldr	r3, [pc, #304]	@ (8008d54 <USBD_SetConfig+0x148>)
 8008c22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c24:	4b4b      	ldr	r3, [pc, #300]	@ (8008d54 <USBD_SetConfig+0x148>)
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d905      	bls.n	8008c38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f96c 	bl	8008f0c <USBD_CtlError>
    return USBD_FAIL;
 8008c34:	2303      	movs	r3, #3
 8008c36:	e088      	b.n	8008d4a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d002      	beq.n	8008c4a <USBD_SetConfig+0x3e>
 8008c44:	2b03      	cmp	r3, #3
 8008c46:	d025      	beq.n	8008c94 <USBD_SetConfig+0x88>
 8008c48:	e071      	b.n	8008d2e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008c4a:	4b42      	ldr	r3, [pc, #264]	@ (8008d54 <USBD_SetConfig+0x148>)
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d01c      	beq.n	8008c8c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008c52:	4b40      	ldr	r3, [pc, #256]	@ (8008d54 <USBD_SetConfig+0x148>)
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	461a      	mov	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c5c:	4b3d      	ldr	r3, [pc, #244]	@ (8008d54 <USBD_SetConfig+0x148>)
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	4619      	mov	r1, r3
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f7ff f991 	bl	8007f8a <USBD_SetClassConfig>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d004      	beq.n	8008c7c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 f949 	bl	8008f0c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c7a:	e065      	b.n	8008d48 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 fa10 	bl	80090a2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2203      	movs	r2, #3
 8008c86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008c8a:	e05d      	b.n	8008d48 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 fa08 	bl	80090a2 <USBD_CtlSendStatus>
      break;
 8008c92:	e059      	b.n	8008d48 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c94:	4b2f      	ldr	r3, [pc, #188]	@ (8008d54 <USBD_SetConfig+0x148>)
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d112      	bne.n	8008cc2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8008d54 <USBD_SetConfig+0x148>)
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	461a      	mov	r2, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cae:	4b29      	ldr	r3, [pc, #164]	@ (8008d54 <USBD_SetConfig+0x148>)
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f7ff f984 	bl	8007fc2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 f9f1 	bl	80090a2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008cc0:	e042      	b.n	8008d48 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008cc2:	4b24      	ldr	r3, [pc, #144]	@ (8008d54 <USBD_SetConfig+0x148>)
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d02a      	beq.n	8008d26 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7ff f972 	bl	8007fc2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008cde:	4b1d      	ldr	r3, [pc, #116]	@ (8008d54 <USBD_SetConfig+0x148>)
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8008d54 <USBD_SetConfig+0x148>)
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	4619      	mov	r1, r3
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f7ff f94b 	bl	8007f8a <USBD_SetClassConfig>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00f      	beq.n	8008d1e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008cfe:	6839      	ldr	r1, [r7, #0]
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 f903 	bl	8008f0c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f7ff f957 	bl	8007fc2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2202      	movs	r2, #2
 8008d18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008d1c:	e014      	b.n	8008d48 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f9bf 	bl	80090a2 <USBD_CtlSendStatus>
      break;
 8008d24:	e010      	b.n	8008d48 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f9bb 	bl	80090a2 <USBD_CtlSendStatus>
      break;
 8008d2c:	e00c      	b.n	8008d48 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008d2e:	6839      	ldr	r1, [r7, #0]
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f8eb 	bl	8008f0c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d36:	4b07      	ldr	r3, [pc, #28]	@ (8008d54 <USBD_SetConfig+0x148>)
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f7ff f940 	bl	8007fc2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008d42:	2303      	movs	r3, #3
 8008d44:	73fb      	strb	r3, [r7, #15]
      break;
 8008d46:	bf00      	nop
  }

  return ret;
 8008d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	200004b4 	.word	0x200004b4

08008d58 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	88db      	ldrh	r3, [r3, #6]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d004      	beq.n	8008d74 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d6a:	6839      	ldr	r1, [r7, #0]
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 f8cd 	bl	8008f0c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d72:	e023      	b.n	8008dbc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	dc02      	bgt.n	8008d86 <USBD_GetConfig+0x2e>
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	dc03      	bgt.n	8008d8c <USBD_GetConfig+0x34>
 8008d84:	e015      	b.n	8008db2 <USBD_GetConfig+0x5a>
 8008d86:	2b03      	cmp	r3, #3
 8008d88:	d00b      	beq.n	8008da2 <USBD_GetConfig+0x4a>
 8008d8a:	e012      	b.n	8008db2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	3308      	adds	r3, #8
 8008d96:	2201      	movs	r2, #1
 8008d98:	4619      	mov	r1, r3
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f927 	bl	8008fee <USBD_CtlSendData>
        break;
 8008da0:	e00c      	b.n	8008dbc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	3304      	adds	r3, #4
 8008da6:	2201      	movs	r2, #1
 8008da8:	4619      	mov	r1, r3
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f91f 	bl	8008fee <USBD_CtlSendData>
        break;
 8008db0:	e004      	b.n	8008dbc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008db2:	6839      	ldr	r1, [r7, #0]
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f8a9 	bl	8008f0c <USBD_CtlError>
        break;
 8008dba:	bf00      	nop
}
 8008dbc:	bf00      	nop
 8008dbe:	3708      	adds	r7, #8
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	d81e      	bhi.n	8008e1a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	88db      	ldrh	r3, [r3, #6]
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	d004      	beq.n	8008dee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008de4:	6839      	ldr	r1, [r7, #0]
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f890 	bl	8008f0c <USBD_CtlError>
        break;
 8008dec:	e01a      	b.n	8008e24 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d005      	beq.n	8008e0a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	f043 0202 	orr.w	r2, r3, #2
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	330c      	adds	r3, #12
 8008e0e:	2202      	movs	r2, #2
 8008e10:	4619      	mov	r1, r3
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f8eb 	bl	8008fee <USBD_CtlSendData>
      break;
 8008e18:	e004      	b.n	8008e24 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008e1a:	6839      	ldr	r1, [r7, #0]
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f875 	bl	8008f0c <USBD_CtlError>
      break;
 8008e22:	bf00      	nop
  }
}
 8008e24:	bf00      	nop
 8008e26:	3708      	adds	r7, #8
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	885b      	ldrh	r3, [r3, #2]
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d106      	bne.n	8008e4c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f92b 	bl	80090a2 <USBD_CtlSendStatus>
  }
}
 8008e4c:	bf00      	nop
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	3b01      	subs	r3, #1
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d80b      	bhi.n	8008e84 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	885b      	ldrh	r3, [r3, #2]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d10c      	bne.n	8008e8e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f910 	bl	80090a2 <USBD_CtlSendStatus>
      }
      break;
 8008e82:	e004      	b.n	8008e8e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f840 	bl	8008f0c <USBD_CtlError>
      break;
 8008e8c:	e000      	b.n	8008e90 <USBD_ClrFeature+0x3c>
      break;
 8008e8e:	bf00      	nop
  }
}
 8008e90:	bf00      	nop
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	781a      	ldrb	r2, [r3, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	781a      	ldrb	r2, [r3, #0]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f7ff fa91 	bl	80083ea <SWAPBYTE>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	461a      	mov	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f7ff fa84 	bl	80083ea <SWAPBYTE>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	3301      	adds	r3, #1
 8008eee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f7ff fa77 	bl	80083ea <SWAPBYTE>
 8008efc:	4603      	mov	r3, r0
 8008efe:	461a      	mov	r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	80da      	strh	r2, [r3, #6]
}
 8008f04:	bf00      	nop
 8008f06:	3710      	adds	r7, #16
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f16:	2180      	movs	r1, #128	@ 0x80
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 fc95 	bl	8009848 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f1e:	2100      	movs	r1, #0
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fc91 	bl	8009848 <USBD_LL_StallEP>
}
 8008f26:	bf00      	nop
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b086      	sub	sp, #24
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	60f8      	str	r0, [r7, #12]
 8008f36:	60b9      	str	r1, [r7, #8]
 8008f38:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d036      	beq.n	8008fb2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f48:	6938      	ldr	r0, [r7, #16]
 8008f4a:	f000 f836 	bl	8008fba <USBD_GetLen>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	3301      	adds	r3, #1
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	005b      	lsls	r3, r3, #1
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f5c:	7dfb      	ldrb	r3, [r7, #23]
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	4413      	add	r3, r2
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	7812      	ldrb	r2, [r2, #0]
 8008f66:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f68:	7dfb      	ldrb	r3, [r7, #23]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f6e:	7dfb      	ldrb	r3, [r7, #23]
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	4413      	add	r3, r2
 8008f74:	2203      	movs	r2, #3
 8008f76:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f78:	7dfb      	ldrb	r3, [r7, #23]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f7e:	e013      	b.n	8008fa8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f80:	7dfb      	ldrb	r3, [r7, #23]
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	4413      	add	r3, r2
 8008f86:	693a      	ldr	r2, [r7, #16]
 8008f88:	7812      	ldrb	r2, [r2, #0]
 8008f8a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	613b      	str	r3, [r7, #16]
    idx++;
 8008f92:	7dfb      	ldrb	r3, [r7, #23]
 8008f94:	3301      	adds	r3, #1
 8008f96:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f98:	7dfb      	ldrb	r3, [r7, #23]
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	701a      	strb	r2, [r3, #0]
    idx++;
 8008fa2:	7dfb      	ldrb	r3, [r7, #23]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d1e7      	bne.n	8008f80 <USBD_GetString+0x52>
 8008fb0:	e000      	b.n	8008fb4 <USBD_GetString+0x86>
    return;
 8008fb2:	bf00      	nop
  }
}
 8008fb4:	3718      	adds	r7, #24
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008fba:	b480      	push	{r7}
 8008fbc:	b085      	sub	sp, #20
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008fca:	e005      	b.n	8008fd8 <USBD_GetLen+0x1e>
  {
    len++;
 8008fcc:	7bfb      	ldrb	r3, [r7, #15]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1f5      	bne.n	8008fcc <USBD_GetLen+0x12>
  }

  return len;
 8008fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3714      	adds	r7, #20
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b084      	sub	sp, #16
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	60f8      	str	r0, [r7, #12]
 8008ff6:	60b9      	str	r1, [r7, #8]
 8008ff8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2202      	movs	r2, #2
 8008ffe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	68ba      	ldr	r2, [r7, #8]
 8009012:	2100      	movs	r1, #0
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f000 fca0 	bl	800995a <USBD_LL_Transmit>

  return USBD_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	68ba      	ldr	r2, [r7, #8]
 8009034:	2100      	movs	r1, #0
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f000 fc8f 	bl	800995a <USBD_LL_Transmit>

  return USBD_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b084      	sub	sp, #16
 800904a:	af00      	add	r7, sp, #0
 800904c:	60f8      	str	r0, [r7, #12]
 800904e:	60b9      	str	r1, [r7, #8]
 8009050:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2203      	movs	r2, #3
 8009056:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68ba      	ldr	r2, [r7, #8]
 800906e:	2100      	movs	r1, #0
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f000 fc93 	bl	800999c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	2100      	movs	r1, #0
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f000 fc82 	bl	800999c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b082      	sub	sp, #8
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2204      	movs	r2, #4
 80090ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80090b2:	2300      	movs	r3, #0
 80090b4:	2200      	movs	r2, #0
 80090b6:	2100      	movs	r1, #0
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 fc4e 	bl	800995a <USBD_LL_Transmit>

  return USBD_OK;
 80090be:	2300      	movs	r3, #0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2205      	movs	r2, #5
 80090d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090d8:	2300      	movs	r3, #0
 80090da:	2200      	movs	r2, #0
 80090dc:	2100      	movs	r1, #0
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fc5c 	bl	800999c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
	...

080090f0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80090f4:	2200      	movs	r2, #0
 80090f6:	4912      	ldr	r1, [pc, #72]	@ (8009140 <MX_USB_Device_Init+0x50>)
 80090f8:	4812      	ldr	r0, [pc, #72]	@ (8009144 <MX_USB_Device_Init+0x54>)
 80090fa:	f7fe febd 	bl	8007e78 <USBD_Init>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d001      	beq.n	8009108 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009104:	f7f7 fbc9 	bl	800089a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009108:	490f      	ldr	r1, [pc, #60]	@ (8009148 <MX_USB_Device_Init+0x58>)
 800910a:	480e      	ldr	r0, [pc, #56]	@ (8009144 <MX_USB_Device_Init+0x54>)
 800910c:	f7fe fef2 	bl	8007ef4 <USBD_RegisterClass>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d001      	beq.n	800911a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009116:	f7f7 fbc0 	bl	800089a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800911a:	490c      	ldr	r1, [pc, #48]	@ (800914c <MX_USB_Device_Init+0x5c>)
 800911c:	4809      	ldr	r0, [pc, #36]	@ (8009144 <MX_USB_Device_Init+0x54>)
 800911e:	f7fe fe05 	bl	8007d2c <USBD_CDC_RegisterInterface>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d001      	beq.n	800912c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009128:	f7f7 fbb7 	bl	800089a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800912c:	4805      	ldr	r0, [pc, #20]	@ (8009144 <MX_USB_Device_Init+0x54>)
 800912e:	f7fe ff15 	bl	8007f5c <USBD_Start>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d001      	beq.n	800913c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009138:	f7f7 fbaf 	bl	800089a <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800913c:	bf00      	nop
 800913e:	bd80      	pop	{r7, pc}
 8009140:	20000130 	.word	0x20000130
 8009144:	200004b8 	.word	0x200004b8
 8009148:	20000018 	.word	0x20000018
 800914c:	2000011c 	.word	0x2000011c

08009150 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009154:	2200      	movs	r2, #0
 8009156:	4905      	ldr	r1, [pc, #20]	@ (800916c <CDC_Init_FS+0x1c>)
 8009158:	4805      	ldr	r0, [pc, #20]	@ (8009170 <CDC_Init_FS+0x20>)
 800915a:	f7fe fdfc 	bl	8007d56 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800915e:	4905      	ldr	r1, [pc, #20]	@ (8009174 <CDC_Init_FS+0x24>)
 8009160:	4803      	ldr	r0, [pc, #12]	@ (8009170 <CDC_Init_FS+0x20>)
 8009162:	f7fe fe16 	bl	8007d92 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009166:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009168:	4618      	mov	r0, r3
 800916a:	bd80      	pop	{r7, pc}
 800916c:	20000f88 	.word	0x20000f88
 8009170:	200004b8 	.word	0x200004b8
 8009174:	20000788 	.word	0x20000788

08009178 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009178:	b480      	push	{r7}
 800917a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800917c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800917e:	4618      	mov	r0, r3
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	4603      	mov	r3, r0
 8009190:	6039      	str	r1, [r7, #0]
 8009192:	71fb      	strb	r3, [r7, #7]
 8009194:	4613      	mov	r3, r2
 8009196:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009198:	79fb      	ldrb	r3, [r7, #7]
 800919a:	2b23      	cmp	r3, #35	@ 0x23
 800919c:	d84a      	bhi.n	8009234 <CDC_Control_FS+0xac>
 800919e:	a201      	add	r2, pc, #4	@ (adr r2, 80091a4 <CDC_Control_FS+0x1c>)
 80091a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a4:	08009235 	.word	0x08009235
 80091a8:	08009235 	.word	0x08009235
 80091ac:	08009235 	.word	0x08009235
 80091b0:	08009235 	.word	0x08009235
 80091b4:	08009235 	.word	0x08009235
 80091b8:	08009235 	.word	0x08009235
 80091bc:	08009235 	.word	0x08009235
 80091c0:	08009235 	.word	0x08009235
 80091c4:	08009235 	.word	0x08009235
 80091c8:	08009235 	.word	0x08009235
 80091cc:	08009235 	.word	0x08009235
 80091d0:	08009235 	.word	0x08009235
 80091d4:	08009235 	.word	0x08009235
 80091d8:	08009235 	.word	0x08009235
 80091dc:	08009235 	.word	0x08009235
 80091e0:	08009235 	.word	0x08009235
 80091e4:	08009235 	.word	0x08009235
 80091e8:	08009235 	.word	0x08009235
 80091ec:	08009235 	.word	0x08009235
 80091f0:	08009235 	.word	0x08009235
 80091f4:	08009235 	.word	0x08009235
 80091f8:	08009235 	.word	0x08009235
 80091fc:	08009235 	.word	0x08009235
 8009200:	08009235 	.word	0x08009235
 8009204:	08009235 	.word	0x08009235
 8009208:	08009235 	.word	0x08009235
 800920c:	08009235 	.word	0x08009235
 8009210:	08009235 	.word	0x08009235
 8009214:	08009235 	.word	0x08009235
 8009218:	08009235 	.word	0x08009235
 800921c:	08009235 	.word	0x08009235
 8009220:	08009235 	.word	0x08009235
 8009224:	08009235 	.word	0x08009235
 8009228:	08009235 	.word	0x08009235
 800922c:	08009235 	.word	0x08009235
 8009230:	08009235 	.word	0x08009235
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009234:	bf00      	nop
  }

  return (USBD_OK);
 8009236:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009238:	4618      	mov	r0, r3
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800924e:	6879      	ldr	r1, [r7, #4]
 8009250:	4805      	ldr	r0, [pc, #20]	@ (8009268 <CDC_Receive_FS+0x24>)
 8009252:	f7fe fd9e 	bl	8007d92 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009256:	4804      	ldr	r0, [pc, #16]	@ (8009268 <CDC_Receive_FS+0x24>)
 8009258:	f7fe fde4 	bl	8007e24 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800925c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800925e:	4618      	mov	r0, r3
 8009260:	3708      	adds	r7, #8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	200004b8 	.word	0x200004b8

0800926c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	460b      	mov	r3, r1
 8009276:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009278:	2300      	movs	r3, #0
 800927a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800927c:	4b0d      	ldr	r3, [pc, #52]	@ (80092b4 <CDC_Transmit_FS+0x48>)
 800927e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009282:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800928a:	2b00      	cmp	r3, #0
 800928c:	d001      	beq.n	8009292 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800928e:	2301      	movs	r3, #1
 8009290:	e00b      	b.n	80092aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009292:	887b      	ldrh	r3, [r7, #2]
 8009294:	461a      	mov	r2, r3
 8009296:	6879      	ldr	r1, [r7, #4]
 8009298:	4806      	ldr	r0, [pc, #24]	@ (80092b4 <CDC_Transmit_FS+0x48>)
 800929a:	f7fe fd5c 	bl	8007d56 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800929e:	4805      	ldr	r0, [pc, #20]	@ (80092b4 <CDC_Transmit_FS+0x48>)
 80092a0:	f7fe fd90 	bl	8007dc4 <USBD_CDC_TransmitPacket>
 80092a4:	4603      	mov	r3, r0
 80092a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80092a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	200004b8 	.word	0x200004b8

080092b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b087      	sub	sp, #28
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	4613      	mov	r3, r2
 80092c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80092ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	371c      	adds	r7, #28
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
	...

080092dc <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	4603      	mov	r3, r0
 80092e4:	6039      	str	r1, [r7, #0]
 80092e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	2212      	movs	r2, #18
 80092ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80092ee:	4b03      	ldr	r3, [pc, #12]	@ (80092fc <USBD_CDC_DeviceDescriptor+0x20>)
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	20000150 	.word	0x20000150

08009300 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	4603      	mov	r3, r0
 8009308:	6039      	str	r1, [r7, #0]
 800930a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	2204      	movs	r2, #4
 8009310:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009312:	4b03      	ldr	r3, [pc, #12]	@ (8009320 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009314:	4618      	mov	r0, r3
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr
 8009320:	20000164 	.word	0x20000164

08009324 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	4603      	mov	r3, r0
 800932c:	6039      	str	r1, [r7, #0]
 800932e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009330:	79fb      	ldrb	r3, [r7, #7]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d105      	bne.n	8009342 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009336:	683a      	ldr	r2, [r7, #0]
 8009338:	4907      	ldr	r1, [pc, #28]	@ (8009358 <USBD_CDC_ProductStrDescriptor+0x34>)
 800933a:	4808      	ldr	r0, [pc, #32]	@ (800935c <USBD_CDC_ProductStrDescriptor+0x38>)
 800933c:	f7ff fdf7 	bl	8008f2e <USBD_GetString>
 8009340:	e004      	b.n	800934c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009342:	683a      	ldr	r2, [r7, #0]
 8009344:	4904      	ldr	r1, [pc, #16]	@ (8009358 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009346:	4805      	ldr	r0, [pc, #20]	@ (800935c <USBD_CDC_ProductStrDescriptor+0x38>)
 8009348:	f7ff fdf1 	bl	8008f2e <USBD_GetString>
  }
  return USBD_StrDesc;
 800934c:	4b02      	ldr	r3, [pc, #8]	@ (8009358 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800934e:	4618      	mov	r0, r3
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	20001788 	.word	0x20001788
 800935c:	0800aec0 	.word	0x0800aec0

08009360 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	4603      	mov	r3, r0
 8009368:	6039      	str	r1, [r7, #0]
 800936a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800936c:	683a      	ldr	r2, [r7, #0]
 800936e:	4904      	ldr	r1, [pc, #16]	@ (8009380 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009370:	4804      	ldr	r0, [pc, #16]	@ (8009384 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009372:	f7ff fddc 	bl	8008f2e <USBD_GetString>
  return USBD_StrDesc;
 8009376:	4b02      	ldr	r3, [pc, #8]	@ (8009380 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009378:	4618      	mov	r0, r3
 800937a:	3708      	adds	r7, #8
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	20001788 	.word	0x20001788
 8009384:	0800aed8 	.word	0x0800aed8

08009388 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	4603      	mov	r3, r0
 8009390:	6039      	str	r1, [r7, #0]
 8009392:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	221a      	movs	r2, #26
 8009398:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800939a:	f000 f843 	bl	8009424 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800939e:	4b02      	ldr	r3, [pc, #8]	@ (80093a8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	20000168 	.word	0x20000168

080093ac <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	4603      	mov	r3, r0
 80093b4:	6039      	str	r1, [r7, #0]
 80093b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80093b8:	79fb      	ldrb	r3, [r7, #7]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d105      	bne.n	80093ca <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80093be:	683a      	ldr	r2, [r7, #0]
 80093c0:	4907      	ldr	r1, [pc, #28]	@ (80093e0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80093c2:	4808      	ldr	r0, [pc, #32]	@ (80093e4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80093c4:	f7ff fdb3 	bl	8008f2e <USBD_GetString>
 80093c8:	e004      	b.n	80093d4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80093ca:	683a      	ldr	r2, [r7, #0]
 80093cc:	4904      	ldr	r1, [pc, #16]	@ (80093e0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80093ce:	4805      	ldr	r0, [pc, #20]	@ (80093e4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80093d0:	f7ff fdad 	bl	8008f2e <USBD_GetString>
  }
  return USBD_StrDesc;
 80093d4:	4b02      	ldr	r3, [pc, #8]	@ (80093e0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3708      	adds	r7, #8
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	20001788 	.word	0x20001788
 80093e4:	0800aeec 	.word	0x0800aeec

080093e8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	4603      	mov	r3, r0
 80093f0:	6039      	str	r1, [r7, #0]
 80093f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093f4:	79fb      	ldrb	r3, [r7, #7]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d105      	bne.n	8009406 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	4907      	ldr	r1, [pc, #28]	@ (800941c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80093fe:	4808      	ldr	r0, [pc, #32]	@ (8009420 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009400:	f7ff fd95 	bl	8008f2e <USBD_GetString>
 8009404:	e004      	b.n	8009410 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009406:	683a      	ldr	r2, [r7, #0]
 8009408:	4904      	ldr	r1, [pc, #16]	@ (800941c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800940a:	4805      	ldr	r0, [pc, #20]	@ (8009420 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800940c:	f7ff fd8f 	bl	8008f2e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009410:	4b02      	ldr	r3, [pc, #8]	@ (800941c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009412:	4618      	mov	r0, r3
 8009414:	3708      	adds	r7, #8
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	20001788 	.word	0x20001788
 8009420:	0800aef8 	.word	0x0800aef8

08009424 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800942a:	4b0f      	ldr	r3, [pc, #60]	@ (8009468 <Get_SerialNum+0x44>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009430:	4b0e      	ldr	r3, [pc, #56]	@ (800946c <Get_SerialNum+0x48>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009436:	4b0e      	ldr	r3, [pc, #56]	@ (8009470 <Get_SerialNum+0x4c>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4413      	add	r3, r2
 8009442:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d009      	beq.n	800945e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800944a:	2208      	movs	r2, #8
 800944c:	4909      	ldr	r1, [pc, #36]	@ (8009474 <Get_SerialNum+0x50>)
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f000 f814 	bl	800947c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009454:	2204      	movs	r2, #4
 8009456:	4908      	ldr	r1, [pc, #32]	@ (8009478 <Get_SerialNum+0x54>)
 8009458:	68b8      	ldr	r0, [r7, #8]
 800945a:	f000 f80f 	bl	800947c <IntToUnicode>
  }
}
 800945e:	bf00      	nop
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	1fff7590 	.word	0x1fff7590
 800946c:	1fff7594 	.word	0x1fff7594
 8009470:	1fff7598 	.word	0x1fff7598
 8009474:	2000016a 	.word	0x2000016a
 8009478:	2000017a 	.word	0x2000017a

0800947c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800947c:	b480      	push	{r7}
 800947e:	b087      	sub	sp, #28
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	4613      	mov	r3, r2
 8009488:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800948e:	2300      	movs	r3, #0
 8009490:	75fb      	strb	r3, [r7, #23]
 8009492:	e027      	b.n	80094e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	0f1b      	lsrs	r3, r3, #28
 8009498:	2b09      	cmp	r3, #9
 800949a:	d80b      	bhi.n	80094b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	0f1b      	lsrs	r3, r3, #28
 80094a0:	b2da      	uxtb	r2, r3
 80094a2:	7dfb      	ldrb	r3, [r7, #23]
 80094a4:	005b      	lsls	r3, r3, #1
 80094a6:	4619      	mov	r1, r3
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	440b      	add	r3, r1
 80094ac:	3230      	adds	r2, #48	@ 0x30
 80094ae:	b2d2      	uxtb	r2, r2
 80094b0:	701a      	strb	r2, [r3, #0]
 80094b2:	e00a      	b.n	80094ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	0f1b      	lsrs	r3, r3, #28
 80094b8:	b2da      	uxtb	r2, r3
 80094ba:	7dfb      	ldrb	r3, [r7, #23]
 80094bc:	005b      	lsls	r3, r3, #1
 80094be:	4619      	mov	r1, r3
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	440b      	add	r3, r1
 80094c4:	3237      	adds	r2, #55	@ 0x37
 80094c6:	b2d2      	uxtb	r2, r2
 80094c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	011b      	lsls	r3, r3, #4
 80094ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80094d0:	7dfb      	ldrb	r3, [r7, #23]
 80094d2:	005b      	lsls	r3, r3, #1
 80094d4:	3301      	adds	r3, #1
 80094d6:	68ba      	ldr	r2, [r7, #8]
 80094d8:	4413      	add	r3, r2
 80094da:	2200      	movs	r2, #0
 80094dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80094de:	7dfb      	ldrb	r3, [r7, #23]
 80094e0:	3301      	adds	r3, #1
 80094e2:	75fb      	strb	r3, [r7, #23]
 80094e4:	7dfa      	ldrb	r2, [r7, #23]
 80094e6:	79fb      	ldrb	r3, [r7, #7]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d3d3      	bcc.n	8009494 <IntToUnicode+0x18>
  }
}
 80094ec:	bf00      	nop
 80094ee:	bf00      	nop
 80094f0:	371c      	adds	r7, #28
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
	...

080094fc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b098      	sub	sp, #96	@ 0x60
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009504:	f107 030c 	add.w	r3, r7, #12
 8009508:	2254      	movs	r2, #84	@ 0x54
 800950a:	2100      	movs	r1, #0
 800950c:	4618      	mov	r0, r3
 800950e:	f000 fc4e 	bl	8009dae <memset>
  if(pcdHandle->Instance==USB)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a15      	ldr	r2, [pc, #84]	@ (800956c <HAL_PCD_MspInit+0x70>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d122      	bne.n	8009562 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800951c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009520:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009522:	2300      	movs	r3, #0
 8009524:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009526:	f107 030c 	add.w	r3, r7, #12
 800952a:	4618      	mov	r0, r3
 800952c:	f7fa fc02 	bl	8003d34 <HAL_RCCEx_PeriphCLKConfig>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d001      	beq.n	800953a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8009536:	f7f7 f9b0 	bl	800089a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800953a:	4b0d      	ldr	r3, [pc, #52]	@ (8009570 <HAL_PCD_MspInit+0x74>)
 800953c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800953e:	4a0c      	ldr	r2, [pc, #48]	@ (8009570 <HAL_PCD_MspInit+0x74>)
 8009540:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009544:	6593      	str	r3, [r2, #88]	@ 0x58
 8009546:	4b0a      	ldr	r3, [pc, #40]	@ (8009570 <HAL_PCD_MspInit+0x74>)
 8009548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800954a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800954e:	60bb      	str	r3, [r7, #8]
 8009550:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 5, 0);
 8009552:	2200      	movs	r2, #0
 8009554:	2105      	movs	r1, #5
 8009556:	2013      	movs	r0, #19
 8009558:	f7f7 ff10 	bl	800137c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800955c:	2013      	movs	r0, #19
 800955e:	f7f7 ff27 	bl	80013b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009562:	bf00      	nop
 8009564:	3760      	adds	r7, #96	@ 0x60
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	40005c00 	.word	0x40005c00
 8009570:	40021000 	.word	0x40021000

08009574 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009588:	4619      	mov	r1, r3
 800958a:	4610      	mov	r0, r2
 800958c:	f7fe fd31 	bl	8007ff2 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009590:	bf00      	nop
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	460b      	mov	r3, r1
 80095a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80095aa:	78fa      	ldrb	r2, [r7, #3]
 80095ac:	6879      	ldr	r1, [r7, #4]
 80095ae:	4613      	mov	r3, r2
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	4413      	add	r3, r2
 80095b4:	00db      	lsls	r3, r3, #3
 80095b6:	440b      	add	r3, r1
 80095b8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	78fb      	ldrb	r3, [r7, #3]
 80095c0:	4619      	mov	r1, r3
 80095c2:	f7fe fd6b 	bl	800809c <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80095c6:	bf00      	nop
 80095c8:	3708      	adds	r7, #8
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b082      	sub	sp, #8
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
 80095d6:	460b      	mov	r3, r1
 80095d8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80095e0:	78fa      	ldrb	r2, [r7, #3]
 80095e2:	6879      	ldr	r1, [r7, #4]
 80095e4:	4613      	mov	r3, r2
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	4413      	add	r3, r2
 80095ea:	00db      	lsls	r3, r3, #3
 80095ec:	440b      	add	r3, r1
 80095ee:	3324      	adds	r3, #36	@ 0x24
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	78fb      	ldrb	r3, [r7, #3]
 80095f4:	4619      	mov	r1, r3
 80095f6:	f7fe fdb4 	bl	8008162 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80095fa:	bf00      	nop
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b082      	sub	sp, #8
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009610:	4618      	mov	r0, r3
 8009612:	f7fe fec8 	bl	80083a6 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009616:	bf00      	nop
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b084      	sub	sp, #16
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009626:	2301      	movs	r3, #1
 8009628:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	795b      	ldrb	r3, [r3, #5]
 800962e:	2b02      	cmp	r3, #2
 8009630:	d001      	beq.n	8009636 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009632:	f7f7 f932 	bl	800089a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800963c:	7bfa      	ldrb	r2, [r7, #15]
 800963e:	4611      	mov	r1, r2
 8009640:	4618      	mov	r0, r3
 8009642:	f7fe fe72 	bl	800832a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800964c:	4618      	mov	r0, r3
 800964e:	f7fe fe1e 	bl	800828e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009652:	bf00      	nop
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
	...

0800965c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800966a:	4618      	mov	r0, r3
 800966c:	f7fe fe6d 	bl	800834a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	7a5b      	ldrb	r3, [r3, #9]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d005      	beq.n	8009684 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009678:	4b04      	ldr	r3, [pc, #16]	@ (800968c <HAL_PCD_SuspendCallback+0x30>)
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	4a03      	ldr	r2, [pc, #12]	@ (800968c <HAL_PCD_SuspendCallback+0x30>)
 800967e:	f043 0306 	orr.w	r3, r3, #6
 8009682:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009684:	bf00      	nop
 8009686:	3708      	adds	r7, #8
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	e000ed00 	.word	0xe000ed00

08009690 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	7a5b      	ldrb	r3, [r3, #9]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d007      	beq.n	80096b0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80096a0:	4b08      	ldr	r3, [pc, #32]	@ (80096c4 <HAL_PCD_ResumeCallback+0x34>)
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	4a07      	ldr	r2, [pc, #28]	@ (80096c4 <HAL_PCD_ResumeCallback+0x34>)
 80096a6:	f023 0306 	bic.w	r3, r3, #6
 80096aa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80096ac:	f000 f9f8 	bl	8009aa0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fe fe5d 	bl	8008376 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80096bc:	bf00      	nop
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	e000ed00 	.word	0xe000ed00

080096c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80096d0:	4a2b      	ldr	r2, [pc, #172]	@ (8009780 <USBD_LL_Init+0xb8>)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4a29      	ldr	r2, [pc, #164]	@ (8009780 <USBD_LL_Init+0xb8>)
 80096dc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 80096e0:	4b27      	ldr	r3, [pc, #156]	@ (8009780 <USBD_LL_Init+0xb8>)
 80096e2:	4a28      	ldr	r2, [pc, #160]	@ (8009784 <USBD_LL_Init+0xbc>)
 80096e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80096e6:	4b26      	ldr	r3, [pc, #152]	@ (8009780 <USBD_LL_Init+0xb8>)
 80096e8:	2208      	movs	r2, #8
 80096ea:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80096ec:	4b24      	ldr	r3, [pc, #144]	@ (8009780 <USBD_LL_Init+0xb8>)
 80096ee:	2202      	movs	r2, #2
 80096f0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80096f2:	4b23      	ldr	r3, [pc, #140]	@ (8009780 <USBD_LL_Init+0xb8>)
 80096f4:	2202      	movs	r2, #2
 80096f6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80096f8:	4b21      	ldr	r3, [pc, #132]	@ (8009780 <USBD_LL_Init+0xb8>)
 80096fa:	2200      	movs	r2, #0
 80096fc:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80096fe:	4b20      	ldr	r3, [pc, #128]	@ (8009780 <USBD_LL_Init+0xb8>)
 8009700:	2200      	movs	r2, #0
 8009702:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009704:	4b1e      	ldr	r3, [pc, #120]	@ (8009780 <USBD_LL_Init+0xb8>)
 8009706:	2200      	movs	r2, #0
 8009708:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800970a:	4b1d      	ldr	r3, [pc, #116]	@ (8009780 <USBD_LL_Init+0xb8>)
 800970c:	2200      	movs	r2, #0
 800970e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009710:	481b      	ldr	r0, [pc, #108]	@ (8009780 <USBD_LL_Init+0xb8>)
 8009712:	f7f8 f80f 	bl	8001734 <HAL_PCD_Init>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d001      	beq.n	8009720 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800971c:	f7f7 f8bd 	bl	800089a <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009726:	2318      	movs	r3, #24
 8009728:	2200      	movs	r2, #0
 800972a:	2100      	movs	r1, #0
 800972c:	f7f9 fc96 	bl	800305c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009736:	2358      	movs	r3, #88	@ 0x58
 8009738:	2200      	movs	r2, #0
 800973a:	2180      	movs	r1, #128	@ 0x80
 800973c:	f7f9 fc8e 	bl	800305c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009746:	23c0      	movs	r3, #192	@ 0xc0
 8009748:	2200      	movs	r2, #0
 800974a:	2181      	movs	r1, #129	@ 0x81
 800974c:	f7f9 fc86 	bl	800305c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009756:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800975a:	2200      	movs	r2, #0
 800975c:	2101      	movs	r1, #1
 800975e:	f7f9 fc7d 	bl	800305c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009768:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800976c:	2200      	movs	r2, #0
 800976e:	2182      	movs	r1, #130	@ 0x82
 8009770:	f7f9 fc74 	bl	800305c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	20001988 	.word	0x20001988
 8009784:	40005c00 	.word	0x40005c00

08009788 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009790:	2300      	movs	r3, #0
 8009792:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009794:	2300      	movs	r3, #0
 8009796:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800979e:	4618      	mov	r0, r3
 80097a0:	f7f8 f896 	bl	80018d0 <HAL_PCD_Start>
 80097a4:	4603      	mov	r3, r0
 80097a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
 80097aa:	4618      	mov	r0, r3
 80097ac:	f000 f97e 	bl	8009aac <USBD_Get_USB_Status>
 80097b0:	4603      	mov	r3, r0
 80097b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b084      	sub	sp, #16
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
 80097c6:	4608      	mov	r0, r1
 80097c8:	4611      	mov	r1, r2
 80097ca:	461a      	mov	r2, r3
 80097cc:	4603      	mov	r3, r0
 80097ce:	70fb      	strb	r3, [r7, #3]
 80097d0:	460b      	mov	r3, r1
 80097d2:	70bb      	strb	r3, [r7, #2]
 80097d4:	4613      	mov	r3, r2
 80097d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097d8:	2300      	movs	r3, #0
 80097da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097dc:	2300      	movs	r3, #0
 80097de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80097e6:	78bb      	ldrb	r3, [r7, #2]
 80097e8:	883a      	ldrh	r2, [r7, #0]
 80097ea:	78f9      	ldrb	r1, [r7, #3]
 80097ec:	f7f8 f9dd 	bl	8001baa <HAL_PCD_EP_Open>
 80097f0:	4603      	mov	r3, r0
 80097f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097f4:	7bfb      	ldrb	r3, [r7, #15]
 80097f6:	4618      	mov	r0, r3
 80097f8:	f000 f958 	bl	8009aac <USBD_Get_USB_Status>
 80097fc:	4603      	mov	r3, r0
 80097fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009800:	7bbb      	ldrb	r3, [r7, #14]
}
 8009802:	4618      	mov	r0, r3
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
 8009812:	460b      	mov	r3, r1
 8009814:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009816:	2300      	movs	r3, #0
 8009818:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800981a:	2300      	movs	r3, #0
 800981c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009824:	78fa      	ldrb	r2, [r7, #3]
 8009826:	4611      	mov	r1, r2
 8009828:	4618      	mov	r0, r3
 800982a:	f7f8 fa1d 	bl	8001c68 <HAL_PCD_EP_Close>
 800982e:	4603      	mov	r3, r0
 8009830:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009832:	7bfb      	ldrb	r3, [r7, #15]
 8009834:	4618      	mov	r0, r3
 8009836:	f000 f939 	bl	8009aac <USBD_Get_USB_Status>
 800983a:	4603      	mov	r3, r0
 800983c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800983e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3710      	adds	r7, #16
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	460b      	mov	r3, r1
 8009852:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009854:	2300      	movs	r3, #0
 8009856:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009858:	2300      	movs	r3, #0
 800985a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009862:	78fa      	ldrb	r2, [r7, #3]
 8009864:	4611      	mov	r1, r2
 8009866:	4618      	mov	r0, r3
 8009868:	f7f8 fac6 	bl	8001df8 <HAL_PCD_EP_SetStall>
 800986c:	4603      	mov	r3, r0
 800986e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009870:	7bfb      	ldrb	r3, [r7, #15]
 8009872:	4618      	mov	r0, r3
 8009874:	f000 f91a 	bl	8009aac <USBD_Get_USB_Status>
 8009878:	4603      	mov	r3, r0
 800987a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800987c:	7bbb      	ldrb	r3, [r7, #14]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b084      	sub	sp, #16
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	460b      	mov	r3, r1
 8009890:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009892:	2300      	movs	r3, #0
 8009894:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80098a0:	78fa      	ldrb	r2, [r7, #3]
 80098a2:	4611      	mov	r1, r2
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7f8 faf9 	bl	8001e9c <HAL_PCD_EP_ClrStall>
 80098aa:	4603      	mov	r3, r0
 80098ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098ae:	7bfb      	ldrb	r3, [r7, #15]
 80098b0:	4618      	mov	r0, r3
 80098b2:	f000 f8fb 	bl	8009aac <USBD_Get_USB_Status>
 80098b6:	4603      	mov	r3, r0
 80098b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b085      	sub	sp, #20
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	460b      	mov	r3, r1
 80098ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80098d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80098d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	da0b      	bge.n	80098f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098e0:	78fb      	ldrb	r3, [r7, #3]
 80098e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80098e6:	68f9      	ldr	r1, [r7, #12]
 80098e8:	4613      	mov	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4413      	add	r3, r2
 80098ee:	00db      	lsls	r3, r3, #3
 80098f0:	440b      	add	r3, r1
 80098f2:	3312      	adds	r3, #18
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	e00b      	b.n	8009910 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80098f8:	78fb      	ldrb	r3, [r7, #3]
 80098fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80098fe:	68f9      	ldr	r1, [r7, #12]
 8009900:	4613      	mov	r3, r2
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	4413      	add	r3, r2
 8009906:	00db      	lsls	r3, r3, #3
 8009908:	440b      	add	r3, r1
 800990a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800990e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009910:	4618      	mov	r0, r3
 8009912:	3714      	adds	r7, #20
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	460b      	mov	r3, r1
 8009926:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009928:	2300      	movs	r3, #0
 800992a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800992c:	2300      	movs	r3, #0
 800992e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009936:	78fa      	ldrb	r2, [r7, #3]
 8009938:	4611      	mov	r1, r2
 800993a:	4618      	mov	r0, r3
 800993c:	f7f8 f911 	bl	8001b62 <HAL_PCD_SetAddress>
 8009940:	4603      	mov	r3, r0
 8009942:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009944:	7bfb      	ldrb	r3, [r7, #15]
 8009946:	4618      	mov	r0, r3
 8009948:	f000 f8b0 	bl	8009aac <USBD_Get_USB_Status>
 800994c:	4603      	mov	r3, r0
 800994e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009950:	7bbb      	ldrb	r3, [r7, #14]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b086      	sub	sp, #24
 800995e:	af00      	add	r7, sp, #0
 8009960:	60f8      	str	r0, [r7, #12]
 8009962:	607a      	str	r2, [r7, #4]
 8009964:	603b      	str	r3, [r7, #0]
 8009966:	460b      	mov	r3, r1
 8009968:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800996a:	2300      	movs	r3, #0
 800996c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800996e:	2300      	movs	r3, #0
 8009970:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009978:	7af9      	ldrb	r1, [r7, #11]
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	f7f8 fa04 	bl	8001d8a <HAL_PCD_EP_Transmit>
 8009982:	4603      	mov	r3, r0
 8009984:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009986:	7dfb      	ldrb	r3, [r7, #23]
 8009988:	4618      	mov	r0, r3
 800998a:	f000 f88f 	bl	8009aac <USBD_Get_USB_Status>
 800998e:	4603      	mov	r3, r0
 8009990:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009992:	7dbb      	ldrb	r3, [r7, #22]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3718      	adds	r7, #24
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b086      	sub	sp, #24
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	607a      	str	r2, [r7, #4]
 80099a6:	603b      	str	r3, [r7, #0]
 80099a8:	460b      	mov	r3, r1
 80099aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ac:	2300      	movs	r3, #0
 80099ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099b0:	2300      	movs	r3, #0
 80099b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80099ba:	7af9      	ldrb	r1, [r7, #11]
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	f7f8 f99a 	bl	8001cf8 <HAL_PCD_EP_Receive>
 80099c4:	4603      	mov	r3, r0
 80099c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099c8:	7dfb      	ldrb	r3, [r7, #23]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f000 f86e 	bl	8009aac <USBD_Get_USB_Status>
 80099d0:	4603      	mov	r3, r0
 80099d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099d4:	7dbb      	ldrb	r3, [r7, #22]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3718      	adds	r7, #24
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b082      	sub	sp, #8
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
 80099e6:	460b      	mov	r3, r1
 80099e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80099f0:	78fa      	ldrb	r2, [r7, #3]
 80099f2:	4611      	mov	r1, r2
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7f8 f9b0 	bl	8001d5a <HAL_PCD_EP_GetRxCount>
 80099fa:	4603      	mov	r3, r0
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3708      	adds	r7, #8
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009a10:	78fb      	ldrb	r3, [r7, #3]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d002      	beq.n	8009a1c <HAL_PCDEx_LPM_Callback+0x18>
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d013      	beq.n	8009a42 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009a1a:	e023      	b.n	8009a64 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	7a5b      	ldrb	r3, [r3, #9]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d007      	beq.n	8009a34 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009a24:	f000 f83c 	bl	8009aa0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a28:	4b10      	ldr	r3, [pc, #64]	@ (8009a6c <HAL_PCDEx_LPM_Callback+0x68>)
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	4a0f      	ldr	r2, [pc, #60]	@ (8009a6c <HAL_PCDEx_LPM_Callback+0x68>)
 8009a2e:	f023 0306 	bic.w	r3, r3, #6
 8009a32:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7fe fc9b 	bl	8008376 <USBD_LL_Resume>
    break;
 8009a40:	e010      	b.n	8009a64 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7fe fc7e 	bl	800834a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	7a5b      	ldrb	r3, [r3, #9]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d005      	beq.n	8009a62 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a56:	4b05      	ldr	r3, [pc, #20]	@ (8009a6c <HAL_PCDEx_LPM_Callback+0x68>)
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	4a04      	ldr	r2, [pc, #16]	@ (8009a6c <HAL_PCDEx_LPM_Callback+0x68>)
 8009a5c:	f043 0306 	orr.w	r3, r3, #6
 8009a60:	6113      	str	r3, [r2, #16]
    break;
 8009a62:	bf00      	nop
}
 8009a64:	bf00      	nop
 8009a66:	3708      	adds	r7, #8
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}
 8009a6c:	e000ed00 	.word	0xe000ed00

08009a70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a78:	4b03      	ldr	r3, [pc, #12]	@ (8009a88 <USBD_static_malloc+0x18>)
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	370c      	adds	r7, #12
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	20001c64 	.word	0x20001c64

08009a8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]

}
 8009a94:	bf00      	nop
 8009a96:	370c      	adds	r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009aa4:	f7f6 fe7e 	bl	80007a4 <SystemClock_Config>
}
 8009aa8:	bf00      	nop
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b085      	sub	sp, #20
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009aba:	79fb      	ldrb	r3, [r7, #7]
 8009abc:	2b03      	cmp	r3, #3
 8009abe:	d817      	bhi.n	8009af0 <USBD_Get_USB_Status+0x44>
 8009ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8009ac8 <USBD_Get_USB_Status+0x1c>)
 8009ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac6:	bf00      	nop
 8009ac8:	08009ad9 	.word	0x08009ad9
 8009acc:	08009adf 	.word	0x08009adf
 8009ad0:	08009ae5 	.word	0x08009ae5
 8009ad4:	08009aeb 	.word	0x08009aeb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	73fb      	strb	r3, [r7, #15]
    break;
 8009adc:	e00b      	b.n	8009af6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ade:	2303      	movs	r3, #3
 8009ae0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ae2:	e008      	b.n	8009af6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ae8:	e005      	b.n	8009af6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009aea:	2303      	movs	r3, #3
 8009aec:	73fb      	strb	r3, [r7, #15]
    break;
 8009aee:	e002      	b.n	8009af6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009af0:	2303      	movs	r3, #3
 8009af2:	73fb      	strb	r3, [r7, #15]
    break;
 8009af4:	bf00      	nop
  }
  return usb_status;
 8009af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3714      	adds	r7, #20
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <std>:
 8009b04:	2300      	movs	r3, #0
 8009b06:	b510      	push	{r4, lr}
 8009b08:	4604      	mov	r4, r0
 8009b0a:	e9c0 3300 	strd	r3, r3, [r0]
 8009b0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b12:	6083      	str	r3, [r0, #8]
 8009b14:	8181      	strh	r1, [r0, #12]
 8009b16:	6643      	str	r3, [r0, #100]	@ 0x64
 8009b18:	81c2      	strh	r2, [r0, #14]
 8009b1a:	6183      	str	r3, [r0, #24]
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	2208      	movs	r2, #8
 8009b20:	305c      	adds	r0, #92	@ 0x5c
 8009b22:	f000 f944 	bl	8009dae <memset>
 8009b26:	4b0d      	ldr	r3, [pc, #52]	@ (8009b5c <std+0x58>)
 8009b28:	6263      	str	r3, [r4, #36]	@ 0x24
 8009b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8009b60 <std+0x5c>)
 8009b2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8009b64 <std+0x60>)
 8009b30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009b32:	4b0d      	ldr	r3, [pc, #52]	@ (8009b68 <std+0x64>)
 8009b34:	6323      	str	r3, [r4, #48]	@ 0x30
 8009b36:	4b0d      	ldr	r3, [pc, #52]	@ (8009b6c <std+0x68>)
 8009b38:	6224      	str	r4, [r4, #32]
 8009b3a:	429c      	cmp	r4, r3
 8009b3c:	d006      	beq.n	8009b4c <std+0x48>
 8009b3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009b42:	4294      	cmp	r4, r2
 8009b44:	d002      	beq.n	8009b4c <std+0x48>
 8009b46:	33d0      	adds	r3, #208	@ 0xd0
 8009b48:	429c      	cmp	r4, r3
 8009b4a:	d105      	bne.n	8009b58 <std+0x54>
 8009b4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b54:	f000 b9a4 	b.w	8009ea0 <__retarget_lock_init_recursive>
 8009b58:	bd10      	pop	{r4, pc}
 8009b5a:	bf00      	nop
 8009b5c:	08009d29 	.word	0x08009d29
 8009b60:	08009d4b 	.word	0x08009d4b
 8009b64:	08009d83 	.word	0x08009d83
 8009b68:	08009da7 	.word	0x08009da7
 8009b6c:	20001e84 	.word	0x20001e84

08009b70 <stdio_exit_handler>:
 8009b70:	4a02      	ldr	r2, [pc, #8]	@ (8009b7c <stdio_exit_handler+0xc>)
 8009b72:	4903      	ldr	r1, [pc, #12]	@ (8009b80 <stdio_exit_handler+0x10>)
 8009b74:	4803      	ldr	r0, [pc, #12]	@ (8009b84 <stdio_exit_handler+0x14>)
 8009b76:	f000 b869 	b.w	8009c4c <_fwalk_sglue>
 8009b7a:	bf00      	nop
 8009b7c:	20000184 	.word	0x20000184
 8009b80:	0800a9ed 	.word	0x0800a9ed
 8009b84:	20000194 	.word	0x20000194

08009b88 <cleanup_stdio>:
 8009b88:	6841      	ldr	r1, [r0, #4]
 8009b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8009bbc <cleanup_stdio+0x34>)
 8009b8c:	4299      	cmp	r1, r3
 8009b8e:	b510      	push	{r4, lr}
 8009b90:	4604      	mov	r4, r0
 8009b92:	d001      	beq.n	8009b98 <cleanup_stdio+0x10>
 8009b94:	f000 ff2a 	bl	800a9ec <_fflush_r>
 8009b98:	68a1      	ldr	r1, [r4, #8]
 8009b9a:	4b09      	ldr	r3, [pc, #36]	@ (8009bc0 <cleanup_stdio+0x38>)
 8009b9c:	4299      	cmp	r1, r3
 8009b9e:	d002      	beq.n	8009ba6 <cleanup_stdio+0x1e>
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	f000 ff23 	bl	800a9ec <_fflush_r>
 8009ba6:	68e1      	ldr	r1, [r4, #12]
 8009ba8:	4b06      	ldr	r3, [pc, #24]	@ (8009bc4 <cleanup_stdio+0x3c>)
 8009baa:	4299      	cmp	r1, r3
 8009bac:	d004      	beq.n	8009bb8 <cleanup_stdio+0x30>
 8009bae:	4620      	mov	r0, r4
 8009bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bb4:	f000 bf1a 	b.w	800a9ec <_fflush_r>
 8009bb8:	bd10      	pop	{r4, pc}
 8009bba:	bf00      	nop
 8009bbc:	20001e84 	.word	0x20001e84
 8009bc0:	20001eec 	.word	0x20001eec
 8009bc4:	20001f54 	.word	0x20001f54

08009bc8 <global_stdio_init.part.0>:
 8009bc8:	b510      	push	{r4, lr}
 8009bca:	4b0b      	ldr	r3, [pc, #44]	@ (8009bf8 <global_stdio_init.part.0+0x30>)
 8009bcc:	4c0b      	ldr	r4, [pc, #44]	@ (8009bfc <global_stdio_init.part.0+0x34>)
 8009bce:	4a0c      	ldr	r2, [pc, #48]	@ (8009c00 <global_stdio_init.part.0+0x38>)
 8009bd0:	601a      	str	r2, [r3, #0]
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	2104      	movs	r1, #4
 8009bd8:	f7ff ff94 	bl	8009b04 <std>
 8009bdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009be0:	2201      	movs	r2, #1
 8009be2:	2109      	movs	r1, #9
 8009be4:	f7ff ff8e 	bl	8009b04 <std>
 8009be8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009bec:	2202      	movs	r2, #2
 8009bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bf2:	2112      	movs	r1, #18
 8009bf4:	f7ff bf86 	b.w	8009b04 <std>
 8009bf8:	20001fbc 	.word	0x20001fbc
 8009bfc:	20001e84 	.word	0x20001e84
 8009c00:	08009b71 	.word	0x08009b71

08009c04 <__sfp_lock_acquire>:
 8009c04:	4801      	ldr	r0, [pc, #4]	@ (8009c0c <__sfp_lock_acquire+0x8>)
 8009c06:	f000 b94c 	b.w	8009ea2 <__retarget_lock_acquire_recursive>
 8009c0a:	bf00      	nop
 8009c0c:	20001fc5 	.word	0x20001fc5

08009c10 <__sfp_lock_release>:
 8009c10:	4801      	ldr	r0, [pc, #4]	@ (8009c18 <__sfp_lock_release+0x8>)
 8009c12:	f000 b947 	b.w	8009ea4 <__retarget_lock_release_recursive>
 8009c16:	bf00      	nop
 8009c18:	20001fc5 	.word	0x20001fc5

08009c1c <__sinit>:
 8009c1c:	b510      	push	{r4, lr}
 8009c1e:	4604      	mov	r4, r0
 8009c20:	f7ff fff0 	bl	8009c04 <__sfp_lock_acquire>
 8009c24:	6a23      	ldr	r3, [r4, #32]
 8009c26:	b11b      	cbz	r3, 8009c30 <__sinit+0x14>
 8009c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c2c:	f7ff bff0 	b.w	8009c10 <__sfp_lock_release>
 8009c30:	4b04      	ldr	r3, [pc, #16]	@ (8009c44 <__sinit+0x28>)
 8009c32:	6223      	str	r3, [r4, #32]
 8009c34:	4b04      	ldr	r3, [pc, #16]	@ (8009c48 <__sinit+0x2c>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1f5      	bne.n	8009c28 <__sinit+0xc>
 8009c3c:	f7ff ffc4 	bl	8009bc8 <global_stdio_init.part.0>
 8009c40:	e7f2      	b.n	8009c28 <__sinit+0xc>
 8009c42:	bf00      	nop
 8009c44:	08009b89 	.word	0x08009b89
 8009c48:	20001fbc 	.word	0x20001fbc

08009c4c <_fwalk_sglue>:
 8009c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c50:	4607      	mov	r7, r0
 8009c52:	4688      	mov	r8, r1
 8009c54:	4614      	mov	r4, r2
 8009c56:	2600      	movs	r6, #0
 8009c58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c5c:	f1b9 0901 	subs.w	r9, r9, #1
 8009c60:	d505      	bpl.n	8009c6e <_fwalk_sglue+0x22>
 8009c62:	6824      	ldr	r4, [r4, #0]
 8009c64:	2c00      	cmp	r4, #0
 8009c66:	d1f7      	bne.n	8009c58 <_fwalk_sglue+0xc>
 8009c68:	4630      	mov	r0, r6
 8009c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c6e:	89ab      	ldrh	r3, [r5, #12]
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d907      	bls.n	8009c84 <_fwalk_sglue+0x38>
 8009c74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	d003      	beq.n	8009c84 <_fwalk_sglue+0x38>
 8009c7c:	4629      	mov	r1, r5
 8009c7e:	4638      	mov	r0, r7
 8009c80:	47c0      	blx	r8
 8009c82:	4306      	orrs	r6, r0
 8009c84:	3568      	adds	r5, #104	@ 0x68
 8009c86:	e7e9      	b.n	8009c5c <_fwalk_sglue+0x10>

08009c88 <iprintf>:
 8009c88:	b40f      	push	{r0, r1, r2, r3}
 8009c8a:	b507      	push	{r0, r1, r2, lr}
 8009c8c:	4906      	ldr	r1, [pc, #24]	@ (8009ca8 <iprintf+0x20>)
 8009c8e:	ab04      	add	r3, sp, #16
 8009c90:	6808      	ldr	r0, [r1, #0]
 8009c92:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c96:	6881      	ldr	r1, [r0, #8]
 8009c98:	9301      	str	r3, [sp, #4]
 8009c9a:	f000 fb7f 	bl	800a39c <_vfiprintf_r>
 8009c9e:	b003      	add	sp, #12
 8009ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ca4:	b004      	add	sp, #16
 8009ca6:	4770      	bx	lr
 8009ca8:	20000190 	.word	0x20000190

08009cac <putchar>:
 8009cac:	4b02      	ldr	r3, [pc, #8]	@ (8009cb8 <putchar+0xc>)
 8009cae:	4601      	mov	r1, r0
 8009cb0:	6818      	ldr	r0, [r3, #0]
 8009cb2:	6882      	ldr	r2, [r0, #8]
 8009cb4:	f000 bec2 	b.w	800aa3c <_putc_r>
 8009cb8:	20000190 	.word	0x20000190

08009cbc <sniprintf>:
 8009cbc:	b40c      	push	{r2, r3}
 8009cbe:	b530      	push	{r4, r5, lr}
 8009cc0:	4b18      	ldr	r3, [pc, #96]	@ (8009d24 <sniprintf+0x68>)
 8009cc2:	1e0c      	subs	r4, r1, #0
 8009cc4:	681d      	ldr	r5, [r3, #0]
 8009cc6:	b09d      	sub	sp, #116	@ 0x74
 8009cc8:	da08      	bge.n	8009cdc <sniprintf+0x20>
 8009cca:	238b      	movs	r3, #139	@ 0x8b
 8009ccc:	602b      	str	r3, [r5, #0]
 8009cce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009cd2:	b01d      	add	sp, #116	@ 0x74
 8009cd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cd8:	b002      	add	sp, #8
 8009cda:	4770      	bx	lr
 8009cdc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009ce0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009ce4:	f04f 0300 	mov.w	r3, #0
 8009ce8:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009cea:	bf14      	ite	ne
 8009cec:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8009cf0:	4623      	moveq	r3, r4
 8009cf2:	9304      	str	r3, [sp, #16]
 8009cf4:	9307      	str	r3, [sp, #28]
 8009cf6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009cfa:	9002      	str	r0, [sp, #8]
 8009cfc:	9006      	str	r0, [sp, #24]
 8009cfe:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009d02:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009d04:	ab21      	add	r3, sp, #132	@ 0x84
 8009d06:	a902      	add	r1, sp, #8
 8009d08:	4628      	mov	r0, r5
 8009d0a:	9301      	str	r3, [sp, #4]
 8009d0c:	f000 fa20 	bl	800a150 <_svfiprintf_r>
 8009d10:	1c43      	adds	r3, r0, #1
 8009d12:	bfbc      	itt	lt
 8009d14:	238b      	movlt	r3, #139	@ 0x8b
 8009d16:	602b      	strlt	r3, [r5, #0]
 8009d18:	2c00      	cmp	r4, #0
 8009d1a:	d0da      	beq.n	8009cd2 <sniprintf+0x16>
 8009d1c:	9b02      	ldr	r3, [sp, #8]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	701a      	strb	r2, [r3, #0]
 8009d22:	e7d6      	b.n	8009cd2 <sniprintf+0x16>
 8009d24:	20000190 	.word	0x20000190

08009d28 <__sread>:
 8009d28:	b510      	push	{r4, lr}
 8009d2a:	460c      	mov	r4, r1
 8009d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d30:	f000 f868 	bl	8009e04 <_read_r>
 8009d34:	2800      	cmp	r0, #0
 8009d36:	bfab      	itete	ge
 8009d38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009d3a:	89a3      	ldrhlt	r3, [r4, #12]
 8009d3c:	181b      	addge	r3, r3, r0
 8009d3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009d42:	bfac      	ite	ge
 8009d44:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009d46:	81a3      	strhlt	r3, [r4, #12]
 8009d48:	bd10      	pop	{r4, pc}

08009d4a <__swrite>:
 8009d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d4e:	461f      	mov	r7, r3
 8009d50:	898b      	ldrh	r3, [r1, #12]
 8009d52:	05db      	lsls	r3, r3, #23
 8009d54:	4605      	mov	r5, r0
 8009d56:	460c      	mov	r4, r1
 8009d58:	4616      	mov	r6, r2
 8009d5a:	d505      	bpl.n	8009d68 <__swrite+0x1e>
 8009d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d60:	2302      	movs	r3, #2
 8009d62:	2200      	movs	r2, #0
 8009d64:	f000 f83c 	bl	8009de0 <_lseek_r>
 8009d68:	89a3      	ldrh	r3, [r4, #12]
 8009d6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d72:	81a3      	strh	r3, [r4, #12]
 8009d74:	4632      	mov	r2, r6
 8009d76:	463b      	mov	r3, r7
 8009d78:	4628      	mov	r0, r5
 8009d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d7e:	f000 b853 	b.w	8009e28 <_write_r>

08009d82 <__sseek>:
 8009d82:	b510      	push	{r4, lr}
 8009d84:	460c      	mov	r4, r1
 8009d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d8a:	f000 f829 	bl	8009de0 <_lseek_r>
 8009d8e:	1c43      	adds	r3, r0, #1
 8009d90:	89a3      	ldrh	r3, [r4, #12]
 8009d92:	bf15      	itete	ne
 8009d94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009d96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009d9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009d9e:	81a3      	strheq	r3, [r4, #12]
 8009da0:	bf18      	it	ne
 8009da2:	81a3      	strhne	r3, [r4, #12]
 8009da4:	bd10      	pop	{r4, pc}

08009da6 <__sclose>:
 8009da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009daa:	f000 b809 	b.w	8009dc0 <_close_r>

08009dae <memset>:
 8009dae:	4402      	add	r2, r0
 8009db0:	4603      	mov	r3, r0
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d100      	bne.n	8009db8 <memset+0xa>
 8009db6:	4770      	bx	lr
 8009db8:	f803 1b01 	strb.w	r1, [r3], #1
 8009dbc:	e7f9      	b.n	8009db2 <memset+0x4>
	...

08009dc0 <_close_r>:
 8009dc0:	b538      	push	{r3, r4, r5, lr}
 8009dc2:	4d06      	ldr	r5, [pc, #24]	@ (8009ddc <_close_r+0x1c>)
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	4604      	mov	r4, r0
 8009dc8:	4608      	mov	r0, r1
 8009dca:	602b      	str	r3, [r5, #0]
 8009dcc:	f7f6 fe97 	bl	8000afe <_close>
 8009dd0:	1c43      	adds	r3, r0, #1
 8009dd2:	d102      	bne.n	8009dda <_close_r+0x1a>
 8009dd4:	682b      	ldr	r3, [r5, #0]
 8009dd6:	b103      	cbz	r3, 8009dda <_close_r+0x1a>
 8009dd8:	6023      	str	r3, [r4, #0]
 8009dda:	bd38      	pop	{r3, r4, r5, pc}
 8009ddc:	20001fc0 	.word	0x20001fc0

08009de0 <_lseek_r>:
 8009de0:	b538      	push	{r3, r4, r5, lr}
 8009de2:	4d07      	ldr	r5, [pc, #28]	@ (8009e00 <_lseek_r+0x20>)
 8009de4:	4604      	mov	r4, r0
 8009de6:	4608      	mov	r0, r1
 8009de8:	4611      	mov	r1, r2
 8009dea:	2200      	movs	r2, #0
 8009dec:	602a      	str	r2, [r5, #0]
 8009dee:	461a      	mov	r2, r3
 8009df0:	f7f6 feac 	bl	8000b4c <_lseek>
 8009df4:	1c43      	adds	r3, r0, #1
 8009df6:	d102      	bne.n	8009dfe <_lseek_r+0x1e>
 8009df8:	682b      	ldr	r3, [r5, #0]
 8009dfa:	b103      	cbz	r3, 8009dfe <_lseek_r+0x1e>
 8009dfc:	6023      	str	r3, [r4, #0]
 8009dfe:	bd38      	pop	{r3, r4, r5, pc}
 8009e00:	20001fc0 	.word	0x20001fc0

08009e04 <_read_r>:
 8009e04:	b538      	push	{r3, r4, r5, lr}
 8009e06:	4d07      	ldr	r5, [pc, #28]	@ (8009e24 <_read_r+0x20>)
 8009e08:	4604      	mov	r4, r0
 8009e0a:	4608      	mov	r0, r1
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	2200      	movs	r2, #0
 8009e10:	602a      	str	r2, [r5, #0]
 8009e12:	461a      	mov	r2, r3
 8009e14:	f7f6 fe3a 	bl	8000a8c <_read>
 8009e18:	1c43      	adds	r3, r0, #1
 8009e1a:	d102      	bne.n	8009e22 <_read_r+0x1e>
 8009e1c:	682b      	ldr	r3, [r5, #0]
 8009e1e:	b103      	cbz	r3, 8009e22 <_read_r+0x1e>
 8009e20:	6023      	str	r3, [r4, #0]
 8009e22:	bd38      	pop	{r3, r4, r5, pc}
 8009e24:	20001fc0 	.word	0x20001fc0

08009e28 <_write_r>:
 8009e28:	b538      	push	{r3, r4, r5, lr}
 8009e2a:	4d07      	ldr	r5, [pc, #28]	@ (8009e48 <_write_r+0x20>)
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	4608      	mov	r0, r1
 8009e30:	4611      	mov	r1, r2
 8009e32:	2200      	movs	r2, #0
 8009e34:	602a      	str	r2, [r5, #0]
 8009e36:	461a      	mov	r2, r3
 8009e38:	f7f6 fe45 	bl	8000ac6 <_write>
 8009e3c:	1c43      	adds	r3, r0, #1
 8009e3e:	d102      	bne.n	8009e46 <_write_r+0x1e>
 8009e40:	682b      	ldr	r3, [r5, #0]
 8009e42:	b103      	cbz	r3, 8009e46 <_write_r+0x1e>
 8009e44:	6023      	str	r3, [r4, #0]
 8009e46:	bd38      	pop	{r3, r4, r5, pc}
 8009e48:	20001fc0 	.word	0x20001fc0

08009e4c <__errno>:
 8009e4c:	4b01      	ldr	r3, [pc, #4]	@ (8009e54 <__errno+0x8>)
 8009e4e:	6818      	ldr	r0, [r3, #0]
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	20000190 	.word	0x20000190

08009e58 <__libc_init_array>:
 8009e58:	b570      	push	{r4, r5, r6, lr}
 8009e5a:	4d0d      	ldr	r5, [pc, #52]	@ (8009e90 <__libc_init_array+0x38>)
 8009e5c:	4c0d      	ldr	r4, [pc, #52]	@ (8009e94 <__libc_init_array+0x3c>)
 8009e5e:	1b64      	subs	r4, r4, r5
 8009e60:	10a4      	asrs	r4, r4, #2
 8009e62:	2600      	movs	r6, #0
 8009e64:	42a6      	cmp	r6, r4
 8009e66:	d109      	bne.n	8009e7c <__libc_init_array+0x24>
 8009e68:	4d0b      	ldr	r5, [pc, #44]	@ (8009e98 <__libc_init_array+0x40>)
 8009e6a:	4c0c      	ldr	r4, [pc, #48]	@ (8009e9c <__libc_init_array+0x44>)
 8009e6c:	f000 ffa0 	bl	800adb0 <_init>
 8009e70:	1b64      	subs	r4, r4, r5
 8009e72:	10a4      	asrs	r4, r4, #2
 8009e74:	2600      	movs	r6, #0
 8009e76:	42a6      	cmp	r6, r4
 8009e78:	d105      	bne.n	8009e86 <__libc_init_array+0x2e>
 8009e7a:	bd70      	pop	{r4, r5, r6, pc}
 8009e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e80:	4798      	blx	r3
 8009e82:	3601      	adds	r6, #1
 8009e84:	e7ee      	b.n	8009e64 <__libc_init_array+0xc>
 8009e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e8a:	4798      	blx	r3
 8009e8c:	3601      	adds	r6, #1
 8009e8e:	e7f2      	b.n	8009e76 <__libc_init_array+0x1e>
 8009e90:	0800afbc 	.word	0x0800afbc
 8009e94:	0800afbc 	.word	0x0800afbc
 8009e98:	0800afbc 	.word	0x0800afbc
 8009e9c:	0800afc0 	.word	0x0800afc0

08009ea0 <__retarget_lock_init_recursive>:
 8009ea0:	4770      	bx	lr

08009ea2 <__retarget_lock_acquire_recursive>:
 8009ea2:	4770      	bx	lr

08009ea4 <__retarget_lock_release_recursive>:
 8009ea4:	4770      	bx	lr
	...

08009ea8 <_free_r>:
 8009ea8:	b538      	push	{r3, r4, r5, lr}
 8009eaa:	4605      	mov	r5, r0
 8009eac:	2900      	cmp	r1, #0
 8009eae:	d041      	beq.n	8009f34 <_free_r+0x8c>
 8009eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eb4:	1f0c      	subs	r4, r1, #4
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	bfb8      	it	lt
 8009eba:	18e4      	addlt	r4, r4, r3
 8009ebc:	f000 f8e0 	bl	800a080 <__malloc_lock>
 8009ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8009f38 <_free_r+0x90>)
 8009ec2:	6813      	ldr	r3, [r2, #0]
 8009ec4:	b933      	cbnz	r3, 8009ed4 <_free_r+0x2c>
 8009ec6:	6063      	str	r3, [r4, #4]
 8009ec8:	6014      	str	r4, [r2, #0]
 8009eca:	4628      	mov	r0, r5
 8009ecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ed0:	f000 b8dc 	b.w	800a08c <__malloc_unlock>
 8009ed4:	42a3      	cmp	r3, r4
 8009ed6:	d908      	bls.n	8009eea <_free_r+0x42>
 8009ed8:	6820      	ldr	r0, [r4, #0]
 8009eda:	1821      	adds	r1, r4, r0
 8009edc:	428b      	cmp	r3, r1
 8009ede:	bf01      	itttt	eq
 8009ee0:	6819      	ldreq	r1, [r3, #0]
 8009ee2:	685b      	ldreq	r3, [r3, #4]
 8009ee4:	1809      	addeq	r1, r1, r0
 8009ee6:	6021      	streq	r1, [r4, #0]
 8009ee8:	e7ed      	b.n	8009ec6 <_free_r+0x1e>
 8009eea:	461a      	mov	r2, r3
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	b10b      	cbz	r3, 8009ef4 <_free_r+0x4c>
 8009ef0:	42a3      	cmp	r3, r4
 8009ef2:	d9fa      	bls.n	8009eea <_free_r+0x42>
 8009ef4:	6811      	ldr	r1, [r2, #0]
 8009ef6:	1850      	adds	r0, r2, r1
 8009ef8:	42a0      	cmp	r0, r4
 8009efa:	d10b      	bne.n	8009f14 <_free_r+0x6c>
 8009efc:	6820      	ldr	r0, [r4, #0]
 8009efe:	4401      	add	r1, r0
 8009f00:	1850      	adds	r0, r2, r1
 8009f02:	4283      	cmp	r3, r0
 8009f04:	6011      	str	r1, [r2, #0]
 8009f06:	d1e0      	bne.n	8009eca <_free_r+0x22>
 8009f08:	6818      	ldr	r0, [r3, #0]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	6053      	str	r3, [r2, #4]
 8009f0e:	4408      	add	r0, r1
 8009f10:	6010      	str	r0, [r2, #0]
 8009f12:	e7da      	b.n	8009eca <_free_r+0x22>
 8009f14:	d902      	bls.n	8009f1c <_free_r+0x74>
 8009f16:	230c      	movs	r3, #12
 8009f18:	602b      	str	r3, [r5, #0]
 8009f1a:	e7d6      	b.n	8009eca <_free_r+0x22>
 8009f1c:	6820      	ldr	r0, [r4, #0]
 8009f1e:	1821      	adds	r1, r4, r0
 8009f20:	428b      	cmp	r3, r1
 8009f22:	bf04      	itt	eq
 8009f24:	6819      	ldreq	r1, [r3, #0]
 8009f26:	685b      	ldreq	r3, [r3, #4]
 8009f28:	6063      	str	r3, [r4, #4]
 8009f2a:	bf04      	itt	eq
 8009f2c:	1809      	addeq	r1, r1, r0
 8009f2e:	6021      	streq	r1, [r4, #0]
 8009f30:	6054      	str	r4, [r2, #4]
 8009f32:	e7ca      	b.n	8009eca <_free_r+0x22>
 8009f34:	bd38      	pop	{r3, r4, r5, pc}
 8009f36:	bf00      	nop
 8009f38:	20001fcc 	.word	0x20001fcc

08009f3c <sbrk_aligned>:
 8009f3c:	b570      	push	{r4, r5, r6, lr}
 8009f3e:	4e0f      	ldr	r6, [pc, #60]	@ (8009f7c <sbrk_aligned+0x40>)
 8009f40:	460c      	mov	r4, r1
 8009f42:	6831      	ldr	r1, [r6, #0]
 8009f44:	4605      	mov	r5, r0
 8009f46:	b911      	cbnz	r1, 8009f4e <sbrk_aligned+0x12>
 8009f48:	f000 fe5a 	bl	800ac00 <_sbrk_r>
 8009f4c:	6030      	str	r0, [r6, #0]
 8009f4e:	4621      	mov	r1, r4
 8009f50:	4628      	mov	r0, r5
 8009f52:	f000 fe55 	bl	800ac00 <_sbrk_r>
 8009f56:	1c43      	adds	r3, r0, #1
 8009f58:	d103      	bne.n	8009f62 <sbrk_aligned+0x26>
 8009f5a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009f5e:	4620      	mov	r0, r4
 8009f60:	bd70      	pop	{r4, r5, r6, pc}
 8009f62:	1cc4      	adds	r4, r0, #3
 8009f64:	f024 0403 	bic.w	r4, r4, #3
 8009f68:	42a0      	cmp	r0, r4
 8009f6a:	d0f8      	beq.n	8009f5e <sbrk_aligned+0x22>
 8009f6c:	1a21      	subs	r1, r4, r0
 8009f6e:	4628      	mov	r0, r5
 8009f70:	f000 fe46 	bl	800ac00 <_sbrk_r>
 8009f74:	3001      	adds	r0, #1
 8009f76:	d1f2      	bne.n	8009f5e <sbrk_aligned+0x22>
 8009f78:	e7ef      	b.n	8009f5a <sbrk_aligned+0x1e>
 8009f7a:	bf00      	nop
 8009f7c:	20001fc8 	.word	0x20001fc8

08009f80 <_malloc_r>:
 8009f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f84:	1ccd      	adds	r5, r1, #3
 8009f86:	f025 0503 	bic.w	r5, r5, #3
 8009f8a:	3508      	adds	r5, #8
 8009f8c:	2d0c      	cmp	r5, #12
 8009f8e:	bf38      	it	cc
 8009f90:	250c      	movcc	r5, #12
 8009f92:	2d00      	cmp	r5, #0
 8009f94:	4606      	mov	r6, r0
 8009f96:	db01      	blt.n	8009f9c <_malloc_r+0x1c>
 8009f98:	42a9      	cmp	r1, r5
 8009f9a:	d904      	bls.n	8009fa6 <_malloc_r+0x26>
 8009f9c:	230c      	movs	r3, #12
 8009f9e:	6033      	str	r3, [r6, #0]
 8009fa0:	2000      	movs	r0, #0
 8009fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a07c <_malloc_r+0xfc>
 8009faa:	f000 f869 	bl	800a080 <__malloc_lock>
 8009fae:	f8d8 3000 	ldr.w	r3, [r8]
 8009fb2:	461c      	mov	r4, r3
 8009fb4:	bb44      	cbnz	r4, 800a008 <_malloc_r+0x88>
 8009fb6:	4629      	mov	r1, r5
 8009fb8:	4630      	mov	r0, r6
 8009fba:	f7ff ffbf 	bl	8009f3c <sbrk_aligned>
 8009fbe:	1c43      	adds	r3, r0, #1
 8009fc0:	4604      	mov	r4, r0
 8009fc2:	d158      	bne.n	800a076 <_malloc_r+0xf6>
 8009fc4:	f8d8 4000 	ldr.w	r4, [r8]
 8009fc8:	4627      	mov	r7, r4
 8009fca:	2f00      	cmp	r7, #0
 8009fcc:	d143      	bne.n	800a056 <_malloc_r+0xd6>
 8009fce:	2c00      	cmp	r4, #0
 8009fd0:	d04b      	beq.n	800a06a <_malloc_r+0xea>
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	4639      	mov	r1, r7
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	eb04 0903 	add.w	r9, r4, r3
 8009fdc:	f000 fe10 	bl	800ac00 <_sbrk_r>
 8009fe0:	4581      	cmp	r9, r0
 8009fe2:	d142      	bne.n	800a06a <_malloc_r+0xea>
 8009fe4:	6821      	ldr	r1, [r4, #0]
 8009fe6:	1a6d      	subs	r5, r5, r1
 8009fe8:	4629      	mov	r1, r5
 8009fea:	4630      	mov	r0, r6
 8009fec:	f7ff ffa6 	bl	8009f3c <sbrk_aligned>
 8009ff0:	3001      	adds	r0, #1
 8009ff2:	d03a      	beq.n	800a06a <_malloc_r+0xea>
 8009ff4:	6823      	ldr	r3, [r4, #0]
 8009ff6:	442b      	add	r3, r5
 8009ff8:	6023      	str	r3, [r4, #0]
 8009ffa:	f8d8 3000 	ldr.w	r3, [r8]
 8009ffe:	685a      	ldr	r2, [r3, #4]
 800a000:	bb62      	cbnz	r2, 800a05c <_malloc_r+0xdc>
 800a002:	f8c8 7000 	str.w	r7, [r8]
 800a006:	e00f      	b.n	800a028 <_malloc_r+0xa8>
 800a008:	6822      	ldr	r2, [r4, #0]
 800a00a:	1b52      	subs	r2, r2, r5
 800a00c:	d420      	bmi.n	800a050 <_malloc_r+0xd0>
 800a00e:	2a0b      	cmp	r2, #11
 800a010:	d917      	bls.n	800a042 <_malloc_r+0xc2>
 800a012:	1961      	adds	r1, r4, r5
 800a014:	42a3      	cmp	r3, r4
 800a016:	6025      	str	r5, [r4, #0]
 800a018:	bf18      	it	ne
 800a01a:	6059      	strne	r1, [r3, #4]
 800a01c:	6863      	ldr	r3, [r4, #4]
 800a01e:	bf08      	it	eq
 800a020:	f8c8 1000 	streq.w	r1, [r8]
 800a024:	5162      	str	r2, [r4, r5]
 800a026:	604b      	str	r3, [r1, #4]
 800a028:	4630      	mov	r0, r6
 800a02a:	f000 f82f 	bl	800a08c <__malloc_unlock>
 800a02e:	f104 000b 	add.w	r0, r4, #11
 800a032:	1d23      	adds	r3, r4, #4
 800a034:	f020 0007 	bic.w	r0, r0, #7
 800a038:	1ac2      	subs	r2, r0, r3
 800a03a:	bf1c      	itt	ne
 800a03c:	1a1b      	subne	r3, r3, r0
 800a03e:	50a3      	strne	r3, [r4, r2]
 800a040:	e7af      	b.n	8009fa2 <_malloc_r+0x22>
 800a042:	6862      	ldr	r2, [r4, #4]
 800a044:	42a3      	cmp	r3, r4
 800a046:	bf0c      	ite	eq
 800a048:	f8c8 2000 	streq.w	r2, [r8]
 800a04c:	605a      	strne	r2, [r3, #4]
 800a04e:	e7eb      	b.n	800a028 <_malloc_r+0xa8>
 800a050:	4623      	mov	r3, r4
 800a052:	6864      	ldr	r4, [r4, #4]
 800a054:	e7ae      	b.n	8009fb4 <_malloc_r+0x34>
 800a056:	463c      	mov	r4, r7
 800a058:	687f      	ldr	r7, [r7, #4]
 800a05a:	e7b6      	b.n	8009fca <_malloc_r+0x4a>
 800a05c:	461a      	mov	r2, r3
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	42a3      	cmp	r3, r4
 800a062:	d1fb      	bne.n	800a05c <_malloc_r+0xdc>
 800a064:	2300      	movs	r3, #0
 800a066:	6053      	str	r3, [r2, #4]
 800a068:	e7de      	b.n	800a028 <_malloc_r+0xa8>
 800a06a:	230c      	movs	r3, #12
 800a06c:	6033      	str	r3, [r6, #0]
 800a06e:	4630      	mov	r0, r6
 800a070:	f000 f80c 	bl	800a08c <__malloc_unlock>
 800a074:	e794      	b.n	8009fa0 <_malloc_r+0x20>
 800a076:	6005      	str	r5, [r0, #0]
 800a078:	e7d6      	b.n	800a028 <_malloc_r+0xa8>
 800a07a:	bf00      	nop
 800a07c:	20001fcc 	.word	0x20001fcc

0800a080 <__malloc_lock>:
 800a080:	4801      	ldr	r0, [pc, #4]	@ (800a088 <__malloc_lock+0x8>)
 800a082:	f7ff bf0e 	b.w	8009ea2 <__retarget_lock_acquire_recursive>
 800a086:	bf00      	nop
 800a088:	20001fc4 	.word	0x20001fc4

0800a08c <__malloc_unlock>:
 800a08c:	4801      	ldr	r0, [pc, #4]	@ (800a094 <__malloc_unlock+0x8>)
 800a08e:	f7ff bf09 	b.w	8009ea4 <__retarget_lock_release_recursive>
 800a092:	bf00      	nop
 800a094:	20001fc4 	.word	0x20001fc4

0800a098 <__ssputs_r>:
 800a098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a09c:	688e      	ldr	r6, [r1, #8]
 800a09e:	461f      	mov	r7, r3
 800a0a0:	42be      	cmp	r6, r7
 800a0a2:	680b      	ldr	r3, [r1, #0]
 800a0a4:	4682      	mov	sl, r0
 800a0a6:	460c      	mov	r4, r1
 800a0a8:	4690      	mov	r8, r2
 800a0aa:	d82d      	bhi.n	800a108 <__ssputs_r+0x70>
 800a0ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a0b4:	d026      	beq.n	800a104 <__ssputs_r+0x6c>
 800a0b6:	6965      	ldr	r5, [r4, #20]
 800a0b8:	6909      	ldr	r1, [r1, #16]
 800a0ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0be:	eba3 0901 	sub.w	r9, r3, r1
 800a0c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0c6:	1c7b      	adds	r3, r7, #1
 800a0c8:	444b      	add	r3, r9
 800a0ca:	106d      	asrs	r5, r5, #1
 800a0cc:	429d      	cmp	r5, r3
 800a0ce:	bf38      	it	cc
 800a0d0:	461d      	movcc	r5, r3
 800a0d2:	0553      	lsls	r3, r2, #21
 800a0d4:	d527      	bpl.n	800a126 <__ssputs_r+0x8e>
 800a0d6:	4629      	mov	r1, r5
 800a0d8:	f7ff ff52 	bl	8009f80 <_malloc_r>
 800a0dc:	4606      	mov	r6, r0
 800a0de:	b360      	cbz	r0, 800a13a <__ssputs_r+0xa2>
 800a0e0:	6921      	ldr	r1, [r4, #16]
 800a0e2:	464a      	mov	r2, r9
 800a0e4:	f000 fd9c 	bl	800ac20 <memcpy>
 800a0e8:	89a3      	ldrh	r3, [r4, #12]
 800a0ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a0ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0f2:	81a3      	strh	r3, [r4, #12]
 800a0f4:	6126      	str	r6, [r4, #16]
 800a0f6:	6165      	str	r5, [r4, #20]
 800a0f8:	444e      	add	r6, r9
 800a0fa:	eba5 0509 	sub.w	r5, r5, r9
 800a0fe:	6026      	str	r6, [r4, #0]
 800a100:	60a5      	str	r5, [r4, #8]
 800a102:	463e      	mov	r6, r7
 800a104:	42be      	cmp	r6, r7
 800a106:	d900      	bls.n	800a10a <__ssputs_r+0x72>
 800a108:	463e      	mov	r6, r7
 800a10a:	6820      	ldr	r0, [r4, #0]
 800a10c:	4632      	mov	r2, r6
 800a10e:	4641      	mov	r1, r8
 800a110:	f000 fd5c 	bl	800abcc <memmove>
 800a114:	68a3      	ldr	r3, [r4, #8]
 800a116:	1b9b      	subs	r3, r3, r6
 800a118:	60a3      	str	r3, [r4, #8]
 800a11a:	6823      	ldr	r3, [r4, #0]
 800a11c:	4433      	add	r3, r6
 800a11e:	6023      	str	r3, [r4, #0]
 800a120:	2000      	movs	r0, #0
 800a122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a126:	462a      	mov	r2, r5
 800a128:	f000 fd88 	bl	800ac3c <_realloc_r>
 800a12c:	4606      	mov	r6, r0
 800a12e:	2800      	cmp	r0, #0
 800a130:	d1e0      	bne.n	800a0f4 <__ssputs_r+0x5c>
 800a132:	6921      	ldr	r1, [r4, #16]
 800a134:	4650      	mov	r0, sl
 800a136:	f7ff feb7 	bl	8009ea8 <_free_r>
 800a13a:	230c      	movs	r3, #12
 800a13c:	f8ca 3000 	str.w	r3, [sl]
 800a140:	89a3      	ldrh	r3, [r4, #12]
 800a142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a146:	81a3      	strh	r3, [r4, #12]
 800a148:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a14c:	e7e9      	b.n	800a122 <__ssputs_r+0x8a>
	...

0800a150 <_svfiprintf_r>:
 800a150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a154:	4698      	mov	r8, r3
 800a156:	898b      	ldrh	r3, [r1, #12]
 800a158:	061b      	lsls	r3, r3, #24
 800a15a:	b09d      	sub	sp, #116	@ 0x74
 800a15c:	4607      	mov	r7, r0
 800a15e:	460d      	mov	r5, r1
 800a160:	4614      	mov	r4, r2
 800a162:	d510      	bpl.n	800a186 <_svfiprintf_r+0x36>
 800a164:	690b      	ldr	r3, [r1, #16]
 800a166:	b973      	cbnz	r3, 800a186 <_svfiprintf_r+0x36>
 800a168:	2140      	movs	r1, #64	@ 0x40
 800a16a:	f7ff ff09 	bl	8009f80 <_malloc_r>
 800a16e:	6028      	str	r0, [r5, #0]
 800a170:	6128      	str	r0, [r5, #16]
 800a172:	b930      	cbnz	r0, 800a182 <_svfiprintf_r+0x32>
 800a174:	230c      	movs	r3, #12
 800a176:	603b      	str	r3, [r7, #0]
 800a178:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a17c:	b01d      	add	sp, #116	@ 0x74
 800a17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a182:	2340      	movs	r3, #64	@ 0x40
 800a184:	616b      	str	r3, [r5, #20]
 800a186:	2300      	movs	r3, #0
 800a188:	9309      	str	r3, [sp, #36]	@ 0x24
 800a18a:	2320      	movs	r3, #32
 800a18c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a190:	f8cd 800c 	str.w	r8, [sp, #12]
 800a194:	2330      	movs	r3, #48	@ 0x30
 800a196:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a334 <_svfiprintf_r+0x1e4>
 800a19a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a19e:	f04f 0901 	mov.w	r9, #1
 800a1a2:	4623      	mov	r3, r4
 800a1a4:	469a      	mov	sl, r3
 800a1a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1aa:	b10a      	cbz	r2, 800a1b0 <_svfiprintf_r+0x60>
 800a1ac:	2a25      	cmp	r2, #37	@ 0x25
 800a1ae:	d1f9      	bne.n	800a1a4 <_svfiprintf_r+0x54>
 800a1b0:	ebba 0b04 	subs.w	fp, sl, r4
 800a1b4:	d00b      	beq.n	800a1ce <_svfiprintf_r+0x7e>
 800a1b6:	465b      	mov	r3, fp
 800a1b8:	4622      	mov	r2, r4
 800a1ba:	4629      	mov	r1, r5
 800a1bc:	4638      	mov	r0, r7
 800a1be:	f7ff ff6b 	bl	800a098 <__ssputs_r>
 800a1c2:	3001      	adds	r0, #1
 800a1c4:	f000 80a7 	beq.w	800a316 <_svfiprintf_r+0x1c6>
 800a1c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1ca:	445a      	add	r2, fp
 800a1cc:	9209      	str	r2, [sp, #36]	@ 0x24
 800a1ce:	f89a 3000 	ldrb.w	r3, [sl]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	f000 809f 	beq.w	800a316 <_svfiprintf_r+0x1c6>
 800a1d8:	2300      	movs	r3, #0
 800a1da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a1de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1e2:	f10a 0a01 	add.w	sl, sl, #1
 800a1e6:	9304      	str	r3, [sp, #16]
 800a1e8:	9307      	str	r3, [sp, #28]
 800a1ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a1ee:	931a      	str	r3, [sp, #104]	@ 0x68
 800a1f0:	4654      	mov	r4, sl
 800a1f2:	2205      	movs	r2, #5
 800a1f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1f8:	484e      	ldr	r0, [pc, #312]	@ (800a334 <_svfiprintf_r+0x1e4>)
 800a1fa:	f7f6 f819 	bl	8000230 <memchr>
 800a1fe:	9a04      	ldr	r2, [sp, #16]
 800a200:	b9d8      	cbnz	r0, 800a23a <_svfiprintf_r+0xea>
 800a202:	06d0      	lsls	r0, r2, #27
 800a204:	bf44      	itt	mi
 800a206:	2320      	movmi	r3, #32
 800a208:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a20c:	0711      	lsls	r1, r2, #28
 800a20e:	bf44      	itt	mi
 800a210:	232b      	movmi	r3, #43	@ 0x2b
 800a212:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a216:	f89a 3000 	ldrb.w	r3, [sl]
 800a21a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a21c:	d015      	beq.n	800a24a <_svfiprintf_r+0xfa>
 800a21e:	9a07      	ldr	r2, [sp, #28]
 800a220:	4654      	mov	r4, sl
 800a222:	2000      	movs	r0, #0
 800a224:	f04f 0c0a 	mov.w	ip, #10
 800a228:	4621      	mov	r1, r4
 800a22a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a22e:	3b30      	subs	r3, #48	@ 0x30
 800a230:	2b09      	cmp	r3, #9
 800a232:	d94b      	bls.n	800a2cc <_svfiprintf_r+0x17c>
 800a234:	b1b0      	cbz	r0, 800a264 <_svfiprintf_r+0x114>
 800a236:	9207      	str	r2, [sp, #28]
 800a238:	e014      	b.n	800a264 <_svfiprintf_r+0x114>
 800a23a:	eba0 0308 	sub.w	r3, r0, r8
 800a23e:	fa09 f303 	lsl.w	r3, r9, r3
 800a242:	4313      	orrs	r3, r2
 800a244:	9304      	str	r3, [sp, #16]
 800a246:	46a2      	mov	sl, r4
 800a248:	e7d2      	b.n	800a1f0 <_svfiprintf_r+0xa0>
 800a24a:	9b03      	ldr	r3, [sp, #12]
 800a24c:	1d19      	adds	r1, r3, #4
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	9103      	str	r1, [sp, #12]
 800a252:	2b00      	cmp	r3, #0
 800a254:	bfbb      	ittet	lt
 800a256:	425b      	neglt	r3, r3
 800a258:	f042 0202 	orrlt.w	r2, r2, #2
 800a25c:	9307      	strge	r3, [sp, #28]
 800a25e:	9307      	strlt	r3, [sp, #28]
 800a260:	bfb8      	it	lt
 800a262:	9204      	strlt	r2, [sp, #16]
 800a264:	7823      	ldrb	r3, [r4, #0]
 800a266:	2b2e      	cmp	r3, #46	@ 0x2e
 800a268:	d10a      	bne.n	800a280 <_svfiprintf_r+0x130>
 800a26a:	7863      	ldrb	r3, [r4, #1]
 800a26c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a26e:	d132      	bne.n	800a2d6 <_svfiprintf_r+0x186>
 800a270:	9b03      	ldr	r3, [sp, #12]
 800a272:	1d1a      	adds	r2, r3, #4
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	9203      	str	r2, [sp, #12]
 800a278:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a27c:	3402      	adds	r4, #2
 800a27e:	9305      	str	r3, [sp, #20]
 800a280:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a344 <_svfiprintf_r+0x1f4>
 800a284:	7821      	ldrb	r1, [r4, #0]
 800a286:	2203      	movs	r2, #3
 800a288:	4650      	mov	r0, sl
 800a28a:	f7f5 ffd1 	bl	8000230 <memchr>
 800a28e:	b138      	cbz	r0, 800a2a0 <_svfiprintf_r+0x150>
 800a290:	9b04      	ldr	r3, [sp, #16]
 800a292:	eba0 000a 	sub.w	r0, r0, sl
 800a296:	2240      	movs	r2, #64	@ 0x40
 800a298:	4082      	lsls	r2, r0
 800a29a:	4313      	orrs	r3, r2
 800a29c:	3401      	adds	r4, #1
 800a29e:	9304      	str	r3, [sp, #16]
 800a2a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2a4:	4824      	ldr	r0, [pc, #144]	@ (800a338 <_svfiprintf_r+0x1e8>)
 800a2a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a2aa:	2206      	movs	r2, #6
 800a2ac:	f7f5 ffc0 	bl	8000230 <memchr>
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	d036      	beq.n	800a322 <_svfiprintf_r+0x1d2>
 800a2b4:	4b21      	ldr	r3, [pc, #132]	@ (800a33c <_svfiprintf_r+0x1ec>)
 800a2b6:	bb1b      	cbnz	r3, 800a300 <_svfiprintf_r+0x1b0>
 800a2b8:	9b03      	ldr	r3, [sp, #12]
 800a2ba:	3307      	adds	r3, #7
 800a2bc:	f023 0307 	bic.w	r3, r3, #7
 800a2c0:	3308      	adds	r3, #8
 800a2c2:	9303      	str	r3, [sp, #12]
 800a2c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2c6:	4433      	add	r3, r6
 800a2c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2ca:	e76a      	b.n	800a1a2 <_svfiprintf_r+0x52>
 800a2cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2d0:	460c      	mov	r4, r1
 800a2d2:	2001      	movs	r0, #1
 800a2d4:	e7a8      	b.n	800a228 <_svfiprintf_r+0xd8>
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	3401      	adds	r4, #1
 800a2da:	9305      	str	r3, [sp, #20]
 800a2dc:	4619      	mov	r1, r3
 800a2de:	f04f 0c0a 	mov.w	ip, #10
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2e8:	3a30      	subs	r2, #48	@ 0x30
 800a2ea:	2a09      	cmp	r2, #9
 800a2ec:	d903      	bls.n	800a2f6 <_svfiprintf_r+0x1a6>
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d0c6      	beq.n	800a280 <_svfiprintf_r+0x130>
 800a2f2:	9105      	str	r1, [sp, #20]
 800a2f4:	e7c4      	b.n	800a280 <_svfiprintf_r+0x130>
 800a2f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2fa:	4604      	mov	r4, r0
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e7f0      	b.n	800a2e2 <_svfiprintf_r+0x192>
 800a300:	ab03      	add	r3, sp, #12
 800a302:	9300      	str	r3, [sp, #0]
 800a304:	462a      	mov	r2, r5
 800a306:	4b0e      	ldr	r3, [pc, #56]	@ (800a340 <_svfiprintf_r+0x1f0>)
 800a308:	a904      	add	r1, sp, #16
 800a30a:	4638      	mov	r0, r7
 800a30c:	f3af 8000 	nop.w
 800a310:	1c42      	adds	r2, r0, #1
 800a312:	4606      	mov	r6, r0
 800a314:	d1d6      	bne.n	800a2c4 <_svfiprintf_r+0x174>
 800a316:	89ab      	ldrh	r3, [r5, #12]
 800a318:	065b      	lsls	r3, r3, #25
 800a31a:	f53f af2d 	bmi.w	800a178 <_svfiprintf_r+0x28>
 800a31e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a320:	e72c      	b.n	800a17c <_svfiprintf_r+0x2c>
 800a322:	ab03      	add	r3, sp, #12
 800a324:	9300      	str	r3, [sp, #0]
 800a326:	462a      	mov	r2, r5
 800a328:	4b05      	ldr	r3, [pc, #20]	@ (800a340 <_svfiprintf_r+0x1f0>)
 800a32a:	a904      	add	r1, sp, #16
 800a32c:	4638      	mov	r0, r7
 800a32e:	f000 f9bb 	bl	800a6a8 <_printf_i>
 800a332:	e7ed      	b.n	800a310 <_svfiprintf_r+0x1c0>
 800a334:	0800af80 	.word	0x0800af80
 800a338:	0800af8a 	.word	0x0800af8a
 800a33c:	00000000 	.word	0x00000000
 800a340:	0800a099 	.word	0x0800a099
 800a344:	0800af86 	.word	0x0800af86

0800a348 <__sfputc_r>:
 800a348:	6893      	ldr	r3, [r2, #8]
 800a34a:	3b01      	subs	r3, #1
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	b410      	push	{r4}
 800a350:	6093      	str	r3, [r2, #8]
 800a352:	da08      	bge.n	800a366 <__sfputc_r+0x1e>
 800a354:	6994      	ldr	r4, [r2, #24]
 800a356:	42a3      	cmp	r3, r4
 800a358:	db01      	blt.n	800a35e <__sfputc_r+0x16>
 800a35a:	290a      	cmp	r1, #10
 800a35c:	d103      	bne.n	800a366 <__sfputc_r+0x1e>
 800a35e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a362:	f000 bb9f 	b.w	800aaa4 <__swbuf_r>
 800a366:	6813      	ldr	r3, [r2, #0]
 800a368:	1c58      	adds	r0, r3, #1
 800a36a:	6010      	str	r0, [r2, #0]
 800a36c:	7019      	strb	r1, [r3, #0]
 800a36e:	4608      	mov	r0, r1
 800a370:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a374:	4770      	bx	lr

0800a376 <__sfputs_r>:
 800a376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a378:	4606      	mov	r6, r0
 800a37a:	460f      	mov	r7, r1
 800a37c:	4614      	mov	r4, r2
 800a37e:	18d5      	adds	r5, r2, r3
 800a380:	42ac      	cmp	r4, r5
 800a382:	d101      	bne.n	800a388 <__sfputs_r+0x12>
 800a384:	2000      	movs	r0, #0
 800a386:	e007      	b.n	800a398 <__sfputs_r+0x22>
 800a388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a38c:	463a      	mov	r2, r7
 800a38e:	4630      	mov	r0, r6
 800a390:	f7ff ffda 	bl	800a348 <__sfputc_r>
 800a394:	1c43      	adds	r3, r0, #1
 800a396:	d1f3      	bne.n	800a380 <__sfputs_r+0xa>
 800a398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a39c <_vfiprintf_r>:
 800a39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a0:	460d      	mov	r5, r1
 800a3a2:	b09d      	sub	sp, #116	@ 0x74
 800a3a4:	4614      	mov	r4, r2
 800a3a6:	4698      	mov	r8, r3
 800a3a8:	4606      	mov	r6, r0
 800a3aa:	b118      	cbz	r0, 800a3b4 <_vfiprintf_r+0x18>
 800a3ac:	6a03      	ldr	r3, [r0, #32]
 800a3ae:	b90b      	cbnz	r3, 800a3b4 <_vfiprintf_r+0x18>
 800a3b0:	f7ff fc34 	bl	8009c1c <__sinit>
 800a3b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3b6:	07d9      	lsls	r1, r3, #31
 800a3b8:	d405      	bmi.n	800a3c6 <_vfiprintf_r+0x2a>
 800a3ba:	89ab      	ldrh	r3, [r5, #12]
 800a3bc:	059a      	lsls	r2, r3, #22
 800a3be:	d402      	bmi.n	800a3c6 <_vfiprintf_r+0x2a>
 800a3c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3c2:	f7ff fd6e 	bl	8009ea2 <__retarget_lock_acquire_recursive>
 800a3c6:	89ab      	ldrh	r3, [r5, #12]
 800a3c8:	071b      	lsls	r3, r3, #28
 800a3ca:	d501      	bpl.n	800a3d0 <_vfiprintf_r+0x34>
 800a3cc:	692b      	ldr	r3, [r5, #16]
 800a3ce:	b99b      	cbnz	r3, 800a3f8 <_vfiprintf_r+0x5c>
 800a3d0:	4629      	mov	r1, r5
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	f000 fba4 	bl	800ab20 <__swsetup_r>
 800a3d8:	b170      	cbz	r0, 800a3f8 <_vfiprintf_r+0x5c>
 800a3da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3dc:	07dc      	lsls	r4, r3, #31
 800a3de:	d504      	bpl.n	800a3ea <_vfiprintf_r+0x4e>
 800a3e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a3e4:	b01d      	add	sp, #116	@ 0x74
 800a3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ea:	89ab      	ldrh	r3, [r5, #12]
 800a3ec:	0598      	lsls	r0, r3, #22
 800a3ee:	d4f7      	bmi.n	800a3e0 <_vfiprintf_r+0x44>
 800a3f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3f2:	f7ff fd57 	bl	8009ea4 <__retarget_lock_release_recursive>
 800a3f6:	e7f3      	b.n	800a3e0 <_vfiprintf_r+0x44>
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3fc:	2320      	movs	r3, #32
 800a3fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a402:	f8cd 800c 	str.w	r8, [sp, #12]
 800a406:	2330      	movs	r3, #48	@ 0x30
 800a408:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a5b8 <_vfiprintf_r+0x21c>
 800a40c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a410:	f04f 0901 	mov.w	r9, #1
 800a414:	4623      	mov	r3, r4
 800a416:	469a      	mov	sl, r3
 800a418:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a41c:	b10a      	cbz	r2, 800a422 <_vfiprintf_r+0x86>
 800a41e:	2a25      	cmp	r2, #37	@ 0x25
 800a420:	d1f9      	bne.n	800a416 <_vfiprintf_r+0x7a>
 800a422:	ebba 0b04 	subs.w	fp, sl, r4
 800a426:	d00b      	beq.n	800a440 <_vfiprintf_r+0xa4>
 800a428:	465b      	mov	r3, fp
 800a42a:	4622      	mov	r2, r4
 800a42c:	4629      	mov	r1, r5
 800a42e:	4630      	mov	r0, r6
 800a430:	f7ff ffa1 	bl	800a376 <__sfputs_r>
 800a434:	3001      	adds	r0, #1
 800a436:	f000 80a7 	beq.w	800a588 <_vfiprintf_r+0x1ec>
 800a43a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a43c:	445a      	add	r2, fp
 800a43e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a440:	f89a 3000 	ldrb.w	r3, [sl]
 800a444:	2b00      	cmp	r3, #0
 800a446:	f000 809f 	beq.w	800a588 <_vfiprintf_r+0x1ec>
 800a44a:	2300      	movs	r3, #0
 800a44c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a450:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a454:	f10a 0a01 	add.w	sl, sl, #1
 800a458:	9304      	str	r3, [sp, #16]
 800a45a:	9307      	str	r3, [sp, #28]
 800a45c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a460:	931a      	str	r3, [sp, #104]	@ 0x68
 800a462:	4654      	mov	r4, sl
 800a464:	2205      	movs	r2, #5
 800a466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a46a:	4853      	ldr	r0, [pc, #332]	@ (800a5b8 <_vfiprintf_r+0x21c>)
 800a46c:	f7f5 fee0 	bl	8000230 <memchr>
 800a470:	9a04      	ldr	r2, [sp, #16]
 800a472:	b9d8      	cbnz	r0, 800a4ac <_vfiprintf_r+0x110>
 800a474:	06d1      	lsls	r1, r2, #27
 800a476:	bf44      	itt	mi
 800a478:	2320      	movmi	r3, #32
 800a47a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a47e:	0713      	lsls	r3, r2, #28
 800a480:	bf44      	itt	mi
 800a482:	232b      	movmi	r3, #43	@ 0x2b
 800a484:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a488:	f89a 3000 	ldrb.w	r3, [sl]
 800a48c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a48e:	d015      	beq.n	800a4bc <_vfiprintf_r+0x120>
 800a490:	9a07      	ldr	r2, [sp, #28]
 800a492:	4654      	mov	r4, sl
 800a494:	2000      	movs	r0, #0
 800a496:	f04f 0c0a 	mov.w	ip, #10
 800a49a:	4621      	mov	r1, r4
 800a49c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4a0:	3b30      	subs	r3, #48	@ 0x30
 800a4a2:	2b09      	cmp	r3, #9
 800a4a4:	d94b      	bls.n	800a53e <_vfiprintf_r+0x1a2>
 800a4a6:	b1b0      	cbz	r0, 800a4d6 <_vfiprintf_r+0x13a>
 800a4a8:	9207      	str	r2, [sp, #28]
 800a4aa:	e014      	b.n	800a4d6 <_vfiprintf_r+0x13a>
 800a4ac:	eba0 0308 	sub.w	r3, r0, r8
 800a4b0:	fa09 f303 	lsl.w	r3, r9, r3
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	9304      	str	r3, [sp, #16]
 800a4b8:	46a2      	mov	sl, r4
 800a4ba:	e7d2      	b.n	800a462 <_vfiprintf_r+0xc6>
 800a4bc:	9b03      	ldr	r3, [sp, #12]
 800a4be:	1d19      	adds	r1, r3, #4
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	9103      	str	r1, [sp, #12]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	bfbb      	ittet	lt
 800a4c8:	425b      	neglt	r3, r3
 800a4ca:	f042 0202 	orrlt.w	r2, r2, #2
 800a4ce:	9307      	strge	r3, [sp, #28]
 800a4d0:	9307      	strlt	r3, [sp, #28]
 800a4d2:	bfb8      	it	lt
 800a4d4:	9204      	strlt	r2, [sp, #16]
 800a4d6:	7823      	ldrb	r3, [r4, #0]
 800a4d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a4da:	d10a      	bne.n	800a4f2 <_vfiprintf_r+0x156>
 800a4dc:	7863      	ldrb	r3, [r4, #1]
 800a4de:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4e0:	d132      	bne.n	800a548 <_vfiprintf_r+0x1ac>
 800a4e2:	9b03      	ldr	r3, [sp, #12]
 800a4e4:	1d1a      	adds	r2, r3, #4
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	9203      	str	r2, [sp, #12]
 800a4ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a4ee:	3402      	adds	r4, #2
 800a4f0:	9305      	str	r3, [sp, #20]
 800a4f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a5c8 <_vfiprintf_r+0x22c>
 800a4f6:	7821      	ldrb	r1, [r4, #0]
 800a4f8:	2203      	movs	r2, #3
 800a4fa:	4650      	mov	r0, sl
 800a4fc:	f7f5 fe98 	bl	8000230 <memchr>
 800a500:	b138      	cbz	r0, 800a512 <_vfiprintf_r+0x176>
 800a502:	9b04      	ldr	r3, [sp, #16]
 800a504:	eba0 000a 	sub.w	r0, r0, sl
 800a508:	2240      	movs	r2, #64	@ 0x40
 800a50a:	4082      	lsls	r2, r0
 800a50c:	4313      	orrs	r3, r2
 800a50e:	3401      	adds	r4, #1
 800a510:	9304      	str	r3, [sp, #16]
 800a512:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a516:	4829      	ldr	r0, [pc, #164]	@ (800a5bc <_vfiprintf_r+0x220>)
 800a518:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a51c:	2206      	movs	r2, #6
 800a51e:	f7f5 fe87 	bl	8000230 <memchr>
 800a522:	2800      	cmp	r0, #0
 800a524:	d03f      	beq.n	800a5a6 <_vfiprintf_r+0x20a>
 800a526:	4b26      	ldr	r3, [pc, #152]	@ (800a5c0 <_vfiprintf_r+0x224>)
 800a528:	bb1b      	cbnz	r3, 800a572 <_vfiprintf_r+0x1d6>
 800a52a:	9b03      	ldr	r3, [sp, #12]
 800a52c:	3307      	adds	r3, #7
 800a52e:	f023 0307 	bic.w	r3, r3, #7
 800a532:	3308      	adds	r3, #8
 800a534:	9303      	str	r3, [sp, #12]
 800a536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a538:	443b      	add	r3, r7
 800a53a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a53c:	e76a      	b.n	800a414 <_vfiprintf_r+0x78>
 800a53e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a542:	460c      	mov	r4, r1
 800a544:	2001      	movs	r0, #1
 800a546:	e7a8      	b.n	800a49a <_vfiprintf_r+0xfe>
 800a548:	2300      	movs	r3, #0
 800a54a:	3401      	adds	r4, #1
 800a54c:	9305      	str	r3, [sp, #20]
 800a54e:	4619      	mov	r1, r3
 800a550:	f04f 0c0a 	mov.w	ip, #10
 800a554:	4620      	mov	r0, r4
 800a556:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a55a:	3a30      	subs	r2, #48	@ 0x30
 800a55c:	2a09      	cmp	r2, #9
 800a55e:	d903      	bls.n	800a568 <_vfiprintf_r+0x1cc>
 800a560:	2b00      	cmp	r3, #0
 800a562:	d0c6      	beq.n	800a4f2 <_vfiprintf_r+0x156>
 800a564:	9105      	str	r1, [sp, #20]
 800a566:	e7c4      	b.n	800a4f2 <_vfiprintf_r+0x156>
 800a568:	fb0c 2101 	mla	r1, ip, r1, r2
 800a56c:	4604      	mov	r4, r0
 800a56e:	2301      	movs	r3, #1
 800a570:	e7f0      	b.n	800a554 <_vfiprintf_r+0x1b8>
 800a572:	ab03      	add	r3, sp, #12
 800a574:	9300      	str	r3, [sp, #0]
 800a576:	462a      	mov	r2, r5
 800a578:	4b12      	ldr	r3, [pc, #72]	@ (800a5c4 <_vfiprintf_r+0x228>)
 800a57a:	a904      	add	r1, sp, #16
 800a57c:	4630      	mov	r0, r6
 800a57e:	f3af 8000 	nop.w
 800a582:	4607      	mov	r7, r0
 800a584:	1c78      	adds	r0, r7, #1
 800a586:	d1d6      	bne.n	800a536 <_vfiprintf_r+0x19a>
 800a588:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a58a:	07d9      	lsls	r1, r3, #31
 800a58c:	d405      	bmi.n	800a59a <_vfiprintf_r+0x1fe>
 800a58e:	89ab      	ldrh	r3, [r5, #12]
 800a590:	059a      	lsls	r2, r3, #22
 800a592:	d402      	bmi.n	800a59a <_vfiprintf_r+0x1fe>
 800a594:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a596:	f7ff fc85 	bl	8009ea4 <__retarget_lock_release_recursive>
 800a59a:	89ab      	ldrh	r3, [r5, #12]
 800a59c:	065b      	lsls	r3, r3, #25
 800a59e:	f53f af1f 	bmi.w	800a3e0 <_vfiprintf_r+0x44>
 800a5a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5a4:	e71e      	b.n	800a3e4 <_vfiprintf_r+0x48>
 800a5a6:	ab03      	add	r3, sp, #12
 800a5a8:	9300      	str	r3, [sp, #0]
 800a5aa:	462a      	mov	r2, r5
 800a5ac:	4b05      	ldr	r3, [pc, #20]	@ (800a5c4 <_vfiprintf_r+0x228>)
 800a5ae:	a904      	add	r1, sp, #16
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	f000 f879 	bl	800a6a8 <_printf_i>
 800a5b6:	e7e4      	b.n	800a582 <_vfiprintf_r+0x1e6>
 800a5b8:	0800af80 	.word	0x0800af80
 800a5bc:	0800af8a 	.word	0x0800af8a
 800a5c0:	00000000 	.word	0x00000000
 800a5c4:	0800a377 	.word	0x0800a377
 800a5c8:	0800af86 	.word	0x0800af86

0800a5cc <_printf_common>:
 800a5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5d0:	4616      	mov	r6, r2
 800a5d2:	4698      	mov	r8, r3
 800a5d4:	688a      	ldr	r2, [r1, #8]
 800a5d6:	690b      	ldr	r3, [r1, #16]
 800a5d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	bfb8      	it	lt
 800a5e0:	4613      	movlt	r3, r2
 800a5e2:	6033      	str	r3, [r6, #0]
 800a5e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a5e8:	4607      	mov	r7, r0
 800a5ea:	460c      	mov	r4, r1
 800a5ec:	b10a      	cbz	r2, 800a5f2 <_printf_common+0x26>
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	6033      	str	r3, [r6, #0]
 800a5f2:	6823      	ldr	r3, [r4, #0]
 800a5f4:	0699      	lsls	r1, r3, #26
 800a5f6:	bf42      	ittt	mi
 800a5f8:	6833      	ldrmi	r3, [r6, #0]
 800a5fa:	3302      	addmi	r3, #2
 800a5fc:	6033      	strmi	r3, [r6, #0]
 800a5fe:	6825      	ldr	r5, [r4, #0]
 800a600:	f015 0506 	ands.w	r5, r5, #6
 800a604:	d106      	bne.n	800a614 <_printf_common+0x48>
 800a606:	f104 0a19 	add.w	sl, r4, #25
 800a60a:	68e3      	ldr	r3, [r4, #12]
 800a60c:	6832      	ldr	r2, [r6, #0]
 800a60e:	1a9b      	subs	r3, r3, r2
 800a610:	42ab      	cmp	r3, r5
 800a612:	dc26      	bgt.n	800a662 <_printf_common+0x96>
 800a614:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a618:	6822      	ldr	r2, [r4, #0]
 800a61a:	3b00      	subs	r3, #0
 800a61c:	bf18      	it	ne
 800a61e:	2301      	movne	r3, #1
 800a620:	0692      	lsls	r2, r2, #26
 800a622:	d42b      	bmi.n	800a67c <_printf_common+0xb0>
 800a624:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a628:	4641      	mov	r1, r8
 800a62a:	4638      	mov	r0, r7
 800a62c:	47c8      	blx	r9
 800a62e:	3001      	adds	r0, #1
 800a630:	d01e      	beq.n	800a670 <_printf_common+0xa4>
 800a632:	6823      	ldr	r3, [r4, #0]
 800a634:	6922      	ldr	r2, [r4, #16]
 800a636:	f003 0306 	and.w	r3, r3, #6
 800a63a:	2b04      	cmp	r3, #4
 800a63c:	bf02      	ittt	eq
 800a63e:	68e5      	ldreq	r5, [r4, #12]
 800a640:	6833      	ldreq	r3, [r6, #0]
 800a642:	1aed      	subeq	r5, r5, r3
 800a644:	68a3      	ldr	r3, [r4, #8]
 800a646:	bf0c      	ite	eq
 800a648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a64c:	2500      	movne	r5, #0
 800a64e:	4293      	cmp	r3, r2
 800a650:	bfc4      	itt	gt
 800a652:	1a9b      	subgt	r3, r3, r2
 800a654:	18ed      	addgt	r5, r5, r3
 800a656:	2600      	movs	r6, #0
 800a658:	341a      	adds	r4, #26
 800a65a:	42b5      	cmp	r5, r6
 800a65c:	d11a      	bne.n	800a694 <_printf_common+0xc8>
 800a65e:	2000      	movs	r0, #0
 800a660:	e008      	b.n	800a674 <_printf_common+0xa8>
 800a662:	2301      	movs	r3, #1
 800a664:	4652      	mov	r2, sl
 800a666:	4641      	mov	r1, r8
 800a668:	4638      	mov	r0, r7
 800a66a:	47c8      	blx	r9
 800a66c:	3001      	adds	r0, #1
 800a66e:	d103      	bne.n	800a678 <_printf_common+0xac>
 800a670:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a678:	3501      	adds	r5, #1
 800a67a:	e7c6      	b.n	800a60a <_printf_common+0x3e>
 800a67c:	18e1      	adds	r1, r4, r3
 800a67e:	1c5a      	adds	r2, r3, #1
 800a680:	2030      	movs	r0, #48	@ 0x30
 800a682:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a686:	4422      	add	r2, r4
 800a688:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a68c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a690:	3302      	adds	r3, #2
 800a692:	e7c7      	b.n	800a624 <_printf_common+0x58>
 800a694:	2301      	movs	r3, #1
 800a696:	4622      	mov	r2, r4
 800a698:	4641      	mov	r1, r8
 800a69a:	4638      	mov	r0, r7
 800a69c:	47c8      	blx	r9
 800a69e:	3001      	adds	r0, #1
 800a6a0:	d0e6      	beq.n	800a670 <_printf_common+0xa4>
 800a6a2:	3601      	adds	r6, #1
 800a6a4:	e7d9      	b.n	800a65a <_printf_common+0x8e>
	...

0800a6a8 <_printf_i>:
 800a6a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6ac:	7e0f      	ldrb	r7, [r1, #24]
 800a6ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a6b0:	2f78      	cmp	r7, #120	@ 0x78
 800a6b2:	4691      	mov	r9, r2
 800a6b4:	4680      	mov	r8, r0
 800a6b6:	460c      	mov	r4, r1
 800a6b8:	469a      	mov	sl, r3
 800a6ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a6be:	d807      	bhi.n	800a6d0 <_printf_i+0x28>
 800a6c0:	2f62      	cmp	r7, #98	@ 0x62
 800a6c2:	d80a      	bhi.n	800a6da <_printf_i+0x32>
 800a6c4:	2f00      	cmp	r7, #0
 800a6c6:	f000 80d1 	beq.w	800a86c <_printf_i+0x1c4>
 800a6ca:	2f58      	cmp	r7, #88	@ 0x58
 800a6cc:	f000 80b8 	beq.w	800a840 <_printf_i+0x198>
 800a6d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a6d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a6d8:	e03a      	b.n	800a750 <_printf_i+0xa8>
 800a6da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a6de:	2b15      	cmp	r3, #21
 800a6e0:	d8f6      	bhi.n	800a6d0 <_printf_i+0x28>
 800a6e2:	a101      	add	r1, pc, #4	@ (adr r1, 800a6e8 <_printf_i+0x40>)
 800a6e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6e8:	0800a741 	.word	0x0800a741
 800a6ec:	0800a755 	.word	0x0800a755
 800a6f0:	0800a6d1 	.word	0x0800a6d1
 800a6f4:	0800a6d1 	.word	0x0800a6d1
 800a6f8:	0800a6d1 	.word	0x0800a6d1
 800a6fc:	0800a6d1 	.word	0x0800a6d1
 800a700:	0800a755 	.word	0x0800a755
 800a704:	0800a6d1 	.word	0x0800a6d1
 800a708:	0800a6d1 	.word	0x0800a6d1
 800a70c:	0800a6d1 	.word	0x0800a6d1
 800a710:	0800a6d1 	.word	0x0800a6d1
 800a714:	0800a853 	.word	0x0800a853
 800a718:	0800a77f 	.word	0x0800a77f
 800a71c:	0800a80d 	.word	0x0800a80d
 800a720:	0800a6d1 	.word	0x0800a6d1
 800a724:	0800a6d1 	.word	0x0800a6d1
 800a728:	0800a875 	.word	0x0800a875
 800a72c:	0800a6d1 	.word	0x0800a6d1
 800a730:	0800a77f 	.word	0x0800a77f
 800a734:	0800a6d1 	.word	0x0800a6d1
 800a738:	0800a6d1 	.word	0x0800a6d1
 800a73c:	0800a815 	.word	0x0800a815
 800a740:	6833      	ldr	r3, [r6, #0]
 800a742:	1d1a      	adds	r2, r3, #4
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	6032      	str	r2, [r6, #0]
 800a748:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a74c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a750:	2301      	movs	r3, #1
 800a752:	e09c      	b.n	800a88e <_printf_i+0x1e6>
 800a754:	6833      	ldr	r3, [r6, #0]
 800a756:	6820      	ldr	r0, [r4, #0]
 800a758:	1d19      	adds	r1, r3, #4
 800a75a:	6031      	str	r1, [r6, #0]
 800a75c:	0606      	lsls	r6, r0, #24
 800a75e:	d501      	bpl.n	800a764 <_printf_i+0xbc>
 800a760:	681d      	ldr	r5, [r3, #0]
 800a762:	e003      	b.n	800a76c <_printf_i+0xc4>
 800a764:	0645      	lsls	r5, r0, #25
 800a766:	d5fb      	bpl.n	800a760 <_printf_i+0xb8>
 800a768:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a76c:	2d00      	cmp	r5, #0
 800a76e:	da03      	bge.n	800a778 <_printf_i+0xd0>
 800a770:	232d      	movs	r3, #45	@ 0x2d
 800a772:	426d      	negs	r5, r5
 800a774:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a778:	4858      	ldr	r0, [pc, #352]	@ (800a8dc <_printf_i+0x234>)
 800a77a:	230a      	movs	r3, #10
 800a77c:	e011      	b.n	800a7a2 <_printf_i+0xfa>
 800a77e:	6821      	ldr	r1, [r4, #0]
 800a780:	6833      	ldr	r3, [r6, #0]
 800a782:	0608      	lsls	r0, r1, #24
 800a784:	f853 5b04 	ldr.w	r5, [r3], #4
 800a788:	d402      	bmi.n	800a790 <_printf_i+0xe8>
 800a78a:	0649      	lsls	r1, r1, #25
 800a78c:	bf48      	it	mi
 800a78e:	b2ad      	uxthmi	r5, r5
 800a790:	2f6f      	cmp	r7, #111	@ 0x6f
 800a792:	4852      	ldr	r0, [pc, #328]	@ (800a8dc <_printf_i+0x234>)
 800a794:	6033      	str	r3, [r6, #0]
 800a796:	bf14      	ite	ne
 800a798:	230a      	movne	r3, #10
 800a79a:	2308      	moveq	r3, #8
 800a79c:	2100      	movs	r1, #0
 800a79e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a7a2:	6866      	ldr	r6, [r4, #4]
 800a7a4:	60a6      	str	r6, [r4, #8]
 800a7a6:	2e00      	cmp	r6, #0
 800a7a8:	db05      	blt.n	800a7b6 <_printf_i+0x10e>
 800a7aa:	6821      	ldr	r1, [r4, #0]
 800a7ac:	432e      	orrs	r6, r5
 800a7ae:	f021 0104 	bic.w	r1, r1, #4
 800a7b2:	6021      	str	r1, [r4, #0]
 800a7b4:	d04b      	beq.n	800a84e <_printf_i+0x1a6>
 800a7b6:	4616      	mov	r6, r2
 800a7b8:	fbb5 f1f3 	udiv	r1, r5, r3
 800a7bc:	fb03 5711 	mls	r7, r3, r1, r5
 800a7c0:	5dc7      	ldrb	r7, [r0, r7]
 800a7c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a7c6:	462f      	mov	r7, r5
 800a7c8:	42bb      	cmp	r3, r7
 800a7ca:	460d      	mov	r5, r1
 800a7cc:	d9f4      	bls.n	800a7b8 <_printf_i+0x110>
 800a7ce:	2b08      	cmp	r3, #8
 800a7d0:	d10b      	bne.n	800a7ea <_printf_i+0x142>
 800a7d2:	6823      	ldr	r3, [r4, #0]
 800a7d4:	07df      	lsls	r7, r3, #31
 800a7d6:	d508      	bpl.n	800a7ea <_printf_i+0x142>
 800a7d8:	6923      	ldr	r3, [r4, #16]
 800a7da:	6861      	ldr	r1, [r4, #4]
 800a7dc:	4299      	cmp	r1, r3
 800a7de:	bfde      	ittt	le
 800a7e0:	2330      	movle	r3, #48	@ 0x30
 800a7e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a7e6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a7ea:	1b92      	subs	r2, r2, r6
 800a7ec:	6122      	str	r2, [r4, #16]
 800a7ee:	f8cd a000 	str.w	sl, [sp]
 800a7f2:	464b      	mov	r3, r9
 800a7f4:	aa03      	add	r2, sp, #12
 800a7f6:	4621      	mov	r1, r4
 800a7f8:	4640      	mov	r0, r8
 800a7fa:	f7ff fee7 	bl	800a5cc <_printf_common>
 800a7fe:	3001      	adds	r0, #1
 800a800:	d14a      	bne.n	800a898 <_printf_i+0x1f0>
 800a802:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a806:	b004      	add	sp, #16
 800a808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a80c:	6823      	ldr	r3, [r4, #0]
 800a80e:	f043 0320 	orr.w	r3, r3, #32
 800a812:	6023      	str	r3, [r4, #0]
 800a814:	4832      	ldr	r0, [pc, #200]	@ (800a8e0 <_printf_i+0x238>)
 800a816:	2778      	movs	r7, #120	@ 0x78
 800a818:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a81c:	6823      	ldr	r3, [r4, #0]
 800a81e:	6831      	ldr	r1, [r6, #0]
 800a820:	061f      	lsls	r7, r3, #24
 800a822:	f851 5b04 	ldr.w	r5, [r1], #4
 800a826:	d402      	bmi.n	800a82e <_printf_i+0x186>
 800a828:	065f      	lsls	r7, r3, #25
 800a82a:	bf48      	it	mi
 800a82c:	b2ad      	uxthmi	r5, r5
 800a82e:	6031      	str	r1, [r6, #0]
 800a830:	07d9      	lsls	r1, r3, #31
 800a832:	bf44      	itt	mi
 800a834:	f043 0320 	orrmi.w	r3, r3, #32
 800a838:	6023      	strmi	r3, [r4, #0]
 800a83a:	b11d      	cbz	r5, 800a844 <_printf_i+0x19c>
 800a83c:	2310      	movs	r3, #16
 800a83e:	e7ad      	b.n	800a79c <_printf_i+0xf4>
 800a840:	4826      	ldr	r0, [pc, #152]	@ (800a8dc <_printf_i+0x234>)
 800a842:	e7e9      	b.n	800a818 <_printf_i+0x170>
 800a844:	6823      	ldr	r3, [r4, #0]
 800a846:	f023 0320 	bic.w	r3, r3, #32
 800a84a:	6023      	str	r3, [r4, #0]
 800a84c:	e7f6      	b.n	800a83c <_printf_i+0x194>
 800a84e:	4616      	mov	r6, r2
 800a850:	e7bd      	b.n	800a7ce <_printf_i+0x126>
 800a852:	6833      	ldr	r3, [r6, #0]
 800a854:	6825      	ldr	r5, [r4, #0]
 800a856:	6961      	ldr	r1, [r4, #20]
 800a858:	1d18      	adds	r0, r3, #4
 800a85a:	6030      	str	r0, [r6, #0]
 800a85c:	062e      	lsls	r6, r5, #24
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	d501      	bpl.n	800a866 <_printf_i+0x1be>
 800a862:	6019      	str	r1, [r3, #0]
 800a864:	e002      	b.n	800a86c <_printf_i+0x1c4>
 800a866:	0668      	lsls	r0, r5, #25
 800a868:	d5fb      	bpl.n	800a862 <_printf_i+0x1ba>
 800a86a:	8019      	strh	r1, [r3, #0]
 800a86c:	2300      	movs	r3, #0
 800a86e:	6123      	str	r3, [r4, #16]
 800a870:	4616      	mov	r6, r2
 800a872:	e7bc      	b.n	800a7ee <_printf_i+0x146>
 800a874:	6833      	ldr	r3, [r6, #0]
 800a876:	1d1a      	adds	r2, r3, #4
 800a878:	6032      	str	r2, [r6, #0]
 800a87a:	681e      	ldr	r6, [r3, #0]
 800a87c:	6862      	ldr	r2, [r4, #4]
 800a87e:	2100      	movs	r1, #0
 800a880:	4630      	mov	r0, r6
 800a882:	f7f5 fcd5 	bl	8000230 <memchr>
 800a886:	b108      	cbz	r0, 800a88c <_printf_i+0x1e4>
 800a888:	1b80      	subs	r0, r0, r6
 800a88a:	6060      	str	r0, [r4, #4]
 800a88c:	6863      	ldr	r3, [r4, #4]
 800a88e:	6123      	str	r3, [r4, #16]
 800a890:	2300      	movs	r3, #0
 800a892:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a896:	e7aa      	b.n	800a7ee <_printf_i+0x146>
 800a898:	6923      	ldr	r3, [r4, #16]
 800a89a:	4632      	mov	r2, r6
 800a89c:	4649      	mov	r1, r9
 800a89e:	4640      	mov	r0, r8
 800a8a0:	47d0      	blx	sl
 800a8a2:	3001      	adds	r0, #1
 800a8a4:	d0ad      	beq.n	800a802 <_printf_i+0x15a>
 800a8a6:	6823      	ldr	r3, [r4, #0]
 800a8a8:	079b      	lsls	r3, r3, #30
 800a8aa:	d413      	bmi.n	800a8d4 <_printf_i+0x22c>
 800a8ac:	68e0      	ldr	r0, [r4, #12]
 800a8ae:	9b03      	ldr	r3, [sp, #12]
 800a8b0:	4298      	cmp	r0, r3
 800a8b2:	bfb8      	it	lt
 800a8b4:	4618      	movlt	r0, r3
 800a8b6:	e7a6      	b.n	800a806 <_printf_i+0x15e>
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	4632      	mov	r2, r6
 800a8bc:	4649      	mov	r1, r9
 800a8be:	4640      	mov	r0, r8
 800a8c0:	47d0      	blx	sl
 800a8c2:	3001      	adds	r0, #1
 800a8c4:	d09d      	beq.n	800a802 <_printf_i+0x15a>
 800a8c6:	3501      	adds	r5, #1
 800a8c8:	68e3      	ldr	r3, [r4, #12]
 800a8ca:	9903      	ldr	r1, [sp, #12]
 800a8cc:	1a5b      	subs	r3, r3, r1
 800a8ce:	42ab      	cmp	r3, r5
 800a8d0:	dcf2      	bgt.n	800a8b8 <_printf_i+0x210>
 800a8d2:	e7eb      	b.n	800a8ac <_printf_i+0x204>
 800a8d4:	2500      	movs	r5, #0
 800a8d6:	f104 0619 	add.w	r6, r4, #25
 800a8da:	e7f5      	b.n	800a8c8 <_printf_i+0x220>
 800a8dc:	0800af91 	.word	0x0800af91
 800a8e0:	0800afa2 	.word	0x0800afa2

0800a8e4 <__sflush_r>:
 800a8e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ec:	0716      	lsls	r6, r2, #28
 800a8ee:	4605      	mov	r5, r0
 800a8f0:	460c      	mov	r4, r1
 800a8f2:	d454      	bmi.n	800a99e <__sflush_r+0xba>
 800a8f4:	684b      	ldr	r3, [r1, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	dc02      	bgt.n	800a900 <__sflush_r+0x1c>
 800a8fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	dd48      	ble.n	800a992 <__sflush_r+0xae>
 800a900:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a902:	2e00      	cmp	r6, #0
 800a904:	d045      	beq.n	800a992 <__sflush_r+0xae>
 800a906:	2300      	movs	r3, #0
 800a908:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a90c:	682f      	ldr	r7, [r5, #0]
 800a90e:	6a21      	ldr	r1, [r4, #32]
 800a910:	602b      	str	r3, [r5, #0]
 800a912:	d030      	beq.n	800a976 <__sflush_r+0x92>
 800a914:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a916:	89a3      	ldrh	r3, [r4, #12]
 800a918:	0759      	lsls	r1, r3, #29
 800a91a:	d505      	bpl.n	800a928 <__sflush_r+0x44>
 800a91c:	6863      	ldr	r3, [r4, #4]
 800a91e:	1ad2      	subs	r2, r2, r3
 800a920:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a922:	b10b      	cbz	r3, 800a928 <__sflush_r+0x44>
 800a924:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a926:	1ad2      	subs	r2, r2, r3
 800a928:	2300      	movs	r3, #0
 800a92a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a92c:	6a21      	ldr	r1, [r4, #32]
 800a92e:	4628      	mov	r0, r5
 800a930:	47b0      	blx	r6
 800a932:	1c43      	adds	r3, r0, #1
 800a934:	89a3      	ldrh	r3, [r4, #12]
 800a936:	d106      	bne.n	800a946 <__sflush_r+0x62>
 800a938:	6829      	ldr	r1, [r5, #0]
 800a93a:	291d      	cmp	r1, #29
 800a93c:	d82b      	bhi.n	800a996 <__sflush_r+0xb2>
 800a93e:	4a2a      	ldr	r2, [pc, #168]	@ (800a9e8 <__sflush_r+0x104>)
 800a940:	40ca      	lsrs	r2, r1
 800a942:	07d6      	lsls	r6, r2, #31
 800a944:	d527      	bpl.n	800a996 <__sflush_r+0xb2>
 800a946:	2200      	movs	r2, #0
 800a948:	6062      	str	r2, [r4, #4]
 800a94a:	04d9      	lsls	r1, r3, #19
 800a94c:	6922      	ldr	r2, [r4, #16]
 800a94e:	6022      	str	r2, [r4, #0]
 800a950:	d504      	bpl.n	800a95c <__sflush_r+0x78>
 800a952:	1c42      	adds	r2, r0, #1
 800a954:	d101      	bne.n	800a95a <__sflush_r+0x76>
 800a956:	682b      	ldr	r3, [r5, #0]
 800a958:	b903      	cbnz	r3, 800a95c <__sflush_r+0x78>
 800a95a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a95c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a95e:	602f      	str	r7, [r5, #0]
 800a960:	b1b9      	cbz	r1, 800a992 <__sflush_r+0xae>
 800a962:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a966:	4299      	cmp	r1, r3
 800a968:	d002      	beq.n	800a970 <__sflush_r+0x8c>
 800a96a:	4628      	mov	r0, r5
 800a96c:	f7ff fa9c 	bl	8009ea8 <_free_r>
 800a970:	2300      	movs	r3, #0
 800a972:	6363      	str	r3, [r4, #52]	@ 0x34
 800a974:	e00d      	b.n	800a992 <__sflush_r+0xae>
 800a976:	2301      	movs	r3, #1
 800a978:	4628      	mov	r0, r5
 800a97a:	47b0      	blx	r6
 800a97c:	4602      	mov	r2, r0
 800a97e:	1c50      	adds	r0, r2, #1
 800a980:	d1c9      	bne.n	800a916 <__sflush_r+0x32>
 800a982:	682b      	ldr	r3, [r5, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d0c6      	beq.n	800a916 <__sflush_r+0x32>
 800a988:	2b1d      	cmp	r3, #29
 800a98a:	d001      	beq.n	800a990 <__sflush_r+0xac>
 800a98c:	2b16      	cmp	r3, #22
 800a98e:	d11e      	bne.n	800a9ce <__sflush_r+0xea>
 800a990:	602f      	str	r7, [r5, #0]
 800a992:	2000      	movs	r0, #0
 800a994:	e022      	b.n	800a9dc <__sflush_r+0xf8>
 800a996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a99a:	b21b      	sxth	r3, r3
 800a99c:	e01b      	b.n	800a9d6 <__sflush_r+0xf2>
 800a99e:	690f      	ldr	r7, [r1, #16]
 800a9a0:	2f00      	cmp	r7, #0
 800a9a2:	d0f6      	beq.n	800a992 <__sflush_r+0xae>
 800a9a4:	0793      	lsls	r3, r2, #30
 800a9a6:	680e      	ldr	r6, [r1, #0]
 800a9a8:	bf08      	it	eq
 800a9aa:	694b      	ldreq	r3, [r1, #20]
 800a9ac:	600f      	str	r7, [r1, #0]
 800a9ae:	bf18      	it	ne
 800a9b0:	2300      	movne	r3, #0
 800a9b2:	eba6 0807 	sub.w	r8, r6, r7
 800a9b6:	608b      	str	r3, [r1, #8]
 800a9b8:	f1b8 0f00 	cmp.w	r8, #0
 800a9bc:	dde9      	ble.n	800a992 <__sflush_r+0xae>
 800a9be:	6a21      	ldr	r1, [r4, #32]
 800a9c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a9c2:	4643      	mov	r3, r8
 800a9c4:	463a      	mov	r2, r7
 800a9c6:	4628      	mov	r0, r5
 800a9c8:	47b0      	blx	r6
 800a9ca:	2800      	cmp	r0, #0
 800a9cc:	dc08      	bgt.n	800a9e0 <__sflush_r+0xfc>
 800a9ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9d6:	81a3      	strh	r3, [r4, #12]
 800a9d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9e0:	4407      	add	r7, r0
 800a9e2:	eba8 0800 	sub.w	r8, r8, r0
 800a9e6:	e7e7      	b.n	800a9b8 <__sflush_r+0xd4>
 800a9e8:	20400001 	.word	0x20400001

0800a9ec <_fflush_r>:
 800a9ec:	b538      	push	{r3, r4, r5, lr}
 800a9ee:	690b      	ldr	r3, [r1, #16]
 800a9f0:	4605      	mov	r5, r0
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	b913      	cbnz	r3, 800a9fc <_fflush_r+0x10>
 800a9f6:	2500      	movs	r5, #0
 800a9f8:	4628      	mov	r0, r5
 800a9fa:	bd38      	pop	{r3, r4, r5, pc}
 800a9fc:	b118      	cbz	r0, 800aa06 <_fflush_r+0x1a>
 800a9fe:	6a03      	ldr	r3, [r0, #32]
 800aa00:	b90b      	cbnz	r3, 800aa06 <_fflush_r+0x1a>
 800aa02:	f7ff f90b 	bl	8009c1c <__sinit>
 800aa06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d0f3      	beq.n	800a9f6 <_fflush_r+0xa>
 800aa0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aa10:	07d0      	lsls	r0, r2, #31
 800aa12:	d404      	bmi.n	800aa1e <_fflush_r+0x32>
 800aa14:	0599      	lsls	r1, r3, #22
 800aa16:	d402      	bmi.n	800aa1e <_fflush_r+0x32>
 800aa18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa1a:	f7ff fa42 	bl	8009ea2 <__retarget_lock_acquire_recursive>
 800aa1e:	4628      	mov	r0, r5
 800aa20:	4621      	mov	r1, r4
 800aa22:	f7ff ff5f 	bl	800a8e4 <__sflush_r>
 800aa26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa28:	07da      	lsls	r2, r3, #31
 800aa2a:	4605      	mov	r5, r0
 800aa2c:	d4e4      	bmi.n	800a9f8 <_fflush_r+0xc>
 800aa2e:	89a3      	ldrh	r3, [r4, #12]
 800aa30:	059b      	lsls	r3, r3, #22
 800aa32:	d4e1      	bmi.n	800a9f8 <_fflush_r+0xc>
 800aa34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa36:	f7ff fa35 	bl	8009ea4 <__retarget_lock_release_recursive>
 800aa3a:	e7dd      	b.n	800a9f8 <_fflush_r+0xc>

0800aa3c <_putc_r>:
 800aa3c:	b570      	push	{r4, r5, r6, lr}
 800aa3e:	460d      	mov	r5, r1
 800aa40:	4614      	mov	r4, r2
 800aa42:	4606      	mov	r6, r0
 800aa44:	b118      	cbz	r0, 800aa4e <_putc_r+0x12>
 800aa46:	6a03      	ldr	r3, [r0, #32]
 800aa48:	b90b      	cbnz	r3, 800aa4e <_putc_r+0x12>
 800aa4a:	f7ff f8e7 	bl	8009c1c <__sinit>
 800aa4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa50:	07d8      	lsls	r0, r3, #31
 800aa52:	d405      	bmi.n	800aa60 <_putc_r+0x24>
 800aa54:	89a3      	ldrh	r3, [r4, #12]
 800aa56:	0599      	lsls	r1, r3, #22
 800aa58:	d402      	bmi.n	800aa60 <_putc_r+0x24>
 800aa5a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa5c:	f7ff fa21 	bl	8009ea2 <__retarget_lock_acquire_recursive>
 800aa60:	68a3      	ldr	r3, [r4, #8]
 800aa62:	3b01      	subs	r3, #1
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	60a3      	str	r3, [r4, #8]
 800aa68:	da05      	bge.n	800aa76 <_putc_r+0x3a>
 800aa6a:	69a2      	ldr	r2, [r4, #24]
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	db12      	blt.n	800aa96 <_putc_r+0x5a>
 800aa70:	b2eb      	uxtb	r3, r5
 800aa72:	2b0a      	cmp	r3, #10
 800aa74:	d00f      	beq.n	800aa96 <_putc_r+0x5a>
 800aa76:	6823      	ldr	r3, [r4, #0]
 800aa78:	1c5a      	adds	r2, r3, #1
 800aa7a:	6022      	str	r2, [r4, #0]
 800aa7c:	701d      	strb	r5, [r3, #0]
 800aa7e:	b2ed      	uxtb	r5, r5
 800aa80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa82:	07da      	lsls	r2, r3, #31
 800aa84:	d405      	bmi.n	800aa92 <_putc_r+0x56>
 800aa86:	89a3      	ldrh	r3, [r4, #12]
 800aa88:	059b      	lsls	r3, r3, #22
 800aa8a:	d402      	bmi.n	800aa92 <_putc_r+0x56>
 800aa8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa8e:	f7ff fa09 	bl	8009ea4 <__retarget_lock_release_recursive>
 800aa92:	4628      	mov	r0, r5
 800aa94:	bd70      	pop	{r4, r5, r6, pc}
 800aa96:	4629      	mov	r1, r5
 800aa98:	4622      	mov	r2, r4
 800aa9a:	4630      	mov	r0, r6
 800aa9c:	f000 f802 	bl	800aaa4 <__swbuf_r>
 800aaa0:	4605      	mov	r5, r0
 800aaa2:	e7ed      	b.n	800aa80 <_putc_r+0x44>

0800aaa4 <__swbuf_r>:
 800aaa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaa6:	460e      	mov	r6, r1
 800aaa8:	4614      	mov	r4, r2
 800aaaa:	4605      	mov	r5, r0
 800aaac:	b118      	cbz	r0, 800aab6 <__swbuf_r+0x12>
 800aaae:	6a03      	ldr	r3, [r0, #32]
 800aab0:	b90b      	cbnz	r3, 800aab6 <__swbuf_r+0x12>
 800aab2:	f7ff f8b3 	bl	8009c1c <__sinit>
 800aab6:	69a3      	ldr	r3, [r4, #24]
 800aab8:	60a3      	str	r3, [r4, #8]
 800aaba:	89a3      	ldrh	r3, [r4, #12]
 800aabc:	071a      	lsls	r2, r3, #28
 800aabe:	d501      	bpl.n	800aac4 <__swbuf_r+0x20>
 800aac0:	6923      	ldr	r3, [r4, #16]
 800aac2:	b943      	cbnz	r3, 800aad6 <__swbuf_r+0x32>
 800aac4:	4621      	mov	r1, r4
 800aac6:	4628      	mov	r0, r5
 800aac8:	f000 f82a 	bl	800ab20 <__swsetup_r>
 800aacc:	b118      	cbz	r0, 800aad6 <__swbuf_r+0x32>
 800aace:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800aad2:	4638      	mov	r0, r7
 800aad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aad6:	6823      	ldr	r3, [r4, #0]
 800aad8:	6922      	ldr	r2, [r4, #16]
 800aada:	1a98      	subs	r0, r3, r2
 800aadc:	6963      	ldr	r3, [r4, #20]
 800aade:	b2f6      	uxtb	r6, r6
 800aae0:	4283      	cmp	r3, r0
 800aae2:	4637      	mov	r7, r6
 800aae4:	dc05      	bgt.n	800aaf2 <__swbuf_r+0x4e>
 800aae6:	4621      	mov	r1, r4
 800aae8:	4628      	mov	r0, r5
 800aaea:	f7ff ff7f 	bl	800a9ec <_fflush_r>
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	d1ed      	bne.n	800aace <__swbuf_r+0x2a>
 800aaf2:	68a3      	ldr	r3, [r4, #8]
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	60a3      	str	r3, [r4, #8]
 800aaf8:	6823      	ldr	r3, [r4, #0]
 800aafa:	1c5a      	adds	r2, r3, #1
 800aafc:	6022      	str	r2, [r4, #0]
 800aafe:	701e      	strb	r6, [r3, #0]
 800ab00:	6962      	ldr	r2, [r4, #20]
 800ab02:	1c43      	adds	r3, r0, #1
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d004      	beq.n	800ab12 <__swbuf_r+0x6e>
 800ab08:	89a3      	ldrh	r3, [r4, #12]
 800ab0a:	07db      	lsls	r3, r3, #31
 800ab0c:	d5e1      	bpl.n	800aad2 <__swbuf_r+0x2e>
 800ab0e:	2e0a      	cmp	r6, #10
 800ab10:	d1df      	bne.n	800aad2 <__swbuf_r+0x2e>
 800ab12:	4621      	mov	r1, r4
 800ab14:	4628      	mov	r0, r5
 800ab16:	f7ff ff69 	bl	800a9ec <_fflush_r>
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	d0d9      	beq.n	800aad2 <__swbuf_r+0x2e>
 800ab1e:	e7d6      	b.n	800aace <__swbuf_r+0x2a>

0800ab20 <__swsetup_r>:
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	4b29      	ldr	r3, [pc, #164]	@ (800abc8 <__swsetup_r+0xa8>)
 800ab24:	4605      	mov	r5, r0
 800ab26:	6818      	ldr	r0, [r3, #0]
 800ab28:	460c      	mov	r4, r1
 800ab2a:	b118      	cbz	r0, 800ab34 <__swsetup_r+0x14>
 800ab2c:	6a03      	ldr	r3, [r0, #32]
 800ab2e:	b90b      	cbnz	r3, 800ab34 <__swsetup_r+0x14>
 800ab30:	f7ff f874 	bl	8009c1c <__sinit>
 800ab34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab38:	0719      	lsls	r1, r3, #28
 800ab3a:	d422      	bmi.n	800ab82 <__swsetup_r+0x62>
 800ab3c:	06da      	lsls	r2, r3, #27
 800ab3e:	d407      	bmi.n	800ab50 <__swsetup_r+0x30>
 800ab40:	2209      	movs	r2, #9
 800ab42:	602a      	str	r2, [r5, #0]
 800ab44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab48:	81a3      	strh	r3, [r4, #12]
 800ab4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab4e:	e033      	b.n	800abb8 <__swsetup_r+0x98>
 800ab50:	0758      	lsls	r0, r3, #29
 800ab52:	d512      	bpl.n	800ab7a <__swsetup_r+0x5a>
 800ab54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab56:	b141      	cbz	r1, 800ab6a <__swsetup_r+0x4a>
 800ab58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab5c:	4299      	cmp	r1, r3
 800ab5e:	d002      	beq.n	800ab66 <__swsetup_r+0x46>
 800ab60:	4628      	mov	r0, r5
 800ab62:	f7ff f9a1 	bl	8009ea8 <_free_r>
 800ab66:	2300      	movs	r3, #0
 800ab68:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab6a:	89a3      	ldrh	r3, [r4, #12]
 800ab6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ab70:	81a3      	strh	r3, [r4, #12]
 800ab72:	2300      	movs	r3, #0
 800ab74:	6063      	str	r3, [r4, #4]
 800ab76:	6923      	ldr	r3, [r4, #16]
 800ab78:	6023      	str	r3, [r4, #0]
 800ab7a:	89a3      	ldrh	r3, [r4, #12]
 800ab7c:	f043 0308 	orr.w	r3, r3, #8
 800ab80:	81a3      	strh	r3, [r4, #12]
 800ab82:	6923      	ldr	r3, [r4, #16]
 800ab84:	b94b      	cbnz	r3, 800ab9a <__swsetup_r+0x7a>
 800ab86:	89a3      	ldrh	r3, [r4, #12]
 800ab88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ab8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab90:	d003      	beq.n	800ab9a <__swsetup_r+0x7a>
 800ab92:	4621      	mov	r1, r4
 800ab94:	4628      	mov	r0, r5
 800ab96:	f000 f8a5 	bl	800ace4 <__smakebuf_r>
 800ab9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab9e:	f013 0201 	ands.w	r2, r3, #1
 800aba2:	d00a      	beq.n	800abba <__swsetup_r+0x9a>
 800aba4:	2200      	movs	r2, #0
 800aba6:	60a2      	str	r2, [r4, #8]
 800aba8:	6962      	ldr	r2, [r4, #20]
 800abaa:	4252      	negs	r2, r2
 800abac:	61a2      	str	r2, [r4, #24]
 800abae:	6922      	ldr	r2, [r4, #16]
 800abb0:	b942      	cbnz	r2, 800abc4 <__swsetup_r+0xa4>
 800abb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800abb6:	d1c5      	bne.n	800ab44 <__swsetup_r+0x24>
 800abb8:	bd38      	pop	{r3, r4, r5, pc}
 800abba:	0799      	lsls	r1, r3, #30
 800abbc:	bf58      	it	pl
 800abbe:	6962      	ldrpl	r2, [r4, #20]
 800abc0:	60a2      	str	r2, [r4, #8]
 800abc2:	e7f4      	b.n	800abae <__swsetup_r+0x8e>
 800abc4:	2000      	movs	r0, #0
 800abc6:	e7f7      	b.n	800abb8 <__swsetup_r+0x98>
 800abc8:	20000190 	.word	0x20000190

0800abcc <memmove>:
 800abcc:	4288      	cmp	r0, r1
 800abce:	b510      	push	{r4, lr}
 800abd0:	eb01 0402 	add.w	r4, r1, r2
 800abd4:	d902      	bls.n	800abdc <memmove+0x10>
 800abd6:	4284      	cmp	r4, r0
 800abd8:	4623      	mov	r3, r4
 800abda:	d807      	bhi.n	800abec <memmove+0x20>
 800abdc:	1e43      	subs	r3, r0, #1
 800abde:	42a1      	cmp	r1, r4
 800abe0:	d008      	beq.n	800abf4 <memmove+0x28>
 800abe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abe6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abea:	e7f8      	b.n	800abde <memmove+0x12>
 800abec:	4402      	add	r2, r0
 800abee:	4601      	mov	r1, r0
 800abf0:	428a      	cmp	r2, r1
 800abf2:	d100      	bne.n	800abf6 <memmove+0x2a>
 800abf4:	bd10      	pop	{r4, pc}
 800abf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800abfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800abfe:	e7f7      	b.n	800abf0 <memmove+0x24>

0800ac00 <_sbrk_r>:
 800ac00:	b538      	push	{r3, r4, r5, lr}
 800ac02:	4d06      	ldr	r5, [pc, #24]	@ (800ac1c <_sbrk_r+0x1c>)
 800ac04:	2300      	movs	r3, #0
 800ac06:	4604      	mov	r4, r0
 800ac08:	4608      	mov	r0, r1
 800ac0a:	602b      	str	r3, [r5, #0]
 800ac0c:	f7f5 ffac 	bl	8000b68 <_sbrk>
 800ac10:	1c43      	adds	r3, r0, #1
 800ac12:	d102      	bne.n	800ac1a <_sbrk_r+0x1a>
 800ac14:	682b      	ldr	r3, [r5, #0]
 800ac16:	b103      	cbz	r3, 800ac1a <_sbrk_r+0x1a>
 800ac18:	6023      	str	r3, [r4, #0]
 800ac1a:	bd38      	pop	{r3, r4, r5, pc}
 800ac1c:	20001fc0 	.word	0x20001fc0

0800ac20 <memcpy>:
 800ac20:	440a      	add	r2, r1
 800ac22:	4291      	cmp	r1, r2
 800ac24:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ac28:	d100      	bne.n	800ac2c <memcpy+0xc>
 800ac2a:	4770      	bx	lr
 800ac2c:	b510      	push	{r4, lr}
 800ac2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac36:	4291      	cmp	r1, r2
 800ac38:	d1f9      	bne.n	800ac2e <memcpy+0xe>
 800ac3a:	bd10      	pop	{r4, pc}

0800ac3c <_realloc_r>:
 800ac3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac40:	4607      	mov	r7, r0
 800ac42:	4614      	mov	r4, r2
 800ac44:	460d      	mov	r5, r1
 800ac46:	b921      	cbnz	r1, 800ac52 <_realloc_r+0x16>
 800ac48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac4c:	4611      	mov	r1, r2
 800ac4e:	f7ff b997 	b.w	8009f80 <_malloc_r>
 800ac52:	b92a      	cbnz	r2, 800ac60 <_realloc_r+0x24>
 800ac54:	f7ff f928 	bl	8009ea8 <_free_r>
 800ac58:	4625      	mov	r5, r4
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac60:	f000 f89e 	bl	800ada0 <_malloc_usable_size_r>
 800ac64:	4284      	cmp	r4, r0
 800ac66:	4606      	mov	r6, r0
 800ac68:	d802      	bhi.n	800ac70 <_realloc_r+0x34>
 800ac6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac6e:	d8f4      	bhi.n	800ac5a <_realloc_r+0x1e>
 800ac70:	4621      	mov	r1, r4
 800ac72:	4638      	mov	r0, r7
 800ac74:	f7ff f984 	bl	8009f80 <_malloc_r>
 800ac78:	4680      	mov	r8, r0
 800ac7a:	b908      	cbnz	r0, 800ac80 <_realloc_r+0x44>
 800ac7c:	4645      	mov	r5, r8
 800ac7e:	e7ec      	b.n	800ac5a <_realloc_r+0x1e>
 800ac80:	42b4      	cmp	r4, r6
 800ac82:	4622      	mov	r2, r4
 800ac84:	4629      	mov	r1, r5
 800ac86:	bf28      	it	cs
 800ac88:	4632      	movcs	r2, r6
 800ac8a:	f7ff ffc9 	bl	800ac20 <memcpy>
 800ac8e:	4629      	mov	r1, r5
 800ac90:	4638      	mov	r0, r7
 800ac92:	f7ff f909 	bl	8009ea8 <_free_r>
 800ac96:	e7f1      	b.n	800ac7c <_realloc_r+0x40>

0800ac98 <__swhatbuf_r>:
 800ac98:	b570      	push	{r4, r5, r6, lr}
 800ac9a:	460c      	mov	r4, r1
 800ac9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aca0:	2900      	cmp	r1, #0
 800aca2:	b096      	sub	sp, #88	@ 0x58
 800aca4:	4615      	mov	r5, r2
 800aca6:	461e      	mov	r6, r3
 800aca8:	da0d      	bge.n	800acc6 <__swhatbuf_r+0x2e>
 800acaa:	89a3      	ldrh	r3, [r4, #12]
 800acac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800acb0:	f04f 0100 	mov.w	r1, #0
 800acb4:	bf14      	ite	ne
 800acb6:	2340      	movne	r3, #64	@ 0x40
 800acb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800acbc:	2000      	movs	r0, #0
 800acbe:	6031      	str	r1, [r6, #0]
 800acc0:	602b      	str	r3, [r5, #0]
 800acc2:	b016      	add	sp, #88	@ 0x58
 800acc4:	bd70      	pop	{r4, r5, r6, pc}
 800acc6:	466a      	mov	r2, sp
 800acc8:	f000 f848 	bl	800ad5c <_fstat_r>
 800accc:	2800      	cmp	r0, #0
 800acce:	dbec      	blt.n	800acaa <__swhatbuf_r+0x12>
 800acd0:	9901      	ldr	r1, [sp, #4]
 800acd2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800acd6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800acda:	4259      	negs	r1, r3
 800acdc:	4159      	adcs	r1, r3
 800acde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ace2:	e7eb      	b.n	800acbc <__swhatbuf_r+0x24>

0800ace4 <__smakebuf_r>:
 800ace4:	898b      	ldrh	r3, [r1, #12]
 800ace6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ace8:	079d      	lsls	r5, r3, #30
 800acea:	4606      	mov	r6, r0
 800acec:	460c      	mov	r4, r1
 800acee:	d507      	bpl.n	800ad00 <__smakebuf_r+0x1c>
 800acf0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800acf4:	6023      	str	r3, [r4, #0]
 800acf6:	6123      	str	r3, [r4, #16]
 800acf8:	2301      	movs	r3, #1
 800acfa:	6163      	str	r3, [r4, #20]
 800acfc:	b003      	add	sp, #12
 800acfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad00:	ab01      	add	r3, sp, #4
 800ad02:	466a      	mov	r2, sp
 800ad04:	f7ff ffc8 	bl	800ac98 <__swhatbuf_r>
 800ad08:	9f00      	ldr	r7, [sp, #0]
 800ad0a:	4605      	mov	r5, r0
 800ad0c:	4639      	mov	r1, r7
 800ad0e:	4630      	mov	r0, r6
 800ad10:	f7ff f936 	bl	8009f80 <_malloc_r>
 800ad14:	b948      	cbnz	r0, 800ad2a <__smakebuf_r+0x46>
 800ad16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad1a:	059a      	lsls	r2, r3, #22
 800ad1c:	d4ee      	bmi.n	800acfc <__smakebuf_r+0x18>
 800ad1e:	f023 0303 	bic.w	r3, r3, #3
 800ad22:	f043 0302 	orr.w	r3, r3, #2
 800ad26:	81a3      	strh	r3, [r4, #12]
 800ad28:	e7e2      	b.n	800acf0 <__smakebuf_r+0xc>
 800ad2a:	89a3      	ldrh	r3, [r4, #12]
 800ad2c:	6020      	str	r0, [r4, #0]
 800ad2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad32:	81a3      	strh	r3, [r4, #12]
 800ad34:	9b01      	ldr	r3, [sp, #4]
 800ad36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ad3a:	b15b      	cbz	r3, 800ad54 <__smakebuf_r+0x70>
 800ad3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad40:	4630      	mov	r0, r6
 800ad42:	f000 f81d 	bl	800ad80 <_isatty_r>
 800ad46:	b128      	cbz	r0, 800ad54 <__smakebuf_r+0x70>
 800ad48:	89a3      	ldrh	r3, [r4, #12]
 800ad4a:	f023 0303 	bic.w	r3, r3, #3
 800ad4e:	f043 0301 	orr.w	r3, r3, #1
 800ad52:	81a3      	strh	r3, [r4, #12]
 800ad54:	89a3      	ldrh	r3, [r4, #12]
 800ad56:	431d      	orrs	r5, r3
 800ad58:	81a5      	strh	r5, [r4, #12]
 800ad5a:	e7cf      	b.n	800acfc <__smakebuf_r+0x18>

0800ad5c <_fstat_r>:
 800ad5c:	b538      	push	{r3, r4, r5, lr}
 800ad5e:	4d07      	ldr	r5, [pc, #28]	@ (800ad7c <_fstat_r+0x20>)
 800ad60:	2300      	movs	r3, #0
 800ad62:	4604      	mov	r4, r0
 800ad64:	4608      	mov	r0, r1
 800ad66:	4611      	mov	r1, r2
 800ad68:	602b      	str	r3, [r5, #0]
 800ad6a:	f7f5 fed4 	bl	8000b16 <_fstat>
 800ad6e:	1c43      	adds	r3, r0, #1
 800ad70:	d102      	bne.n	800ad78 <_fstat_r+0x1c>
 800ad72:	682b      	ldr	r3, [r5, #0]
 800ad74:	b103      	cbz	r3, 800ad78 <_fstat_r+0x1c>
 800ad76:	6023      	str	r3, [r4, #0]
 800ad78:	bd38      	pop	{r3, r4, r5, pc}
 800ad7a:	bf00      	nop
 800ad7c:	20001fc0 	.word	0x20001fc0

0800ad80 <_isatty_r>:
 800ad80:	b538      	push	{r3, r4, r5, lr}
 800ad82:	4d06      	ldr	r5, [pc, #24]	@ (800ad9c <_isatty_r+0x1c>)
 800ad84:	2300      	movs	r3, #0
 800ad86:	4604      	mov	r4, r0
 800ad88:	4608      	mov	r0, r1
 800ad8a:	602b      	str	r3, [r5, #0]
 800ad8c:	f7f5 fed3 	bl	8000b36 <_isatty>
 800ad90:	1c43      	adds	r3, r0, #1
 800ad92:	d102      	bne.n	800ad9a <_isatty_r+0x1a>
 800ad94:	682b      	ldr	r3, [r5, #0]
 800ad96:	b103      	cbz	r3, 800ad9a <_isatty_r+0x1a>
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	bd38      	pop	{r3, r4, r5, pc}
 800ad9c:	20001fc0 	.word	0x20001fc0

0800ada0 <_malloc_usable_size_r>:
 800ada0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ada4:	1f18      	subs	r0, r3, #4
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	bfbc      	itt	lt
 800adaa:	580b      	ldrlt	r3, [r1, r0]
 800adac:	18c0      	addlt	r0, r0, r3
 800adae:	4770      	bx	lr

0800adb0 <_init>:
 800adb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adb2:	bf00      	nop
 800adb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adb6:	bc08      	pop	{r3}
 800adb8:	469e      	mov	lr, r3
 800adba:	4770      	bx	lr

0800adbc <_fini>:
 800adbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adbe:	bf00      	nop
 800adc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adc2:	bc08      	pop	{r3}
 800adc4:	469e      	mov	lr, r3
 800adc6:	4770      	bx	lr
