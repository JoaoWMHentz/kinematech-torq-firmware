
kinematech-torq-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091b8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009390  08009390  0000a390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093e8  080093e8  0000b184  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080093e8  080093e8  0000b184  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080093e8  080093e8  0000b184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093e8  080093e8  0000a3e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080093ec  080093ec  0000a3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  080093f0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001adc  20000184  08009574  0000b184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c60  08009574  0000bc60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b184  2**0
                  CONTENTS, READONLY
 12 .debug_info   000188cb  00000000  00000000  0000b1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d5a  00000000  00000000  00023a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  000277e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001120  00000000  00000000  00028e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000238b6  00000000  00000000  00029f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cbfb  00000000  00000000  0004d81e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da56f  00000000  00000000  0006a419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144988  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ccc  00000000  00000000  001449cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0014a698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009378 	.word	0x08009378

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08009378 	.word	0x08009378

08000218 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b08a      	sub	sp, #40	@ 0x28
 800021c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021e:	f107 0314 	add.w	r3, r7, #20
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800022e:	4b24      	ldr	r3, [pc, #144]	@ (80002c0 <MX_GPIO_Init+0xa8>)
 8000230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000232:	4a23      	ldr	r2, [pc, #140]	@ (80002c0 <MX_GPIO_Init+0xa8>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800023a:	4b21      	ldr	r3, [pc, #132]	@ (80002c0 <MX_GPIO_Init+0xa8>)
 800023c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800023e:	f003 0304 	and.w	r3, r3, #4
 8000242:	613b      	str	r3, [r7, #16]
 8000244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000246:	4b1e      	ldr	r3, [pc, #120]	@ (80002c0 <MX_GPIO_Init+0xa8>)
 8000248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800024a:	4a1d      	ldr	r2, [pc, #116]	@ (80002c0 <MX_GPIO_Init+0xa8>)
 800024c:	f043 0320 	orr.w	r3, r3, #32
 8000250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000252:	4b1b      	ldr	r3, [pc, #108]	@ (80002c0 <MX_GPIO_Init+0xa8>)
 8000254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000256:	f003 0320 	and.w	r3, r3, #32
 800025a:	60fb      	str	r3, [r7, #12]
 800025c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800025e:	4b18      	ldr	r3, [pc, #96]	@ (80002c0 <MX_GPIO_Init+0xa8>)
 8000260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000262:	4a17      	ldr	r2, [pc, #92]	@ (80002c0 <MX_GPIO_Init+0xa8>)
 8000264:	f043 0302 	orr.w	r3, r3, #2
 8000268:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800026a:	4b15      	ldr	r3, [pc, #84]	@ (80002c0 <MX_GPIO_Init+0xa8>)
 800026c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800026e:	f003 0302 	and.w	r3, r3, #2
 8000272:	60bb      	str	r3, [r7, #8]
 8000274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000276:	4b12      	ldr	r3, [pc, #72]	@ (80002c0 <MX_GPIO_Init+0xa8>)
 8000278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800027a:	4a11      	ldr	r2, [pc, #68]	@ (80002c0 <MX_GPIO_Init+0xa8>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000282:	4b0f      	ldr	r3, [pc, #60]	@ (80002c0 <MX_GPIO_Init+0xa8>)
 8000284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000286:	f003 0301 	and.w	r3, r3, #1
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800028e:	2201      	movs	r2, #1
 8000290:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000294:	480b      	ldr	r0, [pc, #44]	@ (80002c4 <MX_GPIO_Init+0xac>)
 8000296:	f000 fefb 	bl	8001090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 800029a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800029e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a0:	2301      	movs	r3, #1
 80002a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002a4:	2301      	movs	r3, #1
 80002a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a8:	2300      	movs	r3, #0
 80002aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 80002ac:	f107 0314 	add.w	r3, r7, #20
 80002b0:	4619      	mov	r1, r3
 80002b2:	4804      	ldr	r0, [pc, #16]	@ (80002c4 <MX_GPIO_Init+0xac>)
 80002b4:	f000 fd6a 	bl	8000d8c <HAL_GPIO_Init>

}
 80002b8:	bf00      	nop
 80002ba:	3728      	adds	r7, #40	@ 0x28
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	40021000 	.word	0x40021000
 80002c4:	48000800 	.word	0x48000800

080002c8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002cc:	4b1b      	ldr	r3, [pc, #108]	@ (800033c <MX_I2C1_Init+0x74>)
 80002ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000340 <MX_I2C1_Init+0x78>)
 80002d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 80002d2:	4b1a      	ldr	r3, [pc, #104]	@ (800033c <MX_I2C1_Init+0x74>)
 80002d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000344 <MX_I2C1_Init+0x7c>)
 80002d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002d8:	4b18      	ldr	r3, [pc, #96]	@ (800033c <MX_I2C1_Init+0x74>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002de:	4b17      	ldr	r3, [pc, #92]	@ (800033c <MX_I2C1_Init+0x74>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002e4:	4b15      	ldr	r3, [pc, #84]	@ (800033c <MX_I2C1_Init+0x74>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002ea:	4b14      	ldr	r3, [pc, #80]	@ (800033c <MX_I2C1_Init+0x74>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002f0:	4b12      	ldr	r3, [pc, #72]	@ (800033c <MX_I2C1_Init+0x74>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002f6:	4b11      	ldr	r3, [pc, #68]	@ (800033c <MX_I2C1_Init+0x74>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002fc:	4b0f      	ldr	r3, [pc, #60]	@ (800033c <MX_I2C1_Init+0x74>)
 80002fe:	2200      	movs	r2, #0
 8000300:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000302:	480e      	ldr	r0, [pc, #56]	@ (800033c <MX_I2C1_Init+0x74>)
 8000304:	f000 fedc 	bl	80010c0 <HAL_I2C_Init>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800030e:	f000 f8ee 	bl	80004ee <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000312:	2100      	movs	r1, #0
 8000314:	4809      	ldr	r0, [pc, #36]	@ (800033c <MX_I2C1_Init+0x74>)
 8000316:	f000 ff6e 	bl	80011f6 <HAL_I2CEx_ConfigAnalogFilter>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000320:	f000 f8e5 	bl	80004ee <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000324:	2100      	movs	r1, #0
 8000326:	4805      	ldr	r0, [pc, #20]	@ (800033c <MX_I2C1_Init+0x74>)
 8000328:	f000 ffb0 	bl	800128c <HAL_I2CEx_ConfigDigitalFilter>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000332:	f000 f8dc 	bl	80004ee <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	200001a0 	.word	0x200001a0
 8000340:	40005400 	.word	0x40005400
 8000344:	40b285c2 	.word	0x40b285c2

08000348 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b0a0      	sub	sp, #128	@ 0x80
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000350:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
 8000358:	605a      	str	r2, [r3, #4]
 800035a:	609a      	str	r2, [r3, #8]
 800035c:	60da      	str	r2, [r3, #12]
 800035e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000360:	f107 0318 	add.w	r3, r7, #24
 8000364:	2254      	movs	r2, #84	@ 0x54
 8000366:	2100      	movs	r1, #0
 8000368:	4618      	mov	r0, r3
 800036a:	f008 ffd9 	bl	8009320 <memset>
  if(i2cHandle->Instance==I2C1)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a2d      	ldr	r2, [pc, #180]	@ (8000428 <HAL_I2C_MspInit+0xe0>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d153      	bne.n	8000420 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000378:	2340      	movs	r3, #64	@ 0x40
 800037a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800037c:	2300      	movs	r3, #0
 800037e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000380:	f107 0318 	add.w	r3, r7, #24
 8000384:	4618      	mov	r0, r3
 8000386:	f003 fa79 	bl	800387c <HAL_RCCEx_PeriphCLKConfig>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000390:	f000 f8ad 	bl	80004ee <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000394:	4b25      	ldr	r3, [pc, #148]	@ (800042c <HAL_I2C_MspInit+0xe4>)
 8000396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000398:	4a24      	ldr	r2, [pc, #144]	@ (800042c <HAL_I2C_MspInit+0xe4>)
 800039a:	f043 0301 	orr.w	r3, r3, #1
 800039e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003a0:	4b22      	ldr	r3, [pc, #136]	@ (800042c <HAL_I2C_MspInit+0xe4>)
 80003a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003a4:	f003 0301 	and.w	r3, r3, #1
 80003a8:	617b      	str	r3, [r7, #20]
 80003aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ac:	4b1f      	ldr	r3, [pc, #124]	@ (800042c <HAL_I2C_MspInit+0xe4>)
 80003ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003b0:	4a1e      	ldr	r2, [pc, #120]	@ (800042c <HAL_I2C_MspInit+0xe4>)
 80003b2:	f043 0302 	orr.w	r3, r3, #2
 80003b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003b8:	4b1c      	ldr	r3, [pc, #112]	@ (800042c <HAL_I2C_MspInit+0xe4>)
 80003ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003bc:	f003 0302 	and.w	r3, r3, #2
 80003c0:	613b      	str	r3, [r7, #16]
 80003c2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ENCODER_SCL_Pin;
 80003c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80003c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003ca:	2312      	movs	r3, #18
 80003cc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ce:	2300      	movs	r3, #0
 80003d0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d2:	2300      	movs	r3, #0
 80003d4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80003d6:	2304      	movs	r3, #4
 80003d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(ENCODER_SCL_GPIO_Port, &GPIO_InitStruct);
 80003da:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80003de:	4619      	mov	r1, r3
 80003e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003e4:	f000 fcd2 	bl	8000d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_SDA_Pin;
 80003e8:	2380      	movs	r3, #128	@ 0x80
 80003ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003ec:	2312      	movs	r3, #18
 80003ee:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	2300      	movs	r3, #0
 80003f2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f4:	2300      	movs	r3, #0
 80003f6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80003f8:	2304      	movs	r3, #4
 80003fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(ENCODER_SDA_GPIO_Port, &GPIO_InitStruct);
 80003fc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000400:	4619      	mov	r1, r3
 8000402:	480b      	ldr	r0, [pc, #44]	@ (8000430 <HAL_I2C_MspInit+0xe8>)
 8000404:	f000 fcc2 	bl	8000d8c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000408:	4b08      	ldr	r3, [pc, #32]	@ (800042c <HAL_I2C_MspInit+0xe4>)
 800040a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800040c:	4a07      	ldr	r2, [pc, #28]	@ (800042c <HAL_I2C_MspInit+0xe4>)
 800040e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000412:	6593      	str	r3, [r2, #88]	@ 0x58
 8000414:	4b05      	ldr	r3, [pc, #20]	@ (800042c <HAL_I2C_MspInit+0xe4>)
 8000416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000418:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800041c:	60fb      	str	r3, [r7, #12]
 800041e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000420:	bf00      	nop
 8000422:	3780      	adds	r7, #128	@ 0x80
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	40005400 	.word	0x40005400
 800042c:	40021000 	.word	0x40021000
 8000430:	48000400 	.word	0x48000400

08000434 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000438:	f000 fb27 	bl	8000a8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043c:	f000 f80c 	bl	8000458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000440:	f7ff feea 	bl	8000218 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000444:	f000 f8de 	bl	8000604 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000448:	f7ff ff3e 	bl	80002c8 <MX_I2C1_Init>
  MX_TIM8_Init();
 800044c:	f000 f9a6 	bl	800079c <MX_TIM8_Init>
  MX_USB_Device_Init();
 8000450:	f008 fa82 	bl	8008958 <MX_USB_Device_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000454:	bf00      	nop
 8000456:	e7fd      	b.n	8000454 <main+0x20>

08000458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b094      	sub	sp, #80	@ 0x50
 800045c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045e:	f107 0318 	add.w	r3, r7, #24
 8000462:	2238      	movs	r2, #56	@ 0x38
 8000464:	2100      	movs	r1, #0
 8000466:	4618      	mov	r0, r3
 8000468:	f008 ff5a 	bl	8009320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]
 8000478:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800047a:	2000      	movs	r0, #0
 800047c:	f002 fc54 	bl	8002d28 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000480:	2321      	movs	r3, #33	@ 0x21
 8000482:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000484:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000488:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800048a:	2301      	movs	r3, #1
 800048c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800048e:	2302      	movs	r3, #2
 8000490:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000492:	2303      	movs	r3, #3
 8000494:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000496:	2306      	movs	r3, #6
 8000498:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800049a:	2355      	movs	r3, #85	@ 0x55
 800049c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800049e:	2302      	movs	r3, #2
 80004a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004a2:	2302      	movs	r3, #2
 80004a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004a6:	2302      	movs	r3, #2
 80004a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004aa:	f107 0318 	add.w	r3, r7, #24
 80004ae:	4618      	mov	r0, r3
 80004b0:	f002 fcee 	bl	8002e90 <HAL_RCC_OscConfig>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80004ba:	f000 f818 	bl	80004ee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004be:	230f      	movs	r3, #15
 80004c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c2:	2303      	movs	r3, #3
 80004c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ca:	2300      	movs	r3, #0
 80004cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ce:	2300      	movs	r3, #0
 80004d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2104      	movs	r1, #4
 80004d6:	4618      	mov	r0, r3
 80004d8:	f002 ffec 	bl	80034b4 <HAL_RCC_ClockConfig>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80004e2:	f000 f804 	bl	80004ee <Error_Handler>
  }
}
 80004e6:	bf00      	nop
 80004e8:	3750      	adds	r7, #80	@ 0x50
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}

080004ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f2:	b672      	cpsid	i
}
 80004f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f6:	bf00      	nop
 80004f8:	e7fd      	b.n	80004f6 <Error_Handler+0x8>
	...

080004fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000502:	4b0f      	ldr	r3, [pc, #60]	@ (8000540 <HAL_MspInit+0x44>)
 8000504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000506:	4a0e      	ldr	r2, [pc, #56]	@ (8000540 <HAL_MspInit+0x44>)
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	6613      	str	r3, [r2, #96]	@ 0x60
 800050e:	4b0c      	ldr	r3, [pc, #48]	@ (8000540 <HAL_MspInit+0x44>)
 8000510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051a:	4b09      	ldr	r3, [pc, #36]	@ (8000540 <HAL_MspInit+0x44>)
 800051c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800051e:	4a08      	ldr	r2, [pc, #32]	@ (8000540 <HAL_MspInit+0x44>)
 8000520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000524:	6593      	str	r3, [r2, #88]	@ 0x58
 8000526:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <HAL_MspInit+0x44>)
 8000528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800052a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800052e:	603b      	str	r3, [r7, #0]
 8000530:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000532:	f002 fc9d 	bl	8002e70 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40021000 	.word	0x40021000

08000544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000548:	bf00      	nop
 800054a:	e7fd      	b.n	8000548 <NMI_Handler+0x4>

0800054c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000550:	bf00      	nop
 8000552:	e7fd      	b.n	8000550 <HardFault_Handler+0x4>

08000554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <MemManage_Handler+0x4>

0800055c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000560:	bf00      	nop
 8000562:	e7fd      	b.n	8000560 <BusFault_Handler+0x4>

08000564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <UsageFault_Handler+0x4>

0800056c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr

0800057a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800057e:	bf00      	nop
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800059a:	f000 fac9 	bl	8000b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
	...

080005a4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005a8:	4802      	ldr	r0, [pc, #8]	@ (80005b4 <USB_LP_IRQHandler+0x10>)
 80005aa:	f000 ffab 	bl	8001504 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20001764 	.word	0x20001764

080005b8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80005bc:	4802      	ldr	r0, [pc, #8]	@ (80005c8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80005be:	f003 fc63 	bl	8003e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200001f4 	.word	0x200001f4

080005cc <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80005d0:	4802      	ldr	r0, [pc, #8]	@ (80005dc <TIM8_CC_IRQHandler+0x10>)
 80005d2:	f003 fc59 	bl	8003e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000240 	.word	0x20000240

080005e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e4:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <SystemInit+0x20>)
 80005e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005ea:	4a05      	ldr	r2, [pc, #20]	@ (8000600 <SystemInit+0x20>)
 80005ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b09c      	sub	sp, #112	@ 0x70
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800060a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000618:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000624:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
 8000634:	615a      	str	r2, [r3, #20]
 8000636:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2234      	movs	r2, #52	@ 0x34
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f008 fe6e 	bl	8009320 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000644:	4b53      	ldr	r3, [pc, #332]	@ (8000794 <MX_TIM1_Init+0x190>)
 8000646:	4a54      	ldr	r2, [pc, #336]	@ (8000798 <MX_TIM1_Init+0x194>)
 8000648:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800064a:	4b52      	ldr	r3, [pc, #328]	@ (8000794 <MX_TIM1_Init+0x190>)
 800064c:	2200      	movs	r2, #0
 800064e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000650:	4b50      	ldr	r3, [pc, #320]	@ (8000794 <MX_TIM1_Init+0x190>)
 8000652:	2220      	movs	r2, #32
 8000654:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4249;
 8000656:	4b4f      	ldr	r3, [pc, #316]	@ (8000794 <MX_TIM1_Init+0x190>)
 8000658:	f241 0299 	movw	r2, #4249	@ 0x1099
 800065c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800065e:	4b4d      	ldr	r3, [pc, #308]	@ (8000794 <MX_TIM1_Init+0x190>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000664:	4b4b      	ldr	r3, [pc, #300]	@ (8000794 <MX_TIM1_Init+0x190>)
 8000666:	2200      	movs	r2, #0
 8000668:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800066a:	4b4a      	ldr	r3, [pc, #296]	@ (8000794 <MX_TIM1_Init+0x190>)
 800066c:	2280      	movs	r2, #128	@ 0x80
 800066e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000670:	4848      	ldr	r0, [pc, #288]	@ (8000794 <MX_TIM1_Init+0x190>)
 8000672:	f003 fb51 	bl	8003d18 <HAL_TIM_Base_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800067c:	f7ff ff37 	bl	80004ee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000680:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000684:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000686:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800068a:	4619      	mov	r1, r3
 800068c:	4841      	ldr	r0, [pc, #260]	@ (8000794 <MX_TIM1_Init+0x190>)
 800068e:	f003 fe5f 	bl	8004350 <HAL_TIM_ConfigClockSource>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000698:	f7ff ff29 	bl	80004ee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800069c:	483d      	ldr	r0, [pc, #244]	@ (8000794 <MX_TIM1_Init+0x190>)
 800069e:	f003 fb92 	bl	8003dc6 <HAL_TIM_PWM_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80006a8:	f7ff ff21 	bl	80004ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ac:	2300      	movs	r3, #0
 80006ae:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006b0:	2300      	movs	r3, #0
 80006b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006bc:	4619      	mov	r1, r3
 80006be:	4835      	ldr	r0, [pc, #212]	@ (8000794 <MX_TIM1_Init+0x190>)
 80006c0:	f004 fd2c 	bl	800511c <HAL_TIMEx_MasterConfigSynchronization>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80006ca:	f7ff ff10 	bl	80004ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ce:	2360      	movs	r3, #96	@ 0x60
 80006d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006d6:	2300      	movs	r3, #0
 80006d8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006da:	2300      	movs	r3, #0
 80006dc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006de:	2300      	movs	r3, #0
 80006e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006e2:	2300      	movs	r3, #0
 80006e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006e6:	2300      	movs	r3, #0
 80006e8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80006ee:	2200      	movs	r2, #0
 80006f0:	4619      	mov	r1, r3
 80006f2:	4828      	ldr	r0, [pc, #160]	@ (8000794 <MX_TIM1_Init+0x190>)
 80006f4:	f003 fd18 	bl	8004128 <HAL_TIM_PWM_ConfigChannel>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80006fe:	f7ff fef6 	bl	80004ee <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000702:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000706:	2204      	movs	r2, #4
 8000708:	4619      	mov	r1, r3
 800070a:	4822      	ldr	r0, [pc, #136]	@ (8000794 <MX_TIM1_Init+0x190>)
 800070c:	f003 fd0c 	bl	8004128 <HAL_TIM_PWM_ConfigChannel>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000716:	f7ff feea 	bl	80004ee <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800071a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800071e:	2208      	movs	r2, #8
 8000720:	4619      	mov	r1, r3
 8000722:	481c      	ldr	r0, [pc, #112]	@ (8000794 <MX_TIM1_Init+0x190>)
 8000724:	f003 fd00 	bl	8004128 <HAL_TIM_PWM_ConfigChannel>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800072e:	f7ff fede 	bl	80004ee <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000732:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000736:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000738:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800073c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 8000742:	2364      	movs	r3, #100	@ 0x64
 8000744:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800074a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800074e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000758:	2300      	movs	r3, #0
 800075a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800075c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000760:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000766:	2300      	movs	r3, #0
 8000768:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 800076a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800076e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	4619      	mov	r1, r3
 8000774:	4807      	ldr	r0, [pc, #28]	@ (8000794 <MX_TIM1_Init+0x190>)
 8000776:	f004 fd67 	bl	8005248 <HAL_TIMEx_ConfigBreakDeadTime>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM1_Init+0x180>
  {
    Error_Handler();
 8000780:	f7ff feb5 	bl	80004ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000784:	4803      	ldr	r0, [pc, #12]	@ (8000794 <MX_TIM1_Init+0x190>)
 8000786:	f000 f8ef 	bl	8000968 <HAL_TIM_MspPostInit>

}
 800078a:	bf00      	nop
 800078c:	3770      	adds	r7, #112	@ 0x70
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200001f4 	.word	0x200001f4
 8000798:	40012c00 	.word	0x40012c00

0800079c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08c      	sub	sp, #48	@ 0x30
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a2:	f107 0320 	add.w	r3, r7, #32
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80007c8:	4b29      	ldr	r3, [pc, #164]	@ (8000870 <MX_TIM8_Init+0xd4>)
 80007ca:	4a2a      	ldr	r2, [pc, #168]	@ (8000874 <MX_TIM8_Init+0xd8>)
 80007cc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 80007ce:	4b28      	ldr	r3, [pc, #160]	@ (8000870 <MX_TIM8_Init+0xd4>)
 80007d0:	22a9      	movs	r2, #169	@ 0xa9
 80007d2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d4:	4b26      	ldr	r3, [pc, #152]	@ (8000870 <MX_TIM8_Init+0xd4>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80007da:	4b25      	ldr	r3, [pc, #148]	@ (8000870 <MX_TIM8_Init+0xd4>)
 80007dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007e0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e2:	4b23      	ldr	r3, [pc, #140]	@ (8000870 <MX_TIM8_Init+0xd4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80007e8:	4b21      	ldr	r3, [pc, #132]	@ (8000870 <MX_TIM8_Init+0xd4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ee:	4b20      	ldr	r3, [pc, #128]	@ (8000870 <MX_TIM8_Init+0xd4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80007f4:	481e      	ldr	r0, [pc, #120]	@ (8000870 <MX_TIM8_Init+0xd4>)
 80007f6:	f003 fa8f 	bl	8003d18 <HAL_TIM_Base_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8000800:	f7ff fe75 	bl	80004ee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000808:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800080a:	f107 0320 	add.w	r3, r7, #32
 800080e:	4619      	mov	r1, r3
 8000810:	4817      	ldr	r0, [pc, #92]	@ (8000870 <MX_TIM8_Init+0xd4>)
 8000812:	f003 fd9d 	bl	8004350 <HAL_TIM_ConfigClockSource>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 800081c:	f7ff fe67 	bl	80004ee <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim8, &sConfig) != HAL_OK)
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	4619      	mov	r1, r3
 8000836:	480e      	ldr	r0, [pc, #56]	@ (8000870 <MX_TIM8_Init+0xd4>)
 8000838:	f004 fbb6 	bl	8004fa8 <HAL_TIMEx_HallSensor_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8000842:	f7ff fe54 	bl	80004ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000846:	2350      	movs	r3, #80	@ 0x50
 8000848:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	4619      	mov	r1, r3
 8000856:	4806      	ldr	r0, [pc, #24]	@ (8000870 <MX_TIM8_Init+0xd4>)
 8000858:	f004 fc60 	bl	800511c <HAL_TIMEx_MasterConfigSynchronization>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000862:	f7ff fe44 	bl	80004ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	3730      	adds	r7, #48	@ 0x30
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000240 	.word	0x20000240
 8000874:	40013400 	.word	0x40013400

08000878 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	@ 0x28
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a30      	ldr	r2, [pc, #192]	@ (8000958 <HAL_TIM_Base_MspInit+0xe0>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d114      	bne.n	80008c4 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800089a:	4b30      	ldr	r3, [pc, #192]	@ (800095c <HAL_TIM_Base_MspInit+0xe4>)
 800089c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800089e:	4a2f      	ldr	r2, [pc, #188]	@ (800095c <HAL_TIM_Base_MspInit+0xe4>)
 80008a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80008a6:	4b2d      	ldr	r3, [pc, #180]	@ (800095c <HAL_TIM_Base_MspInit+0xe4>)
 80008a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	2019      	movs	r0, #25
 80008b8:	f000 fa33 	bl	8000d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80008bc:	2019      	movs	r0, #25
 80008be:	f000 fa4a 	bl	8000d56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80008c2:	e045      	b.n	8000950 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM8)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a25      	ldr	r2, [pc, #148]	@ (8000960 <HAL_TIM_Base_MspInit+0xe8>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d140      	bne.n	8000950 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80008ce:	4b23      	ldr	r3, [pc, #140]	@ (800095c <HAL_TIM_Base_MspInit+0xe4>)
 80008d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008d2:	4a22      	ldr	r2, [pc, #136]	@ (800095c <HAL_TIM_Base_MspInit+0xe4>)
 80008d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80008da:	4b20      	ldr	r3, [pc, #128]	@ (800095c <HAL_TIM_Base_MspInit+0xe4>)
 80008dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	4b1d      	ldr	r3, [pc, #116]	@ (800095c <HAL_TIM_Base_MspInit+0xe4>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ea:	4a1c      	ldr	r2, [pc, #112]	@ (800095c <HAL_TIM_Base_MspInit+0xe4>)
 80008ec:	f043 0302 	orr.w	r3, r3, #2
 80008f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f2:	4b1a      	ldr	r3, [pc, #104]	@ (800095c <HAL_TIM_Base_MspInit+0xe4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HALL_A_Pin;
 80008fe:	2340      	movs	r3, #64	@ 0x40
 8000900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000906:	2301      	movs	r3, #1
 8000908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 800090e:	2305      	movs	r3, #5
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(HALL_A_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	4812      	ldr	r0, [pc, #72]	@ (8000964 <HAL_TIM_Base_MspInit+0xec>)
 800091a:	f000 fa37 	bl	8000d8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HALL_B_Pin|HALL_C_Pin;
 800091e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000928:	2301      	movs	r3, #1
 800092a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8000930:	230a      	movs	r3, #10
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	480a      	ldr	r0, [pc, #40]	@ (8000964 <HAL_TIM_Base_MspInit+0xec>)
 800093c:	f000 fa26 	bl	8000d8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2100      	movs	r1, #0
 8000944:	202e      	movs	r0, #46	@ 0x2e
 8000946:	f000 f9ec 	bl	8000d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800094a:	202e      	movs	r0, #46	@ 0x2e
 800094c:	f000 fa03 	bl	8000d56 <HAL_NVIC_EnableIRQ>
}
 8000950:	bf00      	nop
 8000952:	3728      	adds	r7, #40	@ 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40012c00 	.word	0x40012c00
 800095c:	40021000 	.word	0x40021000
 8000960:	40013400 	.word	0x40013400
 8000964:	48000400 	.word	0x48000400

08000968 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	@ 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a29      	ldr	r2, [pc, #164]	@ (8000a2c <HAL_TIM_MspPostInit+0xc4>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d14b      	bne.n	8000a22 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	4b29      	ldr	r3, [pc, #164]	@ (8000a30 <HAL_TIM_MspPostInit+0xc8>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	4a28      	ldr	r2, [pc, #160]	@ (8000a30 <HAL_TIM_MspPostInit+0xc8>)
 8000990:	f043 0302 	orr.w	r3, r3, #2
 8000994:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000996:	4b26      	ldr	r3, [pc, #152]	@ (8000a30 <HAL_TIM_MspPostInit+0xc8>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	4b23      	ldr	r3, [pc, #140]	@ (8000a30 <HAL_TIM_MspPostInit+0xc8>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a6:	4a22      	ldr	r2, [pc, #136]	@ (8000a30 <HAL_TIM_MspPostInit+0xc8>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ae:	4b20      	ldr	r3, [pc, #128]	@ (8000a30 <HAL_TIM_MspPostInit+0xc8>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PA_LIN_Pin|PB_LIN_Pin;
 80009ba:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80009be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c8:	2303      	movs	r3, #3
 80009ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80009cc:	2306      	movs	r3, #6
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	4817      	ldr	r0, [pc, #92]	@ (8000a34 <HAL_TIM_MspPostInit+0xcc>)
 80009d8:	f000 f9d8 	bl	8000d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PC_LIN_Pin;
 80009dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ea:	2303      	movs	r3, #3
 80009ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80009ee:	2304      	movs	r3, #4
 80009f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PC_LIN_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	480e      	ldr	r0, [pc, #56]	@ (8000a34 <HAL_TIM_MspPostInit+0xcc>)
 80009fa:	f000 f9c7 	bl	8000d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PA_HIN_Pin|PB_HIN_Pin|PC_HIN_Pin;
 80009fe:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000a10:	2306      	movs	r3, #6
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a1e:	f000 f9b5 	bl	8000d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a22:	bf00      	nop
 8000a24:	3728      	adds	r7, #40	@ 0x28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40012c00 	.word	0x40012c00
 8000a30:	40021000 	.word	0x40021000
 8000a34:	48000400 	.word	0x48000400

08000a38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a38:	480d      	ldr	r0, [pc, #52]	@ (8000a70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a3a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a3c:	f7ff fdd0 	bl	80005e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a40:	480c      	ldr	r0, [pc, #48]	@ (8000a74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a42:	490d      	ldr	r1, [pc, #52]	@ (8000a78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a44:	4a0d      	ldr	r2, [pc, #52]	@ (8000a7c <LoopForever+0xe>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a48:	e002      	b.n	8000a50 <LoopCopyDataInit>

08000a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4e:	3304      	adds	r3, #4

08000a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a54:	d3f9      	bcc.n	8000a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a56:	4a0a      	ldr	r2, [pc, #40]	@ (8000a80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a58:	4c0a      	ldr	r4, [pc, #40]	@ (8000a84 <LoopForever+0x16>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a5c:	e001      	b.n	8000a62 <LoopFillZerobss>

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a60:	3204      	adds	r2, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a66:	f008 fc63 	bl	8009330 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a6a:	f7ff fce3 	bl	8000434 <main>

08000a6e <LoopForever>:

LoopForever:
    b LoopForever
 8000a6e:	e7fe      	b.n	8000a6e <LoopForever>
  ldr   r0, =_estack
 8000a70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000a7c:	080093f0 	.word	0x080093f0
  ldr r2, =_sbss
 8000a80:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000a84:	20001c60 	.word	0x20001c60

08000a88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC1_2_IRQHandler>

08000a8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a90:	2300      	movs	r3, #0
 8000a92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a94:	2003      	movs	r0, #3
 8000a96:	f000 f939 	bl	8000d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a9a:	200f      	movs	r0, #15
 8000a9c:	f000 f80e 	bl	8000abc <HAL_InitTick>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d002      	beq.n	8000aac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	71fb      	strb	r3, [r7, #7]
 8000aaa:	e001      	b.n	8000ab0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aac:	f7ff fd26 	bl	80004fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ab0:	79fb      	ldrb	r3, [r7, #7]

}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ac8:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <HAL_InitTick+0x68>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d022      	beq.n	8000b16 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ad0:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <HAL_InitTick+0x6c>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <HAL_InitTick+0x68>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000adc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 f944 	bl	8000d72 <HAL_SYSTICK_Config>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d10f      	bne.n	8000b10 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b0f      	cmp	r3, #15
 8000af4:	d809      	bhi.n	8000b0a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af6:	2200      	movs	r2, #0
 8000af8:	6879      	ldr	r1, [r7, #4]
 8000afa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000afe:	f000 f910 	bl	8000d22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b02:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <HAL_InitTick+0x70>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	e007      	b.n	8000b1a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	73fb      	strb	r3, [r7, #15]
 8000b0e:	e004      	b.n	8000b1a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	73fb      	strb	r3, [r7, #15]
 8000b14:	e001      	b.n	8000b1a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	20000004 	.word	0x20000004

08000b30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b34:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <HAL_IncTick+0x1c>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <HAL_IncTick+0x20>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4a03      	ldr	r2, [pc, #12]	@ (8000b4c <HAL_IncTick+0x1c>)
 8000b40:	6013      	str	r3, [r2, #0]
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	2000028c 	.word	0x2000028c
 8000b50:	20000008 	.word	0x20000008

08000b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return uwTick;
 8000b58:	4b03      	ldr	r3, [pc, #12]	@ (8000b68 <HAL_GetTick+0x14>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	2000028c 	.word	0x2000028c

08000b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9e:	4a04      	ldr	r2, [pc, #16]	@ (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	60d3      	str	r3, [r2, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb8:	4b04      	ldr	r3, [pc, #16]	@ (8000bcc <__NVIC_GetPriorityGrouping+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	f003 0307 	and.w	r3, r3, #7
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	db0b      	blt.n	8000bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f003 021f 	and.w	r2, r3, #31
 8000be8:	4907      	ldr	r1, [pc, #28]	@ (8000c08 <__NVIC_EnableIRQ+0x38>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000e100 	.word	0xe000e100

08000c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	db0a      	blt.n	8000c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	490c      	ldr	r1, [pc, #48]	@ (8000c58 <__NVIC_SetPriority+0x4c>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	440b      	add	r3, r1
 8000c30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c34:	e00a      	b.n	8000c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4908      	ldr	r1, [pc, #32]	@ (8000c5c <__NVIC_SetPriority+0x50>)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	3b04      	subs	r3, #4
 8000c44:	0112      	lsls	r2, r2, #4
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	440b      	add	r3, r1
 8000c4a:	761a      	strb	r2, [r3, #24]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	@ 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f1c3 0307 	rsb	r3, r3, #7
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	bf28      	it	cs
 8000c7e:	2304      	movcs	r3, #4
 8000c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3304      	adds	r3, #4
 8000c86:	2b06      	cmp	r3, #6
 8000c88:	d902      	bls.n	8000c90 <NVIC_EncodePriority+0x30>
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3b03      	subs	r3, #3
 8000c8e:	e000      	b.n	8000c92 <NVIC_EncodePriority+0x32>
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	43d9      	mvns	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	4313      	orrs	r3, r2
         );
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3724      	adds	r7, #36	@ 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cd8:	d301      	bcc.n	8000cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00f      	b.n	8000cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cde:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <SysTick_Config+0x40>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f7ff ff8e 	bl	8000c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf0:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <SysTick_Config+0x40>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf6:	4b04      	ldr	r3, [pc, #16]	@ (8000d08 <SysTick_Config+0x40>)
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	e000e010 	.word	0xe000e010

08000d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ff29 	bl	8000b6c <__NVIC_SetPriorityGrouping>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d30:	f7ff ff40 	bl	8000bb4 <__NVIC_GetPriorityGrouping>
 8000d34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	6978      	ldr	r0, [r7, #20]
 8000d3c:	f7ff ff90 	bl	8000c60 <NVIC_EncodePriority>
 8000d40:	4602      	mov	r2, r0
 8000d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d46:	4611      	mov	r1, r2
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff5f 	bl	8000c0c <__NVIC_SetPriority>
}
 8000d4e:	bf00      	nop
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff33 	bl	8000bd0 <__NVIC_EnableIRQ>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ffa4 	bl	8000cc8 <SysTick_Config>
 8000d80:	4603      	mov	r3, r0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b087      	sub	sp, #28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d9a:	e15a      	b.n	8001052 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	2101      	movs	r1, #1
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	fa01 f303 	lsl.w	r3, r1, r3
 8000da8:	4013      	ands	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 814c 	beq.w	800104c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d005      	beq.n	8000dcc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d130      	bne.n	8000e2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e02:	2201      	movs	r2, #1
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	091b      	lsrs	r3, r3, #4
 8000e18:	f003 0201 	and.w	r2, r3, #1
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	d017      	beq.n	8000e6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	2203      	movs	r2, #3
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	689a      	ldr	r2, [r3, #8]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d123      	bne.n	8000ebe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	08da      	lsrs	r2, r3, #3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3208      	adds	r2, #8
 8000e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	220f      	movs	r2, #15
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	691a      	ldr	r2, [r3, #16]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	f003 0307 	and.w	r3, r3, #7
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	08da      	lsrs	r2, r3, #3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3208      	adds	r2, #8
 8000eb8:	6939      	ldr	r1, [r7, #16]
 8000eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0203 	and.w	r2, r3, #3
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 80a6 	beq.w	800104c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f00:	4b5b      	ldr	r3, [pc, #364]	@ (8001070 <HAL_GPIO_Init+0x2e4>)
 8000f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f04:	4a5a      	ldr	r2, [pc, #360]	@ (8001070 <HAL_GPIO_Init+0x2e4>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f0c:	4b58      	ldr	r3, [pc, #352]	@ (8001070 <HAL_GPIO_Init+0x2e4>)
 8000f0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f18:	4a56      	ldr	r2, [pc, #344]	@ (8001074 <HAL_GPIO_Init+0x2e8>)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	3302      	adds	r3, #2
 8000f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	220f      	movs	r2, #15
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f42:	d01f      	beq.n	8000f84 <HAL_GPIO_Init+0x1f8>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a4c      	ldr	r2, [pc, #304]	@ (8001078 <HAL_GPIO_Init+0x2ec>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d019      	beq.n	8000f80 <HAL_GPIO_Init+0x1f4>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a4b      	ldr	r2, [pc, #300]	@ (800107c <HAL_GPIO_Init+0x2f0>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d013      	beq.n	8000f7c <HAL_GPIO_Init+0x1f0>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a4a      	ldr	r2, [pc, #296]	@ (8001080 <HAL_GPIO_Init+0x2f4>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d00d      	beq.n	8000f78 <HAL_GPIO_Init+0x1ec>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a49      	ldr	r2, [pc, #292]	@ (8001084 <HAL_GPIO_Init+0x2f8>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d007      	beq.n	8000f74 <HAL_GPIO_Init+0x1e8>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a48      	ldr	r2, [pc, #288]	@ (8001088 <HAL_GPIO_Init+0x2fc>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d101      	bne.n	8000f70 <HAL_GPIO_Init+0x1e4>
 8000f6c:	2305      	movs	r3, #5
 8000f6e:	e00a      	b.n	8000f86 <HAL_GPIO_Init+0x1fa>
 8000f70:	2306      	movs	r3, #6
 8000f72:	e008      	b.n	8000f86 <HAL_GPIO_Init+0x1fa>
 8000f74:	2304      	movs	r3, #4
 8000f76:	e006      	b.n	8000f86 <HAL_GPIO_Init+0x1fa>
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e004      	b.n	8000f86 <HAL_GPIO_Init+0x1fa>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	e002      	b.n	8000f86 <HAL_GPIO_Init+0x1fa>
 8000f80:	2301      	movs	r3, #1
 8000f82:	e000      	b.n	8000f86 <HAL_GPIO_Init+0x1fa>
 8000f84:	2300      	movs	r3, #0
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	f002 0203 	and.w	r2, r2, #3
 8000f8c:	0092      	lsls	r2, r2, #2
 8000f8e:	4093      	lsls	r3, r2
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f96:	4937      	ldr	r1, [pc, #220]	@ (8001074 <HAL_GPIO_Init+0x2e8>)
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fa4:	4b39      	ldr	r3, [pc, #228]	@ (800108c <HAL_GPIO_Init+0x300>)
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fc8:	4a30      	ldr	r2, [pc, #192]	@ (800108c <HAL_GPIO_Init+0x300>)
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fce:	4b2f      	ldr	r3, [pc, #188]	@ (800108c <HAL_GPIO_Init+0x300>)
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ff2:	4a26      	ldr	r2, [pc, #152]	@ (800108c <HAL_GPIO_Init+0x300>)
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000ff8:	4b24      	ldr	r3, [pc, #144]	@ (800108c <HAL_GPIO_Init+0x300>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	43db      	mvns	r3, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800101c:	4a1b      	ldr	r2, [pc, #108]	@ (800108c <HAL_GPIO_Init+0x300>)
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001022:	4b1a      	ldr	r3, [pc, #104]	@ (800108c <HAL_GPIO_Init+0x300>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001046:	4a11      	ldr	r2, [pc, #68]	@ (800108c <HAL_GPIO_Init+0x300>)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	3301      	adds	r3, #1
 8001050:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	fa22 f303 	lsr.w	r3, r2, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	f47f ae9d 	bne.w	8000d9c <HAL_GPIO_Init+0x10>
  }
}
 8001062:	bf00      	nop
 8001064:	bf00      	nop
 8001066:	371c      	adds	r7, #28
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	40021000 	.word	0x40021000
 8001074:	40010000 	.word	0x40010000
 8001078:	48000400 	.word	0x48000400
 800107c:	48000800 	.word	0x48000800
 8001080:	48000c00 	.word	0x48000c00
 8001084:	48001000 	.word	0x48001000
 8001088:	48001400 	.word	0x48001400
 800108c:	40010400 	.word	0x40010400

08001090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
 800109c:	4613      	mov	r3, r2
 800109e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010a0:	787b      	ldrb	r3, [r7, #1]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010a6:	887a      	ldrh	r2, [r7, #2]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010ac:	e002      	b.n	80010b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ae:	887a      	ldrh	r2, [r7, #2]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e08d      	b.n	80011ee <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d106      	bne.n	80010ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff f92e 	bl	8000348 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2224      	movs	r2, #36	@ 0x24
 80010f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f022 0201 	bic.w	r2, r2, #1
 8001102:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001110:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001120:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d107      	bne.n	800113a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689a      	ldr	r2, [r3, #8]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	e006      	b.n	8001148 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001146:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d108      	bne.n	8001162 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	e007      	b.n	8001172 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001170:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	6812      	ldr	r2, [r2, #0]
 800117c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001180:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001184:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	68da      	ldr	r2, [r3, #12]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001194:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	691a      	ldr	r2, [r3, #16]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	430a      	orrs	r2, r1
 80011ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69d9      	ldr	r1, [r3, #28]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a1a      	ldr	r2, [r3, #32]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	430a      	orrs	r2, r1
 80011be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f042 0201 	orr.w	r2, r2, #1
 80011ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2220      	movs	r2, #32
 80011da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b20      	cmp	r3, #32
 800120a:	d138      	bne.n	800127e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001212:	2b01      	cmp	r3, #1
 8001214:	d101      	bne.n	800121a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001216:	2302      	movs	r3, #2
 8001218:	e032      	b.n	8001280 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2201      	movs	r2, #1
 800121e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2224      	movs	r2, #36	@ 0x24
 8001226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 0201 	bic.w	r2, r2, #1
 8001238:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001248:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6819      	ldr	r1, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	430a      	orrs	r2, r1
 8001258:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f042 0201 	orr.w	r2, r2, #1
 8001268:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2220      	movs	r2, #32
 800126e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	e000      	b.n	8001280 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800127e:	2302      	movs	r3, #2
  }
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b20      	cmp	r3, #32
 80012a0:	d139      	bne.n	8001316 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d101      	bne.n	80012b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80012ac:	2302      	movs	r3, #2
 80012ae:	e033      	b.n	8001318 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2201      	movs	r2, #1
 80012b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2224      	movs	r2, #36	@ 0x24
 80012bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 0201 	bic.w	r2, r2, #1
 80012ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80012de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f042 0201 	orr.w	r2, r2, #1
 8001300:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2220      	movs	r2, #32
 8001306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	e000      	b.n	8001318 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001316:	2302      	movs	r3, #2
  }
}
 8001318:	4618      	mov	r0, r3
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e0c0      	b.n	80014b8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d106      	bne.n	8001350 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f007 fce4 	bl	8008d18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2203      	movs	r2, #3
 8001354:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f004 f864 	bl	800542a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001362:	2300      	movs	r3, #0
 8001364:	73fb      	strb	r3, [r7, #15]
 8001366:	e03e      	b.n	80013e6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001368:	7bfa      	ldrb	r2, [r7, #15]
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	4613      	mov	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	440b      	add	r3, r1
 8001376:	3311      	adds	r3, #17
 8001378:	2201      	movs	r2, #1
 800137a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800137c:	7bfa      	ldrb	r2, [r7, #15]
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	440b      	add	r3, r1
 800138a:	3310      	adds	r3, #16
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	440b      	add	r3, r1
 800139e:	3313      	adds	r3, #19
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013a4:	7bfa      	ldrb	r2, [r7, #15]
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	440b      	add	r3, r1
 80013b2:	3320      	adds	r3, #32
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013b8:	7bfa      	ldrb	r2, [r7, #15]
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	440b      	add	r3, r1
 80013c6:	3324      	adds	r3, #36	@ 0x24
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	1c5a      	adds	r2, r3, #1
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	440b      	add	r3, r1
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	3301      	adds	r3, #1
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	791b      	ldrb	r3, [r3, #4]
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d3bb      	bcc.n	8001368 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	73fb      	strb	r3, [r7, #15]
 80013f4:	e044      	b.n	8001480 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013f6:	7bfa      	ldrb	r2, [r7, #15]
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	440b      	add	r3, r1
 8001404:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800140c:	7bfa      	ldrb	r2, [r7, #15]
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	440b      	add	r3, r1
 800141a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800141e:	7bfa      	ldrb	r2, [r7, #15]
 8001420:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001422:	7bfa      	ldrb	r2, [r7, #15]
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	440b      	add	r3, r1
 8001430:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001438:	7bfa      	ldrb	r2, [r7, #15]
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	440b      	add	r3, r1
 8001446:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800144e:	7bfa      	ldrb	r2, [r7, #15]
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	440b      	add	r3, r1
 800145c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	440b      	add	r3, r1
 8001472:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	3301      	adds	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	791b      	ldrb	r3, [r3, #4]
 8001484:	7bfa      	ldrb	r2, [r7, #15]
 8001486:	429a      	cmp	r2, r3
 8001488:	d3b5      	bcc.n	80013f6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6818      	ldr	r0, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3304      	adds	r3, #4
 8001492:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001496:	f003 ffe3 	bl	8005460 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	7a9b      	ldrb	r3, [r3, #10]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d102      	bne.n	80014b6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f001 fc0e 	bl	8002cd2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d101      	bne.n	80014d6 <HAL_PCD_Start+0x16>
 80014d2:	2302      	movs	r3, #2
 80014d4:	e012      	b.n	80014fc <HAL_PCD_Start+0x3c>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f003 ff8a 	bl	80053fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f005 fd67 	bl	8006fc0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f005 fd6c 	bl	8006fee <USB_ReadInterrupts>
 8001516:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 fb06 	bl	8001b34 <PCD_EP_ISR_Handler>

    return;
 8001528:	e110      	b.n	800174c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001530:	2b00      	cmp	r3, #0
 8001532:	d013      	beq.n	800155c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800153c:	b29a      	uxth	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001546:	b292      	uxth	r2, r2
 8001548:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f007 fc74 	bl	8008e3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001552:	2100      	movs	r1, #0
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 f8fc 	bl	8001752 <HAL_PCD_SetAddress>

    return;
 800155a:	e0f7      	b.n	800174c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00c      	beq.n	8001580 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800156e:	b29a      	uxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001578:	b292      	uxth	r2, r2
 800157a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800157e:	e0e5      	b.n	800174c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00c      	beq.n	80015a4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001592:	b29a      	uxth	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800159c:	b292      	uxth	r2, r2
 800159e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80015a2:	e0d3      	b.n	800174c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d034      	beq.n	8001618 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0204 	bic.w	r2, r2, #4
 80015c0:	b292      	uxth	r2, r2
 80015c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 0208 	bic.w	r2, r2, #8
 80015d8:	b292      	uxth	r2, r2
 80015da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d107      	bne.n	80015f8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015f0:	2100      	movs	r1, #0
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f007 fe14 	bl	8009220 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f007 fc57 	bl	8008eac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001606:	b29a      	uxth	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001610:	b292      	uxth	r2, r2
 8001612:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001616:	e099      	b.n	800174c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800161e:	2b00      	cmp	r3, #0
 8001620:	d027      	beq.n	8001672 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800162a:	b29a      	uxth	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f042 0208 	orr.w	r2, r2, #8
 8001634:	b292      	uxth	r2, r2
 8001636:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001642:	b29a      	uxth	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800164c:	b292      	uxth	r2, r2
 800164e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800165a:	b29a      	uxth	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f042 0204 	orr.w	r2, r2, #4
 8001664:	b292      	uxth	r2, r2
 8001666:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f007 fc04 	bl	8008e78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001670:	e06c      	b.n	800174c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001678:	2b00      	cmp	r3, #0
 800167a:	d040      	beq.n	80016fe <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001684:	b29a      	uxth	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800168e:	b292      	uxth	r2, r2
 8001690:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d12b      	bne.n	80016f6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f042 0204 	orr.w	r2, r2, #4
 80016b0:	b292      	uxth	r2, r2
 80016b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80016be:	b29a      	uxth	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f042 0208 	orr.w	r2, r2, #8
 80016c8:	b292      	uxth	r2, r2
 80016ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2201      	movs	r2, #1
 80016d2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80016de:	b29b      	uxth	r3, r3
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80016ec:	2101      	movs	r1, #1
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f007 fd96 	bl	8009220 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80016f4:	e02a      	b.n	800174c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f007 fbbe 	bl	8008e78 <HAL_PCD_SuspendCallback>
    return;
 80016fc:	e026      	b.n	800174c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00f      	beq.n	8001728 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001710:	b29a      	uxth	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800171a:	b292      	uxth	r2, r2
 800171c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f007 fb7c 	bl	8008e1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001726:	e011      	b.n	800174c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00c      	beq.n	800174c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800173a:	b29a      	uxth	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001744:	b292      	uxth	r2, r2
 8001746:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800174a:	bf00      	nop
  }
}
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	460b      	mov	r3, r1
 800175c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <HAL_PCD_SetAddress+0x1a>
 8001768:	2302      	movs	r3, #2
 800176a:	e012      	b.n	8001792 <HAL_PCD_SetAddress+0x40>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	78fa      	ldrb	r2, [r7, #3]
 8001778:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	78fa      	ldrb	r2, [r7, #3]
 8001780:	4611      	mov	r1, r2
 8001782:	4618      	mov	r0, r3
 8001784:	f005 fc08 	bl	8006f98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b084      	sub	sp, #16
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	4608      	mov	r0, r1
 80017a4:	4611      	mov	r1, r2
 80017a6:	461a      	mov	r2, r3
 80017a8:	4603      	mov	r3, r0
 80017aa:	70fb      	strb	r3, [r7, #3]
 80017ac:	460b      	mov	r3, r1
 80017ae:	803b      	strh	r3, [r7, #0]
 80017b0:	4613      	mov	r3, r2
 80017b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	da0e      	bge.n	80017de <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	f003 0207 	and.w	r2, r3, #7
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	3310      	adds	r3, #16
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	4413      	add	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2201      	movs	r2, #1
 80017da:	705a      	strb	r2, [r3, #1]
 80017dc:	e00e      	b.n	80017fc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	f003 0207 	and.w	r2, r3, #7
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	4413      	add	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	b2da      	uxtb	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001808:	883b      	ldrh	r3, [r7, #0]
 800180a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	78ba      	ldrb	r2, [r7, #2]
 8001816:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001818:	78bb      	ldrb	r3, [r7, #2]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d102      	bne.n	8001824 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800182a:	2b01      	cmp	r3, #1
 800182c:	d101      	bne.n	8001832 <HAL_PCD_EP_Open+0x98>
 800182e:	2302      	movs	r3, #2
 8001830:	e00e      	b.n	8001850 <HAL_PCD_EP_Open+0xb6>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68f9      	ldr	r1, [r7, #12]
 8001840:	4618      	mov	r0, r3
 8001842:	f003 fe2b 	bl	800549c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800184e:	7afb      	ldrb	r3, [r7, #11]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001864:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001868:	2b00      	cmp	r3, #0
 800186a:	da0e      	bge.n	800188a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	f003 0207 	and.w	r2, r3, #7
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	3310      	adds	r3, #16
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	4413      	add	r3, r2
 8001880:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2201      	movs	r2, #1
 8001886:	705a      	strb	r2, [r3, #1]
 8001888:	e00e      	b.n	80018a8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800188a:	78fb      	ldrb	r3, [r7, #3]
 800188c:	f003 0207 	and.w	r2, r3, #7
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	4413      	add	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2200      	movs	r2, #0
 80018a6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80018a8:	78fb      	ldrb	r3, [r7, #3]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d101      	bne.n	80018c2 <HAL_PCD_EP_Close+0x6a>
 80018be:	2302      	movs	r3, #2
 80018c0:	e00e      	b.n	80018e0 <HAL_PCD_EP_Close+0x88>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68f9      	ldr	r1, [r7, #12]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f004 facb 	bl	8005e6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	460b      	mov	r3, r1
 80018f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018f8:	7afb      	ldrb	r3, [r7, #11]
 80018fa:	f003 0207 	and.w	r2, r3, #7
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	4413      	add	r3, r2
 800190e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	2200      	movs	r2, #0
 8001920:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	2200      	movs	r2, #0
 8001926:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001928:	7afb      	ldrb	r3, [r7, #11]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	b2da      	uxtb	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6979      	ldr	r1, [r7, #20]
 800193a:	4618      	mov	r0, r3
 800193c:	f004 fc83 	bl	8006246 <USB_EPStartXfer>

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	460b      	mov	r3, r1
 8001954:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001956:	78fb      	ldrb	r3, [r7, #3]
 8001958:	f003 0207 	and.w	r2, r3, #7
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	440b      	add	r3, r1
 8001968:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800196c:	681b      	ldr	r3, [r3, #0]
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	603b      	str	r3, [r7, #0]
 8001986:	460b      	mov	r3, r1
 8001988:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800198a:	7afb      	ldrb	r3, [r7, #11]
 800198c:	f003 0207 	and.w	r2, r3, #7
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	3310      	adds	r3, #16
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	4413      	add	r3, r2
 800199e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	2200      	movs	r2, #0
 80019be:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	2201      	movs	r2, #1
 80019c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019c6:	7afb      	ldrb	r3, [r7, #11]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6979      	ldr	r1, [r7, #20]
 80019d8:	4618      	mov	r0, r3
 80019da:	f004 fc34 	bl	8006246 <USB_EPStartXfer>

  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	7912      	ldrb	r2, [r2, #4]
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e03e      	b.n	8001a84 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	da0e      	bge.n	8001a2c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a0e:	78fb      	ldrb	r3, [r7, #3]
 8001a10:	f003 0207 	and.w	r2, r3, #7
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	3310      	adds	r3, #16
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2201      	movs	r2, #1
 8001a28:	705a      	strb	r2, [r3, #1]
 8001a2a:	e00c      	b.n	8001a46 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a2c:	78fa      	ldrb	r2, [r7, #3]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d101      	bne.n	8001a66 <HAL_PCD_EP_SetStall+0x7e>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e00e      	b.n	8001a84 <HAL_PCD_EP_SetStall+0x9c>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68f9      	ldr	r1, [r7, #12]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f005 f995 	bl	8006da4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a98:	78fb      	ldrb	r3, [r7, #3]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	7912      	ldrb	r2, [r2, #4]
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e040      	b.n	8001b2c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001aaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da0e      	bge.n	8001ad0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	f003 0207 	and.w	r2, r3, #7
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	3310      	adds	r3, #16
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2201      	movs	r2, #1
 8001acc:	705a      	strb	r2, [r3, #1]
 8001ace:	e00e      	b.n	8001aee <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	f003 0207 	and.w	r2, r3, #7
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001af4:	78fb      	ldrb	r3, [r7, #3]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d101      	bne.n	8001b0e <HAL_PCD_EP_ClrStall+0x82>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e00e      	b.n	8001b2c <HAL_PCD_EP_ClrStall+0xa0>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68f9      	ldr	r1, [r7, #12]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f005 f992 	bl	8006e46 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b092      	sub	sp, #72	@ 0x48
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b3c:	e333      	b.n	80021a6 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b46:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b48:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8001b54:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f040 8108 	bne.w	8001d6e <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b5e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001b60:	f003 0310 	and.w	r3, r3, #16
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d14c      	bne.n	8001c02 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001b74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b78:	813b      	strh	r3, [r7, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	893b      	ldrh	r3, [r7, #8]
 8001b80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3310      	adds	r3, #16
 8001b90:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001bb0:	881b      	ldrh	r3, [r3, #0]
 8001bb2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bb8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001bba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bbc:	695a      	ldr	r2, [r3, #20]
 8001bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	441a      	add	r2, r3
 8001bc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bc6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001bc8:	2100      	movs	r1, #0
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f007 f90d 	bl	8008dea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	7b1b      	ldrb	r3, [r3, #12]
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 82e5 	beq.w	80021a6 <PCD_EP_ISR_Handler+0x672>
 8001bdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f040 82e0 	bne.w	80021a6 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	7b1b      	ldrb	r3, [r3, #12]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	731a      	strb	r2, [r3, #12]
 8001c00:	e2d1      	b.n	80021a6 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c08:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c12:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001c14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d032      	beq.n	8001c82 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4413      	add	r3, r2
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	4413      	add	r3, r2
 8001c36:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c42:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001c4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c50:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c54:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	f005 fa1c 	bl	8007094 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001c68:	4013      	ands	r3, r2
 8001c6a:	817b      	strh	r3, [r7, #10]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	897a      	ldrh	r2, [r7, #10]
 8001c72:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c76:	b292      	uxth	r2, r2
 8001c78:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f007 f888 	bl	8008d90 <HAL_PCD_SetupStageCallback>
 8001c80:	e291      	b.n	80021a6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c82:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f280 828d 	bge.w	80021a6 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001c98:	4013      	ands	r3, r2
 8001c9a:	81fb      	strh	r3, [r7, #14]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	89fa      	ldrh	r2, [r7, #14]
 8001ca2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ca6:	b292      	uxth	r2, r2
 8001ca8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	4413      	add	r3, r2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cd0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001cd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d019      	beq.n	8001d0e <PCD_EP_ISR_Handler+0x1da>
 8001cda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d015      	beq.n	8001d0e <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6818      	ldr	r0, [r3, #0]
 8001ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ce8:	6959      	ldr	r1, [r3, #20]
 8001cea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cec:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cf0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	f005 f9ce 	bl	8007094 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001cf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cfa:	695a      	ldr	r2, [r3, #20]
 8001cfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	441a      	add	r2, r3
 8001d02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d04:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001d06:	2100      	movs	r1, #0
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f007 f853 	bl	8008db4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001d16:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001d18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f040 8242 	bne.w	80021a6 <PCD_EP_ISR_Handler+0x672>
 8001d22:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001d24:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001d28:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001d2c:	f000 823b 	beq.w	80021a6 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d40:	81bb      	strh	r3, [r7, #12]
 8001d42:	89bb      	ldrh	r3, [r7, #12]
 8001d44:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001d48:	81bb      	strh	r3, [r7, #12]
 8001d4a:	89bb      	ldrh	r3, [r7, #12]
 8001d4c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001d50:	81bb      	strh	r3, [r7, #12]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	89bb      	ldrh	r3, [r7, #12]
 8001d58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001d5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001d60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	8013      	strh	r3, [r2, #0]
 8001d6c:	e21b      	b.n	80021a6 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d80:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f280 80f1 	bge.w	8001f6c <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001da0:	4013      	ands	r3, r2
 8001da2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001db4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001db8:	b292      	uxth	r2, r2
 8001dba:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001dbc:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	4413      	add	r3, r2
 8001dd0:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001dd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dd4:	7b1b      	ldrb	r3, [r3, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d123      	bne.n	8001e22 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	461a      	mov	r2, r3
 8001de6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4413      	add	r3, r2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6812      	ldr	r2, [r2, #0]
 8001df2:	4413      	add	r3, r2
 8001df4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dfe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8001e02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 808b 	beq.w	8001f22 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e12:	6959      	ldr	r1, [r3, #20]
 8001e14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e16:	88da      	ldrh	r2, [r3, #6]
 8001e18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001e1c:	f005 f93a 	bl	8007094 <USB_ReadPMA>
 8001e20:	e07f      	b.n	8001f22 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001e22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e24:	78db      	ldrb	r3, [r3, #3]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d109      	bne.n	8001e3e <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001e2a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f9c6 	bl	80021c2 <HAL_PCD_EP_DB_Receive>
 8001e36:	4603      	mov	r3, r0
 8001e38:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001e3c:	e071      	b.n	8001f22 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001e54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e58:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	441a      	add	r2, r3
 8001e68:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001e6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d022      	beq.n	8001ede <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4413      	add	r3, r2
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ebc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8001ec0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d02c      	beq.n	8001f22 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ece:	6959      	ldr	r1, [r3, #20]
 8001ed0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ed2:	891a      	ldrh	r2, [r3, #8]
 8001ed4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001ed8:	f005 f8dc 	bl	8007094 <USB_ReadPMA>
 8001edc:	e021      	b.n	8001f22 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	461a      	mov	r2, r3
 8001eea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6812      	ldr	r2, [r2, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f02:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8001f06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d009      	beq.n	8001f22 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f14:	6959      	ldr	r1, [r3, #20]
 8001f16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f18:	895a      	ldrh	r2, [r3, #10]
 8001f1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001f1e:	f005 f8b9 	bl	8007094 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001f22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f24:	69da      	ldr	r2, [r3, #28]
 8001f26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001f2a:	441a      	add	r2, r3
 8001f2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f2e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001f30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f32:	695a      	ldr	r2, [r3, #20]
 8001f34:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001f38:	441a      	add	r2, r3
 8001f3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f3c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d005      	beq.n	8001f52 <PCD_EP_ISR_Handler+0x41e>
 8001f46:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8001f4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d206      	bcs.n	8001f60 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001f52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	4619      	mov	r1, r3
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f006 ff2b 	bl	8008db4 <HAL_PCD_DataOutStageCallback>
 8001f5e:	e005      	b.n	8001f6c <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001f66:	4618      	mov	r0, r3
 8001f68:	f004 f96d 	bl	8006246 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001f6c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 8117 	beq.w	80021a6 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8001f78:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	3310      	adds	r3, #16
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fa6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	441a      	add	r2, r3
 8001fb6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001fb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001fc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fc6:	78db      	ldrb	r3, [r3, #3]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	f040 80a1 	bne.w	8002110 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8001fce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001fd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fd6:	7b1b      	ldrb	r3, [r3, #12]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 8092 	beq.w	8002102 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fde:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d046      	beq.n	8002076 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001fe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fea:	785b      	ldrb	r3, [r3, #1]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d126      	bne.n	800203e <PCD_EP_ISR_Handler+0x50a>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	461a      	mov	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	4413      	add	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	00da      	lsls	r2, r3, #3
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	4413      	add	r3, r2
 8002012:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	b29b      	uxth	r3, r3
 800201e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002022:	b29a      	uxth	r2, r3
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	801a      	strh	r2, [r3, #0]
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	b29b      	uxth	r3, r3
 800202e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002036:	b29a      	uxth	r2, r3
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	801a      	strh	r2, [r3, #0]
 800203c:	e061      	b.n	8002102 <PCD_EP_ISR_Handler+0x5ce>
 800203e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002040:	785b      	ldrb	r3, [r3, #1]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d15d      	bne.n	8002102 <PCD_EP_ISR_Handler+0x5ce>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002054:	b29b      	uxth	r3, r3
 8002056:	461a      	mov	r2, r3
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	4413      	add	r3, r2
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	00da      	lsls	r2, r3, #3
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	4413      	add	r3, r2
 8002068:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	2200      	movs	r2, #0
 8002072:	801a      	strh	r2, [r3, #0]
 8002074:	e045      	b.n	8002102 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800207c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800207e:	785b      	ldrb	r3, [r3, #1]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d126      	bne.n	80020d2 <PCD_EP_ISR_Handler+0x59e>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	627b      	str	r3, [r7, #36]	@ 0x24
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002092:	b29b      	uxth	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002098:	4413      	add	r3, r2
 800209a:	627b      	str	r3, [r7, #36]	@ 0x24
 800209c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	00da      	lsls	r2, r3, #3
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	4413      	add	r3, r2
 80020a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80020aa:	623b      	str	r3, [r7, #32]
 80020ac:	6a3b      	ldr	r3, [r7, #32]
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	6a3b      	ldr	r3, [r7, #32]
 80020ba:	801a      	strh	r2, [r3, #0]
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	801a      	strh	r2, [r3, #0]
 80020d0:	e017      	b.n	8002102 <PCD_EP_ISR_Handler+0x5ce>
 80020d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020d4:	785b      	ldrb	r3, [r3, #1]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d113      	bne.n	8002102 <PCD_EP_ISR_Handler+0x5ce>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	461a      	mov	r2, r3
 80020e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020e8:	4413      	add	r3, r2
 80020ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	00da      	lsls	r2, r3, #3
 80020f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020f4:	4413      	add	r3, r2
 80020f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80020fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020fe:	2200      	movs	r2, #0
 8002100:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	4619      	mov	r1, r3
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f006 fe6e 	bl	8008dea <HAL_PCD_DataInStageCallback>
 800210e:	e04a      	b.n	80021a6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002110:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d13f      	bne.n	800219a <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002122:	b29b      	uxth	r3, r3
 8002124:	461a      	mov	r2, r3
 8002126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4413      	add	r3, r2
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	4413      	add	r3, r2
 8002134:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800213e:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8002140:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002142:	699a      	ldr	r2, [r3, #24]
 8002144:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002146:	429a      	cmp	r2, r3
 8002148:	d906      	bls.n	8002158 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800214a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800214c:	699a      	ldr	r2, [r3, #24]
 800214e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002150:	1ad2      	subs	r2, r2, r3
 8002152:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002154:	619a      	str	r2, [r3, #24]
 8002156:	e002      	b.n	800215e <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002158:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800215a:	2200      	movs	r2, #0
 800215c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800215e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d106      	bne.n	8002174 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002166:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	4619      	mov	r1, r3
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f006 fe3c 	bl	8008dea <HAL_PCD_DataInStageCallback>
 8002172:	e018      	b.n	80021a6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002174:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002176:	695a      	ldr	r2, [r3, #20]
 8002178:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800217a:	441a      	add	r2, r3
 800217c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800217e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002180:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002182:	69da      	ldr	r2, [r3, #28]
 8002184:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002186:	441a      	add	r2, r3
 8002188:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800218a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002192:	4618      	mov	r0, r3
 8002194:	f004 f857 	bl	8006246 <USB_EPStartXfer>
 8002198:	e005      	b.n	80021a6 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800219a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800219c:	461a      	mov	r2, r3
 800219e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f917 	bl	80023d4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	b21b      	sxth	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f6ff acc3 	blt.w	8001b3e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3748      	adds	r7, #72	@ 0x48
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b088      	sub	sp, #32
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	4613      	mov	r3, r2
 80021ce:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021d0:	88fb      	ldrh	r3, [r7, #6]
 80021d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d07c      	beq.n	80022d4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	461a      	mov	r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021fe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	699a      	ldr	r2, [r3, #24]
 8002204:	8b7b      	ldrh	r3, [r7, #26]
 8002206:	429a      	cmp	r2, r3
 8002208:	d306      	bcc.n	8002218 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	699a      	ldr	r2, [r3, #24]
 800220e:	8b7b      	ldrh	r3, [r7, #26]
 8002210:	1ad2      	subs	r2, r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	619a      	str	r2, [r3, #24]
 8002216:	e002      	b.n	800221e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2200      	movs	r2, #0
 800221c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d123      	bne.n	800226e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	b29b      	uxth	r3, r3
 8002238:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800223c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002240:	833b      	strh	r3, [r7, #24]
 8002242:	8b3b      	ldrh	r3, [r7, #24]
 8002244:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002248:	833b      	strh	r3, [r7, #24]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	441a      	add	r2, r3
 8002258:	8b3b      	ldrh	r3, [r7, #24]
 800225a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800225e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002262:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002266:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800226a:	b29b      	uxth	r3, r3
 800226c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002274:	2b00      	cmp	r3, #0
 8002276:	d01f      	beq.n	80022b8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	b29b      	uxth	r3, r3
 800228a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800228e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002292:	82fb      	strh	r3, [r7, #22]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	441a      	add	r2, r3
 80022a2:	8afb      	ldrh	r3, [r7, #22]
 80022a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80022b8:	8b7b      	ldrh	r3, [r7, #26]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 8085 	beq.w	80023ca <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6818      	ldr	r0, [r3, #0]
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	6959      	ldr	r1, [r3, #20]
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	891a      	ldrh	r2, [r3, #8]
 80022cc:	8b7b      	ldrh	r3, [r7, #26]
 80022ce:	f004 fee1 	bl	8007094 <USB_ReadPMA>
 80022d2:	e07a      	b.n	80023ca <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022dc:	b29b      	uxth	r3, r3
 80022de:	461a      	mov	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4413      	add	r3, r2
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	4413      	add	r3, r2
 80022ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022f8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	699a      	ldr	r2, [r3, #24]
 80022fe:	8b7b      	ldrh	r3, [r7, #26]
 8002300:	429a      	cmp	r2, r3
 8002302:	d306      	bcc.n	8002312 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	699a      	ldr	r2, [r3, #24]
 8002308:	8b7b      	ldrh	r3, [r7, #26]
 800230a:	1ad2      	subs	r2, r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	619a      	str	r2, [r3, #24]
 8002310:	e002      	b.n	8002318 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2200      	movs	r2, #0
 8002316:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d123      	bne.n	8002368 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	461a      	mov	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	b29b      	uxth	r3, r3
 8002332:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800233a:	83fb      	strh	r3, [r7, #30]
 800233c:	8bfb      	ldrh	r3, [r7, #30]
 800233e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002342:	83fb      	strh	r3, [r7, #30]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	441a      	add	r2, r3
 8002352:	8bfb      	ldrh	r3, [r7, #30]
 8002354:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002358:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800235c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002364:	b29b      	uxth	r3, r3
 8002366:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002368:	88fb      	ldrh	r3, [r7, #6]
 800236a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800236e:	2b00      	cmp	r3, #0
 8002370:	d11f      	bne.n	80023b2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	b29b      	uxth	r3, r3
 8002384:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002388:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800238c:	83bb      	strh	r3, [r7, #28]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	441a      	add	r2, r3
 800239c:	8bbb      	ldrh	r3, [r7, #28]
 800239e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80023a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80023a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80023b2:	8b7b      	ldrh	r3, [r7, #26]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d008      	beq.n	80023ca <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	6959      	ldr	r1, [r3, #20]
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	895a      	ldrh	r2, [r3, #10]
 80023c4:	8b7b      	ldrh	r3, [r7, #26]
 80023c6:	f004 fe65 	bl	8007094 <USB_ReadPMA>
    }
  }

  return count;
 80023ca:	8b7b      	ldrh	r3, [r7, #26]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3720      	adds	r7, #32
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b0a6      	sub	sp, #152	@ 0x98
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	4613      	mov	r3, r2
 80023e0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 81f7 	beq.w	80027dc <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4413      	add	r3, r2
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	4413      	add	r3, r2
 8002408:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002412:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	699a      	ldr	r2, [r3, #24]
 800241a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800241e:	429a      	cmp	r2, r3
 8002420:	d907      	bls.n	8002432 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	699a      	ldr	r2, [r3, #24]
 8002426:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800242a:	1ad2      	subs	r2, r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	619a      	str	r2, [r3, #24]
 8002430:	e002      	b.n	8002438 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2200      	movs	r2, #0
 8002436:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	2b00      	cmp	r3, #0
 800243e:	f040 80e1 	bne.w	8002604 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	785b      	ldrb	r3, [r3, #1]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d126      	bne.n	8002498 <HAL_PCD_EP_DB_Transmit+0xc4>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002458:	b29b      	uxth	r3, r3
 800245a:	461a      	mov	r2, r3
 800245c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245e:	4413      	add	r3, r2
 8002460:	633b      	str	r3, [r7, #48]	@ 0x30
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	00da      	lsls	r2, r3, #3
 8002468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246a:	4413      	add	r3, r2
 800246c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002470:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	b29b      	uxth	r3, r3
 8002478:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800247c:	b29a      	uxth	r2, r3
 800247e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002480:	801a      	strh	r2, [r3, #0]
 8002482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	b29b      	uxth	r3, r3
 8002488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800248c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002490:	b29a      	uxth	r2, r3
 8002492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002494:	801a      	strh	r2, [r3, #0]
 8002496:	e01a      	b.n	80024ce <HAL_PCD_EP_DB_Transmit+0xfa>
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	785b      	ldrb	r3, [r3, #1]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d116      	bne.n	80024ce <HAL_PCD_EP_DB_Transmit+0xfa>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024b4:	4413      	add	r3, r2
 80024b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	00da      	lsls	r2, r3, #3
 80024be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024c0:	4413      	add	r3, r2
 80024c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80024c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80024c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ca:	2200      	movs	r2, #0
 80024cc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	785b      	ldrb	r3, [r3, #1]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d126      	bne.n	800252a <HAL_PCD_EP_DB_Transmit+0x156>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	623b      	str	r3, [r7, #32]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	461a      	mov	r2, r3
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	4413      	add	r3, r2
 80024f2:	623b      	str	r3, [r7, #32]
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	00da      	lsls	r2, r3, #3
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	4413      	add	r3, r2
 80024fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002502:	61fb      	str	r3, [r7, #28]
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	b29b      	uxth	r3, r3
 800250a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800250e:	b29a      	uxth	r2, r3
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	801a      	strh	r2, [r3, #0]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	b29b      	uxth	r3, r3
 800251a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800251e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002522:	b29a      	uxth	r2, r3
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	801a      	strh	r2, [r3, #0]
 8002528:	e017      	b.n	800255a <HAL_PCD_EP_DB_Transmit+0x186>
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	785b      	ldrb	r3, [r3, #1]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d113      	bne.n	800255a <HAL_PCD_EP_DB_Transmit+0x186>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800253a:	b29b      	uxth	r3, r3
 800253c:	461a      	mov	r2, r3
 800253e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002540:	4413      	add	r3, r2
 8002542:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	00da      	lsls	r2, r3, #3
 800254a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800254c:	4413      	add	r3, r2
 800254e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002552:	627b      	str	r3, [r7, #36]	@ 0x24
 8002554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002556:	2200      	movs	r2, #0
 8002558:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	78db      	ldrb	r3, [r3, #3]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d123      	bne.n	80025aa <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	b29b      	uxth	r3, r3
 8002574:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002578:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800257c:	837b      	strh	r3, [r7, #26]
 800257e:	8b7b      	ldrh	r3, [r7, #26]
 8002580:	f083 0320 	eor.w	r3, r3, #32
 8002584:	837b      	strh	r3, [r7, #26]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	441a      	add	r2, r3
 8002594:	8b7b      	ldrh	r3, [r7, #26]
 8002596:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800259a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800259e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	4619      	mov	r1, r3
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f006 fc1a 	bl	8008dea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d01f      	beq.n	8002600 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025da:	833b      	strh	r3, [r7, #24]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	441a      	add	r2, r3
 80025ea:	8b3b      	ldrh	r3, [r7, #24]
 80025ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	e31f      	b.n	8002c44 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d021      	beq.n	8002652 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	b29b      	uxth	r3, r3
 8002620:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002624:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002628:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	441a      	add	r2, r3
 800263a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800263e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002642:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002646:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800264a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800264e:	b29b      	uxth	r3, r3
 8002650:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002658:	2b01      	cmp	r3, #1
 800265a:	f040 82ca 	bne.w	8002bf2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002666:	441a      	add	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	69da      	ldr	r2, [r3, #28]
 8002670:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002674:	441a      	add	r2, r3
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	6a1a      	ldr	r2, [r3, #32]
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	429a      	cmp	r2, r3
 8002684:	d309      	bcc.n	800269a <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	6a1a      	ldr	r2, [r3, #32]
 8002690:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002692:	1ad2      	subs	r2, r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	621a      	str	r2, [r3, #32]
 8002698:	e015      	b.n	80026c6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d107      	bne.n	80026b2 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80026a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80026a6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80026b0:	e009      	b.n	80026c6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2200      	movs	r2, #0
 80026c4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	785b      	ldrb	r3, [r3, #1]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d15f      	bne.n	800278e <HAL_PCD_EP_DB_Transmit+0x3ba>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026dc:	b29b      	uxth	r3, r3
 80026de:	461a      	mov	r2, r3
 80026e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026e2:	4413      	add	r3, r2
 80026e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	00da      	lsls	r2, r3, #3
 80026ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026ee:	4413      	add	r3, r2
 80026f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80026f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002700:	b29a      	uxth	r2, r3
 8002702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002704:	801a      	strh	r2, [r3, #0]
 8002706:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10a      	bne.n	8002722 <HAL_PCD_EP_DB_Transmit+0x34e>
 800270c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	b29b      	uxth	r3, r3
 8002712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800271a:	b29a      	uxth	r2, r3
 800271c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800271e:	801a      	strh	r2, [r3, #0]
 8002720:	e051      	b.n	80027c6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002722:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002724:	2b3e      	cmp	r3, #62	@ 0x3e
 8002726:	d816      	bhi.n	8002756 <HAL_PCD_EP_DB_Transmit+0x382>
 8002728:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800272a:	085b      	lsrs	r3, r3, #1
 800272c:	653b      	str	r3, [r7, #80]	@ 0x50
 800272e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <HAL_PCD_EP_DB_Transmit+0x36a>
 8002738:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800273a:	3301      	adds	r3, #1
 800273c:	653b      	str	r3, [r7, #80]	@ 0x50
 800273e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	b29a      	uxth	r2, r3
 8002744:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002746:	b29b      	uxth	r3, r3
 8002748:	029b      	lsls	r3, r3, #10
 800274a:	b29b      	uxth	r3, r3
 800274c:	4313      	orrs	r3, r2
 800274e:	b29a      	uxth	r2, r3
 8002750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002752:	801a      	strh	r2, [r3, #0]
 8002754:	e037      	b.n	80027c6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002756:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002758:	095b      	lsrs	r3, r3, #5
 800275a:	653b      	str	r3, [r7, #80]	@ 0x50
 800275c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800275e:	f003 031f 	and.w	r3, r3, #31
 8002762:	2b00      	cmp	r3, #0
 8002764:	d102      	bne.n	800276c <HAL_PCD_EP_DB_Transmit+0x398>
 8002766:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002768:	3b01      	subs	r3, #1
 800276a:	653b      	str	r3, [r7, #80]	@ 0x50
 800276c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	b29a      	uxth	r2, r3
 8002772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002774:	b29b      	uxth	r3, r3
 8002776:	029b      	lsls	r3, r3, #10
 8002778:	b29b      	uxth	r3, r3
 800277a:	4313      	orrs	r3, r2
 800277c:	b29b      	uxth	r3, r3
 800277e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002786:	b29a      	uxth	r2, r3
 8002788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800278a:	801a      	strh	r2, [r3, #0]
 800278c:	e01b      	b.n	80027c6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	785b      	ldrb	r3, [r3, #1]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d117      	bne.n	80027c6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027aa:	4413      	add	r3, r2
 80027ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	00da      	lsls	r2, r3, #3
 80027b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027b6:	4413      	add	r3, r2
 80027b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80027bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80027be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027c4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	6959      	ldr	r1, [r3, #20]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	891a      	ldrh	r2, [r3, #8]
 80027d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	f004 fc1a 	bl	800700e <USB_WritePMA>
 80027da:	e20a      	b.n	8002bf2 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4413      	add	r3, r2
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	4413      	add	r3, r2
 80027f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002800:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	699a      	ldr	r2, [r3, #24]
 8002808:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800280c:	429a      	cmp	r2, r3
 800280e:	d307      	bcc.n	8002820 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	699a      	ldr	r2, [r3, #24]
 8002814:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002818:	1ad2      	subs	r2, r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	619a      	str	r2, [r3, #24]
 800281e:	e002      	b.n	8002826 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2200      	movs	r2, #0
 8002824:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	2b00      	cmp	r3, #0
 800282c:	f040 80f6 	bne.w	8002a1c <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	785b      	ldrb	r3, [r3, #1]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d126      	bne.n	8002886 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	677b      	str	r3, [r7, #116]	@ 0x74
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002846:	b29b      	uxth	r3, r3
 8002848:	461a      	mov	r2, r3
 800284a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800284c:	4413      	add	r3, r2
 800284e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	00da      	lsls	r2, r3, #3
 8002856:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002858:	4413      	add	r3, r2
 800285a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800285e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002860:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	b29b      	uxth	r3, r3
 8002866:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800286a:	b29a      	uxth	r2, r3
 800286c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800286e:	801a      	strh	r2, [r3, #0]
 8002870:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	b29b      	uxth	r3, r3
 8002876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800287a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800287e:	b29a      	uxth	r2, r3
 8002880:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002882:	801a      	strh	r2, [r3, #0]
 8002884:	e01a      	b.n	80028bc <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	785b      	ldrb	r3, [r3, #1]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d116      	bne.n	80028bc <HAL_PCD_EP_DB_Transmit+0x4e8>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800289c:	b29b      	uxth	r3, r3
 800289e:	461a      	mov	r2, r3
 80028a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028a2:	4413      	add	r3, r2
 80028a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	00da      	lsls	r2, r3, #3
 80028ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028ae:	4413      	add	r3, r2
 80028b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80028b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80028b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028b8:	2200      	movs	r2, #0
 80028ba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	785b      	ldrb	r3, [r3, #1]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d12f      	bne.n	800292c <HAL_PCD_EP_DB_Transmit+0x558>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028dc:	b29b      	uxth	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028e4:	4413      	add	r3, r2
 80028e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	00da      	lsls	r2, r3, #3
 80028f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028f4:	4413      	add	r3, r2
 80028f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80028fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80028fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	b29b      	uxth	r3, r3
 8002906:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800290a:	b29a      	uxth	r2, r3
 800290c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002910:	801a      	strh	r2, [r3, #0]
 8002912:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	b29b      	uxth	r3, r3
 800291a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800291e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002922:	b29a      	uxth	r2, r3
 8002924:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002928:	801a      	strh	r2, [r3, #0]
 800292a:	e01c      	b.n	8002966 <HAL_PCD_EP_DB_Transmit+0x592>
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	785b      	ldrb	r3, [r3, #1]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d118      	bne.n	8002966 <HAL_PCD_EP_DB_Transmit+0x592>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800293c:	b29b      	uxth	r3, r3
 800293e:	461a      	mov	r2, r3
 8002940:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002944:	4413      	add	r3, r2
 8002946:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	00da      	lsls	r2, r3, #3
 8002950:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002954:	4413      	add	r3, r2
 8002956:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800295a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800295e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002962:	2200      	movs	r2, #0
 8002964:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	78db      	ldrb	r3, [r3, #3]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d127      	bne.n	80029be <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	b29b      	uxth	r3, r3
 8002980:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002984:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002988:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800298c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002990:	f083 0320 	eor.w	r3, r3, #32
 8002994:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	441a      	add	r2, r3
 80029a6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80029aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	4619      	mov	r1, r3
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f006 fa10 	bl	8008dea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029ca:	88fb      	ldrh	r3, [r7, #6]
 80029cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d121      	bne.n	8002a18 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ee:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	441a      	add	r2, r3
 8002a00:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8002a04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	e113      	b.n	8002c44 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a1c:	88fb      	ldrh	r3, [r7, #6]
 8002a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d121      	bne.n	8002a6a <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a40:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	441a      	add	r2, r3
 8002a52:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002a56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	f040 80be 	bne.w	8002bf2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	695a      	ldr	r2, [r3, #20]
 8002a7a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002a7e:	441a      	add	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	69da      	ldr	r2, [r3, #28]
 8002a88:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002a8c:	441a      	add	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	6a1a      	ldr	r2, [r3, #32]
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d309      	bcc.n	8002ab2 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	6a1a      	ldr	r2, [r3, #32]
 8002aa8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002aaa:	1ad2      	subs	r2, r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	621a      	str	r2, [r3, #32]
 8002ab0:	e015      	b.n	8002ade <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d107      	bne.n	8002aca <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8002aba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002abe:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002ac8:	e009      	b.n	8002ade <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	785b      	ldrb	r3, [r3, #1]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d15f      	bne.n	8002bac <HAL_PCD_EP_DB_Transmit+0x7d8>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b00:	4413      	add	r3, r2
 8002b02:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	00da      	lsls	r2, r3, #3
 8002b0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002b12:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b22:	801a      	strh	r2, [r3, #0]
 8002b24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10a      	bne.n	8002b40 <HAL_PCD_EP_DB_Transmit+0x76c>
 8002b2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b3c:	801a      	strh	r2, [r3, #0]
 8002b3e:	e04e      	b.n	8002bde <HAL_PCD_EP_DB_Transmit+0x80a>
 8002b40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b42:	2b3e      	cmp	r3, #62	@ 0x3e
 8002b44:	d816      	bhi.n	8002b74 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8002b46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b48:	085b      	lsrs	r3, r3, #1
 8002b4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <HAL_PCD_EP_DB_Transmit+0x788>
 8002b56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b58:	3301      	adds	r3, #1
 8002b5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	029b      	lsls	r3, r3, #10
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b70:	801a      	strh	r2, [r3, #0]
 8002b72:	e034      	b.n	8002bde <HAL_PCD_EP_DB_Transmit+0x80a>
 8002b74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b7c:	f003 031f 	and.w	r3, r3, #31
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d102      	bne.n	8002b8a <HAL_PCD_EP_DB_Transmit+0x7b6>
 8002b84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b86:	3b01      	subs	r3, #1
 8002b88:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	029b      	lsls	r3, r3, #10
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ba8:	801a      	strh	r2, [r3, #0]
 8002baa:	e018      	b.n	8002bde <HAL_PCD_EP_DB_Transmit+0x80a>
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	785b      	ldrb	r3, [r3, #1]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d114      	bne.n	8002bde <HAL_PCD_EP_DB_Transmit+0x80a>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bc2:	4413      	add	r3, r2
 8002bc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	00da      	lsls	r2, r3, #3
 8002bcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bce:	4413      	add	r3, r2
 8002bd0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002bd4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002bd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bdc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6818      	ldr	r0, [r3, #0]
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	6959      	ldr	r1, [r3, #20]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	895a      	ldrh	r2, [r3, #10]
 8002bea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	f004 fa0e 	bl	800700e <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c0c:	82fb      	strh	r3, [r7, #22]
 8002c0e:	8afb      	ldrh	r3, [r7, #22]
 8002c10:	f083 0310 	eor.w	r3, r3, #16
 8002c14:	82fb      	strh	r3, [r7, #22]
 8002c16:	8afb      	ldrh	r3, [r7, #22]
 8002c18:	f083 0320 	eor.w	r3, r3, #32
 8002c1c:	82fb      	strh	r3, [r7, #22]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	441a      	add	r2, r3
 8002c2c:	8afb      	ldrh	r3, [r7, #22]
 8002c2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3798      	adds	r7, #152	@ 0x98
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	607b      	str	r3, [r7, #4]
 8002c56:	460b      	mov	r3, r1
 8002c58:	817b      	strh	r3, [r7, #10]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c5e:	897b      	ldrh	r3, [r7, #10]
 8002c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00b      	beq.n	8002c82 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c6a:	897b      	ldrh	r3, [r7, #10]
 8002c6c:	f003 0207 	and.w	r2, r3, #7
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	3310      	adds	r3, #16
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	e009      	b.n	8002c96 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c82:	897a      	ldrh	r2, [r7, #10]
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4413      	add	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c96:	893b      	ldrh	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d107      	bne.n	8002cac <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	80da      	strh	r2, [r3, #6]
 8002caa:	e00b      	b.n	8002cc4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	0c1b      	lsrs	r3, r3, #16
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	371c      	adds	r7, #28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b085      	sub	sp, #20
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	f043 0302 	orr.w	r3, r3, #2
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
	...

08002d28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d141      	bne.n	8002dba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d36:	4b4b      	ldr	r3, [pc, #300]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d42:	d131      	bne.n	8002da8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d44:	4b47      	ldr	r3, [pc, #284]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d4a:	4a46      	ldr	r2, [pc, #280]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d54:	4b43      	ldr	r3, [pc, #268]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d5c:	4a41      	ldr	r2, [pc, #260]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d64:	4b40      	ldr	r3, [pc, #256]	@ (8002e68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2232      	movs	r2, #50	@ 0x32
 8002d6a:	fb02 f303 	mul.w	r3, r2, r3
 8002d6e:	4a3f      	ldr	r2, [pc, #252]	@ (8002e6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d70:	fba2 2303 	umull	r2, r3, r2, r3
 8002d74:	0c9b      	lsrs	r3, r3, #18
 8002d76:	3301      	adds	r3, #1
 8002d78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d7a:	e002      	b.n	8002d82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d82:	4b38      	ldr	r3, [pc, #224]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d8e:	d102      	bne.n	8002d96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f2      	bne.n	8002d7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d96:	4b33      	ldr	r3, [pc, #204]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002da2:	d158      	bne.n	8002e56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e057      	b.n	8002e58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002da8:	4b2e      	ldr	r3, [pc, #184]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dae:	4a2d      	ldr	r2, [pc, #180]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002db4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002db8:	e04d      	b.n	8002e56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dc0:	d141      	bne.n	8002e46 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dc2:	4b28      	ldr	r3, [pc, #160]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002dca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dce:	d131      	bne.n	8002e34 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dd0:	4b24      	ldr	r3, [pc, #144]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dd6:	4a23      	ldr	r2, [pc, #140]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ddc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002de0:	4b20      	ldr	r3, [pc, #128]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002de8:	4a1e      	ldr	r2, [pc, #120]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002df0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2232      	movs	r2, #50	@ 0x32
 8002df6:	fb02 f303 	mul.w	r3, r2, r3
 8002dfa:	4a1c      	ldr	r2, [pc, #112]	@ (8002e6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	0c9b      	lsrs	r3, r3, #18
 8002e02:	3301      	adds	r3, #1
 8002e04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e06:	e002      	b.n	8002e0e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e0e:	4b15      	ldr	r3, [pc, #84]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e1a:	d102      	bne.n	8002e22 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f2      	bne.n	8002e08 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e22:	4b10      	ldr	r3, [pc, #64]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e2e:	d112      	bne.n	8002e56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e011      	b.n	8002e58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e34:	4b0b      	ldr	r3, [pc, #44]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002e44:	e007      	b.n	8002e56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e46:	4b07      	ldr	r3, [pc, #28]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e4e:	4a05      	ldr	r2, [pc, #20]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e50:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e54:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	40007000 	.word	0x40007000
 8002e68:	20000000 	.word	0x20000000
 8002e6c:	431bde83 	.word	0x431bde83

08002e70 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002e74:	4b05      	ldr	r3, [pc, #20]	@ (8002e8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	4a04      	ldr	r2, [pc, #16]	@ (8002e8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002e7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e7e:	6093      	str	r3, [r2, #8]
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40007000 	.word	0x40007000

08002e90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e2fe      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d075      	beq.n	8002f9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eae:	4b97      	ldr	r3, [pc, #604]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eb8:	4b94      	ldr	r3, [pc, #592]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	2b0c      	cmp	r3, #12
 8002ec6:	d102      	bne.n	8002ece <HAL_RCC_OscConfig+0x3e>
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d002      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x44>
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d10b      	bne.n	8002eec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed4:	4b8d      	ldr	r3, [pc, #564]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d05b      	beq.n	8002f98 <HAL_RCC_OscConfig+0x108>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d157      	bne.n	8002f98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e2d9      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ef4:	d106      	bne.n	8002f04 <HAL_RCC_OscConfig+0x74>
 8002ef6:	4b85      	ldr	r3, [pc, #532]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a84      	ldr	r2, [pc, #528]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	e01d      	b.n	8002f40 <HAL_RCC_OscConfig+0xb0>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f0c:	d10c      	bne.n	8002f28 <HAL_RCC_OscConfig+0x98>
 8002f0e:	4b7f      	ldr	r3, [pc, #508]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a7e      	ldr	r2, [pc, #504]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002f14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	4b7c      	ldr	r3, [pc, #496]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a7b      	ldr	r2, [pc, #492]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	e00b      	b.n	8002f40 <HAL_RCC_OscConfig+0xb0>
 8002f28:	4b78      	ldr	r3, [pc, #480]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a77      	ldr	r2, [pc, #476]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	4b75      	ldr	r3, [pc, #468]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a74      	ldr	r2, [pc, #464]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002f3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d013      	beq.n	8002f70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fd fe04 	bl	8000b54 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f50:	f7fd fe00 	bl	8000b54 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b64      	cmp	r3, #100	@ 0x64
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e29e      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f62:	4b6a      	ldr	r3, [pc, #424]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0xc0>
 8002f6e:	e014      	b.n	8002f9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f70:	f7fd fdf0 	bl	8000b54 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f78:	f7fd fdec 	bl	8000b54 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	@ 0x64
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e28a      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f8a:	4b60      	ldr	r3, [pc, #384]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f0      	bne.n	8002f78 <HAL_RCC_OscConfig+0xe8>
 8002f96:	e000      	b.n	8002f9a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d075      	beq.n	8003092 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fa6:	4b59      	ldr	r3, [pc, #356]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 030c 	and.w	r3, r3, #12
 8002fae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fb0:	4b56      	ldr	r3, [pc, #344]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	2b0c      	cmp	r3, #12
 8002fbe:	d102      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x136>
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d002      	beq.n	8002fcc <HAL_RCC_OscConfig+0x13c>
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d11f      	bne.n	800300c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fcc:	4b4f      	ldr	r3, [pc, #316]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x154>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e25d      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe4:	4b49      	ldr	r3, [pc, #292]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	061b      	lsls	r3, r3, #24
 8002ff2:	4946      	ldr	r1, [pc, #280]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ff8:	4b45      	ldr	r3, [pc, #276]	@ (8003110 <HAL_RCC_OscConfig+0x280>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7fd fd5d 	bl	8000abc <HAL_InitTick>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d043      	beq.n	8003090 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e249      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d023      	beq.n	800305c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003014:	4b3d      	ldr	r3, [pc, #244]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a3c      	ldr	r2, [pc, #240]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 800301a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800301e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003020:	f7fd fd98 	bl	8000b54 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003028:	f7fd fd94 	bl	8000b54 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e232      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800303a:	4b34      	ldr	r3, [pc, #208]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0f0      	beq.n	8003028 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003046:	4b31      	ldr	r3, [pc, #196]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	061b      	lsls	r3, r3, #24
 8003054:	492d      	ldr	r1, [pc, #180]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8003056:	4313      	orrs	r3, r2
 8003058:	604b      	str	r3, [r1, #4]
 800305a:	e01a      	b.n	8003092 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305c:	4b2b      	ldr	r3, [pc, #172]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a2a      	ldr	r2, [pc, #168]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8003062:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fd fd74 	bl	8000b54 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003070:	f7fd fd70 	bl	8000b54 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e20e      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003082:	4b22      	ldr	r3, [pc, #136]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x1e0>
 800308e:	e000      	b.n	8003092 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003090:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d041      	beq.n	8003122 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d01c      	beq.n	80030e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a6:	4b19      	ldr	r3, [pc, #100]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 80030a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ac:	4a17      	ldr	r2, [pc, #92]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 80030ae:	f043 0301 	orr.w	r3, r3, #1
 80030b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b6:	f7fd fd4d 	bl	8000b54 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030be:	f7fd fd49 	bl	8000b54 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e1e7      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030d0:	4b0e      	ldr	r3, [pc, #56]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 80030d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0ef      	beq.n	80030be <HAL_RCC_OscConfig+0x22e>
 80030de:	e020      	b.n	8003122 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e0:	4b0a      	ldr	r3, [pc, #40]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 80030e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030e6:	4a09      	ldr	r2, [pc, #36]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f0:	f7fd fd30 	bl	8000b54 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030f6:	e00d      	b.n	8003114 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f8:	f7fd fd2c 	bl	8000b54 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d906      	bls.n	8003114 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e1ca      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
 800310a:	bf00      	nop
 800310c:	40021000 	.word	0x40021000
 8003110:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003114:	4b8c      	ldr	r3, [pc, #560]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 8003116:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1ea      	bne.n	80030f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 80a6 	beq.w	800327c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003130:	2300      	movs	r3, #0
 8003132:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003134:	4b84      	ldr	r3, [pc, #528]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 8003136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003138:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_RCC_OscConfig+0x2b4>
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <HAL_RCC_OscConfig+0x2b6>
 8003144:	2300      	movs	r3, #0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00d      	beq.n	8003166 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800314a:	4b7f      	ldr	r3, [pc, #508]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 800314c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314e:	4a7e      	ldr	r2, [pc, #504]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 8003150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003154:	6593      	str	r3, [r2, #88]	@ 0x58
 8003156:	4b7c      	ldr	r3, [pc, #496]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 8003158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003162:	2301      	movs	r3, #1
 8003164:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003166:	4b79      	ldr	r3, [pc, #484]	@ (800334c <HAL_RCC_OscConfig+0x4bc>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316e:	2b00      	cmp	r3, #0
 8003170:	d118      	bne.n	80031a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003172:	4b76      	ldr	r3, [pc, #472]	@ (800334c <HAL_RCC_OscConfig+0x4bc>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a75      	ldr	r2, [pc, #468]	@ (800334c <HAL_RCC_OscConfig+0x4bc>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800317c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317e:	f7fd fce9 	bl	8000b54 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003186:	f7fd fce5 	bl	8000b54 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e183      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003198:	4b6c      	ldr	r3, [pc, #432]	@ (800334c <HAL_RCC_OscConfig+0x4bc>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d108      	bne.n	80031be <HAL_RCC_OscConfig+0x32e>
 80031ac:	4b66      	ldr	r3, [pc, #408]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b2:	4a65      	ldr	r2, [pc, #404]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031bc:	e024      	b.n	8003208 <HAL_RCC_OscConfig+0x378>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	2b05      	cmp	r3, #5
 80031c4:	d110      	bne.n	80031e8 <HAL_RCC_OscConfig+0x358>
 80031c6:	4b60      	ldr	r3, [pc, #384]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 80031c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031cc:	4a5e      	ldr	r2, [pc, #376]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 80031ce:	f043 0304 	orr.w	r3, r3, #4
 80031d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031d6:	4b5c      	ldr	r3, [pc, #368]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 80031d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031dc:	4a5a      	ldr	r2, [pc, #360]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031e6:	e00f      	b.n	8003208 <HAL_RCC_OscConfig+0x378>
 80031e8:	4b57      	ldr	r3, [pc, #348]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 80031ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ee:	4a56      	ldr	r2, [pc, #344]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 80031f0:	f023 0301 	bic.w	r3, r3, #1
 80031f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031f8:	4b53      	ldr	r3, [pc, #332]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 80031fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031fe:	4a52      	ldr	r2, [pc, #328]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 8003200:	f023 0304 	bic.w	r3, r3, #4
 8003204:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d016      	beq.n	800323e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003210:	f7fd fca0 	bl	8000b54 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003216:	e00a      	b.n	800322e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003218:	f7fd fc9c 	bl	8000b54 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003226:	4293      	cmp	r3, r2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e138      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800322e:	4b46      	ldr	r3, [pc, #280]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 8003230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0ed      	beq.n	8003218 <HAL_RCC_OscConfig+0x388>
 800323c:	e015      	b.n	800326a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323e:	f7fd fc89 	bl	8000b54 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003244:	e00a      	b.n	800325c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003246:	f7fd fc85 	bl	8000b54 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003254:	4293      	cmp	r3, r2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e121      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800325c:	4b3a      	ldr	r3, [pc, #232]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1ed      	bne.n	8003246 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800326a:	7ffb      	ldrb	r3, [r7, #31]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d105      	bne.n	800327c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003270:	4b35      	ldr	r3, [pc, #212]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 8003272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003274:	4a34      	ldr	r2, [pc, #208]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 8003276:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800327a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	2b00      	cmp	r3, #0
 8003286:	d03c      	beq.n	8003302 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d01c      	beq.n	80032ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003290:	4b2d      	ldr	r3, [pc, #180]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 8003292:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003296:	4a2c      	ldr	r2, [pc, #176]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a0:	f7fd fc58 	bl	8000b54 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032a8:	f7fd fc54 	bl	8000b54 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e0f2      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032ba:	4b23      	ldr	r3, [pc, #140]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 80032bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0ef      	beq.n	80032a8 <HAL_RCC_OscConfig+0x418>
 80032c8:	e01b      	b.n	8003302 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 80032cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 80032d2:	f023 0301 	bic.w	r3, r3, #1
 80032d6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032da:	f7fd fc3b 	bl	8000b54 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032e2:	f7fd fc37 	bl	8000b54 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e0d5      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032f4:	4b14      	ldr	r3, [pc, #80]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 80032f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1ef      	bne.n	80032e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 80c9 	beq.w	800349e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800330c:	4b0e      	ldr	r3, [pc, #56]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 030c 	and.w	r3, r3, #12
 8003314:	2b0c      	cmp	r3, #12
 8003316:	f000 8083 	beq.w	8003420 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	2b02      	cmp	r3, #2
 8003320:	d15e      	bne.n	80033e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003322:	4b09      	ldr	r3, [pc, #36]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a08      	ldr	r2, [pc, #32]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 8003328:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800332c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332e:	f7fd fc11 	bl	8000b54 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003334:	e00c      	b.n	8003350 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003336:	f7fd fc0d 	bl	8000b54 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d905      	bls.n	8003350 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e0ab      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
 8003348:	40021000 	.word	0x40021000
 800334c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003350:	4b55      	ldr	r3, [pc, #340]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1ec      	bne.n	8003336 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800335c:	4b52      	ldr	r3, [pc, #328]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	4b52      	ldr	r3, [pc, #328]	@ (80034ac <HAL_RCC_OscConfig+0x61c>)
 8003362:	4013      	ands	r3, r2
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6a11      	ldr	r1, [r2, #32]
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800336c:	3a01      	subs	r2, #1
 800336e:	0112      	lsls	r2, r2, #4
 8003370:	4311      	orrs	r1, r2
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003376:	0212      	lsls	r2, r2, #8
 8003378:	4311      	orrs	r1, r2
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800337e:	0852      	lsrs	r2, r2, #1
 8003380:	3a01      	subs	r2, #1
 8003382:	0552      	lsls	r2, r2, #21
 8003384:	4311      	orrs	r1, r2
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800338a:	0852      	lsrs	r2, r2, #1
 800338c:	3a01      	subs	r2, #1
 800338e:	0652      	lsls	r2, r2, #25
 8003390:	4311      	orrs	r1, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003396:	06d2      	lsls	r2, r2, #27
 8003398:	430a      	orrs	r2, r1
 800339a:	4943      	ldr	r1, [pc, #268]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 800339c:	4313      	orrs	r3, r2
 800339e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033a0:	4b41      	ldr	r3, [pc, #260]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a40      	ldr	r2, [pc, #256]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 80033a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033ac:	4b3e      	ldr	r3, [pc, #248]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	4a3d      	ldr	r2, [pc, #244]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 80033b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fd fbcc 	bl	8000b54 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c0:	f7fd fbc8 	bl	8000b54 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e066      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033d2:	4b35      	ldr	r3, [pc, #212]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x530>
 80033de:	e05e      	b.n	800349e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e0:	4b31      	ldr	r3, [pc, #196]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a30      	ldr	r2, [pc, #192]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 80033e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7fd fbb2 	bl	8000b54 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f4:	f7fd fbae 	bl	8000b54 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e04c      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003406:	4b28      	ldr	r3, [pc, #160]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003412:	4b25      	ldr	r3, [pc, #148]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	4924      	ldr	r1, [pc, #144]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 8003418:	4b25      	ldr	r3, [pc, #148]	@ (80034b0 <HAL_RCC_OscConfig+0x620>)
 800341a:	4013      	ands	r3, r2
 800341c:	60cb      	str	r3, [r1, #12]
 800341e:	e03e      	b.n	800349e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e039      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800342c:	4b1e      	ldr	r3, [pc, #120]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f003 0203 	and.w	r2, r3, #3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	429a      	cmp	r2, r3
 800343e:	d12c      	bne.n	800349a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344a:	3b01      	subs	r3, #1
 800344c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800344e:	429a      	cmp	r2, r3
 8003450:	d123      	bne.n	800349a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800345e:	429a      	cmp	r2, r3
 8003460:	d11b      	bne.n	800349a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800346e:	429a      	cmp	r2, r3
 8003470:	d113      	bne.n	800349a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347c:	085b      	lsrs	r3, r3, #1
 800347e:	3b01      	subs	r3, #1
 8003480:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003482:	429a      	cmp	r2, r3
 8003484:	d109      	bne.n	800349a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003490:	085b      	lsrs	r3, r3, #1
 8003492:	3b01      	subs	r3, #1
 8003494:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003496:	429a      	cmp	r2, r3
 8003498:	d001      	beq.n	800349e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3720      	adds	r7, #32
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40021000 	.word	0x40021000
 80034ac:	019f800c 	.word	0x019f800c
 80034b0:	feeefffc 	.word	0xfeeefffc

080034b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e11e      	b.n	800370a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034cc:	4b91      	ldr	r3, [pc, #580]	@ (8003714 <HAL_RCC_ClockConfig+0x260>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 030f 	and.w	r3, r3, #15
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d910      	bls.n	80034fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034da:	4b8e      	ldr	r3, [pc, #568]	@ (8003714 <HAL_RCC_ClockConfig+0x260>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f023 020f 	bic.w	r2, r3, #15
 80034e2:	498c      	ldr	r1, [pc, #560]	@ (8003714 <HAL_RCC_ClockConfig+0x260>)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ea:	4b8a      	ldr	r3, [pc, #552]	@ (8003714 <HAL_RCC_ClockConfig+0x260>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d001      	beq.n	80034fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e106      	b.n	800370a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d073      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b03      	cmp	r3, #3
 800350e:	d129      	bne.n	8003564 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003510:	4b81      	ldr	r3, [pc, #516]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0f4      	b.n	800370a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003520:	f000 f966 	bl	80037f0 <RCC_GetSysClockFreqFromPLLSource>
 8003524:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	4a7c      	ldr	r2, [pc, #496]	@ (800371c <HAL_RCC_ClockConfig+0x268>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d93f      	bls.n	80035ae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800352e:	4b7a      	ldr	r3, [pc, #488]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d009      	beq.n	800354e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003542:	2b00      	cmp	r3, #0
 8003544:	d033      	beq.n	80035ae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800354a:	2b00      	cmp	r3, #0
 800354c:	d12f      	bne.n	80035ae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800354e:	4b72      	ldr	r3, [pc, #456]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003556:	4a70      	ldr	r2, [pc, #448]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 8003558:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800355c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800355e:	2380      	movs	r3, #128	@ 0x80
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	e024      	b.n	80035ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b02      	cmp	r3, #2
 800356a:	d107      	bne.n	800357c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800356c:	4b6a      	ldr	r3, [pc, #424]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d109      	bne.n	800358c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0c6      	b.n	800370a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800357c:	4b66      	ldr	r3, [pc, #408]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0be      	b.n	800370a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800358c:	f000 f8ce 	bl	800372c <HAL_RCC_GetSysClockFreq>
 8003590:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	4a61      	ldr	r2, [pc, #388]	@ (800371c <HAL_RCC_ClockConfig+0x268>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d909      	bls.n	80035ae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800359a:	4b5f      	ldr	r3, [pc, #380]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035a2:	4a5d      	ldr	r2, [pc, #372]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 80035a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80035aa:	2380      	movs	r3, #128	@ 0x80
 80035ac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035ae:	4b5a      	ldr	r3, [pc, #360]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f023 0203 	bic.w	r2, r3, #3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4957      	ldr	r1, [pc, #348]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c0:	f7fd fac8 	bl	8000b54 <HAL_GetTick>
 80035c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c6:	e00a      	b.n	80035de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c8:	f7fd fac4 	bl	8000b54 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e095      	b.n	800370a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035de:	4b4e      	ldr	r3, [pc, #312]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 020c 	and.w	r2, r3, #12
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d1eb      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d023      	beq.n	8003644 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003608:	4b43      	ldr	r3, [pc, #268]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	4a42      	ldr	r2, [pc, #264]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 800360e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003612:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	2b00      	cmp	r3, #0
 800361e:	d007      	beq.n	8003630 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003620:	4b3d      	ldr	r3, [pc, #244]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003628:	4a3b      	ldr	r2, [pc, #236]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 800362a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800362e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003630:	4b39      	ldr	r3, [pc, #228]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	4936      	ldr	r1, [pc, #216]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 800363e:	4313      	orrs	r3, r2
 8003640:	608b      	str	r3, [r1, #8]
 8003642:	e008      	b.n	8003656 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	2b80      	cmp	r3, #128	@ 0x80
 8003648:	d105      	bne.n	8003656 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800364a:	4b33      	ldr	r3, [pc, #204]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	4a32      	ldr	r2, [pc, #200]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 8003650:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003654:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003656:	4b2f      	ldr	r3, [pc, #188]	@ (8003714 <HAL_RCC_ClockConfig+0x260>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d21d      	bcs.n	80036a0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003664:	4b2b      	ldr	r3, [pc, #172]	@ (8003714 <HAL_RCC_ClockConfig+0x260>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f023 020f 	bic.w	r2, r3, #15
 800366c:	4929      	ldr	r1, [pc, #164]	@ (8003714 <HAL_RCC_ClockConfig+0x260>)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	4313      	orrs	r3, r2
 8003672:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003674:	f7fd fa6e 	bl	8000b54 <HAL_GetTick>
 8003678:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800367a:	e00a      	b.n	8003692 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800367c:	f7fd fa6a 	bl	8000b54 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800368a:	4293      	cmp	r3, r2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e03b      	b.n	800370a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003692:	4b20      	ldr	r3, [pc, #128]	@ (8003714 <HAL_RCC_ClockConfig+0x260>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d1ed      	bne.n	800367c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	4917      	ldr	r1, [pc, #92]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d009      	beq.n	80036de <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ca:	4b13      	ldr	r3, [pc, #76]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	490f      	ldr	r1, [pc, #60]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036de:	f000 f825 	bl	800372c <HAL_RCC_GetSysClockFreq>
 80036e2:	4602      	mov	r2, r0
 80036e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	091b      	lsrs	r3, r3, #4
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	490c      	ldr	r1, [pc, #48]	@ (8003720 <HAL_RCC_ClockConfig+0x26c>)
 80036f0:	5ccb      	ldrb	r3, [r1, r3]
 80036f2:	f003 031f 	and.w	r3, r3, #31
 80036f6:	fa22 f303 	lsr.w	r3, r2, r3
 80036fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003724 <HAL_RCC_ClockConfig+0x270>)
 80036fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80036fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003728 <HAL_RCC_ClockConfig+0x274>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f7fd f9da 	bl	8000abc <HAL_InitTick>
 8003708:	4603      	mov	r3, r0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40022000 	.word	0x40022000
 8003718:	40021000 	.word	0x40021000
 800371c:	04c4b400 	.word	0x04c4b400
 8003720:	080093d8 	.word	0x080093d8
 8003724:	20000000 	.word	0x20000000
 8003728:	20000004 	.word	0x20000004

0800372c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003732:	4b2c      	ldr	r3, [pc, #176]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 030c 	and.w	r3, r3, #12
 800373a:	2b04      	cmp	r3, #4
 800373c:	d102      	bne.n	8003744 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800373e:	4b2a      	ldr	r3, [pc, #168]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	e047      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003744:	4b27      	ldr	r3, [pc, #156]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 030c 	and.w	r3, r3, #12
 800374c:	2b08      	cmp	r3, #8
 800374e:	d102      	bne.n	8003756 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003750:	4b26      	ldr	r3, [pc, #152]	@ (80037ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	e03e      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003756:	4b23      	ldr	r3, [pc, #140]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	2b0c      	cmp	r3, #12
 8003760:	d136      	bne.n	80037d0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003762:	4b20      	ldr	r3, [pc, #128]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800376c:	4b1d      	ldr	r3, [pc, #116]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	3301      	adds	r3, #1
 8003778:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b03      	cmp	r3, #3
 800377e:	d10c      	bne.n	800379a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003780:	4a1a      	ldr	r2, [pc, #104]	@ (80037ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	4a16      	ldr	r2, [pc, #88]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800378a:	68d2      	ldr	r2, [r2, #12]
 800378c:	0a12      	lsrs	r2, r2, #8
 800378e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003792:	fb02 f303 	mul.w	r3, r2, r3
 8003796:	617b      	str	r3, [r7, #20]
      break;
 8003798:	e00c      	b.n	80037b4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800379a:	4a13      	ldr	r2, [pc, #76]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a2:	4a10      	ldr	r2, [pc, #64]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037a4:	68d2      	ldr	r2, [r2, #12]
 80037a6:	0a12      	lsrs	r2, r2, #8
 80037a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80037ac:	fb02 f303 	mul.w	r3, r2, r3
 80037b0:	617b      	str	r3, [r7, #20]
      break;
 80037b2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037b4:	4b0b      	ldr	r3, [pc, #44]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	0e5b      	lsrs	r3, r3, #25
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	3301      	adds	r3, #1
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	e001      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80037d4:	693b      	ldr	r3, [r7, #16]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40021000 	.word	0x40021000
 80037e8:	00f42400 	.word	0x00f42400
 80037ec:	016e3600 	.word	0x016e3600

080037f0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003870 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003800:	4b1b      	ldr	r3, [pc, #108]	@ (8003870 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	091b      	lsrs	r3, r3, #4
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	3301      	adds	r3, #1
 800380c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	2b03      	cmp	r3, #3
 8003812:	d10c      	bne.n	800382e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003814:	4a17      	ldr	r2, [pc, #92]	@ (8003874 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	fbb2 f3f3 	udiv	r3, r2, r3
 800381c:	4a14      	ldr	r2, [pc, #80]	@ (8003870 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800381e:	68d2      	ldr	r2, [r2, #12]
 8003820:	0a12      	lsrs	r2, r2, #8
 8003822:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003826:	fb02 f303 	mul.w	r3, r2, r3
 800382a:	617b      	str	r3, [r7, #20]
    break;
 800382c:	e00c      	b.n	8003848 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800382e:	4a12      	ldr	r2, [pc, #72]	@ (8003878 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	fbb2 f3f3 	udiv	r3, r2, r3
 8003836:	4a0e      	ldr	r2, [pc, #56]	@ (8003870 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003838:	68d2      	ldr	r2, [r2, #12]
 800383a:	0a12      	lsrs	r2, r2, #8
 800383c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003840:	fb02 f303 	mul.w	r3, r2, r3
 8003844:	617b      	str	r3, [r7, #20]
    break;
 8003846:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003848:	4b09      	ldr	r3, [pc, #36]	@ (8003870 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	0e5b      	lsrs	r3, r3, #25
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	3301      	adds	r3, #1
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003860:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003862:	687b      	ldr	r3, [r7, #4]
}
 8003864:	4618      	mov	r0, r3
 8003866:	371c      	adds	r7, #28
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	40021000 	.word	0x40021000
 8003874:	016e3600 	.word	0x016e3600
 8003878:	00f42400 	.word	0x00f42400

0800387c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003884:	2300      	movs	r3, #0
 8003886:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003888:	2300      	movs	r3, #0
 800388a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 8098 	beq.w	80039ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800389a:	2300      	movs	r3, #0
 800389c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800389e:	4b43      	ldr	r3, [pc, #268]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10d      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038aa:	4b40      	ldr	r3, [pc, #256]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ae:	4a3f      	ldr	r2, [pc, #252]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80038b6:	4b3d      	ldr	r3, [pc, #244]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038be:	60bb      	str	r3, [r7, #8]
 80038c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038c2:	2301      	movs	r3, #1
 80038c4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038c6:	4b3a      	ldr	r3, [pc, #232]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a39      	ldr	r2, [pc, #228]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038d2:	f7fd f93f 	bl	8000b54 <HAL_GetTick>
 80038d6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038d8:	e009      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038da:	f7fd f93b 	bl	8000b54 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d902      	bls.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	74fb      	strb	r3, [r7, #19]
        break;
 80038ec:	e005      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038ee:	4b30      	ldr	r3, [pc, #192]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0ef      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80038fa:	7cfb      	ldrb	r3, [r7, #19]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d159      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003900:	4b2a      	ldr	r3, [pc, #168]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003906:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800390a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d01e      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	429a      	cmp	r2, r3
 800391a:	d019      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800391c:	4b23      	ldr	r3, [pc, #140]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800391e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003922:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003926:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003928:	4b20      	ldr	r3, [pc, #128]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800392a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800392e:	4a1f      	ldr	r2, [pc, #124]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003934:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003938:	4b1c      	ldr	r3, [pc, #112]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800393e:	4a1b      	ldr	r2, [pc, #108]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003940:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003944:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003948:	4a18      	ldr	r2, [pc, #96]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d016      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395a:	f7fd f8fb 	bl	8000b54 <HAL_GetTick>
 800395e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003960:	e00b      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003962:	f7fd f8f7 	bl	8000b54 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003970:	4293      	cmp	r3, r2
 8003972:	d902      	bls.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	74fb      	strb	r3, [r7, #19]
            break;
 8003978:	e006      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800397a:	4b0c      	ldr	r3, [pc, #48]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800397c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0ec      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003988:	7cfb      	ldrb	r3, [r7, #19]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10b      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800398e:	4b07      	ldr	r3, [pc, #28]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003990:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003994:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800399c:	4903      	ldr	r1, [pc, #12]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80039a4:	e008      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039a6:	7cfb      	ldrb	r3, [r7, #19]
 80039a8:	74bb      	strb	r3, [r7, #18]
 80039aa:	e005      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b4:	7cfb      	ldrb	r3, [r7, #19]
 80039b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039b8:	7c7b      	ldrb	r3, [r7, #17]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d105      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039be:	4ba7      	ldr	r3, [pc, #668]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c2:	4aa6      	ldr	r2, [pc, #664]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039d6:	4ba1      	ldr	r3, [pc, #644]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039dc:	f023 0203 	bic.w	r2, r3, #3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	499d      	ldr	r1, [pc, #628]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039f8:	4b98      	ldr	r3, [pc, #608]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039fe:	f023 020c 	bic.w	r2, r3, #12
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	4995      	ldr	r1, [pc, #596]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a1a:	4b90      	ldr	r3, [pc, #576]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a20:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	498c      	ldr	r1, [pc, #560]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a3c:	4b87      	ldr	r3, [pc, #540]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a42:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	4984      	ldr	r1, [pc, #528]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a5e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	497b      	ldr	r1, [pc, #492]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0320 	and.w	r3, r3, #32
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a80:	4b76      	ldr	r3, [pc, #472]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a86:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	4973      	ldr	r1, [pc, #460]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003aa2:	4b6e      	ldr	r3, [pc, #440]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	496a      	ldr	r1, [pc, #424]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ac4:	4b65      	ldr	r3, [pc, #404]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	4962      	ldr	r1, [pc, #392]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ae6:	4b5d      	ldr	r3, [pc, #372]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	4959      	ldr	r1, [pc, #356]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b08:	4b54      	ldr	r3, [pc, #336]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b0e:	f023 0203 	bic.w	r2, r3, #3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b16:	4951      	ldr	r1, [pc, #324]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b2a:	4b4c      	ldr	r3, [pc, #304]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b30:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b38:	4948      	ldr	r1, [pc, #288]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d015      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b4c:	4b43      	ldr	r3, [pc, #268]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5a:	4940      	ldr	r1, [pc, #256]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b6a:	d105      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b6c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	4a3a      	ldr	r2, [pc, #232]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b76:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d015      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b84:	4b35      	ldr	r3, [pc, #212]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b8a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b92:	4932      	ldr	r1, [pc, #200]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ba2:	d105      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ba4:	4b2d      	ldr	r3, [pc, #180]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	4a2c      	ldr	r2, [pc, #176]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003baa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bae:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d015      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003bbc:	4b27      	ldr	r3, [pc, #156]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bca:	4924      	ldr	r1, [pc, #144]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bda:	d105      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	4a1e      	ldr	r2, [pc, #120]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003be2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003be6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d015      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bf4:	4b19      	ldr	r3, [pc, #100]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bfa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c02:	4916      	ldr	r1, [pc, #88]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c12:	d105      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c14:	4b11      	ldr	r3, [pc, #68]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	4a10      	ldr	r2, [pc, #64]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c1e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d019      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c32:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3a:	4908      	ldr	r1, [pc, #32]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c4a:	d109      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c4c:	4b03      	ldr	r3, [pc, #12]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	4a02      	ldr	r2, [pc, #8]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c56:	60d3      	str	r3, [r2, #12]
 8003c58:	e002      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003c5a:	bf00      	nop
 8003c5c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d015      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c6c:	4b29      	ldr	r3, [pc, #164]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c72:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7a:	4926      	ldr	r1, [pc, #152]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c8a:	d105      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c8c:	4b21      	ldr	r3, [pc, #132]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	4a20      	ldr	r2, [pc, #128]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c96:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d015      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003caa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cb2:	4918      	ldr	r1, [pc, #96]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cc2:	d105      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003cc4:	4b13      	ldr	r3, [pc, #76]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	4a12      	ldr	r2, [pc, #72]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cce:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d015      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ce2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cea:	490a      	ldr	r1, [pc, #40]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cfa:	d105      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cfc:	4b05      	ldr	r3, [pc, #20]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	4a04      	ldr	r2, [pc, #16]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d06:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003d08:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40021000 	.word	0x40021000

08003d18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e049      	b.n	8003dbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d106      	bne.n	8003d44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7fc fd9a 	bl	8000878 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3304      	adds	r3, #4
 8003d54:	4619      	mov	r1, r3
 8003d56:	4610      	mov	r0, r2
 8003d58:	f000 fc38 	bl	80045cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e049      	b.n	8003e6c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d106      	bne.n	8003df2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f841 	bl	8003e74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2202      	movs	r2, #2
 8003df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3304      	adds	r3, #4
 8003e02:	4619      	mov	r1, r3
 8003e04:	4610      	mov	r0, r2
 8003e06:	f000 fbe1 	bl	80045cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d020      	beq.n	8003eec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d01b      	beq.n	8003eec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0202 	mvn.w	r2, #2
 8003ebc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fb5c 	bl	8004590 <HAL_TIM_IC_CaptureCallback>
 8003ed8:	e005      	b.n	8003ee6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 fb4e 	bl	800457c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fb5f 	bl	80045a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	f003 0304 	and.w	r3, r3, #4
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d020      	beq.n	8003f38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d01b      	beq.n	8003f38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f06f 0204 	mvn.w	r2, #4
 8003f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fb36 	bl	8004590 <HAL_TIM_IC_CaptureCallback>
 8003f24:	e005      	b.n	8003f32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 fb28 	bl	800457c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 fb39 	bl	80045a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d020      	beq.n	8003f84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f003 0308 	and.w	r3, r3, #8
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d01b      	beq.n	8003f84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f06f 0208 	mvn.w	r2, #8
 8003f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2204      	movs	r2, #4
 8003f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fb10 	bl	8004590 <HAL_TIM_IC_CaptureCallback>
 8003f70:	e005      	b.n	8003f7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fb02 	bl	800457c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 fb13 	bl	80045a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d020      	beq.n	8003fd0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d01b      	beq.n	8003fd0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f06f 0210 	mvn.w	r2, #16
 8003fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2208      	movs	r2, #8
 8003fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 faea 	bl	8004590 <HAL_TIM_IC_CaptureCallback>
 8003fbc:	e005      	b.n	8003fca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fadc 	bl	800457c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 faed 	bl	80045a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00c      	beq.n	8003ff4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d007      	beq.n	8003ff4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f06f 0201 	mvn.w	r2, #1
 8003fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 faba 	bl	8004568 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d104      	bne.n	8004008 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00c      	beq.n	8004022 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800400e:	2b00      	cmp	r3, #0
 8004010:	d007      	beq.n	8004022 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800401a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f001 f9b1 	bl	8005384 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00c      	beq.n	8004046 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004032:	2b00      	cmp	r3, #0
 8004034:	d007      	beq.n	8004046 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800403e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f001 f9a9 	bl	8005398 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00c      	beq.n	800406a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004056:	2b00      	cmp	r3, #0
 8004058:	d007      	beq.n	800406a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 faa7 	bl	80045b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00c      	beq.n	800408e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 0320 	and.w	r3, r3, #32
 800407a:	2b00      	cmp	r3, #0
 800407c:	d007      	beq.n	800408e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f06f 0220 	mvn.w	r2, #32
 8004086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f001 f971 	bl	8005370 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00c      	beq.n	80040b2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d007      	beq.n	80040b2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80040aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f001 f97d 	bl	80053ac <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00c      	beq.n	80040d6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d007      	beq.n	80040d6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80040ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f001 f975 	bl	80053c0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00c      	beq.n	80040fa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d007      	beq.n	80040fa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80040f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f001 f96d 	bl	80053d4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00c      	beq.n	800411e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d007      	beq.n	800411e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f001 f965 	bl	80053e8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800411e:	bf00      	nop
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004142:	2302      	movs	r3, #2
 8004144:	e0ff      	b.n	8004346 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b14      	cmp	r3, #20
 8004152:	f200 80f0 	bhi.w	8004336 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004156:	a201      	add	r2, pc, #4	@ (adr r2, 800415c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415c:	080041b1 	.word	0x080041b1
 8004160:	08004337 	.word	0x08004337
 8004164:	08004337 	.word	0x08004337
 8004168:	08004337 	.word	0x08004337
 800416c:	080041f1 	.word	0x080041f1
 8004170:	08004337 	.word	0x08004337
 8004174:	08004337 	.word	0x08004337
 8004178:	08004337 	.word	0x08004337
 800417c:	08004233 	.word	0x08004233
 8004180:	08004337 	.word	0x08004337
 8004184:	08004337 	.word	0x08004337
 8004188:	08004337 	.word	0x08004337
 800418c:	08004273 	.word	0x08004273
 8004190:	08004337 	.word	0x08004337
 8004194:	08004337 	.word	0x08004337
 8004198:	08004337 	.word	0x08004337
 800419c:	080042b5 	.word	0x080042b5
 80041a0:	08004337 	.word	0x08004337
 80041a4:	08004337 	.word	0x08004337
 80041a8:	08004337 	.word	0x08004337
 80041ac:	080042f5 	.word	0x080042f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68b9      	ldr	r1, [r7, #8]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 fabc 	bl	8004734 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699a      	ldr	r2, [r3, #24]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0208 	orr.w	r2, r2, #8
 80041ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699a      	ldr	r2, [r3, #24]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0204 	bic.w	r2, r2, #4
 80041da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6999      	ldr	r1, [r3, #24]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	691a      	ldr	r2, [r3, #16]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	619a      	str	r2, [r3, #24]
      break;
 80041ee:	e0a5      	b.n	800433c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68b9      	ldr	r1, [r7, #8]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fb36 	bl	8004868 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800420a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699a      	ldr	r2, [r3, #24]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800421a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6999      	ldr	r1, [r3, #24]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	021a      	lsls	r2, r3, #8
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	619a      	str	r2, [r3, #24]
      break;
 8004230:	e084      	b.n	800433c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68b9      	ldr	r1, [r7, #8]
 8004238:	4618      	mov	r0, r3
 800423a:	f000 fba9 	bl	8004990 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69da      	ldr	r2, [r3, #28]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 0208 	orr.w	r2, r2, #8
 800424c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69da      	ldr	r2, [r3, #28]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0204 	bic.w	r2, r2, #4
 800425c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69d9      	ldr	r1, [r3, #28]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	61da      	str	r2, [r3, #28]
      break;
 8004270:	e064      	b.n	800433c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68b9      	ldr	r1, [r7, #8]
 8004278:	4618      	mov	r0, r3
 800427a:	f000 fc1b 	bl	8004ab4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69da      	ldr	r2, [r3, #28]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800428c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69da      	ldr	r2, [r3, #28]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800429c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	69d9      	ldr	r1, [r3, #28]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	021a      	lsls	r2, r3, #8
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	61da      	str	r2, [r3, #28]
      break;
 80042b2:	e043      	b.n	800433c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68b9      	ldr	r1, [r7, #8]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fc8e 	bl	8004bdc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0208 	orr.w	r2, r2, #8
 80042ce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0204 	bic.w	r2, r2, #4
 80042de:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	691a      	ldr	r2, [r3, #16]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80042f2:	e023      	b.n	800433c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68b9      	ldr	r1, [r7, #8]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 fcd8 	bl	8004cb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800430e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800431e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	021a      	lsls	r2, r3, #8
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004334:	e002      	b.n	800433c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	75fb      	strb	r3, [r7, #23]
      break;
 800433a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004344:	7dfb      	ldrb	r3, [r7, #23]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop

08004350 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_TIM_ConfigClockSource+0x1c>
 8004368:	2302      	movs	r3, #2
 800436a:	e0ee      	b.n	800454a <HAL_TIM_ConfigClockSource+0x1fa>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800438a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800438e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004396:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a6b      	ldr	r2, [pc, #428]	@ (8004554 <HAL_TIM_ConfigClockSource+0x204>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	f000 80b9 	beq.w	800451e <HAL_TIM_ConfigClockSource+0x1ce>
 80043ac:	4a69      	ldr	r2, [pc, #420]	@ (8004554 <HAL_TIM_ConfigClockSource+0x204>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	f200 80be 	bhi.w	8004530 <HAL_TIM_ConfigClockSource+0x1e0>
 80043b4:	4a68      	ldr	r2, [pc, #416]	@ (8004558 <HAL_TIM_ConfigClockSource+0x208>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	f000 80b1 	beq.w	800451e <HAL_TIM_ConfigClockSource+0x1ce>
 80043bc:	4a66      	ldr	r2, [pc, #408]	@ (8004558 <HAL_TIM_ConfigClockSource+0x208>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	f200 80b6 	bhi.w	8004530 <HAL_TIM_ConfigClockSource+0x1e0>
 80043c4:	4a65      	ldr	r2, [pc, #404]	@ (800455c <HAL_TIM_ConfigClockSource+0x20c>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	f000 80a9 	beq.w	800451e <HAL_TIM_ConfigClockSource+0x1ce>
 80043cc:	4a63      	ldr	r2, [pc, #396]	@ (800455c <HAL_TIM_ConfigClockSource+0x20c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	f200 80ae 	bhi.w	8004530 <HAL_TIM_ConfigClockSource+0x1e0>
 80043d4:	4a62      	ldr	r2, [pc, #392]	@ (8004560 <HAL_TIM_ConfigClockSource+0x210>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	f000 80a1 	beq.w	800451e <HAL_TIM_ConfigClockSource+0x1ce>
 80043dc:	4a60      	ldr	r2, [pc, #384]	@ (8004560 <HAL_TIM_ConfigClockSource+0x210>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	f200 80a6 	bhi.w	8004530 <HAL_TIM_ConfigClockSource+0x1e0>
 80043e4:	4a5f      	ldr	r2, [pc, #380]	@ (8004564 <HAL_TIM_ConfigClockSource+0x214>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	f000 8099 	beq.w	800451e <HAL_TIM_ConfigClockSource+0x1ce>
 80043ec:	4a5d      	ldr	r2, [pc, #372]	@ (8004564 <HAL_TIM_ConfigClockSource+0x214>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	f200 809e 	bhi.w	8004530 <HAL_TIM_ConfigClockSource+0x1e0>
 80043f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80043f8:	f000 8091 	beq.w	800451e <HAL_TIM_ConfigClockSource+0x1ce>
 80043fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004400:	f200 8096 	bhi.w	8004530 <HAL_TIM_ConfigClockSource+0x1e0>
 8004404:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004408:	f000 8089 	beq.w	800451e <HAL_TIM_ConfigClockSource+0x1ce>
 800440c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004410:	f200 808e 	bhi.w	8004530 <HAL_TIM_ConfigClockSource+0x1e0>
 8004414:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004418:	d03e      	beq.n	8004498 <HAL_TIM_ConfigClockSource+0x148>
 800441a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800441e:	f200 8087 	bhi.w	8004530 <HAL_TIM_ConfigClockSource+0x1e0>
 8004422:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004426:	f000 8086 	beq.w	8004536 <HAL_TIM_ConfigClockSource+0x1e6>
 800442a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800442e:	d87f      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x1e0>
 8004430:	2b70      	cmp	r3, #112	@ 0x70
 8004432:	d01a      	beq.n	800446a <HAL_TIM_ConfigClockSource+0x11a>
 8004434:	2b70      	cmp	r3, #112	@ 0x70
 8004436:	d87b      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x1e0>
 8004438:	2b60      	cmp	r3, #96	@ 0x60
 800443a:	d050      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x18e>
 800443c:	2b60      	cmp	r3, #96	@ 0x60
 800443e:	d877      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x1e0>
 8004440:	2b50      	cmp	r3, #80	@ 0x50
 8004442:	d03c      	beq.n	80044be <HAL_TIM_ConfigClockSource+0x16e>
 8004444:	2b50      	cmp	r3, #80	@ 0x50
 8004446:	d873      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x1e0>
 8004448:	2b40      	cmp	r3, #64	@ 0x40
 800444a:	d058      	beq.n	80044fe <HAL_TIM_ConfigClockSource+0x1ae>
 800444c:	2b40      	cmp	r3, #64	@ 0x40
 800444e:	d86f      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x1e0>
 8004450:	2b30      	cmp	r3, #48	@ 0x30
 8004452:	d064      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x1ce>
 8004454:	2b30      	cmp	r3, #48	@ 0x30
 8004456:	d86b      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x1e0>
 8004458:	2b20      	cmp	r3, #32
 800445a:	d060      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x1ce>
 800445c:	2b20      	cmp	r3, #32
 800445e:	d867      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x1e0>
 8004460:	2b00      	cmp	r3, #0
 8004462:	d05c      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x1ce>
 8004464:	2b10      	cmp	r3, #16
 8004466:	d05a      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x1ce>
 8004468:	e062      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800447a:	f000 fd75 	bl	8004f68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800448c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	609a      	str	r2, [r3, #8]
      break;
 8004496:	e04f      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044a8:	f000 fd5e 	bl	8004f68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044ba:	609a      	str	r2, [r3, #8]
      break;
 80044bc:	e03c      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ca:	461a      	mov	r2, r3
 80044cc:	f000 fcd0 	bl	8004e70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2150      	movs	r1, #80	@ 0x50
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fd29 	bl	8004f2e <TIM_ITRx_SetConfig>
      break;
 80044dc:	e02c      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044ea:	461a      	mov	r2, r3
 80044ec:	f000 fcef 	bl	8004ece <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2160      	movs	r1, #96	@ 0x60
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 fd19 	bl	8004f2e <TIM_ITRx_SetConfig>
      break;
 80044fc:	e01c      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800450a:	461a      	mov	r2, r3
 800450c:	f000 fcb0 	bl	8004e70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2140      	movs	r1, #64	@ 0x40
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fd09 	bl	8004f2e <TIM_ITRx_SetConfig>
      break;
 800451c:	e00c      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4619      	mov	r1, r3
 8004528:	4610      	mov	r0, r2
 800452a:	f000 fd00 	bl	8004f2e <TIM_ITRx_SetConfig>
      break;
 800452e:	e003      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	73fb      	strb	r3, [r7, #15]
      break;
 8004534:	e000      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8004536:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004548:	7bfb      	ldrb	r3, [r7, #15]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	00100070 	.word	0x00100070
 8004558:	00100050 	.word	0x00100050
 800455c:	00100040 	.word	0x00100040
 8004560:	00100030 	.word	0x00100030
 8004564:	00100020 	.word	0x00100020

08004568 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a4c      	ldr	r2, [pc, #304]	@ (8004710 <TIM_Base_SetConfig+0x144>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d017      	beq.n	8004614 <TIM_Base_SetConfig+0x48>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ea:	d013      	beq.n	8004614 <TIM_Base_SetConfig+0x48>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a49      	ldr	r2, [pc, #292]	@ (8004714 <TIM_Base_SetConfig+0x148>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d00f      	beq.n	8004614 <TIM_Base_SetConfig+0x48>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a48      	ldr	r2, [pc, #288]	@ (8004718 <TIM_Base_SetConfig+0x14c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d00b      	beq.n	8004614 <TIM_Base_SetConfig+0x48>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a47      	ldr	r2, [pc, #284]	@ (800471c <TIM_Base_SetConfig+0x150>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d007      	beq.n	8004614 <TIM_Base_SetConfig+0x48>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a46      	ldr	r2, [pc, #280]	@ (8004720 <TIM_Base_SetConfig+0x154>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d003      	beq.n	8004614 <TIM_Base_SetConfig+0x48>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a45      	ldr	r2, [pc, #276]	@ (8004724 <TIM_Base_SetConfig+0x158>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d108      	bne.n	8004626 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800461a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a39      	ldr	r2, [pc, #228]	@ (8004710 <TIM_Base_SetConfig+0x144>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d023      	beq.n	8004676 <TIM_Base_SetConfig+0xaa>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004634:	d01f      	beq.n	8004676 <TIM_Base_SetConfig+0xaa>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a36      	ldr	r2, [pc, #216]	@ (8004714 <TIM_Base_SetConfig+0x148>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d01b      	beq.n	8004676 <TIM_Base_SetConfig+0xaa>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a35      	ldr	r2, [pc, #212]	@ (8004718 <TIM_Base_SetConfig+0x14c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d017      	beq.n	8004676 <TIM_Base_SetConfig+0xaa>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a34      	ldr	r2, [pc, #208]	@ (800471c <TIM_Base_SetConfig+0x150>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d013      	beq.n	8004676 <TIM_Base_SetConfig+0xaa>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a33      	ldr	r2, [pc, #204]	@ (8004720 <TIM_Base_SetConfig+0x154>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00f      	beq.n	8004676 <TIM_Base_SetConfig+0xaa>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a33      	ldr	r2, [pc, #204]	@ (8004728 <TIM_Base_SetConfig+0x15c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d00b      	beq.n	8004676 <TIM_Base_SetConfig+0xaa>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a32      	ldr	r2, [pc, #200]	@ (800472c <TIM_Base_SetConfig+0x160>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d007      	beq.n	8004676 <TIM_Base_SetConfig+0xaa>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a31      	ldr	r2, [pc, #196]	@ (8004730 <TIM_Base_SetConfig+0x164>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d003      	beq.n	8004676 <TIM_Base_SetConfig+0xaa>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a2c      	ldr	r2, [pc, #176]	@ (8004724 <TIM_Base_SetConfig+0x158>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d108      	bne.n	8004688 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800467c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	4313      	orrs	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	4313      	orrs	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a18      	ldr	r2, [pc, #96]	@ (8004710 <TIM_Base_SetConfig+0x144>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d013      	beq.n	80046dc <TIM_Base_SetConfig+0x110>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a1a      	ldr	r2, [pc, #104]	@ (8004720 <TIM_Base_SetConfig+0x154>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d00f      	beq.n	80046dc <TIM_Base_SetConfig+0x110>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a1a      	ldr	r2, [pc, #104]	@ (8004728 <TIM_Base_SetConfig+0x15c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00b      	beq.n	80046dc <TIM_Base_SetConfig+0x110>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a19      	ldr	r2, [pc, #100]	@ (800472c <TIM_Base_SetConfig+0x160>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d007      	beq.n	80046dc <TIM_Base_SetConfig+0x110>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a18      	ldr	r2, [pc, #96]	@ (8004730 <TIM_Base_SetConfig+0x164>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d003      	beq.n	80046dc <TIM_Base_SetConfig+0x110>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a13      	ldr	r2, [pc, #76]	@ (8004724 <TIM_Base_SetConfig+0x158>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d103      	bne.n	80046e4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	691a      	ldr	r2, [r3, #16]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d105      	bne.n	8004702 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f023 0201 	bic.w	r2, r3, #1
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	611a      	str	r2, [r3, #16]
  }
}
 8004702:	bf00      	nop
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	40012c00 	.word	0x40012c00
 8004714:	40000400 	.word	0x40000400
 8004718:	40000800 	.word	0x40000800
 800471c:	40000c00 	.word	0x40000c00
 8004720:	40013400 	.word	0x40013400
 8004724:	40015000 	.word	0x40015000
 8004728:	40014000 	.word	0x40014000
 800472c:	40014400 	.word	0x40014400
 8004730:	40014800 	.word	0x40014800

08004734 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	f023 0201 	bic.w	r2, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 0303 	bic.w	r3, r3, #3
 800476e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f023 0302 	bic.w	r3, r3, #2
 8004780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	4313      	orrs	r3, r2
 800478a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a30      	ldr	r2, [pc, #192]	@ (8004850 <TIM_OC1_SetConfig+0x11c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d013      	beq.n	80047bc <TIM_OC1_SetConfig+0x88>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a2f      	ldr	r2, [pc, #188]	@ (8004854 <TIM_OC1_SetConfig+0x120>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d00f      	beq.n	80047bc <TIM_OC1_SetConfig+0x88>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a2e      	ldr	r2, [pc, #184]	@ (8004858 <TIM_OC1_SetConfig+0x124>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d00b      	beq.n	80047bc <TIM_OC1_SetConfig+0x88>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a2d      	ldr	r2, [pc, #180]	@ (800485c <TIM_OC1_SetConfig+0x128>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d007      	beq.n	80047bc <TIM_OC1_SetConfig+0x88>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004860 <TIM_OC1_SetConfig+0x12c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d003      	beq.n	80047bc <TIM_OC1_SetConfig+0x88>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a2b      	ldr	r2, [pc, #172]	@ (8004864 <TIM_OC1_SetConfig+0x130>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d10c      	bne.n	80047d6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f023 0308 	bic.w	r3, r3, #8
 80047c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f023 0304 	bic.w	r3, r3, #4
 80047d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004850 <TIM_OC1_SetConfig+0x11c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d013      	beq.n	8004806 <TIM_OC1_SetConfig+0xd2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004854 <TIM_OC1_SetConfig+0x120>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d00f      	beq.n	8004806 <TIM_OC1_SetConfig+0xd2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004858 <TIM_OC1_SetConfig+0x124>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00b      	beq.n	8004806 <TIM_OC1_SetConfig+0xd2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a1a      	ldr	r2, [pc, #104]	@ (800485c <TIM_OC1_SetConfig+0x128>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d007      	beq.n	8004806 <TIM_OC1_SetConfig+0xd2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a19      	ldr	r2, [pc, #100]	@ (8004860 <TIM_OC1_SetConfig+0x12c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d003      	beq.n	8004806 <TIM_OC1_SetConfig+0xd2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a18      	ldr	r2, [pc, #96]	@ (8004864 <TIM_OC1_SetConfig+0x130>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d111      	bne.n	800482a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800480c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4313      	orrs	r3, r2
 8004828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	621a      	str	r2, [r3, #32]
}
 8004844:	bf00      	nop
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	40012c00 	.word	0x40012c00
 8004854:	40013400 	.word	0x40013400
 8004858:	40014000 	.word	0x40014000
 800485c:	40014400 	.word	0x40014400
 8004860:	40014800 	.word	0x40014800
 8004864:	40015000 	.word	0x40015000

08004868 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	f023 0210 	bic.w	r2, r3, #16
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004896:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800489a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	021b      	lsls	r3, r3, #8
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f023 0320 	bic.w	r3, r3, #32
 80048b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	011b      	lsls	r3, r3, #4
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004978 <TIM_OC2_SetConfig+0x110>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d007      	beq.n	80048dc <TIM_OC2_SetConfig+0x74>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a2b      	ldr	r2, [pc, #172]	@ (800497c <TIM_OC2_SetConfig+0x114>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d003      	beq.n	80048dc <TIM_OC2_SetConfig+0x74>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a2a      	ldr	r2, [pc, #168]	@ (8004980 <TIM_OC2_SetConfig+0x118>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d10d      	bne.n	80048f8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a1f      	ldr	r2, [pc, #124]	@ (8004978 <TIM_OC2_SetConfig+0x110>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d013      	beq.n	8004928 <TIM_OC2_SetConfig+0xc0>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a1e      	ldr	r2, [pc, #120]	@ (800497c <TIM_OC2_SetConfig+0x114>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00f      	beq.n	8004928 <TIM_OC2_SetConfig+0xc0>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a1e      	ldr	r2, [pc, #120]	@ (8004984 <TIM_OC2_SetConfig+0x11c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00b      	beq.n	8004928 <TIM_OC2_SetConfig+0xc0>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a1d      	ldr	r2, [pc, #116]	@ (8004988 <TIM_OC2_SetConfig+0x120>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d007      	beq.n	8004928 <TIM_OC2_SetConfig+0xc0>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a1c      	ldr	r2, [pc, #112]	@ (800498c <TIM_OC2_SetConfig+0x124>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d003      	beq.n	8004928 <TIM_OC2_SetConfig+0xc0>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a17      	ldr	r2, [pc, #92]	@ (8004980 <TIM_OC2_SetConfig+0x118>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d113      	bne.n	8004950 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800492e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004936:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	4313      	orrs	r3, r2
 8004942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	4313      	orrs	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	621a      	str	r2, [r3, #32]
}
 800496a:	bf00      	nop
 800496c:	371c      	adds	r7, #28
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	40012c00 	.word	0x40012c00
 800497c:	40013400 	.word	0x40013400
 8004980:	40015000 	.word	0x40015000
 8004984:	40014000 	.word	0x40014000
 8004988:	40014400 	.word	0x40014400
 800498c:	40014800 	.word	0x40014800

08004990 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f023 0303 	bic.w	r3, r3, #3
 80049ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	021b      	lsls	r3, r3, #8
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a2b      	ldr	r2, [pc, #172]	@ (8004a9c <TIM_OC3_SetConfig+0x10c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d007      	beq.n	8004a02 <TIM_OC3_SetConfig+0x72>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a2a      	ldr	r2, [pc, #168]	@ (8004aa0 <TIM_OC3_SetConfig+0x110>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d003      	beq.n	8004a02 <TIM_OC3_SetConfig+0x72>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a29      	ldr	r2, [pc, #164]	@ (8004aa4 <TIM_OC3_SetConfig+0x114>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d10d      	bne.n	8004a1e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a1e      	ldr	r2, [pc, #120]	@ (8004a9c <TIM_OC3_SetConfig+0x10c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d013      	beq.n	8004a4e <TIM_OC3_SetConfig+0xbe>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a1d      	ldr	r2, [pc, #116]	@ (8004aa0 <TIM_OC3_SetConfig+0x110>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d00f      	beq.n	8004a4e <TIM_OC3_SetConfig+0xbe>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a1d      	ldr	r2, [pc, #116]	@ (8004aa8 <TIM_OC3_SetConfig+0x118>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d00b      	beq.n	8004a4e <TIM_OC3_SetConfig+0xbe>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a1c      	ldr	r2, [pc, #112]	@ (8004aac <TIM_OC3_SetConfig+0x11c>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d007      	beq.n	8004a4e <TIM_OC3_SetConfig+0xbe>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a1b      	ldr	r2, [pc, #108]	@ (8004ab0 <TIM_OC3_SetConfig+0x120>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d003      	beq.n	8004a4e <TIM_OC3_SetConfig+0xbe>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a16      	ldr	r2, [pc, #88]	@ (8004aa4 <TIM_OC3_SetConfig+0x114>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d113      	bne.n	8004a76 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	011b      	lsls	r3, r3, #4
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	621a      	str	r2, [r3, #32]
}
 8004a90:	bf00      	nop
 8004a92:	371c      	adds	r7, #28
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	40012c00 	.word	0x40012c00
 8004aa0:	40013400 	.word	0x40013400
 8004aa4:	40015000 	.word	0x40015000
 8004aa8:	40014000 	.word	0x40014000
 8004aac:	40014400 	.word	0x40014400
 8004ab0:	40014800 	.word	0x40014800

08004ab4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ae2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	021b      	lsls	r3, r3, #8
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	031b      	lsls	r3, r3, #12
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a2c      	ldr	r2, [pc, #176]	@ (8004bc4 <TIM_OC4_SetConfig+0x110>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d007      	beq.n	8004b28 <TIM_OC4_SetConfig+0x74>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a2b      	ldr	r2, [pc, #172]	@ (8004bc8 <TIM_OC4_SetConfig+0x114>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d003      	beq.n	8004b28 <TIM_OC4_SetConfig+0x74>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a2a      	ldr	r2, [pc, #168]	@ (8004bcc <TIM_OC4_SetConfig+0x118>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d10d      	bne.n	8004b44 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	031b      	lsls	r3, r3, #12
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a1f      	ldr	r2, [pc, #124]	@ (8004bc4 <TIM_OC4_SetConfig+0x110>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d013      	beq.n	8004b74 <TIM_OC4_SetConfig+0xc0>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8004bc8 <TIM_OC4_SetConfig+0x114>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d00f      	beq.n	8004b74 <TIM_OC4_SetConfig+0xc0>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a1e      	ldr	r2, [pc, #120]	@ (8004bd0 <TIM_OC4_SetConfig+0x11c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00b      	beq.n	8004b74 <TIM_OC4_SetConfig+0xc0>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8004bd4 <TIM_OC4_SetConfig+0x120>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d007      	beq.n	8004b74 <TIM_OC4_SetConfig+0xc0>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a1c      	ldr	r2, [pc, #112]	@ (8004bd8 <TIM_OC4_SetConfig+0x124>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d003      	beq.n	8004b74 <TIM_OC4_SetConfig+0xc0>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a17      	ldr	r2, [pc, #92]	@ (8004bcc <TIM_OC4_SetConfig+0x118>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d113      	bne.n	8004b9c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b7a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004b82:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	019b      	lsls	r3, r3, #6
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	019b      	lsls	r3, r3, #6
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	621a      	str	r2, [r3, #32]
}
 8004bb6:	bf00      	nop
 8004bb8:	371c      	adds	r7, #28
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	40012c00 	.word	0x40012c00
 8004bc8:	40013400 	.word	0x40013400
 8004bcc:	40015000 	.word	0x40015000
 8004bd0:	40014000 	.word	0x40014000
 8004bd4:	40014400 	.word	0x40014400
 8004bd8:	40014800 	.word	0x40014800

08004bdc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004c20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	041b      	lsls	r3, r3, #16
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a19      	ldr	r2, [pc, #100]	@ (8004c98 <TIM_OC5_SetConfig+0xbc>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d013      	beq.n	8004c5e <TIM_OC5_SetConfig+0x82>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a18      	ldr	r2, [pc, #96]	@ (8004c9c <TIM_OC5_SetConfig+0xc0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00f      	beq.n	8004c5e <TIM_OC5_SetConfig+0x82>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a17      	ldr	r2, [pc, #92]	@ (8004ca0 <TIM_OC5_SetConfig+0xc4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00b      	beq.n	8004c5e <TIM_OC5_SetConfig+0x82>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a16      	ldr	r2, [pc, #88]	@ (8004ca4 <TIM_OC5_SetConfig+0xc8>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d007      	beq.n	8004c5e <TIM_OC5_SetConfig+0x82>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a15      	ldr	r2, [pc, #84]	@ (8004ca8 <TIM_OC5_SetConfig+0xcc>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d003      	beq.n	8004c5e <TIM_OC5_SetConfig+0x82>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a14      	ldr	r2, [pc, #80]	@ (8004cac <TIM_OC5_SetConfig+0xd0>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d109      	bne.n	8004c72 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	021b      	lsls	r3, r3, #8
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	621a      	str	r2, [r3, #32]
}
 8004c8c:	bf00      	nop
 8004c8e:	371c      	adds	r7, #28
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	40012c00 	.word	0x40012c00
 8004c9c:	40013400 	.word	0x40013400
 8004ca0:	40014000 	.word	0x40014000
 8004ca4:	40014400 	.word	0x40014400
 8004ca8:	40014800 	.word	0x40014800
 8004cac:	40015000 	.word	0x40015000

08004cb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	021b      	lsls	r3, r3, #8
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004cf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	051b      	lsls	r3, r3, #20
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a1a      	ldr	r2, [pc, #104]	@ (8004d70 <TIM_OC6_SetConfig+0xc0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d013      	beq.n	8004d34 <TIM_OC6_SetConfig+0x84>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a19      	ldr	r2, [pc, #100]	@ (8004d74 <TIM_OC6_SetConfig+0xc4>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00f      	beq.n	8004d34 <TIM_OC6_SetConfig+0x84>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a18      	ldr	r2, [pc, #96]	@ (8004d78 <TIM_OC6_SetConfig+0xc8>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00b      	beq.n	8004d34 <TIM_OC6_SetConfig+0x84>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a17      	ldr	r2, [pc, #92]	@ (8004d7c <TIM_OC6_SetConfig+0xcc>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d007      	beq.n	8004d34 <TIM_OC6_SetConfig+0x84>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a16      	ldr	r2, [pc, #88]	@ (8004d80 <TIM_OC6_SetConfig+0xd0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d003      	beq.n	8004d34 <TIM_OC6_SetConfig+0x84>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a15      	ldr	r2, [pc, #84]	@ (8004d84 <TIM_OC6_SetConfig+0xd4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d109      	bne.n	8004d48 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	029b      	lsls	r3, r3, #10
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	621a      	str	r2, [r3, #32]
}
 8004d62:	bf00      	nop
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40012c00 	.word	0x40012c00
 8004d74:	40013400 	.word	0x40013400
 8004d78:	40014000 	.word	0x40014000
 8004d7c:	40014400 	.word	0x40014400
 8004d80:	40014800 	.word	0x40014800
 8004d84:	40015000 	.word	0x40015000

08004d88 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
 8004d94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	f023 0201 	bic.w	r2, r3, #1
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4a28      	ldr	r2, [pc, #160]	@ (8004e54 <TIM_TI1_SetConfig+0xcc>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d01b      	beq.n	8004dee <TIM_TI1_SetConfig+0x66>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dbc:	d017      	beq.n	8004dee <TIM_TI1_SetConfig+0x66>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	4a25      	ldr	r2, [pc, #148]	@ (8004e58 <TIM_TI1_SetConfig+0xd0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d013      	beq.n	8004dee <TIM_TI1_SetConfig+0x66>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4a24      	ldr	r2, [pc, #144]	@ (8004e5c <TIM_TI1_SetConfig+0xd4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00f      	beq.n	8004dee <TIM_TI1_SetConfig+0x66>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4a23      	ldr	r2, [pc, #140]	@ (8004e60 <TIM_TI1_SetConfig+0xd8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00b      	beq.n	8004dee <TIM_TI1_SetConfig+0x66>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4a22      	ldr	r2, [pc, #136]	@ (8004e64 <TIM_TI1_SetConfig+0xdc>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d007      	beq.n	8004dee <TIM_TI1_SetConfig+0x66>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	4a21      	ldr	r2, [pc, #132]	@ (8004e68 <TIM_TI1_SetConfig+0xe0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d003      	beq.n	8004dee <TIM_TI1_SetConfig+0x66>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4a20      	ldr	r2, [pc, #128]	@ (8004e6c <TIM_TI1_SetConfig+0xe4>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d101      	bne.n	8004df2 <TIM_TI1_SetConfig+0x6a>
 8004dee:	2301      	movs	r3, #1
 8004df0:	e000      	b.n	8004df4 <TIM_TI1_SetConfig+0x6c>
 8004df2:	2300      	movs	r3, #0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d008      	beq.n	8004e0a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	f023 0303 	bic.w	r3, r3, #3
 8004dfe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]
 8004e08:	e003      	b.n	8004e12 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f043 0301 	orr.w	r3, r3, #1
 8004e10:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f023 030a 	bic.w	r3, r3, #10
 8004e2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f003 030a 	and.w	r3, r3, #10
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	621a      	str	r2, [r3, #32]
}
 8004e46:	bf00      	nop
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40012c00 	.word	0x40012c00
 8004e58:	40000400 	.word	0x40000400
 8004e5c:	40000800 	.word	0x40000800
 8004e60:	40000c00 	.word	0x40000c00
 8004e64:	40013400 	.word	0x40013400
 8004e68:	40014000 	.word	0x40014000
 8004e6c:	40015000 	.word	0x40015000

08004e70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b087      	sub	sp, #28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	f023 0201 	bic.w	r2, r3, #1
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f023 030a 	bic.w	r3, r3, #10
 8004eac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	621a      	str	r2, [r3, #32]
}
 8004ec2:	bf00      	nop
 8004ec4:	371c      	adds	r7, #28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b087      	sub	sp, #28
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	f023 0210 	bic.w	r2, r3, #16
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ef8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	031b      	lsls	r3, r3, #12
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	011b      	lsls	r3, r3, #4
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	621a      	str	r2, [r3, #32]
}
 8004f22:	bf00      	nop
 8004f24:	371c      	adds	r7, #28
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b085      	sub	sp, #20
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004f44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f043 0307 	orr.w	r3, r3, #7
 8004f54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	609a      	str	r2, [r3, #8]
}
 8004f5c:	bf00      	nop
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
 8004f74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	021a      	lsls	r2, r3, #8
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	609a      	str	r2, [r3, #8]
}
 8004f9c:	bf00      	nop
 8004f9e:	371c      	adds	r7, #28
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08a      	sub	sp, #40	@ 0x28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e0a0      	b.n	80050fe <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d106      	bne.n	8004fd6 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f898 	bl	8005106 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2202      	movs	r2, #2
 8004fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4610      	mov	r0, r2
 8004fea:	f7ff faef 	bl	80045cc <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6818      	ldr	r0, [r3, #0]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	6819      	ldr	r1, [r3, #0]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	2203      	movs	r2, #3
 8004ffc:	f7ff fec4 	bl	8004d88 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699a      	ldr	r2, [r3, #24]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 020c 	bic.w	r2, r2, #12
 800500e:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6999      	ldr	r1, [r3, #24]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005030:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6812      	ldr	r2, [r2, #0]
 800503c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005040:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005044:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005054:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6812      	ldr	r2, [r2, #0]
 8005060:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005064:	f023 0307 	bic.w	r3, r3, #7
 8005068:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0204 	orr.w	r2, r2, #4
 8005078:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800507a:	2300      	movs	r3, #0
 800507c:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800507e:	2300      	movs	r3, #0
 8005080:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005082:	2370      	movs	r3, #112	@ 0x70
 8005084:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005086:	2300      	movs	r3, #0
 8005088:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800508a:	2300      	movs	r3, #0
 800508c:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800508e:	2300      	movs	r3, #0
 8005090:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f107 020c 	add.w	r2, r7, #12
 80050a0:	4611      	mov	r1, r2
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7ff fbe0 	bl	8004868 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6812      	ldr	r2, [r2, #0]
 80050b2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80050b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ba:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 80050ca:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3728      	adds	r7, #40	@ 0x28
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
	...

0800511c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005130:	2302      	movs	r3, #2
 8005132:	e074      	b.n	800521e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a34      	ldr	r2, [pc, #208]	@ (800522c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d009      	beq.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a33      	ldr	r2, [pc, #204]	@ (8005230 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d004      	beq.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a31      	ldr	r2, [pc, #196]	@ (8005234 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d108      	bne.n	8005184 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005178:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	4313      	orrs	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800518a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800518e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a21      	ldr	r2, [pc, #132]	@ (800522c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d022      	beq.n	80051f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051b4:	d01d      	beq.n	80051f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005238 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d018      	beq.n	80051f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a1d      	ldr	r2, [pc, #116]	@ (800523c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d013      	beq.n	80051f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005240 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d00e      	beq.n	80051f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a15      	ldr	r2, [pc, #84]	@ (8005230 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d009      	beq.n	80051f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a18      	ldr	r2, [pc, #96]	@ (8005244 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d004      	beq.n	80051f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a11      	ldr	r2, [pc, #68]	@ (8005234 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d10c      	bne.n	800520c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	4313      	orrs	r3, r2
 8005202:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	40012c00 	.word	0x40012c00
 8005230:	40013400 	.word	0x40013400
 8005234:	40015000 	.word	0x40015000
 8005238:	40000400 	.word	0x40000400
 800523c:	40000800 	.word	0x40000800
 8005240:	40000c00 	.word	0x40000c00
 8005244:	40014000 	.word	0x40014000

08005248 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005252:	2300      	movs	r3, #0
 8005254:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800525c:	2b01      	cmp	r3, #1
 800525e:	d101      	bne.n	8005264 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005260:	2302      	movs	r3, #2
 8005262:	e078      	b.n	8005356 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	4313      	orrs	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	4313      	orrs	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	041b      	lsls	r3, r3, #16
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a1c      	ldr	r2, [pc, #112]	@ (8005364 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d009      	beq.n	800530a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005368 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d004      	beq.n	800530a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a19      	ldr	r2, [pc, #100]	@ (800536c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d11c      	bne.n	8005344 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005314:	051b      	lsls	r3, r3, #20
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	4313      	orrs	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005332:	4313      	orrs	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005340:	4313      	orrs	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	40012c00 	.word	0x40012c00
 8005368:	40013400 	.word	0x40013400
 800536c:	40015000 	.word	0x40015000

08005370 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800540c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005410:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	b29a      	uxth	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800542a:	b480      	push	{r7}
 800542c:	b085      	sub	sp, #20
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005432:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005436:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	b29b      	uxth	r3, r3
 8005444:	43db      	mvns	r3, r3
 8005446:	b29b      	uxth	r3, r3
 8005448:	4013      	ands	r3, r2
 800544a:	b29a      	uxth	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	1d3b      	adds	r3, r7, #4
 800546a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2201      	movs	r2, #1
 8005472:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800549c:	b480      	push	{r7}
 800549e:	b0a7      	sub	sp, #156	@ 0x9c
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80054be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054c2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	78db      	ldrb	r3, [r3, #3]
 80054ca:	2b03      	cmp	r3, #3
 80054cc:	d81f      	bhi.n	800550e <USB_ActivateEndpoint+0x72>
 80054ce:	a201      	add	r2, pc, #4	@ (adr r2, 80054d4 <USB_ActivateEndpoint+0x38>)
 80054d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d4:	080054e5 	.word	0x080054e5
 80054d8:	08005501 	.word	0x08005501
 80054dc:	08005517 	.word	0x08005517
 80054e0:	080054f3 	.word	0x080054f3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80054e4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80054e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80054ec:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80054f0:	e012      	b.n	8005518 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80054f2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80054f6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80054fa:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80054fe:	e00b      	b.n	8005518 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005500:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005504:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005508:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800550c:	e004      	b.n	8005518 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8005514:	e000      	b.n	8005518 <USB_ActivateEndpoint+0x7c>
      break;
 8005516:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	441a      	add	r2, r3
 8005522:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005526:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800552a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800552e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005536:	b29b      	uxth	r3, r3
 8005538:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	b29b      	uxth	r3, r3
 8005548:	b21b      	sxth	r3, r3
 800554a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800554e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005552:	b21a      	sxth	r2, r3
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	b21b      	sxth	r3, r3
 800555a:	4313      	orrs	r3, r2
 800555c:	b21b      	sxth	r3, r3
 800555e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	441a      	add	r2, r3
 800556c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005570:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005574:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005578:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800557c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005580:	b29b      	uxth	r3, r3
 8005582:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	7b1b      	ldrb	r3, [r3, #12]
 8005588:	2b00      	cmp	r3, #0
 800558a:	f040 8180 	bne.w	800588e <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	785b      	ldrb	r3, [r3, #1]
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 8084 	beq.w	80056a0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	61bb      	str	r3, [r7, #24]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	461a      	mov	r2, r3
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	4413      	add	r3, r2
 80055aa:	61bb      	str	r3, [r7, #24]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	00da      	lsls	r2, r3, #3
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	88db      	ldrh	r3, [r3, #6]
 80055c0:	085b      	lsrs	r3, r3, #1
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	827b      	strh	r3, [r7, #18]
 80055da:	8a7b      	ldrh	r3, [r7, #18]
 80055dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d01b      	beq.n	800561c <USB_ActivateEndpoint+0x180>
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055fa:	823b      	strh	r3, [r7, #16]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	441a      	add	r2, r3
 8005606:	8a3b      	ldrh	r3, [r7, #16]
 8005608:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800560c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005610:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005614:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005618:	b29b      	uxth	r3, r3
 800561a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	78db      	ldrb	r3, [r3, #3]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d020      	beq.n	8005666 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	b29b      	uxth	r3, r3
 8005632:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005636:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800563a:	81bb      	strh	r3, [r7, #12]
 800563c:	89bb      	ldrh	r3, [r7, #12]
 800563e:	f083 0320 	eor.w	r3, r3, #32
 8005642:	81bb      	strh	r3, [r7, #12]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	441a      	add	r2, r3
 800564e:	89bb      	ldrh	r3, [r7, #12]
 8005650:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005654:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005658:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800565c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005660:	b29b      	uxth	r3, r3
 8005662:	8013      	strh	r3, [r2, #0]
 8005664:	e3f9      	b.n	8005e5a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	b29b      	uxth	r3, r3
 8005674:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005678:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800567c:	81fb      	strh	r3, [r7, #14]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	441a      	add	r2, r3
 8005688:	89fb      	ldrh	r3, [r7, #14]
 800568a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800568e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005692:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800569a:	b29b      	uxth	r3, r3
 800569c:	8013      	strh	r3, [r2, #0]
 800569e:	e3dc      	b.n	8005e5a <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	461a      	mov	r2, r3
 80056ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b0:	4413      	add	r3, r2
 80056b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	00da      	lsls	r2, r3, #3
 80056ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056bc:	4413      	add	r3, r2
 80056be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80056c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	88db      	ldrh	r3, [r3, #6]
 80056c8:	085b      	lsrs	r3, r3, #1
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	005b      	lsls	r3, r3, #1
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056de:	b29b      	uxth	r3, r3
 80056e0:	461a      	mov	r2, r3
 80056e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e4:	4413      	add	r3, r2
 80056e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	00da      	lsls	r2, r3, #3
 80056ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f0:	4413      	add	r3, r2
 80056f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80056f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80056f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005702:	b29a      	uxth	r2, r3
 8005704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005706:	801a      	strh	r2, [r3, #0]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10a      	bne.n	8005726 <USB_ActivateEndpoint+0x28a>
 8005710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	b29b      	uxth	r3, r3
 8005716:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800571a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800571e:	b29a      	uxth	r2, r3
 8005720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005722:	801a      	strh	r2, [r3, #0]
 8005724:	e041      	b.n	80057aa <USB_ActivateEndpoint+0x30e>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	2b3e      	cmp	r3, #62	@ 0x3e
 800572c:	d81c      	bhi.n	8005768 <USB_ActivateEndpoint+0x2cc>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	085b      	lsrs	r3, r3, #1
 8005734:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b00      	cmp	r3, #0
 8005742:	d004      	beq.n	800574e <USB_ActivateEndpoint+0x2b2>
 8005744:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005748:	3301      	adds	r3, #1
 800574a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800574e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	b29a      	uxth	r2, r3
 8005754:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005758:	b29b      	uxth	r3, r3
 800575a:	029b      	lsls	r3, r3, #10
 800575c:	b29b      	uxth	r3, r3
 800575e:	4313      	orrs	r3, r2
 8005760:	b29a      	uxth	r2, r3
 8005762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005764:	801a      	strh	r2, [r3, #0]
 8005766:	e020      	b.n	80057aa <USB_ActivateEndpoint+0x30e>
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	095b      	lsrs	r3, r3, #5
 800576e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f003 031f 	and.w	r3, r3, #31
 800577a:	2b00      	cmp	r3, #0
 800577c:	d104      	bne.n	8005788 <USB_ActivateEndpoint+0x2ec>
 800577e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005782:	3b01      	subs	r3, #1
 8005784:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	b29a      	uxth	r2, r3
 800578e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005792:	b29b      	uxth	r3, r3
 8005794:	029b      	lsls	r3, r3, #10
 8005796:	b29b      	uxth	r3, r3
 8005798:	4313      	orrs	r3, r2
 800579a:	b29b      	uxth	r3, r3
 800579c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80057b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80057ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d01b      	beq.n	80057fa <USB_ActivateEndpoint+0x35e>
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057d8:	843b      	strh	r3, [r7, #32]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	441a      	add	r2, r3
 80057e4:	8c3b      	ldrh	r3, [r7, #32]
 80057e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d124      	bne.n	800584c <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	b29b      	uxth	r3, r3
 8005810:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005814:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005818:	83bb      	strh	r3, [r7, #28]
 800581a:	8bbb      	ldrh	r3, [r7, #28]
 800581c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005820:	83bb      	strh	r3, [r7, #28]
 8005822:	8bbb      	ldrh	r3, [r7, #28]
 8005824:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005828:	83bb      	strh	r3, [r7, #28]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	441a      	add	r2, r3
 8005834:	8bbb      	ldrh	r3, [r7, #28]
 8005836:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800583a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800583e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005846:	b29b      	uxth	r3, r3
 8005848:	8013      	strh	r3, [r2, #0]
 800584a:	e306      	b.n	8005e5a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	b29b      	uxth	r3, r3
 800585a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800585e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005862:	83fb      	strh	r3, [r7, #30]
 8005864:	8bfb      	ldrh	r3, [r7, #30]
 8005866:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800586a:	83fb      	strh	r3, [r7, #30]
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	441a      	add	r2, r3
 8005876:	8bfb      	ldrh	r3, [r7, #30]
 8005878:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800587c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005880:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005888:	b29b      	uxth	r3, r3
 800588a:	8013      	strh	r3, [r2, #0]
 800588c:	e2e5      	b.n	8005e5a <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	78db      	ldrb	r3, [r3, #3]
 8005892:	2b02      	cmp	r3, #2
 8005894:	d11e      	bne.n	80058d4 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4413      	add	r3, r2
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ac:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	441a      	add	r2, r3
 80058ba:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80058be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058c6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80058ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	8013      	strh	r3, [r2, #0]
 80058d2:	e01d      	b.n	8005910 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	881b      	ldrh	r3, [r3, #0]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80058e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ea:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	441a      	add	r2, r3
 80058f8:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80058fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005900:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005904:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800590c:	b29b      	uxth	r3, r3
 800590e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800591a:	b29b      	uxth	r3, r3
 800591c:	461a      	mov	r2, r3
 800591e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005920:	4413      	add	r3, r2
 8005922:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	00da      	lsls	r2, r3, #3
 800592a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800592c:	4413      	add	r3, r2
 800592e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005932:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	891b      	ldrh	r3, [r3, #8]
 8005938:	085b      	lsrs	r3, r3, #1
 800593a:	b29b      	uxth	r3, r3
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	b29a      	uxth	r2, r3
 8005940:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005942:	801a      	strh	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	677b      	str	r3, [r7, #116]	@ 0x74
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800594e:	b29b      	uxth	r3, r3
 8005950:	461a      	mov	r2, r3
 8005952:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005954:	4413      	add	r3, r2
 8005956:	677b      	str	r3, [r7, #116]	@ 0x74
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	00da      	lsls	r2, r3, #3
 800595e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005960:	4413      	add	r3, r2
 8005962:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005966:	673b      	str	r3, [r7, #112]	@ 0x70
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	895b      	ldrh	r3, [r3, #10]
 800596c:	085b      	lsrs	r3, r3, #1
 800596e:	b29b      	uxth	r3, r3
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	b29a      	uxth	r2, r3
 8005974:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005976:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	785b      	ldrb	r3, [r3, #1]
 800597c:	2b00      	cmp	r3, #0
 800597e:	f040 81af 	bne.w	8005ce0 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8005992:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8005996:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d01d      	beq.n	80059da <USB_ActivateEndpoint+0x53e>
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059b4:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	441a      	add	r2, r3
 80059c2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80059c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80059d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4413      	add	r3, r2
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80059ea:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80059ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d01d      	beq.n	8005a32 <USB_ActivateEndpoint+0x596>
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	881b      	ldrh	r3, [r3, #0]
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a0c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	441a      	add	r2, r3
 8005a1a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8005a1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a2a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	785b      	ldrb	r3, [r3, #1]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d16b      	bne.n	8005b12 <USB_ActivateEndpoint+0x676>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	461a      	mov	r2, r3
 8005a48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a4a:	4413      	add	r3, r2
 8005a4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	00da      	lsls	r2, r3, #3
 8005a54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a56:	4413      	add	r3, r2
 8005a58:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a6c:	801a      	strh	r2, [r3, #0]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10a      	bne.n	8005a8c <USB_ActivateEndpoint+0x5f0>
 8005a76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a78:	881b      	ldrh	r3, [r3, #0]
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a88:	801a      	strh	r2, [r3, #0]
 8005a8a:	e05d      	b.n	8005b48 <USB_ActivateEndpoint+0x6ac>
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a92:	d81c      	bhi.n	8005ace <USB_ActivateEndpoint+0x632>
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	085b      	lsrs	r3, r3, #1
 8005a9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d004      	beq.n	8005ab4 <USB_ActivateEndpoint+0x618>
 8005aaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005aae:	3301      	adds	r3, #1
 8005ab0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005ab4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	029b      	lsls	r3, r3, #10
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005aca:	801a      	strh	r2, [r3, #0]
 8005acc:	e03c      	b.n	8005b48 <USB_ActivateEndpoint+0x6ac>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	095b      	lsrs	r3, r3, #5
 8005ad4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	f003 031f 	and.w	r3, r3, #31
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d104      	bne.n	8005aee <USB_ActivateEndpoint+0x652>
 8005ae4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005aee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	029b      	lsls	r3, r3, #10
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	4313      	orrs	r3, r2
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b0e:	801a      	strh	r2, [r3, #0]
 8005b10:	e01a      	b.n	8005b48 <USB_ActivateEndpoint+0x6ac>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	785b      	ldrb	r3, [r3, #1]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d116      	bne.n	8005b48 <USB_ActivateEndpoint+0x6ac>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	461a      	mov	r2, r3
 8005b28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b2a:	4413      	add	r3, r2
 8005b2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	00da      	lsls	r2, r3, #3
 8005b34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b36:	4413      	add	r3, r2
 8005b38:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005b3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b46:	801a      	strh	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	785b      	ldrb	r3, [r3, #1]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d16b      	bne.n	8005c2c <USB_ActivateEndpoint+0x790>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	461a      	mov	r2, r3
 8005b62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b64:	4413      	add	r3, r2
 8005b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	00da      	lsls	r2, r3, #3
 8005b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b70:	4413      	add	r3, r2
 8005b72:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005b76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b86:	801a      	strh	r2, [r3, #0]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10a      	bne.n	8005ba6 <USB_ActivateEndpoint+0x70a>
 8005b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba2:	801a      	strh	r2, [r3, #0]
 8005ba4:	e05b      	b.n	8005c5e <USB_ActivateEndpoint+0x7c2>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	2b3e      	cmp	r3, #62	@ 0x3e
 8005bac:	d81c      	bhi.n	8005be8 <USB_ActivateEndpoint+0x74c>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	085b      	lsrs	r3, r3, #1
 8005bb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d004      	beq.n	8005bce <USB_ActivateEndpoint+0x732>
 8005bc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005bc8:	3301      	adds	r3, #1
 8005bca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	029b      	lsls	r3, r3, #10
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	4313      	orrs	r3, r2
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be4:	801a      	strh	r2, [r3, #0]
 8005be6:	e03a      	b.n	8005c5e <USB_ActivateEndpoint+0x7c2>
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	095b      	lsrs	r3, r3, #5
 8005bee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f003 031f 	and.w	r3, r3, #31
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d104      	bne.n	8005c08 <USB_ActivateEndpoint+0x76c>
 8005bfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c02:	3b01      	subs	r3, #1
 8005c04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	029b      	lsls	r3, r3, #10
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c28:	801a      	strh	r2, [r3, #0]
 8005c2a:	e018      	b.n	8005c5e <USB_ActivateEndpoint+0x7c2>
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	785b      	ldrb	r3, [r3, #1]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d114      	bne.n	8005c5e <USB_ActivateEndpoint+0x7c2>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c40:	4413      	add	r3, r2
 8005c42:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	00da      	lsls	r2, r3, #3
 8005c4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005c52:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c5c:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c74:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005c76:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c78:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005c7c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005c7e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c80:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005c84:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	441a      	add	r2, r3
 8005c90:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cbc:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	441a      	add	r2, r3
 8005cc8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005cca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	8013      	strh	r3, [r2, #0]
 8005cde:	e0bc      	b.n	8005e5a <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8005cf0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005cf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d01d      	beq.n	8005d38 <USB_ActivateEndpoint+0x89c>
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d12:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	441a      	add	r2, r3
 8005d20:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005d24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8005d48:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8005d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d01d      	beq.n	8005d90 <USB_ActivateEndpoint+0x8f4>
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d6a:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	441a      	add	r2, r3
 8005d78:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8005d7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d88:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	78db      	ldrb	r3, [r3, #3]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d024      	beq.n	8005de2 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005daa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dae:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005db2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005db6:	f083 0320 	eor.w	r3, r3, #32
 8005dba:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	441a      	add	r2, r3
 8005dc8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005dcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	8013      	strh	r3, [r2, #0]
 8005de0:	e01d      	b.n	8005e1e <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005df4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005df8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	441a      	add	r2, r3
 8005e06:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005e0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	881b      	ldrh	r3, [r3, #0]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e34:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	441a      	add	r2, r3
 8005e42:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005e46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005e5a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	379c      	adds	r7, #156	@ 0x9c
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop

08005e6c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b08d      	sub	sp, #52	@ 0x34
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	7b1b      	ldrb	r3, [r3, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f040 808e 	bne.w	8005f9c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	785b      	ldrb	r3, [r3, #1]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d044      	beq.n	8005f12 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4413      	add	r3, r2
 8005e92:	881b      	ldrh	r3, [r3, #0]
 8005e94:	81bb      	strh	r3, [r7, #12]
 8005e96:	89bb      	ldrh	r3, [r7, #12]
 8005e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d01b      	beq.n	8005ed8 <USB_DeactivateEndpoint+0x6c>
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eb6:	817b      	strh	r3, [r7, #10]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	441a      	add	r2, r3
 8005ec2:	897b      	ldrh	r3, [r7, #10]
 8005ec4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ec8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ecc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ed0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eee:	813b      	strh	r3, [r7, #8]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	441a      	add	r2, r3
 8005efa:	893b      	ldrh	r3, [r7, #8]
 8005efc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	8013      	strh	r3, [r2, #0]
 8005f10:	e192      	b.n	8006238 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	827b      	strh	r3, [r7, #18]
 8005f20:	8a7b      	ldrh	r3, [r7, #18]
 8005f22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d01b      	beq.n	8005f62 <USB_DeactivateEndpoint+0xf6>
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4413      	add	r3, r2
 8005f34:	881b      	ldrh	r3, [r3, #0]
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f40:	823b      	strh	r3, [r7, #16]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	441a      	add	r2, r3
 8005f4c:	8a3b      	ldrh	r3, [r7, #16]
 8005f4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f78:	81fb      	strh	r3, [r7, #14]
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	441a      	add	r2, r3
 8005f84:	89fb      	ldrh	r3, [r7, #14]
 8005f86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	8013      	strh	r3, [r2, #0]
 8005f9a:	e14d      	b.n	8006238 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	785b      	ldrb	r3, [r3, #1]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f040 80a5 	bne.w	80060f0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	843b      	strh	r3, [r7, #32]
 8005fb4:	8c3b      	ldrh	r3, [r7, #32]
 8005fb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d01b      	beq.n	8005ff6 <USB_DeactivateEndpoint+0x18a>
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fd4:	83fb      	strh	r3, [r7, #30]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	441a      	add	r2, r3
 8005fe0:	8bfb      	ldrh	r3, [r7, #30]
 8005fe2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fe6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	83bb      	strh	r3, [r7, #28]
 8006004:	8bbb      	ldrh	r3, [r7, #28]
 8006006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800600a:	2b00      	cmp	r3, #0
 800600c:	d01b      	beq.n	8006046 <USB_DeactivateEndpoint+0x1da>
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	b29b      	uxth	r3, r3
 800601c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006020:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006024:	837b      	strh	r3, [r7, #26]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	441a      	add	r2, r3
 8006030:	8b7b      	ldrh	r3, [r7, #26]
 8006032:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006036:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800603a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800603e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006042:	b29b      	uxth	r3, r3
 8006044:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	b29b      	uxth	r3, r3
 8006054:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006058:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800605c:	833b      	strh	r3, [r7, #24]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	441a      	add	r2, r3
 8006068:	8b3b      	ldrh	r3, [r7, #24]
 800606a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800606e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006072:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006076:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800607a:	b29b      	uxth	r3, r3
 800607c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4413      	add	r3, r2
 8006088:	881b      	ldrh	r3, [r3, #0]
 800608a:	b29b      	uxth	r3, r3
 800608c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006090:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006094:	82fb      	strh	r3, [r7, #22]
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	441a      	add	r2, r3
 80060a0:	8afb      	ldrh	r3, [r7, #22]
 80060a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060cc:	82bb      	strh	r3, [r7, #20]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	441a      	add	r2, r3
 80060d8:	8abb      	ldrh	r3, [r7, #20]
 80060da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	8013      	strh	r3, [r2, #0]
 80060ee:	e0a3      	b.n	8006238 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80060fe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006100:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d01b      	beq.n	8006140 <USB_DeactivateEndpoint+0x2d4>
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	b29b      	uxth	r3, r3
 8006116:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800611a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800611e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	441a      	add	r2, r3
 800612a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800612c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006130:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006134:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006138:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800613c:	b29b      	uxth	r3, r3
 800613e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800614e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006154:	2b00      	cmp	r3, #0
 8006156:	d01b      	beq.n	8006190 <USB_DeactivateEndpoint+0x324>
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	881b      	ldrh	r3, [r3, #0]
 8006164:	b29b      	uxth	r3, r3
 8006166:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800616a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800616e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	441a      	add	r2, r3
 800617a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800617c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006180:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006184:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006188:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800618c:	b29b      	uxth	r3, r3
 800618e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	881b      	ldrh	r3, [r3, #0]
 800619c:	b29b      	uxth	r3, r3
 800619e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	441a      	add	r2, r3
 80061b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80061b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061de:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	441a      	add	r2, r3
 80061ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4413      	add	r3, r2
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	b29b      	uxth	r3, r3
 800620e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006216:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	441a      	add	r2, r3
 8006222:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006224:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006228:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800622c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006234:	b29b      	uxth	r3, r3
 8006236:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3734      	adds	r7, #52	@ 0x34
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b0ac      	sub	sp, #176	@ 0xb0
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	785b      	ldrb	r3, [r3, #1]
 8006254:	2b01      	cmp	r3, #1
 8006256:	f040 84ca 	bne.w	8006bee <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	699a      	ldr	r2, [r3, #24]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	429a      	cmp	r2, r3
 8006264:	d904      	bls.n	8006270 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800626e:	e003      	b.n	8006278 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	7b1b      	ldrb	r3, [r3, #12]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d122      	bne.n	80062c6 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	6959      	ldr	r1, [r3, #20]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	88da      	ldrh	r2, [r3, #6]
 8006288:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800628c:	b29b      	uxth	r3, r3
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 febd 	bl	800700e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	613b      	str	r3, [r7, #16]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800629e:	b29b      	uxth	r3, r3
 80062a0:	461a      	mov	r2, r3
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	4413      	add	r3, r2
 80062a6:	613b      	str	r3, [r7, #16]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	00da      	lsls	r2, r3, #3
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	4413      	add	r3, r2
 80062b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062bc:	b29a      	uxth	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	801a      	strh	r2, [r3, #0]
 80062c2:	f000 bc6f 	b.w	8006ba4 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	78db      	ldrb	r3, [r3, #3]
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	f040 831e 	bne.w	800690c <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	6a1a      	ldr	r2, [r3, #32]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	429a      	cmp	r2, r3
 80062da:	f240 82cf 	bls.w	800687c <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062f4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	441a      	add	r2, r3
 8006302:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006306:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800630a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800630e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006316:	b29b      	uxth	r3, r3
 8006318:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	6a1a      	ldr	r2, [r3, #32]
 800631e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006322:	1ad2      	subs	r2, r2, r3
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	b29b      	uxth	r3, r3
 8006336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800633a:	2b00      	cmp	r3, #0
 800633c:	f000 814f 	beq.w	80065de <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	633b      	str	r3, [r7, #48]	@ 0x30
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	785b      	ldrb	r3, [r3, #1]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d16b      	bne.n	8006424 <USB_EPStartXfer+0x1de>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006356:	b29b      	uxth	r3, r3
 8006358:	461a      	mov	r2, r3
 800635a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635c:	4413      	add	r3, r2
 800635e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	00da      	lsls	r2, r3, #3
 8006366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006368:	4413      	add	r3, r2
 800636a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800636e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	b29b      	uxth	r3, r3
 8006376:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800637a:	b29a      	uxth	r2, r3
 800637c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637e:	801a      	strh	r2, [r3, #0]
 8006380:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10a      	bne.n	800639e <USB_EPStartXfer+0x158>
 8006388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	b29b      	uxth	r3, r3
 800638e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006396:	b29a      	uxth	r2, r3
 8006398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639a:	801a      	strh	r2, [r3, #0]
 800639c:	e05b      	b.n	8006456 <USB_EPStartXfer+0x210>
 800639e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80063a4:	d81c      	bhi.n	80063e0 <USB_EPStartXfer+0x19a>
 80063a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063aa:	085b      	lsrs	r3, r3, #1
 80063ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80063b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d004      	beq.n	80063c6 <USB_EPStartXfer+0x180>
 80063bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80063c0:	3301      	adds	r3, #1
 80063c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80063c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c8:	881b      	ldrh	r3, [r3, #0]
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	029b      	lsls	r3, r3, #10
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	4313      	orrs	r3, r2
 80063d8:	b29a      	uxth	r2, r3
 80063da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063dc:	801a      	strh	r2, [r3, #0]
 80063de:	e03a      	b.n	8006456 <USB_EPStartXfer+0x210>
 80063e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063e4:	095b      	lsrs	r3, r3, #5
 80063e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80063ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063ee:	f003 031f 	and.w	r3, r3, #31
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d104      	bne.n	8006400 <USB_EPStartXfer+0x1ba>
 80063f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80063fa:	3b01      	subs	r3, #1
 80063fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	b29a      	uxth	r2, r3
 8006406:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800640a:	b29b      	uxth	r3, r3
 800640c:	029b      	lsls	r3, r3, #10
 800640e:	b29b      	uxth	r3, r3
 8006410:	4313      	orrs	r3, r2
 8006412:	b29b      	uxth	r3, r3
 8006414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800641c:	b29a      	uxth	r2, r3
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	801a      	strh	r2, [r3, #0]
 8006422:	e018      	b.n	8006456 <USB_EPStartXfer+0x210>
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	785b      	ldrb	r3, [r3, #1]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d114      	bne.n	8006456 <USB_EPStartXfer+0x210>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006432:	b29b      	uxth	r3, r3
 8006434:	461a      	mov	r2, r3
 8006436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006438:	4413      	add	r3, r2
 800643a:	633b      	str	r3, [r7, #48]	@ 0x30
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	00da      	lsls	r2, r3, #3
 8006442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006444:	4413      	add	r3, r2
 8006446:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800644a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800644c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006450:	b29a      	uxth	r2, r3
 8006452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006454:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	895b      	ldrh	r3, [r3, #10]
 800645a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	6959      	ldr	r1, [r3, #20]
 8006462:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006466:	b29b      	uxth	r3, r3
 8006468:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fdce 	bl	800700e <USB_WritePMA>
            ep->xfer_buff += len;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	695a      	ldr	r2, [r3, #20]
 8006476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800647a:	441a      	add	r2, r3
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	6a1a      	ldr	r2, [r3, #32]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	429a      	cmp	r2, r3
 800648a:	d907      	bls.n	800649c <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	6a1a      	ldr	r2, [r3, #32]
 8006490:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006494:	1ad2      	subs	r2, r2, r3
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	621a      	str	r2, [r3, #32]
 800649a:	e006      	b.n	80064aa <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	2200      	movs	r2, #0
 80064a8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	785b      	ldrb	r3, [r3, #1]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d16b      	bne.n	800658a <USB_EPStartXfer+0x344>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	61bb      	str	r3, [r7, #24]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064bc:	b29b      	uxth	r3, r3
 80064be:	461a      	mov	r2, r3
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	4413      	add	r3, r2
 80064c4:	61bb      	str	r3, [r7, #24]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	00da      	lsls	r2, r3, #3
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	4413      	add	r3, r2
 80064d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	881b      	ldrh	r3, [r3, #0]
 80064da:	b29b      	uxth	r3, r3
 80064dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	801a      	strh	r2, [r3, #0]
 80064e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10a      	bne.n	8006504 <USB_EPStartXfer+0x2be>
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	801a      	strh	r2, [r3, #0]
 8006502:	e05d      	b.n	80065c0 <USB_EPStartXfer+0x37a>
 8006504:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006508:	2b3e      	cmp	r3, #62	@ 0x3e
 800650a:	d81c      	bhi.n	8006546 <USB_EPStartXfer+0x300>
 800650c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006510:	085b      	lsrs	r3, r3, #1
 8006512:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d004      	beq.n	800652c <USB_EPStartXfer+0x2e6>
 8006522:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006526:	3301      	adds	r3, #1
 8006528:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	b29a      	uxth	r2, r3
 8006532:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006536:	b29b      	uxth	r3, r3
 8006538:	029b      	lsls	r3, r3, #10
 800653a:	b29b      	uxth	r3, r3
 800653c:	4313      	orrs	r3, r2
 800653e:	b29a      	uxth	r2, r3
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	801a      	strh	r2, [r3, #0]
 8006544:	e03c      	b.n	80065c0 <USB_EPStartXfer+0x37a>
 8006546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800654a:	095b      	lsrs	r3, r3, #5
 800654c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006550:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006554:	f003 031f 	and.w	r3, r3, #31
 8006558:	2b00      	cmp	r3, #0
 800655a:	d104      	bne.n	8006566 <USB_EPStartXfer+0x320>
 800655c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006560:	3b01      	subs	r3, #1
 8006562:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	b29a      	uxth	r2, r3
 800656c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006570:	b29b      	uxth	r3, r3
 8006572:	029b      	lsls	r3, r3, #10
 8006574:	b29b      	uxth	r3, r3
 8006576:	4313      	orrs	r3, r2
 8006578:	b29b      	uxth	r3, r3
 800657a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800657e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006582:	b29a      	uxth	r2, r3
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	801a      	strh	r2, [r3, #0]
 8006588:	e01a      	b.n	80065c0 <USB_EPStartXfer+0x37a>
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	785b      	ldrb	r3, [r3, #1]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d116      	bne.n	80065c0 <USB_EPStartXfer+0x37a>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	623b      	str	r3, [r7, #32]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800659c:	b29b      	uxth	r3, r3
 800659e:	461a      	mov	r2, r3
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	4413      	add	r3, r2
 80065a4:	623b      	str	r3, [r7, #32]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	00da      	lsls	r2, r3, #3
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	4413      	add	r3, r2
 80065b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80065b4:	61fb      	str	r3, [r7, #28]
 80065b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	891b      	ldrh	r3, [r3, #8]
 80065c4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	6959      	ldr	r1, [r3, #20]
 80065cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fd19 	bl	800700e <USB_WritePMA>
 80065dc:	e2e2      	b.n	8006ba4 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	785b      	ldrb	r3, [r3, #1]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d16b      	bne.n	80066be <USB_EPStartXfer+0x478>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	461a      	mov	r2, r3
 80065f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065f6:	4413      	add	r3, r2
 80065f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	00da      	lsls	r2, r3, #3
 8006600:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006602:	4413      	add	r3, r2
 8006604:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006608:	647b      	str	r3, [r7, #68]	@ 0x44
 800660a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b29b      	uxth	r3, r3
 8006610:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006614:	b29a      	uxth	r2, r3
 8006616:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006618:	801a      	strh	r2, [r3, #0]
 800661a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10a      	bne.n	8006638 <USB_EPStartXfer+0x3f2>
 8006622:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	b29b      	uxth	r3, r3
 8006628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800662c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006630:	b29a      	uxth	r2, r3
 8006632:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006634:	801a      	strh	r2, [r3, #0]
 8006636:	e05d      	b.n	80066f4 <USB_EPStartXfer+0x4ae>
 8006638:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800663c:	2b3e      	cmp	r3, #62	@ 0x3e
 800663e:	d81c      	bhi.n	800667a <USB_EPStartXfer+0x434>
 8006640:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006644:	085b      	lsrs	r3, r3, #1
 8006646:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800664a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	d004      	beq.n	8006660 <USB_EPStartXfer+0x41a>
 8006656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800665a:	3301      	adds	r3, #1
 800665c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	b29a      	uxth	r2, r3
 8006666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800666a:	b29b      	uxth	r3, r3
 800666c:	029b      	lsls	r3, r3, #10
 800666e:	b29b      	uxth	r3, r3
 8006670:	4313      	orrs	r3, r2
 8006672:	b29a      	uxth	r2, r3
 8006674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006676:	801a      	strh	r2, [r3, #0]
 8006678:	e03c      	b.n	80066f4 <USB_EPStartXfer+0x4ae>
 800667a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800667e:	095b      	lsrs	r3, r3, #5
 8006680:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006684:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006688:	f003 031f 	and.w	r3, r3, #31
 800668c:	2b00      	cmp	r3, #0
 800668e:	d104      	bne.n	800669a <USB_EPStartXfer+0x454>
 8006690:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006694:	3b01      	subs	r3, #1
 8006696:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800669a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	b29a      	uxth	r2, r3
 80066a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	029b      	lsls	r3, r3, #10
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	4313      	orrs	r3, r2
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066ba:	801a      	strh	r2, [r3, #0]
 80066bc:	e01a      	b.n	80066f4 <USB_EPStartXfer+0x4ae>
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	785b      	ldrb	r3, [r3, #1]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d116      	bne.n	80066f4 <USB_EPStartXfer+0x4ae>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	461a      	mov	r2, r3
 80066d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066d6:	4413      	add	r3, r2
 80066d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	00da      	lsls	r2, r3, #3
 80066e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066e2:	4413      	add	r3, r2
 80066e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80066e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	891b      	ldrh	r3, [r3, #8]
 80066f8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	6959      	ldr	r1, [r3, #20]
 8006700:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006704:	b29b      	uxth	r3, r3
 8006706:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fc7f 	bl	800700e <USB_WritePMA>
            ep->xfer_buff += len;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	695a      	ldr	r2, [r3, #20]
 8006714:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006718:	441a      	add	r2, r3
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	6a1a      	ldr	r2, [r3, #32]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	429a      	cmp	r2, r3
 8006728:	d907      	bls.n	800673a <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	6a1a      	ldr	r2, [r3, #32]
 800672e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006732:	1ad2      	subs	r2, r2, r3
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	621a      	str	r2, [r3, #32]
 8006738:	e006      	b.n	8006748 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2200      	movs	r2, #0
 8006746:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	643b      	str	r3, [r7, #64]	@ 0x40
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	785b      	ldrb	r3, [r3, #1]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d16b      	bne.n	800682c <USB_EPStartXfer+0x5e6>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800675e:	b29b      	uxth	r3, r3
 8006760:	461a      	mov	r2, r3
 8006762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006764:	4413      	add	r3, r2
 8006766:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	00da      	lsls	r2, r3, #3
 800676e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006770:	4413      	add	r3, r2
 8006772:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006776:	637b      	str	r3, [r7, #52]	@ 0x34
 8006778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	b29b      	uxth	r3, r3
 800677e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006782:	b29a      	uxth	r2, r3
 8006784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006786:	801a      	strh	r2, [r3, #0]
 8006788:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10a      	bne.n	80067a6 <USB_EPStartXfer+0x560>
 8006790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006792:	881b      	ldrh	r3, [r3, #0]
 8006794:	b29b      	uxth	r3, r3
 8006796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800679a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800679e:	b29a      	uxth	r2, r3
 80067a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067a2:	801a      	strh	r2, [r3, #0]
 80067a4:	e05b      	b.n	800685e <USB_EPStartXfer+0x618>
 80067a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80067ac:	d81c      	bhi.n	80067e8 <USB_EPStartXfer+0x5a2>
 80067ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067b2:	085b      	lsrs	r3, r3, #1
 80067b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80067b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d004      	beq.n	80067ce <USB_EPStartXfer+0x588>
 80067c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80067c8:	3301      	adds	r3, #1
 80067ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80067ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80067d8:	b29b      	uxth	r3, r3
 80067da:	029b      	lsls	r3, r3, #10
 80067dc:	b29b      	uxth	r3, r3
 80067de:	4313      	orrs	r3, r2
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067e4:	801a      	strh	r2, [r3, #0]
 80067e6:	e03a      	b.n	800685e <USB_EPStartXfer+0x618>
 80067e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067ec:	095b      	lsrs	r3, r3, #5
 80067ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80067f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067f6:	f003 031f 	and.w	r3, r3, #31
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d104      	bne.n	8006808 <USB_EPStartXfer+0x5c2>
 80067fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006802:	3b01      	subs	r3, #1
 8006804:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	b29a      	uxth	r2, r3
 800680e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006812:	b29b      	uxth	r3, r3
 8006814:	029b      	lsls	r3, r3, #10
 8006816:	b29b      	uxth	r3, r3
 8006818:	4313      	orrs	r3, r2
 800681a:	b29b      	uxth	r3, r3
 800681c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006824:	b29a      	uxth	r2, r3
 8006826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006828:	801a      	strh	r2, [r3, #0]
 800682a:	e018      	b.n	800685e <USB_EPStartXfer+0x618>
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	785b      	ldrb	r3, [r3, #1]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d114      	bne.n	800685e <USB_EPStartXfer+0x618>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800683a:	b29b      	uxth	r3, r3
 800683c:	461a      	mov	r2, r3
 800683e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006840:	4413      	add	r3, r2
 8006842:	643b      	str	r3, [r7, #64]	@ 0x40
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	00da      	lsls	r2, r3, #3
 800684a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800684c:	4413      	add	r3, r2
 800684e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006852:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006854:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006858:	b29a      	uxth	r2, r3
 800685a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800685c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	895b      	ldrh	r3, [r3, #10]
 8006862:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	6959      	ldr	r1, [r3, #20]
 800686a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800686e:	b29b      	uxth	r3, r3
 8006870:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fbca 	bl	800700e <USB_WritePMA>
 800687a:	e193      	b.n	8006ba4 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	b29b      	uxth	r3, r3
 8006892:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800689a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	441a      	add	r2, r3
 80068a8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80068ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068bc:	b29b      	uxth	r3, r3
 80068be:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	461a      	mov	r2, r3
 80068ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068d0:	4413      	add	r3, r2
 80068d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	00da      	lsls	r2, r3, #3
 80068da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068dc:	4413      	add	r3, r2
 80068de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80068e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80068ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	891b      	ldrh	r3, [r3, #8]
 80068f2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	6959      	ldr	r1, [r3, #20]
 80068fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068fe:	b29b      	uxth	r3, r3
 8006900:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fb82 	bl	800700e <USB_WritePMA>
 800690a:	e14b      	b.n	8006ba4 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	6a1a      	ldr	r2, [r3, #32]
 8006910:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006914:	1ad2      	subs	r2, r2, r3
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	b29b      	uxth	r3, r3
 8006928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 809a 	beq.w	8006a66 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	673b      	str	r3, [r7, #112]	@ 0x70
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	785b      	ldrb	r3, [r3, #1]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d16b      	bne.n	8006a16 <USB_EPStartXfer+0x7d0>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006948:	b29b      	uxth	r3, r3
 800694a:	461a      	mov	r2, r3
 800694c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800694e:	4413      	add	r3, r2
 8006950:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	00da      	lsls	r2, r3, #3
 8006958:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800695a:	4413      	add	r3, r2
 800695c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006960:	667b      	str	r3, [r7, #100]	@ 0x64
 8006962:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	b29b      	uxth	r3, r3
 8006968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800696c:	b29a      	uxth	r2, r3
 800696e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006970:	801a      	strh	r2, [r3, #0]
 8006972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10a      	bne.n	8006990 <USB_EPStartXfer+0x74a>
 800697a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	b29b      	uxth	r3, r3
 8006980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006988:	b29a      	uxth	r2, r3
 800698a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800698c:	801a      	strh	r2, [r3, #0]
 800698e:	e05b      	b.n	8006a48 <USB_EPStartXfer+0x802>
 8006990:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006994:	2b3e      	cmp	r3, #62	@ 0x3e
 8006996:	d81c      	bhi.n	80069d2 <USB_EPStartXfer+0x78c>
 8006998:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800699c:	085b      	lsrs	r3, r3, #1
 800699e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80069a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d004      	beq.n	80069b8 <USB_EPStartXfer+0x772>
 80069ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069b2:	3301      	adds	r3, #1
 80069b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80069b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069ba:	881b      	ldrh	r3, [r3, #0]
 80069bc:	b29a      	uxth	r2, r3
 80069be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	029b      	lsls	r3, r3, #10
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	4313      	orrs	r3, r2
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069ce:	801a      	strh	r2, [r3, #0]
 80069d0:	e03a      	b.n	8006a48 <USB_EPStartXfer+0x802>
 80069d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069d6:	095b      	lsrs	r3, r3, #5
 80069d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80069dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069e0:	f003 031f 	and.w	r3, r3, #31
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d104      	bne.n	80069f2 <USB_EPStartXfer+0x7ac>
 80069e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069ec:	3b01      	subs	r3, #1
 80069ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80069f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	029b      	lsls	r3, r3, #10
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	4313      	orrs	r3, r2
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a12:	801a      	strh	r2, [r3, #0]
 8006a14:	e018      	b.n	8006a48 <USB_EPStartXfer+0x802>
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	785b      	ldrb	r3, [r3, #1]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d114      	bne.n	8006a48 <USB_EPStartXfer+0x802>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	461a      	mov	r2, r3
 8006a28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a2a:	4413      	add	r3, r2
 8006a2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	00da      	lsls	r2, r3, #3
 8006a34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a36:	4413      	add	r3, r2
 8006a38:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a46:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	895b      	ldrh	r3, [r3, #10]
 8006a4c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	6959      	ldr	r1, [r3, #20]
 8006a54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fad5 	bl	800700e <USB_WritePMA>
 8006a64:	e09e      	b.n	8006ba4 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	785b      	ldrb	r3, [r3, #1]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d16b      	bne.n	8006b46 <USB_EPStartXfer+0x900>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006a7e:	4413      	add	r3, r2
 8006a80:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	00da      	lsls	r2, r3, #3
 8006a88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006a90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006aa0:	801a      	strh	r2, [r3, #0]
 8006aa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10a      	bne.n	8006ac0 <USB_EPStartXfer+0x87a>
 8006aaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006abc:	801a      	strh	r2, [r3, #0]
 8006abe:	e063      	b.n	8006b88 <USB_EPStartXfer+0x942>
 8006ac0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ac4:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ac6:	d81c      	bhi.n	8006b02 <USB_EPStartXfer+0x8bc>
 8006ac8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006acc:	085b      	lsrs	r3, r3, #1
 8006ace:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d004      	beq.n	8006ae8 <USB_EPStartXfer+0x8a2>
 8006ade:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006ae8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	029b      	lsls	r3, r3, #10
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	4313      	orrs	r3, r2
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006afe:	801a      	strh	r2, [r3, #0]
 8006b00:	e042      	b.n	8006b88 <USB_EPStartXfer+0x942>
 8006b02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b06:	095b      	lsrs	r3, r3, #5
 8006b08:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b10:	f003 031f 	and.w	r3, r3, #31
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d104      	bne.n	8006b22 <USB_EPStartXfer+0x8dc>
 8006b18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b24:	881b      	ldrh	r3, [r3, #0]
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	029b      	lsls	r3, r3, #10
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	4313      	orrs	r3, r2
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b42:	801a      	strh	r2, [r3, #0]
 8006b44:	e020      	b.n	8006b88 <USB_EPStartXfer+0x942>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	785b      	ldrb	r3, [r3, #1]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d11c      	bne.n	8006b88 <USB_EPStartXfer+0x942>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b62:	4413      	add	r3, r2
 8006b64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	00da      	lsls	r2, r3, #3
 8006b6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b72:	4413      	add	r3, r2
 8006b74:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006b78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006b86:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	891b      	ldrh	r3, [r3, #8]
 8006b8c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	6959      	ldr	r1, [r3, #20]
 8006b94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fa35 	bl	800700e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bba:	817b      	strh	r3, [r7, #10]
 8006bbc:	897b      	ldrh	r3, [r7, #10]
 8006bbe:	f083 0310 	eor.w	r3, r3, #16
 8006bc2:	817b      	strh	r3, [r7, #10]
 8006bc4:	897b      	ldrh	r3, [r7, #10]
 8006bc6:	f083 0320 	eor.w	r3, r3, #32
 8006bca:	817b      	strh	r3, [r7, #10]
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	441a      	add	r2, r3
 8006bd6:	897b      	ldrh	r3, [r7, #10]
 8006bd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006be0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	8013      	strh	r3, [r2, #0]
 8006bec:	e0d5      	b.n	8006d9a <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	7b1b      	ldrb	r3, [r3, #12]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d156      	bne.n	8006ca4 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d122      	bne.n	8006c44 <USB_EPStartXfer+0x9fe>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	78db      	ldrb	r3, [r3, #3]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d11e      	bne.n	8006c44 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4413      	add	r3, r2
 8006c10:	881b      	ldrh	r3, [r3, #0]
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c1c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	441a      	add	r2, r3
 8006c2a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006c2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c36:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	8013      	strh	r3, [r2, #0]
 8006c42:	e01d      	b.n	8006c80 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c5a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	441a      	add	r2, r3
 8006c68:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8006c6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	699a      	ldr	r2, [r3, #24]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d907      	bls.n	8006c9c <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	699a      	ldr	r2, [r3, #24]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	1ad2      	subs	r2, r2, r3
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	619a      	str	r2, [r3, #24]
 8006c9a:	e054      	b.n	8006d46 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	619a      	str	r2, [r3, #24]
 8006ca2:	e050      	b.n	8006d46 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	78db      	ldrb	r3, [r3, #3]
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d142      	bne.n	8006d32 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	69db      	ldr	r3, [r3, #28]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d048      	beq.n	8006d46 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006cc4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006cc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d005      	beq.n	8006cdc <USB_EPStartXfer+0xa96>
 8006cd0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10b      	bne.n	8006cf4 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006cdc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006ce0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d12e      	bne.n	8006d46 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006ce8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d128      	bne.n	8006d46 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4413      	add	r3, r2
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d0a:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	441a      	add	r2, r3
 8006d18:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8006d1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d28:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	8013      	strh	r3, [r2, #0]
 8006d30:	e009      	b.n	8006d46 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	78db      	ldrb	r3, [r3, #3]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d103      	bne.n	8006d42 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	619a      	str	r2, [r3, #24]
 8006d40:	e001      	b.n	8006d46 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e02a      	b.n	8006d9c <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4413      	add	r3, r2
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d5c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006d60:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006d64:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006d68:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006d6c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006d70:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006d74:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	441a      	add	r2, r3
 8006d82:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006d86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	37b0      	adds	r7, #176	@ 0xb0
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	785b      	ldrb	r3, [r3, #1]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d020      	beq.n	8006df8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4413      	add	r3, r2
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dcc:	81bb      	strh	r3, [r7, #12]
 8006dce:	89bb      	ldrh	r3, [r7, #12]
 8006dd0:	f083 0310 	eor.w	r3, r3, #16
 8006dd4:	81bb      	strh	r3, [r7, #12]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	441a      	add	r2, r3
 8006de0:	89bb      	ldrh	r3, [r7, #12]
 8006de2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006de6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	8013      	strh	r3, [r2, #0]
 8006df6:	e01f      	b.n	8006e38 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e0e:	81fb      	strh	r3, [r7, #14]
 8006e10:	89fb      	ldrh	r3, [r7, #14]
 8006e12:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006e16:	81fb      	strh	r3, [r7, #14]
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	441a      	add	r2, r3
 8006e22:	89fb      	ldrh	r3, [r7, #14]
 8006e24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b087      	sub	sp, #28
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
 8006e4e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	785b      	ldrb	r3, [r3, #1]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d04c      	beq.n	8006ef2 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4413      	add	r3, r2
 8006e62:	881b      	ldrh	r3, [r3, #0]
 8006e64:	823b      	strh	r3, [r7, #16]
 8006e66:	8a3b      	ldrh	r3, [r7, #16]
 8006e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d01b      	beq.n	8006ea8 <USB_EPClearStall+0x62>
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	881b      	ldrh	r3, [r3, #0]
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e86:	81fb      	strh	r3, [r7, #14]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	441a      	add	r2, r3
 8006e92:	89fb      	ldrh	r3, [r7, #14]
 8006e94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ea0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	78db      	ldrb	r3, [r3, #3]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d06c      	beq.n	8006f8a <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	4413      	add	r3, r2
 8006eba:	881b      	ldrh	r3, [r3, #0]
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ec2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ec6:	81bb      	strh	r3, [r7, #12]
 8006ec8:	89bb      	ldrh	r3, [r7, #12]
 8006eca:	f083 0320 	eor.w	r3, r3, #32
 8006ece:	81bb      	strh	r3, [r7, #12]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	441a      	add	r2, r3
 8006eda:	89bb      	ldrh	r3, [r7, #12]
 8006edc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ee0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ee4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	8013      	strh	r3, [r2, #0]
 8006ef0:	e04b      	b.n	8006f8a <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	881b      	ldrh	r3, [r3, #0]
 8006efe:	82fb      	strh	r3, [r7, #22]
 8006f00:	8afb      	ldrh	r3, [r7, #22]
 8006f02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d01b      	beq.n	8006f42 <USB_EPClearStall+0xfc>
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	881b      	ldrh	r3, [r3, #0]
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f20:	82bb      	strh	r3, [r7, #20]
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	441a      	add	r2, r3
 8006f2c:	8abb      	ldrh	r3, [r7, #20]
 8006f2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f58:	827b      	strh	r3, [r7, #18]
 8006f5a:	8a7b      	ldrh	r3, [r7, #18]
 8006f5c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006f60:	827b      	strh	r3, [r7, #18]
 8006f62:	8a7b      	ldrh	r3, [r7, #18]
 8006f64:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006f68:	827b      	strh	r3, [r7, #18]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	441a      	add	r2, r3
 8006f74:	8a7b      	ldrh	r3, [r7, #18]
 8006f76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	371c      	adds	r7, #28
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006fa4:	78fb      	ldrb	r3, [r7, #3]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d103      	bne.n	8006fb2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2280      	movs	r2, #128	@ 0x80
 8006fae:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	370c      	adds	r7, #12
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr

08006fee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006fee:	b480      	push	{r7}
 8006ff0:	b085      	sub	sp, #20
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007000:	68fb      	ldr	r3, [r7, #12]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3714      	adds	r7, #20
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800700e:	b480      	push	{r7}
 8007010:	b08b      	sub	sp, #44	@ 0x2c
 8007012:	af00      	add	r7, sp, #0
 8007014:	60f8      	str	r0, [r7, #12]
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	4611      	mov	r1, r2
 800701a:	461a      	mov	r2, r3
 800701c:	460b      	mov	r3, r1
 800701e:	80fb      	strh	r3, [r7, #6]
 8007020:	4613      	mov	r3, r2
 8007022:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007024:	88bb      	ldrh	r3, [r7, #4]
 8007026:	3301      	adds	r3, #1
 8007028:	085b      	lsrs	r3, r3, #1
 800702a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007034:	88fa      	ldrh	r2, [r7, #6]
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	4413      	add	r3, r2
 800703a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800703e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	627b      	str	r3, [r7, #36]	@ 0x24
 8007044:	e01c      	b.n	8007080 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	3301      	adds	r3, #1
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	b21b      	sxth	r3, r3
 8007054:	021b      	lsls	r3, r3, #8
 8007056:	b21a      	sxth	r2, r3
 8007058:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800705c:	4313      	orrs	r3, r2
 800705e:	b21b      	sxth	r3, r3
 8007060:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007062:	6a3b      	ldr	r3, [r7, #32]
 8007064:	8a7a      	ldrh	r2, [r7, #18]
 8007066:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007068:	6a3b      	ldr	r3, [r7, #32]
 800706a:	3302      	adds	r3, #2
 800706c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	3301      	adds	r3, #1
 8007072:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	3301      	adds	r3, #1
 8007078:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800707a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707c:	3b01      	subs	r3, #1
 800707e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1df      	bne.n	8007046 <USB_WritePMA+0x38>
  }
}
 8007086:	bf00      	nop
 8007088:	bf00      	nop
 800708a:	372c      	adds	r7, #44	@ 0x2c
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007094:	b480      	push	{r7}
 8007096:	b08b      	sub	sp, #44	@ 0x2c
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	4611      	mov	r1, r2
 80070a0:	461a      	mov	r2, r3
 80070a2:	460b      	mov	r3, r1
 80070a4:	80fb      	strh	r3, [r7, #6]
 80070a6:	4613      	mov	r3, r2
 80070a8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80070aa:	88bb      	ldrh	r3, [r7, #4]
 80070ac:	085b      	lsrs	r3, r3, #1
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80070ba:	88fa      	ldrh	r2, [r7, #6]
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070c4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80070ca:	e018      	b.n	80070fe <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	881b      	ldrh	r3, [r3, #0]
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	3302      	adds	r3, #2
 80070d8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	b2da      	uxtb	r2, r3
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	3301      	adds	r3, #1
 80070e6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	0a1b      	lsrs	r3, r3, #8
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	3301      	adds	r3, #1
 80070f6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80070f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fa:	3b01      	subs	r3, #1
 80070fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80070fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1e3      	bne.n	80070cc <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007104:	88bb      	ldrh	r3, [r7, #4]
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	b29b      	uxth	r3, r3
 800710c:	2b00      	cmp	r3, #0
 800710e:	d007      	beq.n	8007120 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	b29b      	uxth	r3, r3
 8007116:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	b2da      	uxtb	r2, r3
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	701a      	strb	r2, [r3, #0]
  }
}
 8007120:	bf00      	nop
 8007122:	372c      	adds	r7, #44	@ 0x2c
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	460b      	mov	r3, r1
 8007136:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007138:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800713c:	f002 f8a6 	bl	800928c <USBD_static_malloc>
 8007140:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d105      	bne.n	8007154 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8007150:	2302      	movs	r3, #2
 8007152:	e066      	b.n	8007222 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	7c1b      	ldrb	r3, [r3, #16]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d119      	bne.n	8007198 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007164:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007168:	2202      	movs	r2, #2
 800716a:	2181      	movs	r1, #129	@ 0x81
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f001 ff34 	bl	8008fda <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007178:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800717c:	2202      	movs	r2, #2
 800717e:	2101      	movs	r1, #1
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f001 ff2a 	bl	8008fda <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2210      	movs	r2, #16
 8007192:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8007196:	e016      	b.n	80071c6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007198:	2340      	movs	r3, #64	@ 0x40
 800719a:	2202      	movs	r2, #2
 800719c:	2181      	movs	r1, #129	@ 0x81
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f001 ff1b 	bl	8008fda <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80071aa:	2340      	movs	r3, #64	@ 0x40
 80071ac:	2202      	movs	r2, #2
 80071ae:	2101      	movs	r1, #1
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f001 ff12 	bl	8008fda <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2210      	movs	r2, #16
 80071c2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80071c6:	2308      	movs	r3, #8
 80071c8:	2203      	movs	r2, #3
 80071ca:	2182      	movs	r1, #130	@ 0x82
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f001 ff04 	bl	8008fda <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	7c1b      	ldrb	r3, [r3, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d109      	bne.n	8007210 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007202:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007206:	2101      	movs	r1, #1
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 ffd5 	bl	80091b8 <USBD_LL_PrepareReceive>
 800720e:	e007      	b.n	8007220 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007216:	2340      	movs	r3, #64	@ 0x40
 8007218:	2101      	movs	r1, #1
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f001 ffcc 	bl	80091b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b082      	sub	sp, #8
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	460b      	mov	r3, r1
 8007234:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007236:	2181      	movs	r1, #129	@ 0x81
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f001 fef4 	bl	8009026 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007244:	2101      	movs	r1, #1
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f001 feed 	bl	8009026 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007254:	2182      	movs	r1, #130	@ 0x82
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f001 fee5 	bl	8009026 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00e      	beq.n	8007294 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007286:	4618      	mov	r0, r3
 8007288:	f002 f80e 	bl	80092a8 <USBD_static_free>
    pdev->pClassData = NULL;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80072b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80072b2:	2300      	movs	r3, #0
 80072b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80072b6:	2300      	movs	r3, #0
 80072b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d101      	bne.n	80072c8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e0af      	b.n	8007428 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d03f      	beq.n	8007354 <USBD_CDC_Setup+0xb4>
 80072d4:	2b20      	cmp	r3, #32
 80072d6:	f040 809f 	bne.w	8007418 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	88db      	ldrh	r3, [r3, #6]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d02e      	beq.n	8007340 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	b25b      	sxtb	r3, r3
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	da16      	bge.n	800731a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	683a      	ldr	r2, [r7, #0]
 80072f6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80072f8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	88d2      	ldrh	r2, [r2, #6]
 80072fe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	88db      	ldrh	r3, [r3, #6]
 8007304:	2b07      	cmp	r3, #7
 8007306:	bf28      	it	cs
 8007308:	2307      	movcs	r3, #7
 800730a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	89fa      	ldrh	r2, [r7, #14]
 8007310:	4619      	mov	r1, r3
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f001 fa9f 	bl	8008856 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007318:	e085      	b.n	8007426 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	785a      	ldrb	r2, [r3, #1]
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	88db      	ldrh	r3, [r3, #6]
 8007328:	b2da      	uxtb	r2, r3
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007330:	6939      	ldr	r1, [r7, #16]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	88db      	ldrh	r3, [r3, #6]
 8007336:	461a      	mov	r2, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f001 fab8 	bl	80088ae <USBD_CtlPrepareRx>
      break;
 800733e:	e072      	b.n	8007426 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	7850      	ldrb	r0, [r2, #1]
 800734c:	2200      	movs	r2, #0
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	4798      	blx	r3
      break;
 8007352:	e068      	b.n	8007426 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	785b      	ldrb	r3, [r3, #1]
 8007358:	2b0b      	cmp	r3, #11
 800735a:	d852      	bhi.n	8007402 <USBD_CDC_Setup+0x162>
 800735c:	a201      	add	r2, pc, #4	@ (adr r2, 8007364 <USBD_CDC_Setup+0xc4>)
 800735e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007362:	bf00      	nop
 8007364:	08007395 	.word	0x08007395
 8007368:	08007411 	.word	0x08007411
 800736c:	08007403 	.word	0x08007403
 8007370:	08007403 	.word	0x08007403
 8007374:	08007403 	.word	0x08007403
 8007378:	08007403 	.word	0x08007403
 800737c:	08007403 	.word	0x08007403
 8007380:	08007403 	.word	0x08007403
 8007384:	08007403 	.word	0x08007403
 8007388:	08007403 	.word	0x08007403
 800738c:	080073bf 	.word	0x080073bf
 8007390:	080073e9 	.word	0x080073e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b03      	cmp	r3, #3
 800739e:	d107      	bne.n	80073b0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80073a0:	f107 030a 	add.w	r3, r7, #10
 80073a4:	2202      	movs	r2, #2
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f001 fa54 	bl	8008856 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073ae:	e032      	b.n	8007416 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80073b0:	6839      	ldr	r1, [r7, #0]
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f001 f9de 	bl	8008774 <USBD_CtlError>
            ret = USBD_FAIL;
 80073b8:	2303      	movs	r3, #3
 80073ba:	75fb      	strb	r3, [r7, #23]
          break;
 80073bc:	e02b      	b.n	8007416 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d107      	bne.n	80073da <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80073ca:	f107 030d 	add.w	r3, r7, #13
 80073ce:	2201      	movs	r2, #1
 80073d0:	4619      	mov	r1, r3
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f001 fa3f 	bl	8008856 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073d8:	e01d      	b.n	8007416 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f001 f9c9 	bl	8008774 <USBD_CtlError>
            ret = USBD_FAIL;
 80073e2:	2303      	movs	r3, #3
 80073e4:	75fb      	strb	r3, [r7, #23]
          break;
 80073e6:	e016      	b.n	8007416 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b03      	cmp	r3, #3
 80073f2:	d00f      	beq.n	8007414 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80073f4:	6839      	ldr	r1, [r7, #0]
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f001 f9bc 	bl	8008774 <USBD_CtlError>
            ret = USBD_FAIL;
 80073fc:	2303      	movs	r3, #3
 80073fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007400:	e008      	b.n	8007414 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f001 f9b5 	bl	8008774 <USBD_CtlError>
          ret = USBD_FAIL;
 800740a:	2303      	movs	r3, #3
 800740c:	75fb      	strb	r3, [r7, #23]
          break;
 800740e:	e002      	b.n	8007416 <USBD_CDC_Setup+0x176>
          break;
 8007410:	bf00      	nop
 8007412:	e008      	b.n	8007426 <USBD_CDC_Setup+0x186>
          break;
 8007414:	bf00      	nop
      }
      break;
 8007416:	e006      	b.n	8007426 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007418:	6839      	ldr	r1, [r7, #0]
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f001 f9aa 	bl	8008774 <USBD_CtlError>
      ret = USBD_FAIL;
 8007420:	2303      	movs	r3, #3
 8007422:	75fb      	strb	r3, [r7, #23]
      break;
 8007424:	bf00      	nop
  }

  return (uint8_t)ret;
 8007426:	7dfb      	ldrb	r3, [r7, #23]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3718      	adds	r7, #24
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	460b      	mov	r3, r1
 800743a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007442:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800744a:	2b00      	cmp	r3, #0
 800744c:	d101      	bne.n	8007452 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800744e:	2303      	movs	r3, #3
 8007450:	e04f      	b.n	80074f2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007458:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800745a:	78fa      	ldrb	r2, [r7, #3]
 800745c:	6879      	ldr	r1, [r7, #4]
 800745e:	4613      	mov	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	440b      	add	r3, r1
 8007468:	3318      	adds	r3, #24
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d029      	beq.n	80074c4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007470:	78fa      	ldrb	r2, [r7, #3]
 8007472:	6879      	ldr	r1, [r7, #4]
 8007474:	4613      	mov	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	440b      	add	r3, r1
 800747e:	3318      	adds	r3, #24
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	78f9      	ldrb	r1, [r7, #3]
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	460b      	mov	r3, r1
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	440b      	add	r3, r1
 800748c:	00db      	lsls	r3, r3, #3
 800748e:	4403      	add	r3, r0
 8007490:	3320      	adds	r3, #32
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	fbb2 f1f3 	udiv	r1, r2, r3
 8007498:	fb01 f303 	mul.w	r3, r1, r3
 800749c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d110      	bne.n	80074c4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80074a2:	78fa      	ldrb	r2, [r7, #3]
 80074a4:	6879      	ldr	r1, [r7, #4]
 80074a6:	4613      	mov	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	440b      	add	r3, r1
 80074b0:	3318      	adds	r3, #24
 80074b2:	2200      	movs	r2, #0
 80074b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80074b6:	78f9      	ldrb	r1, [r7, #3]
 80074b8:	2300      	movs	r3, #0
 80074ba:	2200      	movs	r2, #0
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f001 fe5a 	bl	8009176 <USBD_LL_Transmit>
 80074c2:	e015      	b.n	80074f0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00b      	beq.n	80074f0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80074e6:	68ba      	ldr	r2, [r7, #8]
 80074e8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80074ec:	78fa      	ldrb	r2, [r7, #3]
 80074ee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b084      	sub	sp, #16
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	460b      	mov	r3, r1
 8007504:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800750c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007518:	2303      	movs	r3, #3
 800751a:	e015      	b.n	8007548 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800751c:	78fb      	ldrb	r3, [r7, #3]
 800751e:	4619      	mov	r1, r3
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f001 fe6a 	bl	80091fa <USBD_LL_GetRxDataSize>
 8007526:	4602      	mov	r2, r0
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007542:	4611      	mov	r1, r2
 8007544:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800755e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007566:	2303      	movs	r3, #3
 8007568:	e01a      	b.n	80075a0 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d014      	beq.n	800759e <USBD_CDC_EP0_RxReady+0x4e>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800757a:	2bff      	cmp	r3, #255	@ 0xff
 800757c:	d00f      	beq.n	800759e <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800758c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007594:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	22ff      	movs	r2, #255	@ 0xff
 800759a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2243      	movs	r2, #67	@ 0x43
 80075b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80075b6:	4b03      	ldr	r3, [pc, #12]	@ (80075c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr
 80075c4:	20000094 	.word	0x20000094

080075c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2243      	movs	r2, #67	@ 0x43
 80075d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80075d6:	4b03      	ldr	r3, [pc, #12]	@ (80075e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80075d8:	4618      	mov	r0, r3
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr
 80075e4:	20000050 	.word	0x20000050

080075e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2243      	movs	r2, #67	@ 0x43
 80075f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80075f6:	4b03      	ldr	r3, [pc, #12]	@ (8007604 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	200000d8 	.word	0x200000d8

08007608 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	220a      	movs	r2, #10
 8007614:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007616:	4b03      	ldr	r3, [pc, #12]	@ (8007624 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007618:	4618      	mov	r0, r3
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr
 8007624:	2000000c 	.word	0x2000000c

08007628 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007638:	2303      	movs	r3, #3
 800763a:	e004      	b.n	8007646 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007652:	b480      	push	{r7}
 8007654:	b087      	sub	sp, #28
 8007656:	af00      	add	r7, sp, #0
 8007658:	60f8      	str	r0, [r7, #12]
 800765a:	60b9      	str	r1, [r7, #8]
 800765c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007664:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d101      	bne.n	8007670 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800766c:	2303      	movs	r3, #3
 800766e:	e008      	b.n	8007682 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	371c      	adds	r7, #28
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800768e:	b480      	push	{r7}
 8007690:	b085      	sub	sp, #20
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800769e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e004      	b.n	80076b4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	683a      	ldr	r2, [r7, #0]
 80076ae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80076ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d101      	bne.n	80076de <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80076da:	2303      	movs	r3, #3
 80076dc:	e016      	b.n	800770c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	7c1b      	ldrb	r3, [r3, #16]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d109      	bne.n	80076fa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80076ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80076f0:	2101      	movs	r1, #1
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f001 fd60 	bl	80091b8 <USBD_LL_PrepareReceive>
 80076f8:	e007      	b.n	800770a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007700:	2340      	movs	r3, #64	@ 0x40
 8007702:	2101      	movs	r1, #1
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f001 fd57 	bl	80091b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	4613      	mov	r3, r2
 8007720:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d101      	bne.n	800772c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007728:	2303      	movs	r3, #3
 800772a:	e01f      	b.n	800776c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2201      	movs	r2, #1
 8007756:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	79fa      	ldrb	r2, [r7, #7]
 800775e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f001 fbbf 	bl	8008ee4 <USBD_LL_Init>
 8007766:	4603      	mov	r3, r0
 8007768:	75fb      	strb	r3, [r7, #23]

  return ret;
 800776a:	7dfb      	ldrb	r3, [r7, #23]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3718      	adds	r7, #24
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800777e:	2300      	movs	r3, #0
 8007780:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d101      	bne.n	800778c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007788:	2303      	movs	r3, #3
 800778a:	e016      	b.n	80077ba <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800779a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00b      	beq.n	80077b8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077a8:	f107 020e 	add.w	r2, r7, #14
 80077ac:	4610      	mov	r0, r2
 80077ae:	4798      	blx	r3
 80077b0:	4602      	mov	r2, r0
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b082      	sub	sp, #8
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f001 fbea 	bl	8008fa4 <USBD_LL_Start>
 80077d0:	4603      	mov	r3, r0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3708      	adds	r7, #8
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80077da:	b480      	push	{r7}
 80077dc:	b083      	sub	sp, #12
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	460b      	mov	r3, r1
 80077fa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80077fc:	2303      	movs	r3, #3
 80077fe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007806:	2b00      	cmp	r3, #0
 8007808:	d009      	beq.n	800781e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	78fa      	ldrb	r2, [r7, #3]
 8007814:	4611      	mov	r1, r2
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	4798      	blx	r3
 800781a:	4603      	mov	r3, r0
 800781c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800781e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800783a:	2b00      	cmp	r3, #0
 800783c:	d007      	beq.n	800784e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	78fa      	ldrb	r2, [r7, #3]
 8007848:	4611      	mov	r1, r2
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	4798      	blx	r3
  }

  return USBD_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	4618      	mov	r0, r3
 800786c:	f000 ff48 	bl	8008700 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800787e:	461a      	mov	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800788c:	f003 031f 	and.w	r3, r3, #31
 8007890:	2b02      	cmp	r3, #2
 8007892:	d01a      	beq.n	80078ca <USBD_LL_SetupStage+0x72>
 8007894:	2b02      	cmp	r3, #2
 8007896:	d822      	bhi.n	80078de <USBD_LL_SetupStage+0x86>
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <USBD_LL_SetupStage+0x4a>
 800789c:	2b01      	cmp	r3, #1
 800789e:	d00a      	beq.n	80078b6 <USBD_LL_SetupStage+0x5e>
 80078a0:	e01d      	b.n	80078de <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f9f0 	bl	8007c90 <USBD_StdDevReq>
 80078b0:	4603      	mov	r3, r0
 80078b2:	73fb      	strb	r3, [r7, #15]
      break;
 80078b4:	e020      	b.n	80078f8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80078bc:	4619      	mov	r1, r3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fa54 	bl	8007d6c <USBD_StdItfReq>
 80078c4:	4603      	mov	r3, r0
 80078c6:	73fb      	strb	r3, [r7, #15]
      break;
 80078c8:	e016      	b.n	80078f8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80078d0:	4619      	mov	r1, r3
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fa93 	bl	8007dfe <USBD_StdEPReq>
 80078d8:	4603      	mov	r3, r0
 80078da:	73fb      	strb	r3, [r7, #15]
      break;
 80078dc:	e00c      	b.n	80078f8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80078e4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f001 fbb9 	bl	8009064 <USBD_LL_StallEP>
 80078f2:	4603      	mov	r3, r0
 80078f4:	73fb      	strb	r3, [r7, #15]
      break;
 80078f6:	bf00      	nop
  }

  return ret;
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b086      	sub	sp, #24
 8007906:	af00      	add	r7, sp, #0
 8007908:	60f8      	str	r0, [r7, #12]
 800790a:	460b      	mov	r3, r1
 800790c:	607a      	str	r2, [r7, #4]
 800790e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007910:	7afb      	ldrb	r3, [r7, #11]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d138      	bne.n	8007988 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800791c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007924:	2b03      	cmp	r3, #3
 8007926:	d14a      	bne.n	80079be <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	689a      	ldr	r2, [r3, #8]
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	429a      	cmp	r2, r3
 8007932:	d913      	bls.n	800795c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	689a      	ldr	r2, [r3, #8]
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	1ad2      	subs	r2, r2, r3
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	68da      	ldr	r2, [r3, #12]
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	4293      	cmp	r3, r2
 800794c:	bf28      	it	cs
 800794e:	4613      	movcs	r3, r2
 8007950:	461a      	mov	r2, r3
 8007952:	6879      	ldr	r1, [r7, #4]
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 ffc7 	bl	80088e8 <USBD_CtlContinueRx>
 800795a:	e030      	b.n	80079be <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b03      	cmp	r3, #3
 8007966:	d10b      	bne.n	8007980 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d005      	beq.n	8007980 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 ffc2 	bl	800890a <USBD_CtlSendStatus>
 8007986:	e01a      	b.n	80079be <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b03      	cmp	r3, #3
 8007992:	d114      	bne.n	80079be <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00e      	beq.n	80079be <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	7afa      	ldrb	r2, [r7, #11]
 80079aa:	4611      	mov	r1, r2
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	4798      	blx	r3
 80079b0:	4603      	mov	r3, r0
 80079b2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80079b4:	7dfb      	ldrb	r3, [r7, #23]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d001      	beq.n	80079be <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80079ba:	7dfb      	ldrb	r3, [r7, #23]
 80079bc:	e000      	b.n	80079c0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3718      	adds	r7, #24
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	460b      	mov	r3, r1
 80079d2:	607a      	str	r2, [r7, #4]
 80079d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80079d6:	7afb      	ldrb	r3, [r7, #11]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d16b      	bne.n	8007ab4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	3314      	adds	r3, #20
 80079e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d156      	bne.n	8007a9a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	689a      	ldr	r2, [r3, #8]
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d914      	bls.n	8007a22 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	689a      	ldr	r2, [r3, #8]
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	1ad2      	subs	r2, r2, r3
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	6879      	ldr	r1, [r7, #4]
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f000 ff3c 	bl	800888c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a14:	2300      	movs	r3, #0
 8007a16:	2200      	movs	r2, #0
 8007a18:	2100      	movs	r1, #0
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f001 fbcc 	bl	80091b8 <USBD_LL_PrepareReceive>
 8007a20:	e03b      	b.n	8007a9a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	68da      	ldr	r2, [r3, #12]
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d11c      	bne.n	8007a68 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d316      	bcc.n	8007a68 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	685a      	ldr	r2, [r3, #4]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d20f      	bcs.n	8007a68 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a48:	2200      	movs	r2, #0
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f000 ff1d 	bl	800888c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	2100      	movs	r1, #0
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f001 fba9 	bl	80091b8 <USBD_LL_PrepareReceive>
 8007a66:	e018      	b.n	8007a9a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b03      	cmp	r3, #3
 8007a72:	d10b      	bne.n	8007a8c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d005      	beq.n	8007a8c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a8c:	2180      	movs	r1, #128	@ 0x80
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f001 fae8 	bl	8009064 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f000 ff4b 	bl	8008930 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d122      	bne.n	8007aea <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f7ff fe98 	bl	80077da <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007ab2:	e01a      	b.n	8007aea <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	2b03      	cmp	r3, #3
 8007abe:	d114      	bne.n	8007aea <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ac6:	695b      	ldr	r3, [r3, #20]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00e      	beq.n	8007aea <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	7afa      	ldrb	r2, [r7, #11]
 8007ad6:	4611      	mov	r1, r2
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	4798      	blx	r3
 8007adc:	4603      	mov	r3, r0
 8007ade:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007ae0:	7dfb      	ldrb	r3, [r7, #23]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d001      	beq.n	8007aea <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007ae6:	7dfb      	ldrb	r3, [r7, #23]
 8007ae8:	e000      	b.n	8007aec <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3718      	adds	r7, #24
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d101      	bne.n	8007b28 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e02f      	b.n	8007b88 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00f      	beq.n	8007b52 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d009      	beq.n	8007b52 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	6852      	ldr	r2, [r2, #4]
 8007b4a:	b2d2      	uxtb	r2, r2
 8007b4c:	4611      	mov	r1, r2
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b52:	2340      	movs	r3, #64	@ 0x40
 8007b54:	2200      	movs	r2, #0
 8007b56:	2100      	movs	r1, #0
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f001 fa3e 	bl	8008fda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2240      	movs	r2, #64	@ 0x40
 8007b6a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b6e:	2340      	movs	r3, #64	@ 0x40
 8007b70:	2200      	movs	r2, #0
 8007b72:	2180      	movs	r1, #128	@ 0x80
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f001 fa30 	bl	8008fda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2240      	movs	r2, #64	@ 0x40
 8007b84:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3708      	adds	r7, #8
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	78fa      	ldrb	r2, [r7, #3]
 8007ba0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bbe:	b2da      	uxtb	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2204      	movs	r2, #4
 8007bca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b04      	cmp	r3, #4
 8007bee:	d106      	bne.n	8007bfe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d101      	bne.n	8007c22 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e012      	b.n	8007c48 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d10b      	bne.n	8007c46 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d005      	beq.n	8007c46 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c40:	69db      	ldr	r3, [r3, #28]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b087      	sub	sp, #28
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	3301      	adds	r3, #1
 8007c66:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007c6e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007c72:	021b      	lsls	r3, r3, #8
 8007c74:	b21a      	sxth	r2, r3
 8007c76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	b21b      	sxth	r3, r3
 8007c7e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007c80:	89fb      	ldrh	r3, [r7, #14]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	371c      	adds	r7, #28
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
	...

08007c90 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ca6:	2b40      	cmp	r3, #64	@ 0x40
 8007ca8:	d005      	beq.n	8007cb6 <USBD_StdDevReq+0x26>
 8007caa:	2b40      	cmp	r3, #64	@ 0x40
 8007cac:	d853      	bhi.n	8007d56 <USBD_StdDevReq+0xc6>
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00b      	beq.n	8007cca <USBD_StdDevReq+0x3a>
 8007cb2:	2b20      	cmp	r3, #32
 8007cb4:	d14f      	bne.n	8007d56 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	6839      	ldr	r1, [r7, #0]
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	4798      	blx	r3
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8007cc8:	e04a      	b.n	8007d60 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	785b      	ldrb	r3, [r3, #1]
 8007cce:	2b09      	cmp	r3, #9
 8007cd0:	d83b      	bhi.n	8007d4a <USBD_StdDevReq+0xba>
 8007cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8007cd8 <USBD_StdDevReq+0x48>)
 8007cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd8:	08007d2d 	.word	0x08007d2d
 8007cdc:	08007d41 	.word	0x08007d41
 8007ce0:	08007d4b 	.word	0x08007d4b
 8007ce4:	08007d37 	.word	0x08007d37
 8007ce8:	08007d4b 	.word	0x08007d4b
 8007cec:	08007d0b 	.word	0x08007d0b
 8007cf0:	08007d01 	.word	0x08007d01
 8007cf4:	08007d4b 	.word	0x08007d4b
 8007cf8:	08007d23 	.word	0x08007d23
 8007cfc:	08007d15 	.word	0x08007d15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d00:	6839      	ldr	r1, [r7, #0]
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f9de 	bl	80080c4 <USBD_GetDescriptor>
          break;
 8007d08:	e024      	b.n	8007d54 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d0a:	6839      	ldr	r1, [r7, #0]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fb6d 	bl	80083ec <USBD_SetAddress>
          break;
 8007d12:	e01f      	b.n	8007d54 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007d14:	6839      	ldr	r1, [r7, #0]
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fbac 	bl	8008474 <USBD_SetConfig>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	73fb      	strb	r3, [r7, #15]
          break;
 8007d20:	e018      	b.n	8007d54 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fc4b 	bl	80085c0 <USBD_GetConfig>
          break;
 8007d2a:	e013      	b.n	8007d54 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fc7c 	bl	800862c <USBD_GetStatus>
          break;
 8007d34:	e00e      	b.n	8007d54 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d36:	6839      	ldr	r1, [r7, #0]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fcab 	bl	8008694 <USBD_SetFeature>
          break;
 8007d3e:	e009      	b.n	8007d54 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fcba 	bl	80086bc <USBD_ClrFeature>
          break;
 8007d48:	e004      	b.n	8007d54 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fd11 	bl	8008774 <USBD_CtlError>
          break;
 8007d52:	bf00      	nop
      }
      break;
 8007d54:	e004      	b.n	8007d60 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fd0b 	bl	8008774 <USBD_CtlError>
      break;
 8007d5e:	bf00      	nop
  }

  return ret;
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop

08007d6c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d76:	2300      	movs	r3, #0
 8007d78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d82:	2b40      	cmp	r3, #64	@ 0x40
 8007d84:	d005      	beq.n	8007d92 <USBD_StdItfReq+0x26>
 8007d86:	2b40      	cmp	r3, #64	@ 0x40
 8007d88:	d82f      	bhi.n	8007dea <USBD_StdItfReq+0x7e>
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d001      	beq.n	8007d92 <USBD_StdItfReq+0x26>
 8007d8e:	2b20      	cmp	r3, #32
 8007d90:	d12b      	bne.n	8007dea <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d81d      	bhi.n	8007ddc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	889b      	ldrh	r3, [r3, #4]
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d813      	bhi.n	8007dd2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	4798      	blx	r3
 8007db8:	4603      	mov	r3, r0
 8007dba:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	88db      	ldrh	r3, [r3, #6]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d110      	bne.n	8007de6 <USBD_StdItfReq+0x7a>
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10d      	bne.n	8007de6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fd9d 	bl	800890a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007dd0:	e009      	b.n	8007de6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007dd2:	6839      	ldr	r1, [r7, #0]
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fccd 	bl	8008774 <USBD_CtlError>
          break;
 8007dda:	e004      	b.n	8007de6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007ddc:	6839      	ldr	r1, [r7, #0]
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 fcc8 	bl	8008774 <USBD_CtlError>
          break;
 8007de4:	e000      	b.n	8007de8 <USBD_StdItfReq+0x7c>
          break;
 8007de6:	bf00      	nop
      }
      break;
 8007de8:	e004      	b.n	8007df4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fcc1 	bl	8008774 <USBD_CtlError>
      break;
 8007df2:	bf00      	nop
  }

  return ret;
 8007df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b084      	sub	sp, #16
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	889b      	ldrh	r3, [r3, #4]
 8007e10:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e1a:	2b40      	cmp	r3, #64	@ 0x40
 8007e1c:	d007      	beq.n	8007e2e <USBD_StdEPReq+0x30>
 8007e1e:	2b40      	cmp	r3, #64	@ 0x40
 8007e20:	f200 8145 	bhi.w	80080ae <USBD_StdEPReq+0x2b0>
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00c      	beq.n	8007e42 <USBD_StdEPReq+0x44>
 8007e28:	2b20      	cmp	r3, #32
 8007e2a:	f040 8140 	bne.w	80080ae <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	6839      	ldr	r1, [r7, #0]
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	4798      	blx	r3
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e40:	e13a      	b.n	80080b8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	785b      	ldrb	r3, [r3, #1]
 8007e46:	2b03      	cmp	r3, #3
 8007e48:	d007      	beq.n	8007e5a <USBD_StdEPReq+0x5c>
 8007e4a:	2b03      	cmp	r3, #3
 8007e4c:	f300 8129 	bgt.w	80080a2 <USBD_StdEPReq+0x2a4>
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d07f      	beq.n	8007f54 <USBD_StdEPReq+0x156>
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d03c      	beq.n	8007ed2 <USBD_StdEPReq+0xd4>
 8007e58:	e123      	b.n	80080a2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d002      	beq.n	8007e6c <USBD_StdEPReq+0x6e>
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d016      	beq.n	8007e98 <USBD_StdEPReq+0x9a>
 8007e6a:	e02c      	b.n	8007ec6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e6c:	7bbb      	ldrb	r3, [r7, #14]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00d      	beq.n	8007e8e <USBD_StdEPReq+0x90>
 8007e72:	7bbb      	ldrb	r3, [r7, #14]
 8007e74:	2b80      	cmp	r3, #128	@ 0x80
 8007e76:	d00a      	beq.n	8007e8e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e78:	7bbb      	ldrb	r3, [r7, #14]
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f001 f8f1 	bl	8009064 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e82:	2180      	movs	r1, #128	@ 0x80
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f001 f8ed 	bl	8009064 <USBD_LL_StallEP>
 8007e8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e8c:	e020      	b.n	8007ed0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007e8e:	6839      	ldr	r1, [r7, #0]
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fc6f 	bl	8008774 <USBD_CtlError>
              break;
 8007e96:	e01b      	b.n	8007ed0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	885b      	ldrh	r3, [r3, #2]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d10e      	bne.n	8007ebe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00b      	beq.n	8007ebe <USBD_StdEPReq+0xc0>
 8007ea6:	7bbb      	ldrb	r3, [r7, #14]
 8007ea8:	2b80      	cmp	r3, #128	@ 0x80
 8007eaa:	d008      	beq.n	8007ebe <USBD_StdEPReq+0xc0>
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	88db      	ldrh	r3, [r3, #6]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d104      	bne.n	8007ebe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007eb4:	7bbb      	ldrb	r3, [r7, #14]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f001 f8d3 	bl	8009064 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fd23 	bl	800890a <USBD_CtlSendStatus>

              break;
 8007ec4:	e004      	b.n	8007ed0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007ec6:	6839      	ldr	r1, [r7, #0]
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fc53 	bl	8008774 <USBD_CtlError>
              break;
 8007ece:	bf00      	nop
          }
          break;
 8007ed0:	e0ec      	b.n	80080ac <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d002      	beq.n	8007ee4 <USBD_StdEPReq+0xe6>
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	d016      	beq.n	8007f10 <USBD_StdEPReq+0x112>
 8007ee2:	e030      	b.n	8007f46 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ee4:	7bbb      	ldrb	r3, [r7, #14]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00d      	beq.n	8007f06 <USBD_StdEPReq+0x108>
 8007eea:	7bbb      	ldrb	r3, [r7, #14]
 8007eec:	2b80      	cmp	r3, #128	@ 0x80
 8007eee:	d00a      	beq.n	8007f06 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ef0:	7bbb      	ldrb	r3, [r7, #14]
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f001 f8b5 	bl	8009064 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007efa:	2180      	movs	r1, #128	@ 0x80
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f001 f8b1 	bl	8009064 <USBD_LL_StallEP>
 8007f02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f04:	e025      	b.n	8007f52 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007f06:	6839      	ldr	r1, [r7, #0]
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fc33 	bl	8008774 <USBD_CtlError>
              break;
 8007f0e:	e020      	b.n	8007f52 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	885b      	ldrh	r3, [r3, #2]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d11b      	bne.n	8007f50 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007f18:	7bbb      	ldrb	r3, [r7, #14]
 8007f1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d004      	beq.n	8007f2c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f22:	7bbb      	ldrb	r3, [r7, #14]
 8007f24:	4619      	mov	r1, r3
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f001 f8bb 	bl	80090a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fcec 	bl	800890a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	4798      	blx	r3
 8007f40:	4603      	mov	r3, r0
 8007f42:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007f44:	e004      	b.n	8007f50 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fc13 	bl	8008774 <USBD_CtlError>
              break;
 8007f4e:	e000      	b.n	8007f52 <USBD_StdEPReq+0x154>
              break;
 8007f50:	bf00      	nop
          }
          break;
 8007f52:	e0ab      	b.n	80080ac <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d002      	beq.n	8007f66 <USBD_StdEPReq+0x168>
 8007f60:	2b03      	cmp	r3, #3
 8007f62:	d032      	beq.n	8007fca <USBD_StdEPReq+0x1cc>
 8007f64:	e097      	b.n	8008096 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f66:	7bbb      	ldrb	r3, [r7, #14]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d007      	beq.n	8007f7c <USBD_StdEPReq+0x17e>
 8007f6c:	7bbb      	ldrb	r3, [r7, #14]
 8007f6e:	2b80      	cmp	r3, #128	@ 0x80
 8007f70:	d004      	beq.n	8007f7c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fbfd 	bl	8008774 <USBD_CtlError>
                break;
 8007f7a:	e091      	b.n	80080a0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	da0b      	bge.n	8007f9c <USBD_StdEPReq+0x19e>
 8007f84:	7bbb      	ldrb	r3, [r7, #14]
 8007f86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	3310      	adds	r3, #16
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	4413      	add	r3, r2
 8007f98:	3304      	adds	r3, #4
 8007f9a:	e00b      	b.n	8007fb4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f9c:	7bbb      	ldrb	r3, [r7, #14]
 8007f9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	4413      	add	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	3304      	adds	r3, #4
 8007fb4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 fc47 	bl	8008856 <USBD_CtlSendData>
              break;
 8007fc8:	e06a      	b.n	80080a0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007fca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	da11      	bge.n	8007ff6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007fd2:	7bbb      	ldrb	r3, [r7, #14]
 8007fd4:	f003 020f 	and.w	r2, r3, #15
 8007fd8:	6879      	ldr	r1, [r7, #4]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	4413      	add	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	440b      	add	r3, r1
 8007fe4:	3324      	adds	r3, #36	@ 0x24
 8007fe6:	881b      	ldrh	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d117      	bne.n	800801c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007fec:	6839      	ldr	r1, [r7, #0]
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fbc0 	bl	8008774 <USBD_CtlError>
                  break;
 8007ff4:	e054      	b.n	80080a0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
 8007ff8:	f003 020f 	and.w	r2, r3, #15
 8007ffc:	6879      	ldr	r1, [r7, #4]
 8007ffe:	4613      	mov	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	440b      	add	r3, r1
 8008008:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d104      	bne.n	800801c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008012:	6839      	ldr	r1, [r7, #0]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fbad 	bl	8008774 <USBD_CtlError>
                  break;
 800801a:	e041      	b.n	80080a0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800801c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008020:	2b00      	cmp	r3, #0
 8008022:	da0b      	bge.n	800803c <USBD_StdEPReq+0x23e>
 8008024:	7bbb      	ldrb	r3, [r7, #14]
 8008026:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800802a:	4613      	mov	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	3310      	adds	r3, #16
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	4413      	add	r3, r2
 8008038:	3304      	adds	r3, #4
 800803a:	e00b      	b.n	8008054 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800803c:	7bbb      	ldrb	r3, [r7, #14]
 800803e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008042:	4613      	mov	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4413      	add	r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	4413      	add	r3, r2
 8008052:	3304      	adds	r3, #4
 8008054:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008056:	7bbb      	ldrb	r3, [r7, #14]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d002      	beq.n	8008062 <USBD_StdEPReq+0x264>
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	2b80      	cmp	r3, #128	@ 0x80
 8008060:	d103      	bne.n	800806a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	2200      	movs	r2, #0
 8008066:	601a      	str	r2, [r3, #0]
 8008068:	e00e      	b.n	8008088 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800806a:	7bbb      	ldrb	r3, [r7, #14]
 800806c:	4619      	mov	r1, r3
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f001 f836 	bl	80090e0 <USBD_LL_IsStallEP>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	2201      	movs	r2, #1
 800807e:	601a      	str	r2, [r3, #0]
 8008080:	e002      	b.n	8008088 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	2200      	movs	r2, #0
 8008086:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	2202      	movs	r2, #2
 800808c:	4619      	mov	r1, r3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fbe1 	bl	8008856 <USBD_CtlSendData>
              break;
 8008094:	e004      	b.n	80080a0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008096:	6839      	ldr	r1, [r7, #0]
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fb6b 	bl	8008774 <USBD_CtlError>
              break;
 800809e:	bf00      	nop
          }
          break;
 80080a0:	e004      	b.n	80080ac <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80080a2:	6839      	ldr	r1, [r7, #0]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fb65 	bl	8008774 <USBD_CtlError>
          break;
 80080aa:	bf00      	nop
      }
      break;
 80080ac:	e004      	b.n	80080b8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fb5f 	bl	8008774 <USBD_CtlError>
      break;
 80080b6:	bf00      	nop
  }

  return ret;
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
	...

080080c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80080ce:	2300      	movs	r3, #0
 80080d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80080d2:	2300      	movs	r3, #0
 80080d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80080d6:	2300      	movs	r3, #0
 80080d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	885b      	ldrh	r3, [r3, #2]
 80080de:	0a1b      	lsrs	r3, r3, #8
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	3b01      	subs	r3, #1
 80080e4:	2b0e      	cmp	r3, #14
 80080e6:	f200 8152 	bhi.w	800838e <USBD_GetDescriptor+0x2ca>
 80080ea:	a201      	add	r2, pc, #4	@ (adr r2, 80080f0 <USBD_GetDescriptor+0x2c>)
 80080ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f0:	08008161 	.word	0x08008161
 80080f4:	08008179 	.word	0x08008179
 80080f8:	080081b9 	.word	0x080081b9
 80080fc:	0800838f 	.word	0x0800838f
 8008100:	0800838f 	.word	0x0800838f
 8008104:	0800832f 	.word	0x0800832f
 8008108:	0800835b 	.word	0x0800835b
 800810c:	0800838f 	.word	0x0800838f
 8008110:	0800838f 	.word	0x0800838f
 8008114:	0800838f 	.word	0x0800838f
 8008118:	0800838f 	.word	0x0800838f
 800811c:	0800838f 	.word	0x0800838f
 8008120:	0800838f 	.word	0x0800838f
 8008124:	0800838f 	.word	0x0800838f
 8008128:	0800812d 	.word	0x0800812d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008132:	69db      	ldr	r3, [r3, #28]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00b      	beq.n	8008150 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800813e:	69db      	ldr	r3, [r3, #28]
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	7c12      	ldrb	r2, [r2, #16]
 8008144:	f107 0108 	add.w	r1, r7, #8
 8008148:	4610      	mov	r0, r2
 800814a:	4798      	blx	r3
 800814c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800814e:	e126      	b.n	800839e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008150:	6839      	ldr	r1, [r7, #0]
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fb0e 	bl	8008774 <USBD_CtlError>
        err++;
 8008158:	7afb      	ldrb	r3, [r7, #11]
 800815a:	3301      	adds	r3, #1
 800815c:	72fb      	strb	r3, [r7, #11]
      break;
 800815e:	e11e      	b.n	800839e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	7c12      	ldrb	r2, [r2, #16]
 800816c:	f107 0108 	add.w	r1, r7, #8
 8008170:	4610      	mov	r0, r2
 8008172:	4798      	blx	r3
 8008174:	60f8      	str	r0, [r7, #12]
      break;
 8008176:	e112      	b.n	800839e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	7c1b      	ldrb	r3, [r3, #16]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10d      	bne.n	800819c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008188:	f107 0208 	add.w	r2, r7, #8
 800818c:	4610      	mov	r0, r2
 800818e:	4798      	blx	r3
 8008190:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	3301      	adds	r3, #1
 8008196:	2202      	movs	r2, #2
 8008198:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800819a:	e100      	b.n	800839e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a4:	f107 0208 	add.w	r2, r7, #8
 80081a8:	4610      	mov	r0, r2
 80081aa:	4798      	blx	r3
 80081ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	3301      	adds	r3, #1
 80081b2:	2202      	movs	r2, #2
 80081b4:	701a      	strb	r2, [r3, #0]
      break;
 80081b6:	e0f2      	b.n	800839e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	885b      	ldrh	r3, [r3, #2]
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b05      	cmp	r3, #5
 80081c0:	f200 80ac 	bhi.w	800831c <USBD_GetDescriptor+0x258>
 80081c4:	a201      	add	r2, pc, #4	@ (adr r2, 80081cc <USBD_GetDescriptor+0x108>)
 80081c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ca:	bf00      	nop
 80081cc:	080081e5 	.word	0x080081e5
 80081d0:	08008219 	.word	0x08008219
 80081d4:	0800824d 	.word	0x0800824d
 80081d8:	08008281 	.word	0x08008281
 80081dc:	080082b5 	.word	0x080082b5
 80081e0:	080082e9 	.word	0x080082e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00b      	beq.n	8008208 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	7c12      	ldrb	r2, [r2, #16]
 80081fc:	f107 0108 	add.w	r1, r7, #8
 8008200:	4610      	mov	r0, r2
 8008202:	4798      	blx	r3
 8008204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008206:	e091      	b.n	800832c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008208:	6839      	ldr	r1, [r7, #0]
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fab2 	bl	8008774 <USBD_CtlError>
            err++;
 8008210:	7afb      	ldrb	r3, [r7, #11]
 8008212:	3301      	adds	r3, #1
 8008214:	72fb      	strb	r3, [r7, #11]
          break;
 8008216:	e089      	b.n	800832c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00b      	beq.n	800823c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	7c12      	ldrb	r2, [r2, #16]
 8008230:	f107 0108 	add.w	r1, r7, #8
 8008234:	4610      	mov	r0, r2
 8008236:	4798      	blx	r3
 8008238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800823a:	e077      	b.n	800832c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fa98 	bl	8008774 <USBD_CtlError>
            err++;
 8008244:	7afb      	ldrb	r3, [r7, #11]
 8008246:	3301      	adds	r3, #1
 8008248:	72fb      	strb	r3, [r7, #11]
          break;
 800824a:	e06f      	b.n	800832c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00b      	beq.n	8008270 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	7c12      	ldrb	r2, [r2, #16]
 8008264:	f107 0108 	add.w	r1, r7, #8
 8008268:	4610      	mov	r0, r2
 800826a:	4798      	blx	r3
 800826c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800826e:	e05d      	b.n	800832c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008270:	6839      	ldr	r1, [r7, #0]
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fa7e 	bl	8008774 <USBD_CtlError>
            err++;
 8008278:	7afb      	ldrb	r3, [r7, #11]
 800827a:	3301      	adds	r3, #1
 800827c:	72fb      	strb	r3, [r7, #11]
          break;
 800827e:	e055      	b.n	800832c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00b      	beq.n	80082a4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	7c12      	ldrb	r2, [r2, #16]
 8008298:	f107 0108 	add.w	r1, r7, #8
 800829c:	4610      	mov	r0, r2
 800829e:	4798      	blx	r3
 80082a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082a2:	e043      	b.n	800832c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80082a4:	6839      	ldr	r1, [r7, #0]
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fa64 	bl	8008774 <USBD_CtlError>
            err++;
 80082ac:	7afb      	ldrb	r3, [r7, #11]
 80082ae:	3301      	adds	r3, #1
 80082b0:	72fb      	strb	r3, [r7, #11]
          break;
 80082b2:	e03b      	b.n	800832c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082ba:	695b      	ldr	r3, [r3, #20]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00b      	beq.n	80082d8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082c6:	695b      	ldr	r3, [r3, #20]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	7c12      	ldrb	r2, [r2, #16]
 80082cc:	f107 0108 	add.w	r1, r7, #8
 80082d0:	4610      	mov	r0, r2
 80082d2:	4798      	blx	r3
 80082d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082d6:	e029      	b.n	800832c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80082d8:	6839      	ldr	r1, [r7, #0]
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 fa4a 	bl	8008774 <USBD_CtlError>
            err++;
 80082e0:	7afb      	ldrb	r3, [r7, #11]
 80082e2:	3301      	adds	r3, #1
 80082e4:	72fb      	strb	r3, [r7, #11]
          break;
 80082e6:	e021      	b.n	800832c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00b      	beq.n	800830c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	7c12      	ldrb	r2, [r2, #16]
 8008300:	f107 0108 	add.w	r1, r7, #8
 8008304:	4610      	mov	r0, r2
 8008306:	4798      	blx	r3
 8008308:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800830a:	e00f      	b.n	800832c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800830c:	6839      	ldr	r1, [r7, #0]
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fa30 	bl	8008774 <USBD_CtlError>
            err++;
 8008314:	7afb      	ldrb	r3, [r7, #11]
 8008316:	3301      	adds	r3, #1
 8008318:	72fb      	strb	r3, [r7, #11]
          break;
 800831a:	e007      	b.n	800832c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800831c:	6839      	ldr	r1, [r7, #0]
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fa28 	bl	8008774 <USBD_CtlError>
          err++;
 8008324:	7afb      	ldrb	r3, [r7, #11]
 8008326:	3301      	adds	r3, #1
 8008328:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800832a:	bf00      	nop
      }
      break;
 800832c:	e037      	b.n	800839e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	7c1b      	ldrb	r3, [r3, #16]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d109      	bne.n	800834a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800833c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800833e:	f107 0208 	add.w	r2, r7, #8
 8008342:	4610      	mov	r0, r2
 8008344:	4798      	blx	r3
 8008346:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008348:	e029      	b.n	800839e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fa11 	bl	8008774 <USBD_CtlError>
        err++;
 8008352:	7afb      	ldrb	r3, [r7, #11]
 8008354:	3301      	adds	r3, #1
 8008356:	72fb      	strb	r3, [r7, #11]
      break;
 8008358:	e021      	b.n	800839e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	7c1b      	ldrb	r3, [r3, #16]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d10d      	bne.n	800837e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800836a:	f107 0208 	add.w	r2, r7, #8
 800836e:	4610      	mov	r0, r2
 8008370:	4798      	blx	r3
 8008372:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	3301      	adds	r3, #1
 8008378:	2207      	movs	r2, #7
 800837a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800837c:	e00f      	b.n	800839e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800837e:	6839      	ldr	r1, [r7, #0]
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f9f7 	bl	8008774 <USBD_CtlError>
        err++;
 8008386:	7afb      	ldrb	r3, [r7, #11]
 8008388:	3301      	adds	r3, #1
 800838a:	72fb      	strb	r3, [r7, #11]
      break;
 800838c:	e007      	b.n	800839e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f9ef 	bl	8008774 <USBD_CtlError>
      err++;
 8008396:	7afb      	ldrb	r3, [r7, #11]
 8008398:	3301      	adds	r3, #1
 800839a:	72fb      	strb	r3, [r7, #11]
      break;
 800839c:	bf00      	nop
  }

  if (err != 0U)
 800839e:	7afb      	ldrb	r3, [r7, #11]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d11e      	bne.n	80083e2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	88db      	ldrh	r3, [r3, #6]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d016      	beq.n	80083da <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80083ac:	893b      	ldrh	r3, [r7, #8]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00e      	beq.n	80083d0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	88da      	ldrh	r2, [r3, #6]
 80083b6:	893b      	ldrh	r3, [r7, #8]
 80083b8:	4293      	cmp	r3, r2
 80083ba:	bf28      	it	cs
 80083bc:	4613      	movcs	r3, r2
 80083be:	b29b      	uxth	r3, r3
 80083c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80083c2:	893b      	ldrh	r3, [r7, #8]
 80083c4:	461a      	mov	r2, r3
 80083c6:	68f9      	ldr	r1, [r7, #12]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fa44 	bl	8008856 <USBD_CtlSendData>
 80083ce:	e009      	b.n	80083e4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80083d0:	6839      	ldr	r1, [r7, #0]
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f9ce 	bl	8008774 <USBD_CtlError>
 80083d8:	e004      	b.n	80083e4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fa95 	bl	800890a <USBD_CtlSendStatus>
 80083e0:	e000      	b.n	80083e4 <USBD_GetDescriptor+0x320>
    return;
 80083e2:	bf00      	nop
  }
}
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop

080083ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	889b      	ldrh	r3, [r3, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d131      	bne.n	8008462 <USBD_SetAddress+0x76>
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	88db      	ldrh	r3, [r3, #6]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d12d      	bne.n	8008462 <USBD_SetAddress+0x76>
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	885b      	ldrh	r3, [r3, #2]
 800840a:	2b7f      	cmp	r3, #127	@ 0x7f
 800840c:	d829      	bhi.n	8008462 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	885b      	ldrh	r3, [r3, #2]
 8008412:	b2db      	uxtb	r3, r3
 8008414:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008418:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008420:	b2db      	uxtb	r3, r3
 8008422:	2b03      	cmp	r3, #3
 8008424:	d104      	bne.n	8008430 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008426:	6839      	ldr	r1, [r7, #0]
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 f9a3 	bl	8008774 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800842e:	e01d      	b.n	800846c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	7bfa      	ldrb	r2, [r7, #15]
 8008434:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008438:	7bfb      	ldrb	r3, [r7, #15]
 800843a:	4619      	mov	r1, r3
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fe7b 	bl	8009138 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 fa61 	bl	800890a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008448:	7bfb      	ldrb	r3, [r7, #15]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d004      	beq.n	8008458 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2202      	movs	r2, #2
 8008452:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008456:	e009      	b.n	800846c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008460:	e004      	b.n	800846c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f985 	bl	8008774 <USBD_CtlError>
  }
}
 800846a:	bf00      	nop
 800846c:	bf00      	nop
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800847e:	2300      	movs	r3, #0
 8008480:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	885b      	ldrh	r3, [r3, #2]
 8008486:	b2da      	uxtb	r2, r3
 8008488:	4b4c      	ldr	r3, [pc, #304]	@ (80085bc <USBD_SetConfig+0x148>)
 800848a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800848c:	4b4b      	ldr	r3, [pc, #300]	@ (80085bc <USBD_SetConfig+0x148>)
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d905      	bls.n	80084a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f96c 	bl	8008774 <USBD_CtlError>
    return USBD_FAIL;
 800849c:	2303      	movs	r3, #3
 800849e:	e088      	b.n	80085b2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d002      	beq.n	80084b2 <USBD_SetConfig+0x3e>
 80084ac:	2b03      	cmp	r3, #3
 80084ae:	d025      	beq.n	80084fc <USBD_SetConfig+0x88>
 80084b0:	e071      	b.n	8008596 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80084b2:	4b42      	ldr	r3, [pc, #264]	@ (80085bc <USBD_SetConfig+0x148>)
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d01c      	beq.n	80084f4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80084ba:	4b40      	ldr	r3, [pc, #256]	@ (80085bc <USBD_SetConfig+0x148>)
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	461a      	mov	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80084c4:	4b3d      	ldr	r3, [pc, #244]	@ (80085bc <USBD_SetConfig+0x148>)
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	4619      	mov	r1, r3
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f7ff f990 	bl	80077f0 <USBD_SetClassConfig>
 80084d0:	4603      	mov	r3, r0
 80084d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d004      	beq.n	80084e4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 f949 	bl	8008774 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80084e2:	e065      	b.n	80085b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 fa10 	bl	800890a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2203      	movs	r2, #3
 80084ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80084f2:	e05d      	b.n	80085b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fa08 	bl	800890a <USBD_CtlSendStatus>
      break;
 80084fa:	e059      	b.n	80085b0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80084fc:	4b2f      	ldr	r3, [pc, #188]	@ (80085bc <USBD_SetConfig+0x148>)
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d112      	bne.n	800852a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2202      	movs	r2, #2
 8008508:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800850c:	4b2b      	ldr	r3, [pc, #172]	@ (80085bc <USBD_SetConfig+0x148>)
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	461a      	mov	r2, r3
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008516:	4b29      	ldr	r3, [pc, #164]	@ (80085bc <USBD_SetConfig+0x148>)
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	4619      	mov	r1, r3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f7ff f983 	bl	8007828 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 f9f1 	bl	800890a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008528:	e042      	b.n	80085b0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800852a:	4b24      	ldr	r3, [pc, #144]	@ (80085bc <USBD_SetConfig+0x148>)
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	461a      	mov	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	429a      	cmp	r2, r3
 8008536:	d02a      	beq.n	800858e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	b2db      	uxtb	r3, r3
 800853e:	4619      	mov	r1, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f7ff f971 	bl	8007828 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008546:	4b1d      	ldr	r3, [pc, #116]	@ (80085bc <USBD_SetConfig+0x148>)
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	461a      	mov	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008550:	4b1a      	ldr	r3, [pc, #104]	@ (80085bc <USBD_SetConfig+0x148>)
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	4619      	mov	r1, r3
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7ff f94a 	bl	80077f0 <USBD_SetClassConfig>
 800855c:	4603      	mov	r3, r0
 800855e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008560:	7bfb      	ldrb	r3, [r7, #15]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00f      	beq.n	8008586 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008566:	6839      	ldr	r1, [r7, #0]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f903 	bl	8008774 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	b2db      	uxtb	r3, r3
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7ff f956 	bl	8007828 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2202      	movs	r2, #2
 8008580:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008584:	e014      	b.n	80085b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f9bf 	bl	800890a <USBD_CtlSendStatus>
      break;
 800858c:	e010      	b.n	80085b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f9bb 	bl	800890a <USBD_CtlSendStatus>
      break;
 8008594:	e00c      	b.n	80085b0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008596:	6839      	ldr	r1, [r7, #0]
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f8eb 	bl	8008774 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800859e:	4b07      	ldr	r3, [pc, #28]	@ (80085bc <USBD_SetConfig+0x148>)
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	4619      	mov	r1, r3
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f7ff f93f 	bl	8007828 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80085aa:	2303      	movs	r3, #3
 80085ac:	73fb      	strb	r3, [r7, #15]
      break;
 80085ae:	bf00      	nop
  }

  return ret;
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	20000290 	.word	0x20000290

080085c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	88db      	ldrh	r3, [r3, #6]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d004      	beq.n	80085dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80085d2:	6839      	ldr	r1, [r7, #0]
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f8cd 	bl	8008774 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80085da:	e023      	b.n	8008624 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	dc02      	bgt.n	80085ee <USBD_GetConfig+0x2e>
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	dc03      	bgt.n	80085f4 <USBD_GetConfig+0x34>
 80085ec:	e015      	b.n	800861a <USBD_GetConfig+0x5a>
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	d00b      	beq.n	800860a <USBD_GetConfig+0x4a>
 80085f2:	e012      	b.n	800861a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	3308      	adds	r3, #8
 80085fe:	2201      	movs	r2, #1
 8008600:	4619      	mov	r1, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f927 	bl	8008856 <USBD_CtlSendData>
        break;
 8008608:	e00c      	b.n	8008624 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	3304      	adds	r3, #4
 800860e:	2201      	movs	r2, #1
 8008610:	4619      	mov	r1, r3
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f91f 	bl	8008856 <USBD_CtlSendData>
        break;
 8008618:	e004      	b.n	8008624 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800861a:	6839      	ldr	r1, [r7, #0]
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f8a9 	bl	8008774 <USBD_CtlError>
        break;
 8008622:	bf00      	nop
}
 8008624:	bf00      	nop
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800863c:	b2db      	uxtb	r3, r3
 800863e:	3b01      	subs	r3, #1
 8008640:	2b02      	cmp	r3, #2
 8008642:	d81e      	bhi.n	8008682 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	88db      	ldrh	r3, [r3, #6]
 8008648:	2b02      	cmp	r3, #2
 800864a:	d004      	beq.n	8008656 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f890 	bl	8008774 <USBD_CtlError>
        break;
 8008654:	e01a      	b.n	800868c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2201      	movs	r2, #1
 800865a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008662:	2b00      	cmp	r3, #0
 8008664:	d005      	beq.n	8008672 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	f043 0202 	orr.w	r2, r3, #2
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	330c      	adds	r3, #12
 8008676:	2202      	movs	r2, #2
 8008678:	4619      	mov	r1, r3
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f8eb 	bl	8008856 <USBD_CtlSendData>
      break;
 8008680:	e004      	b.n	800868c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008682:	6839      	ldr	r1, [r7, #0]
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 f875 	bl	8008774 <USBD_CtlError>
      break;
 800868a:	bf00      	nop
  }
}
 800868c:	bf00      	nop
 800868e:	3708      	adds	r7, #8
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	885b      	ldrh	r3, [r3, #2]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d106      	bne.n	80086b4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2201      	movs	r2, #1
 80086aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f92b 	bl	800890a <USBD_CtlSendStatus>
  }
}
 80086b4:	bf00      	nop
 80086b6:	3708      	adds	r7, #8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	3b01      	subs	r3, #1
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d80b      	bhi.n	80086ec <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	885b      	ldrh	r3, [r3, #2]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d10c      	bne.n	80086f6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 f910 	bl	800890a <USBD_CtlSendStatus>
      }
      break;
 80086ea:	e004      	b.n	80086f6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80086ec:	6839      	ldr	r1, [r7, #0]
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f840 	bl	8008774 <USBD_CtlError>
      break;
 80086f4:	e000      	b.n	80086f8 <USBD_ClrFeature+0x3c>
      break;
 80086f6:	bf00      	nop
  }
}
 80086f8:	bf00      	nop
 80086fa:	3708      	adds	r7, #8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	781a      	ldrb	r2, [r3, #0]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	3301      	adds	r3, #1
 800871a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	781a      	ldrb	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	3301      	adds	r3, #1
 8008728:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f7ff fa90 	bl	8007c50 <SWAPBYTE>
 8008730:	4603      	mov	r3, r0
 8008732:	461a      	mov	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	3301      	adds	r3, #1
 800873c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	3301      	adds	r3, #1
 8008742:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f7ff fa83 	bl	8007c50 <SWAPBYTE>
 800874a:	4603      	mov	r3, r0
 800874c:	461a      	mov	r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	3301      	adds	r3, #1
 8008756:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	3301      	adds	r3, #1
 800875c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f7ff fa76 	bl	8007c50 <SWAPBYTE>
 8008764:	4603      	mov	r3, r0
 8008766:	461a      	mov	r2, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	80da      	strh	r2, [r3, #6]
}
 800876c:	bf00      	nop
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800877e:	2180      	movs	r1, #128	@ 0x80
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fc6f 	bl	8009064 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008786:	2100      	movs	r1, #0
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fc6b 	bl	8009064 <USBD_LL_StallEP>
}
 800878e:	bf00      	nop
 8008790:	3708      	adds	r7, #8
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b086      	sub	sp, #24
 800879a:	af00      	add	r7, sp, #0
 800879c:	60f8      	str	r0, [r7, #12]
 800879e:	60b9      	str	r1, [r7, #8]
 80087a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80087a2:	2300      	movs	r3, #0
 80087a4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d036      	beq.n	800881a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80087b0:	6938      	ldr	r0, [r7, #16]
 80087b2:	f000 f836 	bl	8008822 <USBD_GetLen>
 80087b6:	4603      	mov	r3, r0
 80087b8:	3301      	adds	r3, #1
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	005b      	lsls	r3, r3, #1
 80087be:	b29a      	uxth	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80087c4:	7dfb      	ldrb	r3, [r7, #23]
 80087c6:	68ba      	ldr	r2, [r7, #8]
 80087c8:	4413      	add	r3, r2
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	7812      	ldrb	r2, [r2, #0]
 80087ce:	701a      	strb	r2, [r3, #0]
  idx++;
 80087d0:	7dfb      	ldrb	r3, [r7, #23]
 80087d2:	3301      	adds	r3, #1
 80087d4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80087d6:	7dfb      	ldrb	r3, [r7, #23]
 80087d8:	68ba      	ldr	r2, [r7, #8]
 80087da:	4413      	add	r3, r2
 80087dc:	2203      	movs	r2, #3
 80087de:	701a      	strb	r2, [r3, #0]
  idx++;
 80087e0:	7dfb      	ldrb	r3, [r7, #23]
 80087e2:	3301      	adds	r3, #1
 80087e4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80087e6:	e013      	b.n	8008810 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80087e8:	7dfb      	ldrb	r3, [r7, #23]
 80087ea:	68ba      	ldr	r2, [r7, #8]
 80087ec:	4413      	add	r3, r2
 80087ee:	693a      	ldr	r2, [r7, #16]
 80087f0:	7812      	ldrb	r2, [r2, #0]
 80087f2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	3301      	adds	r3, #1
 80087f8:	613b      	str	r3, [r7, #16]
    idx++;
 80087fa:	7dfb      	ldrb	r3, [r7, #23]
 80087fc:	3301      	adds	r3, #1
 80087fe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008800:	7dfb      	ldrb	r3, [r7, #23]
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	4413      	add	r3, r2
 8008806:	2200      	movs	r2, #0
 8008808:	701a      	strb	r2, [r3, #0]
    idx++;
 800880a:	7dfb      	ldrb	r3, [r7, #23]
 800880c:	3301      	adds	r3, #1
 800880e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d1e7      	bne.n	80087e8 <USBD_GetString+0x52>
 8008818:	e000      	b.n	800881c <USBD_GetString+0x86>
    return;
 800881a:	bf00      	nop
  }
}
 800881c:	3718      	adds	r7, #24
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008822:	b480      	push	{r7}
 8008824:	b085      	sub	sp, #20
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800882a:	2300      	movs	r3, #0
 800882c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008832:	e005      	b.n	8008840 <USBD_GetLen+0x1e>
  {
    len++;
 8008834:	7bfb      	ldrb	r3, [r7, #15]
 8008836:	3301      	adds	r3, #1
 8008838:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	3301      	adds	r3, #1
 800883e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1f5      	bne.n	8008834 <USBD_GetLen+0x12>
  }

  return len;
 8008848:	7bfb      	ldrb	r3, [r7, #15]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3714      	adds	r7, #20
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	60f8      	str	r0, [r7, #12]
 800885e:	60b9      	str	r1, [r7, #8]
 8008860:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2202      	movs	r2, #2
 8008866:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	68ba      	ldr	r2, [r7, #8]
 800887a:	2100      	movs	r1, #0
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f000 fc7a 	bl	8009176 <USBD_LL_Transmit>

  return USBD_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	68ba      	ldr	r2, [r7, #8]
 800889c:	2100      	movs	r1, #0
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f000 fc69 	bl	8009176 <USBD_LL_Transmit>

  return USBD_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b084      	sub	sp, #16
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	60f8      	str	r0, [r7, #12]
 80088b6:	60b9      	str	r1, [r7, #8]
 80088b8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2203      	movs	r2, #3
 80088be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	2100      	movs	r1, #0
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f000 fc6d 	bl	80091b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	2100      	movs	r1, #0
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f000 fc5c 	bl	80091b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b082      	sub	sp, #8
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2204      	movs	r2, #4
 8008916:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800891a:	2300      	movs	r3, #0
 800891c:	2200      	movs	r2, #0
 800891e:	2100      	movs	r1, #0
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fc28 	bl	8009176 <USBD_LL_Transmit>

  return USBD_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3708      	adds	r7, #8
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2205      	movs	r2, #5
 800893c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008940:	2300      	movs	r3, #0
 8008942:	2200      	movs	r2, #0
 8008944:	2100      	movs	r1, #0
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fc36 	bl	80091b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3708      	adds	r7, #8
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
	...

08008958 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800895c:	2200      	movs	r2, #0
 800895e:	4912      	ldr	r1, [pc, #72]	@ (80089a8 <MX_USB_Device_Init+0x50>)
 8008960:	4812      	ldr	r0, [pc, #72]	@ (80089ac <MX_USB_Device_Init+0x54>)
 8008962:	f7fe fed7 	bl	8007714 <USBD_Init>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d001      	beq.n	8008970 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800896c:	f7f7 fdbf 	bl	80004ee <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008970:	490f      	ldr	r1, [pc, #60]	@ (80089b0 <MX_USB_Device_Init+0x58>)
 8008972:	480e      	ldr	r0, [pc, #56]	@ (80089ac <MX_USB_Device_Init+0x54>)
 8008974:	f7fe fefe 	bl	8007774 <USBD_RegisterClass>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d001      	beq.n	8008982 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800897e:	f7f7 fdb6 	bl	80004ee <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008982:	490c      	ldr	r1, [pc, #48]	@ (80089b4 <MX_USB_Device_Init+0x5c>)
 8008984:	4809      	ldr	r0, [pc, #36]	@ (80089ac <MX_USB_Device_Init+0x54>)
 8008986:	f7fe fe4f 	bl	8007628 <USBD_CDC_RegisterInterface>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008990:	f7f7 fdad 	bl	80004ee <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008994:	4805      	ldr	r0, [pc, #20]	@ (80089ac <MX_USB_Device_Init+0x54>)
 8008996:	f7fe ff14 	bl	80077c2 <USBD_Start>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d001      	beq.n	80089a4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80089a0:	f7f7 fda5 	bl	80004ee <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80089a4:	bf00      	nop
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	20000130 	.word	0x20000130
 80089ac:	20000294 	.word	0x20000294
 80089b0:	20000018 	.word	0x20000018
 80089b4:	2000011c 	.word	0x2000011c

080089b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80089bc:	2200      	movs	r2, #0
 80089be:	4905      	ldr	r1, [pc, #20]	@ (80089d4 <CDC_Init_FS+0x1c>)
 80089c0:	4805      	ldr	r0, [pc, #20]	@ (80089d8 <CDC_Init_FS+0x20>)
 80089c2:	f7fe fe46 	bl	8007652 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80089c6:	4905      	ldr	r1, [pc, #20]	@ (80089dc <CDC_Init_FS+0x24>)
 80089c8:	4803      	ldr	r0, [pc, #12]	@ (80089d8 <CDC_Init_FS+0x20>)
 80089ca:	f7fe fe60 	bl	800768e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80089ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	20000d64 	.word	0x20000d64
 80089d8:	20000294 	.word	0x20000294
 80089dc:	20000564 	.word	0x20000564

080089e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80089e0:	b480      	push	{r7}
 80089e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80089e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	4603      	mov	r3, r0
 80089f8:	6039      	str	r1, [r7, #0]
 80089fa:	71fb      	strb	r3, [r7, #7]
 80089fc:	4613      	mov	r3, r2
 80089fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008a00:	79fb      	ldrb	r3, [r7, #7]
 8008a02:	2b23      	cmp	r3, #35	@ 0x23
 8008a04:	d84a      	bhi.n	8008a9c <CDC_Control_FS+0xac>
 8008a06:	a201      	add	r2, pc, #4	@ (adr r2, 8008a0c <CDC_Control_FS+0x1c>)
 8008a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0c:	08008a9d 	.word	0x08008a9d
 8008a10:	08008a9d 	.word	0x08008a9d
 8008a14:	08008a9d 	.word	0x08008a9d
 8008a18:	08008a9d 	.word	0x08008a9d
 8008a1c:	08008a9d 	.word	0x08008a9d
 8008a20:	08008a9d 	.word	0x08008a9d
 8008a24:	08008a9d 	.word	0x08008a9d
 8008a28:	08008a9d 	.word	0x08008a9d
 8008a2c:	08008a9d 	.word	0x08008a9d
 8008a30:	08008a9d 	.word	0x08008a9d
 8008a34:	08008a9d 	.word	0x08008a9d
 8008a38:	08008a9d 	.word	0x08008a9d
 8008a3c:	08008a9d 	.word	0x08008a9d
 8008a40:	08008a9d 	.word	0x08008a9d
 8008a44:	08008a9d 	.word	0x08008a9d
 8008a48:	08008a9d 	.word	0x08008a9d
 8008a4c:	08008a9d 	.word	0x08008a9d
 8008a50:	08008a9d 	.word	0x08008a9d
 8008a54:	08008a9d 	.word	0x08008a9d
 8008a58:	08008a9d 	.word	0x08008a9d
 8008a5c:	08008a9d 	.word	0x08008a9d
 8008a60:	08008a9d 	.word	0x08008a9d
 8008a64:	08008a9d 	.word	0x08008a9d
 8008a68:	08008a9d 	.word	0x08008a9d
 8008a6c:	08008a9d 	.word	0x08008a9d
 8008a70:	08008a9d 	.word	0x08008a9d
 8008a74:	08008a9d 	.word	0x08008a9d
 8008a78:	08008a9d 	.word	0x08008a9d
 8008a7c:	08008a9d 	.word	0x08008a9d
 8008a80:	08008a9d 	.word	0x08008a9d
 8008a84:	08008a9d 	.word	0x08008a9d
 8008a88:	08008a9d 	.word	0x08008a9d
 8008a8c:	08008a9d 	.word	0x08008a9d
 8008a90:	08008a9d 	.word	0x08008a9d
 8008a94:	08008a9d 	.word	0x08008a9d
 8008a98:	08008a9d 	.word	0x08008a9d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008a9c:	bf00      	nop
  }

  return (USBD_OK);
 8008a9e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008ab6:	6879      	ldr	r1, [r7, #4]
 8008ab8:	4805      	ldr	r0, [pc, #20]	@ (8008ad0 <CDC_Receive_FS+0x24>)
 8008aba:	f7fe fde8 	bl	800768e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008abe:	4804      	ldr	r0, [pc, #16]	@ (8008ad0 <CDC_Receive_FS+0x24>)
 8008ac0:	f7fe fdfe 	bl	80076c0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008ac4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	20000294 	.word	0x20000294

08008ad4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b087      	sub	sp, #28
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	4613      	mov	r3, r2
 8008ae0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008ae6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	371c      	adds	r7, #28
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
	...

08008af8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	4603      	mov	r3, r0
 8008b00:	6039      	str	r1, [r7, #0]
 8008b02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	2212      	movs	r2, #18
 8008b08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8008b0a:	4b03      	ldr	r3, [pc, #12]	@ (8008b18 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr
 8008b18:	20000150 	.word	0x20000150

08008b1c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	4603      	mov	r3, r0
 8008b24:	6039      	str	r1, [r7, #0]
 8008b26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	2204      	movs	r2, #4
 8008b2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008b2e:	4b03      	ldr	r3, [pc, #12]	@ (8008b3c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr
 8008b3c:	20000164 	.word	0x20000164

08008b40 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	4603      	mov	r3, r0
 8008b48:	6039      	str	r1, [r7, #0]
 8008b4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b4c:	79fb      	ldrb	r3, [r7, #7]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d105      	bne.n	8008b5e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008b52:	683a      	ldr	r2, [r7, #0]
 8008b54:	4907      	ldr	r1, [pc, #28]	@ (8008b74 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008b56:	4808      	ldr	r0, [pc, #32]	@ (8008b78 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008b58:	f7ff fe1d 	bl	8008796 <USBD_GetString>
 8008b5c:	e004      	b.n	8008b68 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008b5e:	683a      	ldr	r2, [r7, #0]
 8008b60:	4904      	ldr	r1, [pc, #16]	@ (8008b74 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008b62:	4805      	ldr	r0, [pc, #20]	@ (8008b78 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008b64:	f7ff fe17 	bl	8008796 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b68:	4b02      	ldr	r3, [pc, #8]	@ (8008b74 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	20001564 	.word	0x20001564
 8008b78:	08009390 	.word	0x08009390

08008b7c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	4603      	mov	r3, r0
 8008b84:	6039      	str	r1, [r7, #0]
 8008b86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b88:	683a      	ldr	r2, [r7, #0]
 8008b8a:	4904      	ldr	r1, [pc, #16]	@ (8008b9c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8008b8c:	4804      	ldr	r0, [pc, #16]	@ (8008ba0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8008b8e:	f7ff fe02 	bl	8008796 <USBD_GetString>
  return USBD_StrDesc;
 8008b92:	4b02      	ldr	r3, [pc, #8]	@ (8008b9c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	20001564 	.word	0x20001564
 8008ba0:	080093a8 	.word	0x080093a8

08008ba4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	4603      	mov	r3, r0
 8008bac:	6039      	str	r1, [r7, #0]
 8008bae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	221a      	movs	r2, #26
 8008bb4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008bb6:	f000 f843 	bl	8008c40 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008bba:	4b02      	ldr	r3, [pc, #8]	@ (8008bc4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3708      	adds	r7, #8
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	20000168 	.word	0x20000168

08008bc8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	4603      	mov	r3, r0
 8008bd0:	6039      	str	r1, [r7, #0]
 8008bd2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008bd4:	79fb      	ldrb	r3, [r7, #7]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d105      	bne.n	8008be6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008bda:	683a      	ldr	r2, [r7, #0]
 8008bdc:	4907      	ldr	r1, [pc, #28]	@ (8008bfc <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008bde:	4808      	ldr	r0, [pc, #32]	@ (8008c00 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008be0:	f7ff fdd9 	bl	8008796 <USBD_GetString>
 8008be4:	e004      	b.n	8008bf0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008be6:	683a      	ldr	r2, [r7, #0]
 8008be8:	4904      	ldr	r1, [pc, #16]	@ (8008bfc <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008bea:	4805      	ldr	r0, [pc, #20]	@ (8008c00 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008bec:	f7ff fdd3 	bl	8008796 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bf0:	4b02      	ldr	r3, [pc, #8]	@ (8008bfc <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3708      	adds	r7, #8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	20001564 	.word	0x20001564
 8008c00:	080093bc 	.word	0x080093bc

08008c04 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	6039      	str	r1, [r7, #0]
 8008c0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c10:	79fb      	ldrb	r3, [r7, #7]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d105      	bne.n	8008c22 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008c16:	683a      	ldr	r2, [r7, #0]
 8008c18:	4907      	ldr	r1, [pc, #28]	@ (8008c38 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008c1a:	4808      	ldr	r0, [pc, #32]	@ (8008c3c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008c1c:	f7ff fdbb 	bl	8008796 <USBD_GetString>
 8008c20:	e004      	b.n	8008c2c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	4904      	ldr	r1, [pc, #16]	@ (8008c38 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008c26:	4805      	ldr	r0, [pc, #20]	@ (8008c3c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008c28:	f7ff fdb5 	bl	8008796 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c2c:	4b02      	ldr	r3, [pc, #8]	@ (8008c38 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	20001564 	.word	0x20001564
 8008c3c:	080093c8 	.word	0x080093c8

08008c40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c46:	4b0f      	ldr	r3, [pc, #60]	@ (8008c84 <Get_SerialNum+0x44>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8008c88 <Get_SerialNum+0x48>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c52:	4b0e      	ldr	r3, [pc, #56]	@ (8008c8c <Get_SerialNum+0x4c>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d009      	beq.n	8008c7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c66:	2208      	movs	r2, #8
 8008c68:	4909      	ldr	r1, [pc, #36]	@ (8008c90 <Get_SerialNum+0x50>)
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	f000 f814 	bl	8008c98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c70:	2204      	movs	r2, #4
 8008c72:	4908      	ldr	r1, [pc, #32]	@ (8008c94 <Get_SerialNum+0x54>)
 8008c74:	68b8      	ldr	r0, [r7, #8]
 8008c76:	f000 f80f 	bl	8008c98 <IntToUnicode>
  }
}
 8008c7a:	bf00      	nop
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	1fff7590 	.word	0x1fff7590
 8008c88:	1fff7594 	.word	0x1fff7594
 8008c8c:	1fff7598 	.word	0x1fff7598
 8008c90:	2000016a 	.word	0x2000016a
 8008c94:	2000017a 	.word	0x2000017a

08008c98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b087      	sub	sp, #28
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008caa:	2300      	movs	r3, #0
 8008cac:	75fb      	strb	r3, [r7, #23]
 8008cae:	e027      	b.n	8008d00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	0f1b      	lsrs	r3, r3, #28
 8008cb4:	2b09      	cmp	r3, #9
 8008cb6:	d80b      	bhi.n	8008cd0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	0f1b      	lsrs	r3, r3, #28
 8008cbc:	b2da      	uxtb	r2, r3
 8008cbe:	7dfb      	ldrb	r3, [r7, #23]
 8008cc0:	005b      	lsls	r3, r3, #1
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	440b      	add	r3, r1
 8008cc8:	3230      	adds	r2, #48	@ 0x30
 8008cca:	b2d2      	uxtb	r2, r2
 8008ccc:	701a      	strb	r2, [r3, #0]
 8008cce:	e00a      	b.n	8008ce6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	0f1b      	lsrs	r3, r3, #28
 8008cd4:	b2da      	uxtb	r2, r3
 8008cd6:	7dfb      	ldrb	r3, [r7, #23]
 8008cd8:	005b      	lsls	r3, r3, #1
 8008cda:	4619      	mov	r1, r3
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	440b      	add	r3, r1
 8008ce0:	3237      	adds	r2, #55	@ 0x37
 8008ce2:	b2d2      	uxtb	r2, r2
 8008ce4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	011b      	lsls	r3, r3, #4
 8008cea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008cec:	7dfb      	ldrb	r3, [r7, #23]
 8008cee:	005b      	lsls	r3, r3, #1
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	68ba      	ldr	r2, [r7, #8]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008cfa:	7dfb      	ldrb	r3, [r7, #23]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	75fb      	strb	r3, [r7, #23]
 8008d00:	7dfa      	ldrb	r2, [r7, #23]
 8008d02:	79fb      	ldrb	r3, [r7, #7]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d3d3      	bcc.n	8008cb0 <IntToUnicode+0x18>
  }
}
 8008d08:	bf00      	nop
 8008d0a:	bf00      	nop
 8008d0c:	371c      	adds	r7, #28
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
	...

08008d18 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b098      	sub	sp, #96	@ 0x60
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008d20:	f107 030c 	add.w	r3, r7, #12
 8008d24:	2254      	movs	r2, #84	@ 0x54
 8008d26:	2100      	movs	r1, #0
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f000 faf9 	bl	8009320 <memset>
  if(pcdHandle->Instance==USB)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a15      	ldr	r2, [pc, #84]	@ (8008d88 <HAL_PCD_MspInit+0x70>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d122      	bne.n	8008d7e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008d38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008d3c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008d42:	f107 030c 	add.w	r3, r7, #12
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7fa fd98 	bl	800387c <HAL_RCCEx_PeriphCLKConfig>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d001      	beq.n	8008d56 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8008d52:	f7f7 fbcc 	bl	80004ee <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008d56:	4b0d      	ldr	r3, [pc, #52]	@ (8008d8c <HAL_PCD_MspInit+0x74>)
 8008d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8008d8c <HAL_PCD_MspInit+0x74>)
 8008d5c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008d60:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d62:	4b0a      	ldr	r3, [pc, #40]	@ (8008d8c <HAL_PCD_MspInit+0x74>)
 8008d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d6a:	60bb      	str	r3, [r7, #8]
 8008d6c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8008d6e:	2200      	movs	r2, #0
 8008d70:	2100      	movs	r1, #0
 8008d72:	2014      	movs	r0, #20
 8008d74:	f7f7 ffd5 	bl	8000d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008d78:	2014      	movs	r0, #20
 8008d7a:	f7f7 ffec 	bl	8000d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008d7e:	bf00      	nop
 8008d80:	3760      	adds	r7, #96	@ 0x60
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	40005c00 	.word	0x40005c00
 8008d8c:	40021000 	.word	0x40021000

08008d90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008da4:	4619      	mov	r1, r3
 8008da6:	4610      	mov	r0, r2
 8008da8:	f7fe fd56 	bl	8007858 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8008dac:	bf00      	nop
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8008dc6:	78fa      	ldrb	r2, [r7, #3]
 8008dc8:	6879      	ldr	r1, [r7, #4]
 8008dca:	4613      	mov	r3, r2
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	4413      	add	r3, r2
 8008dd0:	00db      	lsls	r3, r3, #3
 8008dd2:	440b      	add	r3, r1
 8008dd4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	78fb      	ldrb	r3, [r7, #3]
 8008ddc:	4619      	mov	r1, r3
 8008dde:	f7fe fd90 	bl	8007902 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8008de2:	bf00      	nop
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b082      	sub	sp, #8
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	460b      	mov	r3, r1
 8008df4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8008dfc:	78fa      	ldrb	r2, [r7, #3]
 8008dfe:	6879      	ldr	r1, [r7, #4]
 8008e00:	4613      	mov	r3, r2
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	4413      	add	r3, r2
 8008e06:	00db      	lsls	r3, r3, #3
 8008e08:	440b      	add	r3, r1
 8008e0a:	3324      	adds	r3, #36	@ 0x24
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	78fb      	ldrb	r3, [r7, #3]
 8008e10:	4619      	mov	r1, r3
 8008e12:	f7fe fdd9 	bl	80079c8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8008e16:	bf00      	nop
 8008e18:	3708      	adds	r7, #8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b082      	sub	sp, #8
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7fe feed 	bl	8007c0c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8008e32:	bf00      	nop
 8008e34:	3708      	adds	r7, #8
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b084      	sub	sp, #16
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e42:	2301      	movs	r3, #1
 8008e44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	795b      	ldrb	r3, [r3, #5]
 8008e4a:	2b02      	cmp	r3, #2
 8008e4c:	d001      	beq.n	8008e52 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e4e:	f7f7 fb4e 	bl	80004ee <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008e58:	7bfa      	ldrb	r2, [r7, #15]
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7fe fe97 	bl	8007b90 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7fe fe43 	bl	8007af4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8008e6e:	bf00      	nop
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
	...

08008e78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fe fe92 	bl	8007bb0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	7a5b      	ldrb	r3, [r3, #9]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d005      	beq.n	8008ea0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e94:	4b04      	ldr	r3, [pc, #16]	@ (8008ea8 <HAL_PCD_SuspendCallback+0x30>)
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	4a03      	ldr	r2, [pc, #12]	@ (8008ea8 <HAL_PCD_SuspendCallback+0x30>)
 8008e9a:	f043 0306 	orr.w	r3, r3, #6
 8008e9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8008ea0:	bf00      	nop
 8008ea2:	3708      	adds	r7, #8
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	e000ed00 	.word	0xe000ed00

08008eac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	7a5b      	ldrb	r3, [r3, #9]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d007      	beq.n	8008ecc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ebc:	4b08      	ldr	r3, [pc, #32]	@ (8008ee0 <HAL_PCD_ResumeCallback+0x34>)
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	4a07      	ldr	r2, [pc, #28]	@ (8008ee0 <HAL_PCD_ResumeCallback+0x34>)
 8008ec2:	f023 0306 	bic.w	r3, r3, #6
 8008ec6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008ec8:	f000 f9f8 	bl	80092bc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fe fe82 	bl	8007bdc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8008ed8:	bf00      	nop
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	e000ed00 	.word	0xe000ed00

08008ee4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8008eec:	4a2b      	ldr	r2, [pc, #172]	@ (8008f9c <USBD_LL_Init+0xb8>)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a29      	ldr	r2, [pc, #164]	@ (8008f9c <USBD_LL_Init+0xb8>)
 8008ef8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8008efc:	4b27      	ldr	r3, [pc, #156]	@ (8008f9c <USBD_LL_Init+0xb8>)
 8008efe:	4a28      	ldr	r2, [pc, #160]	@ (8008fa0 <USBD_LL_Init+0xbc>)
 8008f00:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008f02:	4b26      	ldr	r3, [pc, #152]	@ (8008f9c <USBD_LL_Init+0xb8>)
 8008f04:	2208      	movs	r2, #8
 8008f06:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008f08:	4b24      	ldr	r3, [pc, #144]	@ (8008f9c <USBD_LL_Init+0xb8>)
 8008f0a:	2202      	movs	r2, #2
 8008f0c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008f0e:	4b23      	ldr	r3, [pc, #140]	@ (8008f9c <USBD_LL_Init+0xb8>)
 8008f10:	2202      	movs	r2, #2
 8008f12:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008f14:	4b21      	ldr	r3, [pc, #132]	@ (8008f9c <USBD_LL_Init+0xb8>)
 8008f16:	2200      	movs	r2, #0
 8008f18:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008f1a:	4b20      	ldr	r3, [pc, #128]	@ (8008f9c <USBD_LL_Init+0xb8>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008f20:	4b1e      	ldr	r3, [pc, #120]	@ (8008f9c <USBD_LL_Init+0xb8>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008f26:	4b1d      	ldr	r3, [pc, #116]	@ (8008f9c <USBD_LL_Init+0xb8>)
 8008f28:	2200      	movs	r2, #0
 8008f2a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008f2c:	481b      	ldr	r0, [pc, #108]	@ (8008f9c <USBD_LL_Init+0xb8>)
 8008f2e:	f7f8 f9f9 	bl	8001324 <HAL_PCD_Init>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d001      	beq.n	8008f3c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8008f38:	f7f7 fad9 	bl	80004ee <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008f42:	2318      	movs	r3, #24
 8008f44:	2200      	movs	r2, #0
 8008f46:	2100      	movs	r1, #0
 8008f48:	f7f9 fe80 	bl	8002c4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008f52:	2358      	movs	r3, #88	@ 0x58
 8008f54:	2200      	movs	r2, #0
 8008f56:	2180      	movs	r1, #128	@ 0x80
 8008f58:	f7f9 fe78 	bl	8002c4c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008f62:	23c0      	movs	r3, #192	@ 0xc0
 8008f64:	2200      	movs	r2, #0
 8008f66:	2181      	movs	r1, #129	@ 0x81
 8008f68:	f7f9 fe70 	bl	8002c4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008f72:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008f76:	2200      	movs	r2, #0
 8008f78:	2101      	movs	r1, #1
 8008f7a:	f7f9 fe67 	bl	8002c4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008f84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008f88:	2200      	movs	r2, #0
 8008f8a:	2182      	movs	r1, #130	@ 0x82
 8008f8c:	f7f9 fe5e 	bl	8002c4c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3708      	adds	r7, #8
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	20001764 	.word	0x20001764
 8008fa0:	40005c00 	.word	0x40005c00

08008fa4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fac:	2300      	movs	r3, #0
 8008fae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7f8 fa80 	bl	80014c0 <HAL_PCD_Start>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fc4:	7bfb      	ldrb	r3, [r7, #15]
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f000 f97e 	bl	80092c8 <USBD_Get_USB_Status>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b084      	sub	sp, #16
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
 8008fe2:	4608      	mov	r0, r1
 8008fe4:	4611      	mov	r1, r2
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	4603      	mov	r3, r0
 8008fea:	70fb      	strb	r3, [r7, #3]
 8008fec:	460b      	mov	r3, r1
 8008fee:	70bb      	strb	r3, [r7, #2]
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009002:	78bb      	ldrb	r3, [r7, #2]
 8009004:	883a      	ldrh	r2, [r7, #0]
 8009006:	78f9      	ldrb	r1, [r7, #3]
 8009008:	f7f8 fbc7 	bl	800179a <HAL_PCD_EP_Open>
 800900c:	4603      	mov	r3, r0
 800900e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009010:	7bfb      	ldrb	r3, [r7, #15]
 8009012:	4618      	mov	r0, r3
 8009014:	f000 f958 	bl	80092c8 <USBD_Get_USB_Status>
 8009018:	4603      	mov	r3, r0
 800901a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800901c:	7bbb      	ldrb	r3, [r7, #14]
}
 800901e:	4618      	mov	r0, r3
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b084      	sub	sp, #16
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
 800902e:	460b      	mov	r3, r1
 8009030:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009032:	2300      	movs	r3, #0
 8009034:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009036:	2300      	movs	r3, #0
 8009038:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009040:	78fa      	ldrb	r2, [r7, #3]
 8009042:	4611      	mov	r1, r2
 8009044:	4618      	mov	r0, r3
 8009046:	f7f8 fc07 	bl	8001858 <HAL_PCD_EP_Close>
 800904a:	4603      	mov	r3, r0
 800904c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800904e:	7bfb      	ldrb	r3, [r7, #15]
 8009050:	4618      	mov	r0, r3
 8009052:	f000 f939 	bl	80092c8 <USBD_Get_USB_Status>
 8009056:	4603      	mov	r3, r0
 8009058:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800905a:	7bbb      	ldrb	r3, [r7, #14]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	460b      	mov	r3, r1
 800906e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009070:	2300      	movs	r3, #0
 8009072:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009074:	2300      	movs	r3, #0
 8009076:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800907e:	78fa      	ldrb	r2, [r7, #3]
 8009080:	4611      	mov	r1, r2
 8009082:	4618      	mov	r0, r3
 8009084:	f7f8 fcb0 	bl	80019e8 <HAL_PCD_EP_SetStall>
 8009088:	4603      	mov	r3, r0
 800908a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800908c:	7bfb      	ldrb	r3, [r7, #15]
 800908e:	4618      	mov	r0, r3
 8009090:	f000 f91a 	bl	80092c8 <USBD_Get_USB_Status>
 8009094:	4603      	mov	r3, r0
 8009096:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009098:	7bbb      	ldrb	r3, [r7, #14]
}
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b084      	sub	sp, #16
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	460b      	mov	r3, r1
 80090ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ae:	2300      	movs	r3, #0
 80090b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090b2:	2300      	movs	r3, #0
 80090b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80090bc:	78fa      	ldrb	r2, [r7, #3]
 80090be:	4611      	mov	r1, r2
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7f8 fce3 	bl	8001a8c <HAL_PCD_EP_ClrStall>
 80090c6:	4603      	mov	r3, r0
 80090c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090ca:	7bfb      	ldrb	r3, [r7, #15]
 80090cc:	4618      	mov	r0, r3
 80090ce:	f000 f8fb 	bl	80092c8 <USBD_Get_USB_Status>
 80090d2:	4603      	mov	r3, r0
 80090d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b085      	sub	sp, #20
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	460b      	mov	r3, r1
 80090ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80090f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80090f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	da0b      	bge.n	8009114 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80090fc:	78fb      	ldrb	r3, [r7, #3]
 80090fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009102:	68f9      	ldr	r1, [r7, #12]
 8009104:	4613      	mov	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4413      	add	r3, r2
 800910a:	00db      	lsls	r3, r3, #3
 800910c:	440b      	add	r3, r1
 800910e:	3312      	adds	r3, #18
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	e00b      	b.n	800912c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009114:	78fb      	ldrb	r3, [r7, #3]
 8009116:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800911a:	68f9      	ldr	r1, [r7, #12]
 800911c:	4613      	mov	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	4413      	add	r3, r2
 8009122:	00db      	lsls	r3, r3, #3
 8009124:	440b      	add	r3, r1
 8009126:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800912a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800912c:	4618      	mov	r0, r3
 800912e:	3714      	adds	r7, #20
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	460b      	mov	r3, r1
 8009142:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009144:	2300      	movs	r3, #0
 8009146:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009148:	2300      	movs	r3, #0
 800914a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009152:	78fa      	ldrb	r2, [r7, #3]
 8009154:	4611      	mov	r1, r2
 8009156:	4618      	mov	r0, r3
 8009158:	f7f8 fafb 	bl	8001752 <HAL_PCD_SetAddress>
 800915c:	4603      	mov	r3, r0
 800915e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009160:	7bfb      	ldrb	r3, [r7, #15]
 8009162:	4618      	mov	r0, r3
 8009164:	f000 f8b0 	bl	80092c8 <USBD_Get_USB_Status>
 8009168:	4603      	mov	r3, r0
 800916a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800916c:	7bbb      	ldrb	r3, [r7, #14]
}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b086      	sub	sp, #24
 800917a:	af00      	add	r7, sp, #0
 800917c:	60f8      	str	r0, [r7, #12]
 800917e:	607a      	str	r2, [r7, #4]
 8009180:	603b      	str	r3, [r7, #0]
 8009182:	460b      	mov	r3, r1
 8009184:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009186:	2300      	movs	r3, #0
 8009188:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800918a:	2300      	movs	r3, #0
 800918c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009194:	7af9      	ldrb	r1, [r7, #11]
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	f7f8 fbee 	bl	800197a <HAL_PCD_EP_Transmit>
 800919e:	4603      	mov	r3, r0
 80091a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091a2:	7dfb      	ldrb	r3, [r7, #23]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f000 f88f 	bl	80092c8 <USBD_Get_USB_Status>
 80091aa:	4603      	mov	r3, r0
 80091ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3718      	adds	r7, #24
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b086      	sub	sp, #24
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	607a      	str	r2, [r7, #4]
 80091c2:	603b      	str	r3, [r7, #0]
 80091c4:	460b      	mov	r3, r1
 80091c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091c8:	2300      	movs	r3, #0
 80091ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091cc:	2300      	movs	r3, #0
 80091ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80091d6:	7af9      	ldrb	r1, [r7, #11]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	f7f8 fb84 	bl	80018e8 <HAL_PCD_EP_Receive>
 80091e0:	4603      	mov	r3, r0
 80091e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091e4:	7dfb      	ldrb	r3, [r7, #23]
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 f86e 	bl	80092c8 <USBD_Get_USB_Status>
 80091ec:	4603      	mov	r3, r0
 80091ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3718      	adds	r7, #24
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b082      	sub	sp, #8
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
 8009202:	460b      	mov	r3, r1
 8009204:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800920c:	78fa      	ldrb	r2, [r7, #3]
 800920e:	4611      	mov	r1, r2
 8009210:	4618      	mov	r0, r3
 8009212:	f7f8 fb9a 	bl	800194a <HAL_PCD_EP_GetRxCount>
 8009216:	4603      	mov	r3, r0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3708      	adds	r7, #8
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	460b      	mov	r3, r1
 800922a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800922c:	78fb      	ldrb	r3, [r7, #3]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d002      	beq.n	8009238 <HAL_PCDEx_LPM_Callback+0x18>
 8009232:	2b01      	cmp	r3, #1
 8009234:	d013      	beq.n	800925e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009236:	e023      	b.n	8009280 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	7a5b      	ldrb	r3, [r3, #9]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d007      	beq.n	8009250 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009240:	f000 f83c 	bl	80092bc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009244:	4b10      	ldr	r3, [pc, #64]	@ (8009288 <HAL_PCDEx_LPM_Callback+0x68>)
 8009246:	691b      	ldr	r3, [r3, #16]
 8009248:	4a0f      	ldr	r2, [pc, #60]	@ (8009288 <HAL_PCDEx_LPM_Callback+0x68>)
 800924a:	f023 0306 	bic.w	r3, r3, #6
 800924e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009256:	4618      	mov	r0, r3
 8009258:	f7fe fcc0 	bl	8007bdc <USBD_LL_Resume>
    break;
 800925c:	e010      	b.n	8009280 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009264:	4618      	mov	r0, r3
 8009266:	f7fe fca3 	bl	8007bb0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	7a5b      	ldrb	r3, [r3, #9]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d005      	beq.n	800927e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009272:	4b05      	ldr	r3, [pc, #20]	@ (8009288 <HAL_PCDEx_LPM_Callback+0x68>)
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	4a04      	ldr	r2, [pc, #16]	@ (8009288 <HAL_PCDEx_LPM_Callback+0x68>)
 8009278:	f043 0306 	orr.w	r3, r3, #6
 800927c:	6113      	str	r3, [r2, #16]
    break;
 800927e:	bf00      	nop
}
 8009280:	bf00      	nop
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	e000ed00 	.word	0xe000ed00

0800928c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009294:	4b03      	ldr	r3, [pc, #12]	@ (80092a4 <USBD_static_malloc+0x18>)
}
 8009296:	4618      	mov	r0, r3
 8009298:	370c      	adds	r7, #12
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	20001a40 	.word	0x20001a40

080092a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]

}
 80092b0:	bf00      	nop
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80092c0:	f7f7 f8ca 	bl	8000458 <SystemClock_Config>
}
 80092c4:	bf00      	nop
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	4603      	mov	r3, r0
 80092d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092d2:	2300      	movs	r3, #0
 80092d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80092d6:	79fb      	ldrb	r3, [r7, #7]
 80092d8:	2b03      	cmp	r3, #3
 80092da:	d817      	bhi.n	800930c <USBD_Get_USB_Status+0x44>
 80092dc:	a201      	add	r2, pc, #4	@ (adr r2, 80092e4 <USBD_Get_USB_Status+0x1c>)
 80092de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e2:	bf00      	nop
 80092e4:	080092f5 	.word	0x080092f5
 80092e8:	080092fb 	.word	0x080092fb
 80092ec:	08009301 	.word	0x08009301
 80092f0:	08009307 	.word	0x08009307
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80092f4:	2300      	movs	r3, #0
 80092f6:	73fb      	strb	r3, [r7, #15]
    break;
 80092f8:	e00b      	b.n	8009312 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092fa:	2303      	movs	r3, #3
 80092fc:	73fb      	strb	r3, [r7, #15]
    break;
 80092fe:	e008      	b.n	8009312 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009300:	2301      	movs	r3, #1
 8009302:	73fb      	strb	r3, [r7, #15]
    break;
 8009304:	e005      	b.n	8009312 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009306:	2303      	movs	r3, #3
 8009308:	73fb      	strb	r3, [r7, #15]
    break;
 800930a:	e002      	b.n	8009312 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800930c:	2303      	movs	r3, #3
 800930e:	73fb      	strb	r3, [r7, #15]
    break;
 8009310:	bf00      	nop
  }
  return usb_status;
 8009312:	7bfb      	ldrb	r3, [r7, #15]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3714      	adds	r7, #20
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <memset>:
 8009320:	4402      	add	r2, r0
 8009322:	4603      	mov	r3, r0
 8009324:	4293      	cmp	r3, r2
 8009326:	d100      	bne.n	800932a <memset+0xa>
 8009328:	4770      	bx	lr
 800932a:	f803 1b01 	strb.w	r1, [r3], #1
 800932e:	e7f9      	b.n	8009324 <memset+0x4>

08009330 <__libc_init_array>:
 8009330:	b570      	push	{r4, r5, r6, lr}
 8009332:	4d0d      	ldr	r5, [pc, #52]	@ (8009368 <__libc_init_array+0x38>)
 8009334:	4c0d      	ldr	r4, [pc, #52]	@ (800936c <__libc_init_array+0x3c>)
 8009336:	1b64      	subs	r4, r4, r5
 8009338:	10a4      	asrs	r4, r4, #2
 800933a:	2600      	movs	r6, #0
 800933c:	42a6      	cmp	r6, r4
 800933e:	d109      	bne.n	8009354 <__libc_init_array+0x24>
 8009340:	4d0b      	ldr	r5, [pc, #44]	@ (8009370 <__libc_init_array+0x40>)
 8009342:	4c0c      	ldr	r4, [pc, #48]	@ (8009374 <__libc_init_array+0x44>)
 8009344:	f000 f818 	bl	8009378 <_init>
 8009348:	1b64      	subs	r4, r4, r5
 800934a:	10a4      	asrs	r4, r4, #2
 800934c:	2600      	movs	r6, #0
 800934e:	42a6      	cmp	r6, r4
 8009350:	d105      	bne.n	800935e <__libc_init_array+0x2e>
 8009352:	bd70      	pop	{r4, r5, r6, pc}
 8009354:	f855 3b04 	ldr.w	r3, [r5], #4
 8009358:	4798      	blx	r3
 800935a:	3601      	adds	r6, #1
 800935c:	e7ee      	b.n	800933c <__libc_init_array+0xc>
 800935e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009362:	4798      	blx	r3
 8009364:	3601      	adds	r6, #1
 8009366:	e7f2      	b.n	800934e <__libc_init_array+0x1e>
 8009368:	080093e8 	.word	0x080093e8
 800936c:	080093e8 	.word	0x080093e8
 8009370:	080093e8 	.word	0x080093e8
 8009374:	080093ec 	.word	0x080093ec

08009378 <_init>:
 8009378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800937a:	bf00      	nop
 800937c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800937e:	bc08      	pop	{r3}
 8009380:	469e      	mov	lr, r3
 8009382:	4770      	bx	lr

08009384 <_fini>:
 8009384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009386:	bf00      	nop
 8009388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800938a:	bc08      	pop	{r3}
 800938c:	469e      	mov	lr, r3
 800938e:	4770      	bx	lr
